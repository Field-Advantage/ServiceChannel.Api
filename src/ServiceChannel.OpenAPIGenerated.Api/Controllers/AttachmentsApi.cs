/*
 * ServiceChannel API - v.3
 *
 * The ServiceChannel API is a RESTful and stateless API. It accepts standard HTTP verbs and supports OAuth 2.0 for authorizing requests.      Our API returns common HTTP status codes as well as JSON encapsulated data.      See [API Overview](https://developer.servicechannel.com/basics/introduction/overview/) for the intro to ServiceChannel API.<br>      <h3>Authentication and Authorization</h3>You should have a ServiceChannel account, register your application, and obtain `access_token` to integrate with our API.      See [Authentication and Authorization](https://developer.servicechannel.com/basics/general/authentication/) for more information.      To use this API playground, click **Authorize** and sign in to ServiceChannel.<br>      <h3>Environment</h3> All calls in this API Reference point to the **SB2 environment**.      See [Environments](https://developer.servicechannel.com/basics/general/environments/) for more information.<br>      <h3>API Version</h3>The current stable version of the ServiceChannel API is `v3`. In the request URL, `v3` is a version prefix that should be present.      When you omit the version prefix, calls point to the minimum supported version of the API.      We recommend you to always specify the API version to avoid possible errors.
 *
 * The version of the OpenAPI document: 3
 * 
 * Generated by: https://openapi-generator.tech
 */

using System;
using System.Collections.Generic;
using System.ComponentModel.DataAnnotations;
using System.Threading;
using System.Threading.Tasks;
using Microsoft.AspNetCore.Authorization;
using Microsoft.AspNetCore.Mvc;
using Microsoft.AspNetCore.Http;
using ServiceChannel.OpenAPIGenerated.Api.Attributes;
using ServiceChannel.OpenAPIGenerated.Api.Models;

namespace ServiceChannel.OpenAPIGenerated.Api.Controllers
{ 
    /// <summary>
    /// 
    /// </summary>
    [ApiController]
    public abstract class AttachmentsApiController : ControllerBase
    { 
        /// <summary>
        /// Get Asset Attachments
        /// </summary>
        /// <param name="assetIds"></param>
        /// <response code="200">Request succeeded and the requested information is in the response.</response>
        /// <response code="400">Bad Request - the request could not be executed or was missing required parameters.              &lt;br/&gt;Error codes:              &lt;br/&gt; 503 - User info should not be null;              &lt;br/&gt;SubscriberId is null;</response>
        /// <response code="401">Unauthorized indicates that the requested resource requires authentication.              &lt;br/&gt;Error codes:              &lt;br/&gt; 504 - API call rejected by security permissions;</response>
        [HttpPost]
        [Route("/v3/assets/getattachmentsbyassetids")]
        [Consumes("application/json", "text/json", "application/xml", "text/xml", "application/x-www-form-urlencoded")]
        [ValidateModelState]
        [ProducesResponseType(statusCode: 200, type: typeof(Dictionary<string, List<SCServiceChannelServicesMessagingAssetsAssetAttachment>>))]
        [ProducesResponseType(statusCode: 400, type: typeof(SCServiceChannelServicesMessagingErrorResponse))]
        [ProducesResponseType(statusCode: 401, type: typeof(SCServiceChannelServicesMessagingErrorResponse))]
        public abstract Task<IActionResult> AssetsGetattachmentsbyassetids([FromBody]List<int> assetIds);

        /// <summary>
        /// Get Asset Attachments
        /// </summary>
        /// <param name="assetAttachmentsRequest"></param>
        /// <response code="200">Request succeeded and the requested information is in the response.</response>
        /// <response code="400">Bad Request - the request could not be executed or was missing required parameters.              &lt;br/&gt;Error codes:              &lt;br/&gt; 503 - User info should not be null;              &lt;br/&gt;SubscriberId is null;</response>
        /// <response code="401">Unauthorized indicates that the requested resource requires authentication.              &lt;br/&gt;Error codes:              &lt;br/&gt; 504 - API call rejected by security permissions;</response>
        [HttpPost]
        [Route("/v3/assets/getattachmentsbyassetids_v1")]
        [Consumes("application/json", "text/json", "application/xml", "text/xml", "application/x-www-form-urlencoded")]
        [ValidateModelState]
        [ProducesResponseType(statusCode: 200, type: typeof(Dictionary<string, List<SCServiceChannelServicesMessagingAssetsAssetAttachment>>))]
        [ProducesResponseType(statusCode: 400, type: typeof(SCServiceChannelServicesMessagingErrorResponse))]
        [ProducesResponseType(statusCode: 401, type: typeof(SCServiceChannelServicesMessagingErrorResponse))]
        public abstract Task<IActionResult> AssetsGetattachmentsbyassetidsV1([FromBody]SCServiceChannelServicesWebApiModelsAssetAttachmentsRequest assetAttachmentsRequest);

        /// <summary>
        /// Update asset attachment by id
        /// </summary>
        /// <param name="attachmentId">Attachment identifier</param>
        /// <param name="fileName">New file name</param>
        /// <param name="description">New file description(comment)</param>
        /// <response code="200">Request succeeded and the requested information is in the response.</response>
        /// <response code="400">Bad Request - the request could not be understood or was missing required parameters.              &lt;br/&gt;Error codes:              &lt;br/&gt; 503 - FileName or Description is required;</response>
        /// <response code="401">Unauthorized indicates that the requested resource requires authentication.              &lt;br/&gt;Error codes:              &lt;br/&gt; 504 - API call rejected by security permissions;</response>
        [HttpPut]
        [Route("/v3/assets/updateAssetAttachment")]
        [ValidateModelState]
        [ProducesResponseType(statusCode: 200, type: typeof(Object))]
        [ProducesResponseType(statusCode: 400, type: typeof(SCServiceChannelServicesMessagingErrorResponse))]
        [ProducesResponseType(statusCode: 401, type: typeof(SCServiceChannelServicesMessagingErrorResponse))]
        public abstract Task<IActionResult> AssetsUpdateAssetAttachmentattachmentIdattachmentIdfileNamefileNamedescriptiondescription([FromQuery (Name = "attachmentId")][Required()]int attachmentId, [FromQuery (Name = "fileName")]string? fileName, [FromQuery (Name = "description")]string? description);

        /// <summary>
        /// Delete Asset Attachment
        /// </summary>
        /// <param name="assetAttachmentId"></param>
        /// <response code="200">Request succeeded and the requested information is in the response.</response>
        /// <response code="400">Bad Request - the request could not be executed or was missing required parameters.              &lt;br/&gt;Error codes:              &lt;br/&gt; 503 - User info should not be null;              &lt;br/&gt;SubscriberId is null;</response>
        /// <response code="401">Unauthorized indicates that the requested resource requires authentication.              &lt;br/&gt;Error codes:              &lt;br/&gt; 504 - API call rejected by security permissions;</response>
        [HttpPost]
        [Route("/v3/assets/{assetAttachmentId}/deleteAttachment")]
        [ValidateModelState]
        [ProducesResponseType(statusCode: 200, type: typeof(Object))]
        [ProducesResponseType(statusCode: 400, type: typeof(SCServiceChannelServicesMessagingErrorResponse))]
        [ProducesResponseType(statusCode: 401, type: typeof(SCServiceChannelServicesMessagingErrorResponse))]
        public abstract Task<IActionResult> AssetsassetAttachmentIdDeleteAttachment([FromRoute (Name = "assetAttachmentId")][Required]int assetAttachmentId);

        /// <summary>
        /// Add Attachments to Asset
        /// </summary>
        /// <param name="assetId"></param>
        /// <param name="file">File to attach to workorder</param>
        /// <param name="isDefault"></param>
        /// <param name="addAttachmentsRequest">Required Descriptor for file(s)</param>
        /// <response code="200">Created indicates that the request resulted in a new resource created before the response was sent.</response>
        /// <response code="400">Bad Request - the request could not be executed or was missing required parameters.              &lt;br/&gt;Error codes:              &lt;br/&gt; 502 - Asset Not found;              &lt; br/&gt; 503 - Bad Request;</response>
        /// <response code="401">Indicates that the requested resource requires authentication.              &lt;br/&gt;Error codes:              &lt;br/&gt; 504 - API call rejected by security permissions;</response>
        /// <response code="500">Indicates that a generic error has occurred on the server.</response>
        [HttpPost]
        [Route("/v3/assets/{assetId}/attachments")]
        [Consumes("multipart/form-data")]
        [ValidateModelState]
        [ProducesResponseType(statusCode: 200, type: typeof(List<SCServiceChannelServicesMessagingAssetsAddAssetAttachmentResponse>))]
        [ProducesResponseType(statusCode: 400, type: typeof(SCServiceChannelServicesMessagingErrorResponse))]
        [ProducesResponseType(statusCode: 401, type: typeof(SCServiceChannelServicesMessagingErrorResponse))]
        [ProducesResponseType(statusCode: 500, type: typeof(SCServiceChannelServicesMessagingErrorResponse))]
        public abstract Task<IActionResult> AssetsassetIdAttachmentsisDefaultisDefault([FromRoute (Name = "assetId")][Required]int assetId, [Required()]IFormFile file, [FromQuery (Name = "isDefault")]bool? isDefault, [FromForm (Name = "AddAttachmentsRequest")]Object? addAttachmentsRequest);

        /// <summary>
        /// Get Asset Attachments
        /// </summary>
        /// <param name="assetId">Asset Identifier</param>
        /// <param name="providerId">The provider identifier. Required for sub-contractor request. [Required Special permissions]</param>
        /// <response code="200">Request succeeded and the requested information is in the response.</response>
        /// <response code="400">Bad Request - the request could not be executed or was missing required parameters.              &lt;br/&gt;Error codes:              &lt;br/&gt; 503 - User info should not be null;              &lt;br/&gt;SubscriberId is null;</response>
        /// <response code="401">Unauthorized indicates that the requested resource requires authentication.              &lt;br/&gt;Error codes:              &lt;br/&gt; 504 - API call rejected by security permissions;</response>
        [HttpGet]
        [Route("/v3/assets/{assetId}/attachments")]
        [ValidateModelState]
        [ProducesResponseType(statusCode: 200, type: typeof(List<SCServiceChannelServicesMessagingAssetsAssetAttachment>))]
        [ProducesResponseType(statusCode: 400, type: typeof(SCServiceChannelServicesMessagingErrorResponse))]
        [ProducesResponseType(statusCode: 401, type: typeof(SCServiceChannelServicesMessagingErrorResponse))]
        public abstract Task<IActionResult> AssetsassetIdAttachmentsproviderIdproviderId([FromRoute (Name = "assetId")][Required]int assetId, [FromQuery (Name = "providerId")]int? providerId);

        /// <summary>
        /// Retrieve Attachment Thumbnail
        /// </summary>
        /// <remarks>Retrieve Attachment Thumbnail</remarks>
        /// <param name="imageFormat"></param>
        /// <param name="mode"></param>
        /// <param name="height"></param>
        /// <param name="width"></param>
        /// <param name="attachmentId">Attachment Identifier</param>
        /// <param name="proposalId">Proposal Identifier</param>
        /// <param name="expand">Expand a navigation property.</param>
        /// <param name="select">Select a set of properties to return.</param>
        /// <param name="filter">Filter a collection of resources addressed by a request URL.</param>
        /// <param name="orderby">Order resources by the specified property in the response.</param>
        /// <param name="top">Return the specified number of items in the response.</param>
        /// <param name="skip">Skip the specified number of items in the response.</param>
        /// <param name="count">Include the count of the matching resources in the response.</param>
        /// <response code="200">Indicates that the request succeeded and that the requested information is in the response.</response>
        [HttpGet]
        [Route("/v3/odata/proposals({proposalId})/attachments({attachmentId})/Service.GetThumbnail(width={width},height={height},mode={mode},imageFormat={imageFormat})")]
        [ValidateModelState]
        [ProducesResponseType(statusCode: 200, type: typeof(SCSystemNetHttpByteArrayContent))]
        public abstract Task<IActionResult> GetProposalAttachmentThumbnail([FromRoute (Name = "imageFormat")][Required]string imageFormat, [FromRoute (Name = "mode")][Required]string mode, [FromRoute (Name = "height")][Required]int height, [FromRoute (Name = "width")][Required]int width, [FromRoute (Name = "attachmentId")][Required]int attachmentId, [FromRoute (Name = "proposalId")][Required]int proposalId, [FromQuery (Name = "$expand")]string? expand, [FromQuery (Name = "$select")]string? select, [FromQuery (Name = "$filter")]string? filter, [FromQuery (Name = "$orderby")]string? orderby, [FromQuery (Name = "$top")]int? top, [FromQuery (Name = "$skip")]int? skip, [FromQuery (Name = "$count")]bool? count);

        /// <summary>
        /// Retrieve Proposal Attachments
        /// </summary>
        /// <remarks>Retrieve Proposal Attachments</remarks>
        /// <param name="proposalId">Proposal Identifier</param>
        /// <param name="expand">Expand a navigation property.</param>
        /// <param name="select">Select a set of properties to return.</param>
        /// <param name="filter">Filter a collection of resources addressed by a request URL.</param>
        /// <param name="orderby">Order resources by the specified property in the response.</param>
        /// <param name="top">Return the specified number of items in the response.</param>
        /// <param name="skip">Skip the specified number of items in the response.</param>
        /// <param name="count">Include the count of the matching resources in the response.</param>
        /// <response code="200">Indicates that the request succeeded and that the requested information is in the response.</response>
        [HttpGet]
        [Route("/v3/odata/proposals({proposalId})/attachments")]
        [ValidateModelState]
        [ProducesResponseType(statusCode: 200, type: typeof(List<SCServiceChannelServicesMessagingAttachmentsAttachment>))]
        public abstract Task<IActionResult> GetProposalAttachments([FromRoute (Name = "proposalId")][Required]int proposalId, [FromQuery (Name = "$expand")]string? expand, [FromQuery (Name = "$select")]string? select, [FromQuery (Name = "$filter")]string? filter, [FromQuery (Name = "$orderby")]string? orderby, [FromQuery (Name = "$top")]int? top, [FromQuery (Name = "$skip")]int? skip, [FromQuery (Name = "$count")]bool? count);

        /// <summary>
        /// Retrieve Rfp Attachments
        /// </summary>
        /// <remarks>Retrieve Rfp Attachments</remarks>
        /// <param name="rfpId">Rfp Identifier</param>
        /// <param name="expand">Expand a navigation property.</param>
        /// <param name="select">Select a set of properties to return.</param>
        /// <param name="filter">Filter a collection of resources addressed by a request URL.</param>
        /// <param name="orderby">Order resources by the specified property in the response.</param>
        /// <param name="top">Return the specified number of items in the response.</param>
        /// <param name="skip">Skip the specified number of items in the response.</param>
        /// <param name="count">Include the count of the matching resources in the response.</param>
        /// <response code="200">Indicates that the request succeeded and that the requested information is in the response.</response>
        [HttpGet]
        [Route("/v3/odata/rfps({rfpId})/attachments")]
        [ValidateModelState]
        [ProducesResponseType(statusCode: 200, type: typeof(List<SCServiceChannelServicesMessagingAttachmentsAttachment>))]
        public abstract Task<IActionResult> GetRFPAttachments([FromRoute (Name = "rfpId")][Required]int rfpId, [FromQuery (Name = "$expand")]string? expand, [FromQuery (Name = "$select")]string? select, [FromQuery (Name = "$filter")]string? filter, [FromQuery (Name = "$orderby")]string? orderby, [FromQuery (Name = "$top")]int? top, [FromQuery (Name = "$skip")]int? skip, [FromQuery (Name = "$count")]bool? count);

        /// <summary>
        /// Retrieve Workorders Attachments
        /// </summary>
        /// <remarks>Retrieve Workorders Attachments</remarks>
        /// <param name="workorderId">Workorder Identifier</param>
        /// <param name="expand">Expand a navigation property.</param>
        /// <param name="select">Select a set of properties to return.</param>
        /// <param name="filter">Filter a collection of resources addressed by a request URL.</param>
        /// <param name="orderby">Order resources by the specified property in the response.</param>
        /// <param name="top">Return the specified number of items in the response.</param>
        /// <param name="skip">Skip the specified number of items in the response.</param>
        /// <param name="count">Include the count of the matching resources in the response.</param>
        /// <response code="200">Indicates that the request succeeded and that the requested information is in the response.</response>
        [HttpGet]
        [Route("/v3/odata/workorders({workorderId})/attachments")]
        [ValidateModelState]
        [ProducesResponseType(statusCode: 200, type: typeof(List<SCServiceChannelServicesMessagingAttachmentsAttachment>))]
        public abstract Task<IActionResult> GetWorkOrderAttachments([FromRoute (Name = "workorderId")][Required]int workorderId, [FromQuery (Name = "$expand")]string? expand, [FromQuery (Name = "$select")]string? select, [FromQuery (Name = "$filter")]string? filter, [FromQuery (Name = "$orderby")]string? orderby, [FromQuery (Name = "$top")]int? top, [FromQuery (Name = "$skip")]int? skip, [FromQuery (Name = "$count")]bool? count);

        /// <summary>
        /// Retrieve Workorder Note Attachments
        /// </summary>
        /// <remarks>Retrieve Workorder Note Attachments</remarks>
        /// <param name="noteId">Note Identifier</param>
        /// <param name="workorderId">Workorder Identifier</param>
        /// <param name="expand">Expand a navigation property.</param>
        /// <param name="select">Select a set of properties to return.</param>
        /// <param name="filter">Filter a collection of resources addressed by a request URL.</param>
        /// <param name="orderby">Order resources by the specified property in the response.</param>
        /// <param name="top">Return the specified number of items in the response.</param>
        /// <param name="skip">Skip the specified number of items in the response.</param>
        /// <param name="count">Include the count of the matching resources in the response.</param>
        /// <response code="200">Indicates that the request succeeded and that the requested information is in the response.</response>
        [HttpGet]
        [Route("/v3/odata/workorders({workorderId})/notes({noteId})/attachments")]
        [ValidateModelState]
        [ProducesResponseType(statusCode: 200, type: typeof(List<SCServiceChannelServicesMessagingAttachmentsAttachment>))]
        public abstract Task<IActionResult> GetWorkOrderNotesAttachments([FromRoute (Name = "noteId")][Required]int noteId, [FromRoute (Name = "workorderId")][Required]int workorderId, [FromQuery (Name = "$expand")]string? expand, [FromQuery (Name = "$select")]string? select, [FromQuery (Name = "$filter")]string? filter, [FromQuery (Name = "$orderby")]string? orderby, [FromQuery (Name = "$top")]int? top, [FromQuery (Name = "$skip")]int? skip, [FromQuery (Name = "$count")]bool? count);

        /// <summary>
        /// Retrieve Attachment Thumbnail
        /// </summary>
        /// <remarks>Retrieve Attachment Thumbnail</remarks>
        /// <param name="imageFormat"></param>
        /// <param name="mode"></param>
        /// <param name="height"></param>
        /// <param name="width"></param>
        /// <param name="attachmentId">Attachment Identifier</param>
        /// <param name="workorderId">Workorder Identifier</param>
        /// <param name="expand">Expand a navigation property.</param>
        /// <param name="select">Select a set of properties to return.</param>
        /// <param name="filter">Filter a collection of resources addressed by a request URL.</param>
        /// <param name="orderby">Order resources by the specified property in the response.</param>
        /// <param name="top">Return the specified number of items in the response.</param>
        /// <param name="skip">Skip the specified number of items in the response.</param>
        /// <param name="count">Include the count of the matching resources in the response.</param>
        /// <response code="200">Indicates that the request succeeded and that the requested information is in the response.</response>
        [HttpGet]
        [Route("/v3/odata/workorders({workorderId})/attachments({attachmentId})/Service.GetThumbnail(width={width},height={height},mode={mode},imageFormat={imageFormat})")]
        [ValidateModelState]
        [ProducesResponseType(statusCode: 200, type: typeof(SCSystemNetHttpByteArrayContent))]
        public abstract Task<IActionResult> GetWorkorderAttachmentThumbnail([FromRoute (Name = "imageFormat")][Required]string imageFormat, [FromRoute (Name = "mode")][Required]string mode, [FromRoute (Name = "height")][Required]int height, [FromRoute (Name = "width")][Required]int width, [FromRoute (Name = "attachmentId")][Required]int attachmentId, [FromRoute (Name = "workorderId")][Required]int workorderId, [FromQuery (Name = "$expand")]string? expand, [FromQuery (Name = "$select")]string? select, [FromQuery (Name = "$filter")]string? filter, [FromQuery (Name = "$orderby")]string? orderby, [FromQuery (Name = "$top")]int? top, [FromQuery (Name = "$skip")]int? skip, [FromQuery (Name = "$count")]bool? count);

        /// <summary>
        /// Add attchment to RFP
        /// </summary>
        /// <remarks>&lt;para&gt;Adds attchment to RFP. Returns RFP attachment Id for successful request.&lt;/para&gt;</remarks>
        /// <param name="id">Rfp ID to perform action with.</param>
        /// <param name="file">File to attach to RFP</param>
        /// <response code="201">Created indicates that the request resulted in a new resource created before the response was sent.</response>
        /// <response code="400">Bad Request - the request could not be understood or was missing required parameters.              &lt;br/&gt;Error codes:              &lt;br/&gt; 501 - Failed to upload attachment;              &lt;br/&gt; 502 - Data not found. Returned if target Rfp is not found;              &lt;br/&gt; 503 - Request data is empty;              &lt;br/&gt;Invalid Attachment Request;              &lt;br/&gt;User info should not be null;              &lt;br/&gt;SubscriberId is null;              &lt;br/&gt;Cannot accept file(s) of this type;              &lt;br/&gt;The file that you&#39;re trying to attach has name that exceed the maximum allowable name length;              &lt;br/&gt;The file that you&#39;re trying to attach has length that exceed the maximum allowable length;              &lt;br/&gt;Empty Location or Store ID;              &lt;br/&gt;Empty Provider ID;              &lt;br/&gt;Provider is not valid;</response>
        /// <response code="401">Indicates that the requested resource requires authentication.              &lt;br/&gt;Error codes:              &lt;br/&gt; 504 - API call rejected by security permissions;</response>
        /// <response code="500">Indicates that a generic error has occurred on the server.</response>
        [HttpPost]
        [Route("/v3/rfps/{id}/attachments")]
        [Consumes("multipart/form-data")]
        [ValidateModelState]
        [ProducesResponseType(statusCode: 400, type: typeof(SCServiceChannelServicesMessagingErrorResponse))]
        [ProducesResponseType(statusCode: 401, type: typeof(SCServiceChannelServicesMessagingErrorResponse))]
        [ProducesResponseType(statusCode: 500, type: typeof(SCServiceChannelServicesMessagingErrorResponse))]
        public abstract Task<IActionResult> RfpsidAttachments([FromRoute (Name = "id")][Required]int id, [Required()]IFormFile file);

        /// <summary>
        /// Returns list of attachment ids and urls.
        /// </summary>
        /// <param name="commentId">Numeric Id of the Comment which Attachment belongs to.</param>
        /// <response code="200">Request succeeded and the requested information is in the response.</response>
        /// <response code="400">Bad Request - the request could not be executed or was missing required parameters.              &lt;br/&gt;Error codes:              &lt;br/&gt; 503 - validation fails;</response>
        /// <response code="401">Unauthorized indicates that the requested resource requires authentication.              &lt;br/&gt;Error codes:              &lt;br/&gt; 504 - API call rejected by security permissions;</response>
        /// <response code="404">The requested resource does not exist on the server.              &lt;br/&gt;Error codes:              502 — Data not found</response>
        [HttpGet]
        [Route("/v3/siteaudit/comments/{commentId}/attachments")]
        [ValidateModelState]
        [ProducesResponseType(statusCode: 200, type: typeof(List<SCServiceChannelApiModelSiteAuditAttachmentInComment>))]
        [ProducesResponseType(statusCode: 400, type: typeof(SCServiceChannelServicesMessagingErrorResponse))]
        [ProducesResponseType(statusCode: 401, type: typeof(SCServiceChannelServicesMessagingErrorResponse))]
        public abstract Task<IActionResult> SiteauditCommentscommentIdAttachments([FromRoute (Name = "commentId")][Required]int commentId);

        /// <summary>
        /// Add attchment to Comment
        /// </summary>
        /// <remarks>Adds attchment to Comment. If Comment is not created yet specify {commentId} &#x3D; -1.</remarks>
        /// <param name="commentId">Numeric Id of the Comment to perform action with.</param>
        /// <param name="file">File to attach to Comment</param>
        /// <response code="201">Created indicates that the request resulted in a new resource created before the response was sent.</response>
        /// <response code="400">Bad Request - the request could not be understood or was missing required parameters.              &lt;br/&gt;Error codes:              &lt;br/&gt; 501 - Failed to upload attachment;              &lt;br/&gt; 502 - Data not found. Returned if target Comment is not found;              &lt;br/&gt; 503 - Request data is empty;</response>
        /// <response code="401">Indicates that the requested resource requires authentication.              &lt;br/&gt;Error codes:              &lt;br/&gt; 504 - API call rejected by security permissions;</response>
        /// <response code="500">Indicates that a generic error has occurred on the server.</response>
        [HttpPost]
        [Route("/v3/siteaudit/comments/{commentId}/attachments")]
        [Consumes("multipart/form-data")]
        [ValidateModelState]
        [ProducesResponseType(statusCode: 400, type: typeof(SCServiceChannelServicesMessagingErrorResponse))]
        [ProducesResponseType(statusCode: 401, type: typeof(SCServiceChannelServicesMessagingErrorResponse))]
        [ProducesResponseType(statusCode: 500, type: typeof(SCServiceChannelServicesMessagingErrorResponse))]
        public abstract Task<IActionResult> SiteauditCommentscommentIdAttachments_0([FromRoute (Name = "commentId")][Required]int commentId, [Required()]IFormFile file);

        /// <summary>
        /// Retrieve original attchment from Comment
        /// </summary>
        /// <param name="commentId">Numeric Id of the Comment which Attachment belongs to.</param>
        /// <param name="attachmentId">Numeric Id of the Attachment to perform action with.</param>
        /// <response code="200">OK</response>
        [HttpGet]
        [Route("/v3/siteaudit/comments/{commentId}/attachments/{attachmentId}")]
        [ValidateModelState]
        [ProducesResponseType(statusCode: 200, type: typeof(Object))]
        public abstract Task<IActionResult> SiteauditCommentscommentIdAttachmentsattachmentId([FromRoute (Name = "commentId")][Required]int commentId, [FromRoute (Name = "attachmentId")][Required]int attachmentId);

        /// <summary>
        /// Retrieve resized attchment from Comment
        /// </summary>
        /// <param name="commentId">Numeric Id of the Comment which Attachment belongs to.</param>
        /// <param name="attachmentId">Numeric Id of the Attachment to perform action with.</param>
        /// <param name="width">Width of the output file.</param>
        /// <param name="height">Height of the output file.</param>
        /// <param name="mode">How to resolve aspect ratio differences between the requested size and the               original image&#39;s size: Max &#x3D; 1, Pad &#x3D; 2, Crop &#x3D; 3, Carve &#x3D; 4, Stretch &#x3D; 5.</param>
        /// <param name="imageFormat">The desired image format, like &#39;jpg&#39;, &#39;gif&#39;, or &#39;png&#39;. Do not specify               if you want to preserve the original format.</param>
        /// <response code="200">OK</response>
        [HttpGet]
        [Route("/v3/siteaudit/comments/{commentId}/attachments/{attachmentId}/thumbnail")]
        [ValidateModelState]
        [ProducesResponseType(statusCode: 200, type: typeof(Object))]
        public abstract Task<IActionResult> SiteauditCommentscommentIdAttachmentsattachmentIdThumbnailwidthwidthheightheightmodemodeimageFormatimageFormat([FromRoute (Name = "commentId")][Required]int commentId, [FromRoute (Name = "attachmentId")][Required]int attachmentId, [FromQuery (Name = "width")]int? width, [FromQuery (Name = "height")]int? height, [FromQuery (Name = "mode")]string? mode, [FromQuery (Name = "imageFormat")]string? imageFormat);

        /// <summary>
        /// 
        /// </summary>
        /// <param name="request"></param>
        /// <response code="201">Created indicates that the request resulted in a new resource created before the response was sent.</response>
        /// <response code="400">Bad Request - the request could not be understood or was missing required parameters.              &lt;br/&gt;Error codes:              &lt;br/&gt; 502 - Work Order not found;              &lt;br/&gt; 503 - Only for subscribers usage;                      &lt;br/&gt; 920 - Purchase number cannot be empty;              &lt;br/&gt; 946 - Work Order attachments size exceeded;              &lt;br/&gt; 9100 - There are multiple work orders with the same PO number;</response>
        /// <response code="401">Indicates that the requested resource requires authentication.              &lt;br/&gt;Error codes:              &lt;br/&gt; 504 - API call rejected by security permissions;</response>
        /// <response code="500">Indicates that a generic error has occurred on the server.</response>
        [HttpPost]
        [Route("/v3/workorders/attachmentAsBase64")]
        [Consumes("application/json", "text/json", "application/xml", "text/xml", "application/x-www-form-urlencoded")]
        [ValidateModelState]
        [ProducesResponseType(statusCode: 400, type: typeof(SCServiceChannelServicesMessagingErrorResponse))]
        [ProducesResponseType(statusCode: 401, type: typeof(SCServiceChannelServicesMessagingErrorResponse))]
        [ProducesResponseType(statusCode: 500, type: typeof(SCServiceChannelServicesMessagingErrorResponse))]
        public abstract Task<IActionResult> WorkordersAttachmentAsBase64([FromBody]SCServiceChannelServicesMessagingAttachmentsAddBase64AttachmentsRequest request);

        /// <summary>
        /// Add attachments to a work order by PO number
        /// </summary>
        /// <param name="poNumber">Purchase Order</param>
        /// <param name="actor">On whose behalf the attachment is adding</param>
        /// <param name="addAttachmentsRequest"></param>
        /// <param name="file">File to attach to the work order.</param>
        /// <response code="201">Created indicates that the request resulted in a new resource created before the response was sent.</response>
        /// <response code="400">Bad Request - the request could not be understood or was missing required parameters.              &lt;br/&gt;Error codes:              &lt;br/&gt; 502 - Work Order not found;              &lt;br/&gt; 503 - Only for subscribers usage;                      &lt;br/&gt; 920 - Purchase number cannot be empty;              &lt;br/&gt; 9100 - There are multiple work orders with the same PO number;</response>
        /// <response code="401">Indicates that the requested resource requires authentication.              &lt;br/&gt;Error codes:              &lt;br/&gt; 504 - API call rejected by security permissions;</response>
        /// <response code="500">Indicates that a generic error has occurred on the server.</response>
        [HttpPost]
        [Route("/v3/workorders/{poNumber}/attachmentsByPoNumber")]
        [Consumes("multipart/form-data")]
        [ValidateModelState]
        [ProducesResponseType(statusCode: 400, type: typeof(SCServiceChannelServicesMessagingErrorResponse))]
        [ProducesResponseType(statusCode: 401, type: typeof(SCServiceChannelServicesMessagingErrorResponse))]
        [ProducesResponseType(statusCode: 500, type: typeof(SCServiceChannelServicesMessagingErrorResponse))]
        public abstract Task<IActionResult> WorkorderspoNumberAttachmentsByPoNumberactoractor([FromRoute (Name = "poNumber")][Required]string poNumber, [FromQuery (Name = "actor")]string? actor, [FromForm (Name = "AddAttachmentsRequest")]Object? addAttachmentsRequest, IFormFile file);

        /// <summary>
        /// Add attachments to a work order
        /// </summary>
        /// <remarks>Adds attachments to the specified work order.</remarks>
        /// <param name="workorderId">Numeric ID of the work order to add attachments to.</param>
        /// <param name="actor"></param>
        /// <param name="addAttachmentsRequest"></param>
        /// <param name="file">File to attach to the work order.</param>
        /// <response code="201">Created indicates that the request resulted in a new resource created before the response was sent.</response>
        /// <response code="400">Bad Request - the request could not be understood or was missing required parameters.              &lt;br/&gt;Error codes:              &lt;br/&gt; 502 - Work Order not found;</response>
        /// <response code="401">Indicates that the requested resource requires authentication.              &lt;br/&gt;Error codes:              &lt;br/&gt; 504 - API call rejected by security permissions;</response>
        /// <response code="500">Indicates that a generic error has occurred on the server.</response>
        [HttpPost]
        [Route("/v3/workorders/{workorderId}/attachments")]
        [Consumes("multipart/form-data")]
        [ValidateModelState]
        [ProducesResponseType(statusCode: 400, type: typeof(SCServiceChannelServicesMessagingErrorResponse))]
        [ProducesResponseType(statusCode: 401, type: typeof(SCServiceChannelServicesMessagingErrorResponse))]
        [ProducesResponseType(statusCode: 500, type: typeof(SCServiceChannelServicesMessagingErrorResponse))]
        public abstract Task<IActionResult> WorkordersworkorderIdAttachmentsactoractor([FromRoute (Name = "workorderId")][Required]int workorderId, [FromQuery (Name = "actor")]string? actor, [FromForm (Name = "AddAttachmentsRequest")]Object? addAttachmentsRequest, IFormFile file);

        /// <summary>
        /// 
        /// </summary>
        /// <param name="workorderId"></param>
        /// <param name="attachmentId"></param>
        /// <param name="width"></param>
        /// <param name="height"></param>
        /// <param name="mode"></param>
        /// <param name="imageFormat"></param>
        /// <response code="200">OK</response>
        [HttpGet]
        [Route("/v3/workorders/{workorderId}/attachments/{attachmentId}/thumbnail")]
        [ValidateModelState]
        [ProducesResponseType(statusCode: 200, type: typeof(Object))]
        public abstract Task<IActionResult> WorkordersworkorderIdAttachmentsattachmentIdThumbnailwidthwidthheightheightmodemodeimageFormatimageFormat([FromRoute (Name = "workorderId")][Required]int workorderId, [FromRoute (Name = "attachmentId")][Required]int attachmentId, [FromQuery (Name = "width")]int? width, [FromQuery (Name = "height")]int? height, [FromQuery (Name = "mode")]string? mode, [FromQuery (Name = "imageFormat")]string? imageFormat);

        /// <summary>
        /// Add Attachments to Work Order Note
        /// </summary>
        /// <remarks>&lt;para&gt;Add Attachments to Work Order Note. Returns list of attachments Id for successful request.&lt;/para&gt;</remarks>
        /// <param name="workorderId">Numeric Id of the Work order to perform action with.</param>
        /// <param name="noteId">Numeric Id of the Note to perform action with.</param>
        /// <param name="file">File to attach to note</param>
        /// <param name="addAttachmentsRequest">Optional Descriptor for file(s)</param>
        /// <response code="201">Created indicates that the request resulted in a new resource created before the response was sent.</response>
        /// <response code="400">Bad Request - the request could not be understood or was missing required parameters.              &lt;br/&gt;Error codes:              &lt;br/&gt; 503 - Validation fails;              &lt;br/&gt; 917 - InvalidWoIdentifier;</response>
        /// <response code="401">Indicates that the requested resource requires authentication.              &lt;br/&gt;Error codes:              &lt;br/&gt; 504 - API call rejected by security permissions;</response>
        /// <response code="500">Indicates that a generic error has occurred on the server.</response>
        [HttpPost]
        [Route("/v3/workorders/{workorderId}/notes/{noteId}/attachments")]
        [Consumes("multipart/form-data")]
        [ValidateModelState]
        [ProducesResponseType(statusCode: 400, type: typeof(SCServiceChannelServicesMessagingErrorResponse))]
        [ProducesResponseType(statusCode: 401, type: typeof(SCServiceChannelServicesMessagingErrorResponse))]
        [ProducesResponseType(statusCode: 500, type: typeof(SCServiceChannelServicesMessagingErrorResponse))]
        public abstract Task<IActionResult> WorkordersworkorderIdNotesnoteIdAttachments([FromRoute (Name = "workorderId")][Required]int workorderId, [FromRoute (Name = "noteId")][Required]int noteId, [Required()]IFormFile file, [FromForm (Name = "AddAttachmentsRequest")]Object? addAttachmentsRequest);

        /// <summary>
        /// Get WorkRequest Note Attachments
        /// </summary>
        /// <remarks>*In limited availability phase.*</remarks>
        /// <param name="workRequestId">WorkRequest Identifier</param>
        /// <param name="noteId">Note Identifier</param>
        /// <response code="200">Indicates that the request succeeded and that the requested information is in the response.</response>
        /// <response code="401">Unauthorized indicates that the requested resource requires authentication.              &lt;br/&gt;Error codes:              &lt;br/&gt; 504 - API call rejected by security permissions;</response>
        [HttpGet]
        [Route("/v3/workrequest({workRequestId})/notes({noteId})/attachments")]
        [ValidateModelState]
        [ProducesResponseType(statusCode: 200, type: typeof(List<SCServiceChannelServicesMessagingAttachmentsAttachment>))]
        [ProducesResponseType(statusCode: 401, type: typeof(SCServiceChannelServicesMessagingErrorResponse))]
        public abstract Task<IActionResult> WorkrequestWorkRequestIdNotesNoteIdAttachments([FromRoute (Name = "workRequestId")][Required]int workRequestId, [FromRoute (Name = "noteId")][Required]int noteId);

        /// <summary>
        /// Get WorkRequest Attachments
        /// </summary>
        /// <remarks>*In limited availability phase.*</remarks>
        /// <param name="workRequestId">WorkRequest Identifier</param>
        /// <response code="200">Request succeeded and the requested information is in the response.</response>
        /// <response code="401">Unauthorized indicates that the requested resource requires authentication.              &lt;br/&gt;Error codes:              &lt;br/&gt; 504 - API call rejected by security permissions;</response>
        [HttpGet]
        [Route("/v3/workrequest/{workRequestId}/attachments")]
        [ValidateModelState]
        [ProducesResponseType(statusCode: 200, type: typeof(List<SCServiceChannelServicesMessagingAttachmentsAttachment>))]
        [ProducesResponseType(statusCode: 401, type: typeof(SCServiceChannelServicesMessagingErrorResponse))]
        public abstract Task<IActionResult> WorkrequestworkRequestIdAttachments([FromRoute (Name = "workRequestId")][Required]int workRequestId);

        /// <summary>
        /// Add attachments to a WorkRequest
        /// </summary>
        /// <remarks>*In limited availability phase.*              &lt;br /&gt;Adds attachments to the specified WorkRequest.</remarks>
        /// <param name="workRequestId">Numeric ID of the WorkRequest to add attachments to.</param>
        /// <param name="file">File to attach to the work request.</param>
        /// <param name="actor">Name of the person on whose behalf you are performing the action</param>
        /// <param name="addAttachmentsRequest"></param>
        /// <response code="201">Created indicates that the request resulted in a new resource created before the response was sent.</response>
        /// <response code="400">Bad Request - the request could not be understood or was missing required parameters.              &lt;br/&gt;Error codes:              &lt;br/&gt; 502 - Work Request not found;</response>
        /// <response code="401">Indicates that the requested resource requires authentication.              &lt;br/&gt;Error codes:              &lt;br/&gt; 504 - API call rejected by security permissions;</response>
        /// <response code="500">Indicates that a generic error has occurred on the server.</response>
        [HttpPost]
        [Route("/v3/workrequest/{workRequestId}/attachments")]
        [Consumes("multipart/form-data")]
        [ValidateModelState]
        [ProducesResponseType(statusCode: 400, type: typeof(SCServiceChannelServicesMessagingErrorResponse))]
        [ProducesResponseType(statusCode: 401, type: typeof(SCServiceChannelServicesMessagingErrorResponse))]
        [ProducesResponseType(statusCode: 500, type: typeof(SCServiceChannelServicesMessagingErrorResponse))]
        public abstract Task<IActionResult> WorkrequestworkRequestIdAttachmentsactoractor([FromRoute (Name = "workRequestId")][Required]int workRequestId, [Required()]IFormFile file, [FromQuery (Name = "actor")]string? actor, [FromForm (Name = "AddAttachmentsRequest")]Object? addAttachmentsRequest);

        /// <summary>
        /// Add Attachments to Work Request Note
        /// </summary>
        /// <remarks>*In limited availability phase.*              &lt;br /&gt;Add Attachments to Work Request Note. Returns list of attachments Id for successful request.</remarks>
        /// <param name="workRequestId">Numeric Id of the Work Request to perform action with.</param>
        /// <param name="noteId">Numeric Id of the Note to perform action with.</param>
        /// <param name="file">File to attach to note</param>
        /// <param name="addAttachmentsRequest">Optional Descriptor for file(s)</param>
        /// <response code="201">Created indicates that the request resulted in a new resource created before the response was sent.</response>
        /// <response code="400">Bad Request - the request could not be understood or was missing required parameters.              &lt;br/&gt;Error codes:              &lt;br/&gt; 503 - Validation fails;              &lt;br/&gt; 8020 - InvalidWorkRequestIdentifier;</response>
        /// <response code="401">Indicates that the requested resource requires authentication.              &lt;br/&gt;Error codes:              &lt;br/&gt; 504 - API call rejected by security permissions;</response>
        /// <response code="500">Indicates that a generic error has occurred on the server.</response>
        [HttpPost]
        [Route("/v3/workrequest/{workRequestId}/notes/{noteId}/attachments")]
        [Consumes("multipart/form-data")]
        [ValidateModelState]
        [ProducesResponseType(statusCode: 400, type: typeof(SCServiceChannelServicesMessagingErrorResponse))]
        [ProducesResponseType(statusCode: 401, type: typeof(SCServiceChannelServicesMessagingErrorResponse))]
        [ProducesResponseType(statusCode: 500, type: typeof(SCServiceChannelServicesMessagingErrorResponse))]
        public abstract Task<IActionResult> WorkrequestworkRequestIdNotesnoteIdAttachments([FromRoute (Name = "workRequestId")][Required]int workRequestId, [FromRoute (Name = "noteId")][Required]int noteId, [Required()]IFormFile file, [FromForm (Name = "AddAttachmentsRequest")]Object? addAttachmentsRequest);
    }
}
