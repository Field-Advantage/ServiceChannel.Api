/*
 * ServiceChannel API - v.3
 *
 * The ServiceChannel API is a RESTful and stateless API. It accepts standard HTTP verbs and supports OAuth 2.0 for authorizing requests.      Our API returns common HTTP status codes as well as JSON encapsulated data.      See [API Overview](https://developer.servicechannel.com/basics/introduction/overview/) for the intro to ServiceChannel API.<br>      <h3>Authentication and Authorization</h3>You should have a ServiceChannel account, register your application, and obtain `access_token` to integrate with our API.      See [Authentication and Authorization](https://developer.servicechannel.com/basics/general/authentication/) for more information.      To use this API playground, click **Authorize** and sign in to ServiceChannel.<br>      <h3>Environment</h3> All calls in this API Reference point to the **SB2 environment**.      See [Environments](https://developer.servicechannel.com/basics/general/environments/) for more information.<br>      <h3>API Version</h3>The current stable version of the ServiceChannel API is `v3`. In the request URL, `v3` is a version prefix that should be present.      When you omit the version prefix, calls point to the minimum supported version of the API.      We recommend you to always specify the API version to avoid possible errors.
 *
 * The version of the OpenAPI document: 3
 * 
 * Generated by: https://openapi-generator.tech
 */

using System;
using System.Collections.Generic;
using System.ComponentModel.DataAnnotations;
using System.Threading;
using System.Threading.Tasks;
using Microsoft.AspNetCore.Authorization;
using Microsoft.AspNetCore.Mvc;
using Microsoft.AspNetCore.Http;
using ServiceChannel.OpenAPIGenerated.Api.Attributes;
using ServiceChannel.OpenAPIGenerated.Api.Models;

namespace ServiceChannel.OpenAPIGenerated.Api.Controllers
{ 
    /// <summary>
    /// 
    /// </summary>
    [ApiController]
    public abstract class SubscribersApiController : ControllerBase
    { 
        /// <summary>
        /// Create Subscriber
        /// </summary>
        /// <remarks>Returns success result</remarks>
        /// <param name="registerSubscriberRequest">Request for creation of new Subscriber</param>
        /// <response code="201">Indicates that the request succeeded and that a new Subscriber is created.</response>
        /// <response code="400">Bad Request - the request could not be understood or was missing required parameters.</response>
        /// <response code="401">Indicates that the requested resource requires authentication.&lt;br&gt;Error codes:&lt;br&gt; 504 - API call rejected by security permissions;</response>
        /// <response code="500">Indicates that an error has occured wile creation of a new Subscriber.</response>
        [HttpPost]
        [Route("/v3/subscribers")]
        [Consumes("application/json", "text/json", "application/xml", "text/xml", "application/x-www-form-urlencoded")]
        [ValidateModelState]
        [ProducesResponseType(statusCode: 400, type: typeof(SCServiceChannelServicesMessagingErrorResponse))]
        [ProducesResponseType(statusCode: 401, type: typeof(SCServiceChannelServicesMessagingErrorResponse))]
        public abstract Task<IActionResult> Subscribers([FromBody]SCServiceChannelServicesMessagingSubscribersRegisterSubscriberRequest registerSubscriberRequest);

        /// <summary>
        /// Returns list of subscriber(current or specified) dashboards
        /// </summary>
        /// <remarks>Available for subscriber users. Returns list of subscriber dashboards (current or specified subscriber if allowed)</remarks>
        /// <param name="subscriberId">Subscriber identifier</param>
        /// <response code="200">Indicates that the request succeeded and that the requested information is in the response.</response>
        /// <response code="400">Bad Request - the request could not be understood or was missing required parameters.</response>
        /// <response code="401">Indicates that the requested resource requires authentication.&lt;br&gt;Error codes:&lt;br&gt; 504 - API call rejected by security permissions;</response>
        /// <response code="403">Indicates that the requested resource not allowed for current user</response>
        [HttpGet]
        [Route("/v3/subscribers/current/dashboards")]
        [ValidateModelState]
        [ProducesResponseType(statusCode: 200, type: typeof(List<SCServiceChannelServicesMessagingSubscribersDashboardInfo>))]
        [ProducesResponseType(statusCode: 400, type: typeof(SCServiceChannelServicesMessagingErrorResponse))]
        [ProducesResponseType(statusCode: 401, type: typeof(SCServiceChannelServicesMessagingErrorResponse))]
        [ProducesResponseType(statusCode: 403, type: typeof(SCServiceChannelServicesMessagingErrorResponse))]
        public abstract Task<IActionResult> SubscribersCurrentDashboardssubscriberIdsubscriberId([FromQuery (Name = "subscriberId")]int? subscriberId);

        /// <summary>
        /// 
        /// </summary>
        /// <response code="200">OK</response>
        [HttpGet]
        [Route("/v3/subscribers/current/subsidiaries")]
        [ValidateModelState]
        [ProducesResponseType(statusCode: 200, type: typeof(Object))]
        public abstract Task<IActionResult> SubscribersCurrentSubsidiaries();

        /// <summary>
        /// Returns regional settings for subscribers
        /// </summary>
        /// <param name="request">list of subscriber</param>
        /// <response code="200">Indicates that the request succeeded and that the requested information is in the response.</response>
        /// <response code="400">Bad Request - the request could not be understood or was missing required parameters.</response>
        /// <response code="401">Indicates that the requested resource requires authentication.              &lt;br&gt;Error codes:              &lt;br&gt; 504 - API call rejected by security permissions;</response>
        /// <response code="500">Indicates that a generic error has occurred on the server.              &lt;br/&gt;Error codes:              &lt;br/&gt; 501 - Unhandled exception occurred</response>
        [HttpPost]
        [Route("/v3/subscribers/GetSubscribersRegionalSettings")]
        [Consumes("application/json", "text/json", "application/xml", "text/xml", "application/x-www-form-urlencoded")]
        [ValidateModelState]
        [ProducesResponseType(statusCode: 200, type: typeof(SCServiceChannelServicesMessagingSubscribersGetSubscribersRegionalSettingsResponse))]
        [ProducesResponseType(statusCode: 400, type: typeof(SCServiceChannelServicesMessagingErrorResponse))]
        [ProducesResponseType(statusCode: 401, type: typeof(SCServiceChannelServicesMessagingErrorResponse))]
        [ProducesResponseType(statusCode: 500, type: typeof(SCServiceChannelServicesMessagingErrorResponse))]
        public abstract Task<IActionResult> SubscribersGetSubscribersRegionalSettings([FromBody]SCServiceChannelServicesMessagingSubscribersGetSubscribersRegionalSettingsRequest request);

        /// <summary>
        /// Returns list of subscriber properties
        /// </summary>
        /// <param name="subscriberId">subscriber identifier</param>
        /// <response code="200">Indicates that the request succeeded and that the requested information is in the response.</response>
        /// <response code="400">Bad Request - the request could not be understood or was missing required parameters.</response>
        /// <response code="401">Indicates that the requested resource requires authentication.&lt;br&gt;Error codes:&lt;br&gt; 504 - API call rejected by security permissions;</response>
        [HttpGet]
        [Route("/v3/subscribers/rules")]
        [ValidateModelState]
        [ProducesResponseType(statusCode: 200, type: typeof(SCServiceChannelServicesMessagingSubscribersGetSubscriberPropertyResponse))]
        [ProducesResponseType(statusCode: 400, type: typeof(SCServiceChannelServicesMessagingErrorResponse))]
        [ProducesResponseType(statusCode: 401, type: typeof(SCServiceChannelServicesMessagingErrorResponse))]
        public abstract Task<IActionResult> SubscribersRulessubscriberIdsubscriberId([FromQuery (Name = "subscriberId")]int? subscriberId);

        /// <summary>
        /// Retrieve Trades
        /// </summary>
        /// <remarks>Returns the current subscriber&#39;s trade list ( IDs ).              &lt;br /&gt;&lt;br /&gt;This method can only be used for subscriber&#39;s users.</remarks>
        /// <response code="200">Indicates that the request succeeded and that the requested information is in the response.</response>
        /// <response code="400">Bad Request - the request could not be understood or was missing required parameters.</response>
        /// <response code="401">Indicates that the requested resource requires authentication.              &lt;br/&gt;Error codes:              &lt;br/&gt; 504 - API call rejected by security permissions;</response>
        [HttpGet]
        [Route("/v3/subscribers/trades")]
        [ValidateModelState]
        [ProducesResponseType(statusCode: 200, type: typeof(SCServiceChannelServicesMessagingTradeGetSubscriberTradesResponse))]
        [ProducesResponseType(statusCode: 400, type: typeof(SCServiceChannelServicesMessagingErrorResponse))]
        [ProducesResponseType(statusCode: 401, type: typeof(SCServiceChannelServicesMessagingErrorResponse))]
        public abstract Task<IActionResult> SubscribersTrades();

        /// <summary>
        /// Get Subscriber by Id
        /// </summary>
        /// <remarks>Returns success result</remarks>
        /// <param name="subscriberId"></param>
        /// <response code="200">Indicates that the request succeeded.</response>
        /// <response code="400">Bad Request - the request could not be understood or was missing required parameters.</response>
        /// <response code="401">Indicates that the requested resource requires authentication.&lt;br&gt;Error codes:&lt;br&gt; 504 - API call rejected by security permissions;</response>
        [HttpGet]
        [Route("/v3/subscribers/{subscriberId}")]
        [ValidateModelState]
        [ProducesResponseType(statusCode: 400, type: typeof(SCServiceChannelServicesMessagingErrorResponse))]
        [ProducesResponseType(statusCode: 401, type: typeof(SCServiceChannelServicesMessagingErrorResponse))]
        public abstract Task<IActionResult> SubscriberssubscriberId([FromRoute (Name = "subscriberId")][Required]int subscriberId);

        /// <summary>
        /// Returns list of subscriber(current or specified) dashboards
        /// </summary>
        /// <remarks>Available for subscriber users. Returns list of subscriber dashboards (current or specified subscriber if allowed)</remarks>
        /// <param name="subscriberId">Subscriber identifier</param>
        /// <response code="200">Indicates that the request succeeded and that the requested information is in the response.</response>
        /// <response code="400">Bad Request - the request could not be understood or was missing required parameters.</response>
        /// <response code="401">Indicates that the requested resource requires authentication.&lt;br&gt;Error codes:&lt;br&gt; 504 - API call rejected by security permissions;</response>
        /// <response code="403">Indicates that the requested resource not allowed for current user</response>
        [HttpGet]
        [Route("/v3/subscribers/{subscriberId}/dashboards")]
        [ValidateModelState]
        [ProducesResponseType(statusCode: 200, type: typeof(List<SCServiceChannelServicesMessagingSubscribersDashboardInfo>))]
        [ProducesResponseType(statusCode: 400, type: typeof(SCServiceChannelServicesMessagingErrorResponse))]
        [ProducesResponseType(statusCode: 401, type: typeof(SCServiceChannelServicesMessagingErrorResponse))]
        [ProducesResponseType(statusCode: 403, type: typeof(SCServiceChannelServicesMessagingErrorResponse))]
        public abstract Task<IActionResult> SubscriberssubscriberIdDashboards([FromRoute (Name = "subscriberId")][Required]int subscriberId);

        /// <summary>
        /// Retrieve Trades
        /// </summary>
        /// <remarks>Returns trade list of requested subscriber.</remarks>
        /// <param name="subscriberId">Numeric id of subscriber to perform action with.</param>
        /// <response code="200">Indicates that the request succeeded and that the requested information is in the response.</response>
        /// <response code="400">Bad Request - the request could not be understood or was missing required parameters.</response>
        /// <response code="401">Indicates that the requested resource requires authentication.              &lt;br/&gt;Error codes:              &lt;br/&gt; 504 - API call rejected by security permissions;</response>
        [HttpGet]
        [Route("/v3/subscribers/{subscriberId}/primarytrades")]
        [ValidateModelState]
        [ProducesResponseType(statusCode: 400, type: typeof(SCServiceChannelServicesMessagingErrorResponse))]
        [ProducesResponseType(statusCode: 401, type: typeof(SCServiceChannelServicesMessagingErrorResponse))]
        public abstract Task<IActionResult> SubscriberssubscriberIdPrimarytrades([FromRoute (Name = "subscriberId")][Required]int subscriberId);

        /// <summary>
        /// Returns list of subscriber properties
        /// </summary>
        /// <param name="subscriberId">subscriber identifier</param>
        /// <response code="200">Indicates that the request succeeded and that the requested information is in the response.</response>
        /// <response code="400">Bad Request - the request could not be understood or was missing required parameters.</response>
        /// <response code="401">Indicates that the requested resource requires authentication.&lt;br&gt;Error codes:&lt;br&gt; 504 - API call rejected by security permissions;</response>
        [HttpGet]
        [Route("/v3/subscribers/{subscriberId}/rules")]
        [ValidateModelState]
        [ProducesResponseType(statusCode: 200, type: typeof(SCServiceChannelServicesMessagingSubscribersGetSubscriberPropertyResponse))]
        [ProducesResponseType(statusCode: 400, type: typeof(SCServiceChannelServicesMessagingErrorResponse))]
        [ProducesResponseType(statusCode: 401, type: typeof(SCServiceChannelServicesMessagingErrorResponse))]
        public abstract Task<IActionResult> SubscriberssubscriberIdRules([FromRoute (Name = "subscriberId")][Required]int subscriberId);

        /// <summary>
        /// Security rules
        /// </summary>
        /// <remarks>Get security rules</remarks>
        /// <param name="subscriberId">Numeric id of subscriber.</param>
        /// <response code="200">OK</response>
        [HttpGet]
        [Route("/v3/subscribers/{subscriberId}/securityrules")]
        [ValidateModelState]
        [ProducesResponseType(statusCode: 200, type: typeof(Object))]
        public abstract Task<IActionResult> SubscriberssubscriberIdSecurityrules([FromRoute (Name = "subscriberId")][Required]int subscriberId);

        /// <summary>
        /// Retrieve Trades
        /// </summary>
        /// <remarks>Returns trade list ( IDs ) of requested subscriber.</remarks>
        /// <param name="subscriberId">Numeric id of subscriber to perform action with.</param>
        /// <response code="200">Indicates that the request succeeded and that the requested information is in the response.</response>
        /// <response code="400">Bad Request - the request could not be understood or was missing required parameters.</response>
        /// <response code="401">Indicates that the requested resource requires authentication.              &lt;br/&gt;Error codes:              &lt;br/&gt; 504 - API call rejected by security permissions;</response>
        [HttpGet]
        [Route("/v3/subscribers/{subscriberId}/trades")]
        [ValidateModelState]
        [ProducesResponseType(statusCode: 200, type: typeof(SCServiceChannelServicesMessagingTradeGetSubscriberTradesResponse))]
        [ProducesResponseType(statusCode: 400, type: typeof(SCServiceChannelServicesMessagingErrorResponse))]
        [ProducesResponseType(statusCode: 401, type: typeof(SCServiceChannelServicesMessagingErrorResponse))]
        public abstract Task<IActionResult> SubscriberssubscriberIdTrades([FromRoute (Name = "subscriberId")][Required]int subscriberId);

        /// <summary>
        /// Password security
        /// </summary>
        /// <remarks>Validate password security</remarks>
        /// <param name="subscriberId">Numeric id of subscriber.</param>
        /// <param name="password">Password to be checked.</param>
        /// <response code="200">OK</response>
        [HttpGet]
        [Route("/v3/subscribers/{subscriberId}/validatepasswordsecurity/{password}")]
        [ValidateModelState]
        [ProducesResponseType(statusCode: 200, type: typeof(Object))]
        public abstract Task<IActionResult> SubscriberssubscriberIdValidatepasswordsecuritypassword([FromRoute (Name = "subscriberId")][Required]int subscriberId, [FromRoute (Name = "password")][Required]string password);

        /// <summary>
        /// Returns list of reschedule reasons
        /// </summary>
        /// <param name="subscriberId">subscriber identifier</param>
        /// <response code="200">Indicates that the request succeeded and that the requested information is in the response.</response>
        /// <response code="400">Bad Request - the request could not be understood or was missing required parameters.</response>
        /// <response code="401">Indicates that the requested resource requires authentication.&lt;br&gt;Error codes:&lt;br&gt; 504 - API call rejected by security permissions;</response>
        [HttpGet]
        [Route("/v3/subscribers/{subscriberId}/workOrderRescheduleReasons")]
        [ValidateModelState]
        [ProducesResponseType(statusCode: 200, type: typeof(Dictionary<string, string>))]
        [ProducesResponseType(statusCode: 400, type: typeof(SCServiceChannelServicesMessagingErrorResponse))]
        [ProducesResponseType(statusCode: 401, type: typeof(SCServiceChannelServicesMessagingErrorResponse))]
        public abstract Task<IActionResult> SubscriberssubscriberIdWorkOrderRescheduleReasons([FromRoute (Name = "subscriberId")][Required]int subscriberId);

        /// <summary>
        /// Update subscriber info
        /// </summary>
        /// <remarks>Acceptable values for DateFormat are: \&quot;MMM d, yyyy\&quot; or \&quot;d, MMM yyyy\&quot;. Acceptable values for TimeFormat are: \&quot;H:mm\&quot; or \&quot;h:mm\&quot;. Default values are \&quot;MMM d, yyyy\&quot; and \&quot;H:mm\&quot; correspondingly.              Acceptable valuer for DecimalSeparator are: \&quot;.\&quot; or \&quot;,\&quot;. Default value is point.</remarks>
        /// <param name="subscriberId">Subscriber identifier</param>
        /// <param name="subscriberInfo">Subscriber info</param>
        /// <response code="200">Indicates that the request succeeded</response>
        /// <response code="400">Bad Request - the request could not be understood or was missing required parameters.</response>
        /// <response code="401">Indicates that the requested resource requires authentication.&lt;br&gt;Error codes:&lt;br&gt; 504 - API call rejected by security permissions;</response>
        [HttpPut]
        [Route("/v3/subscribers/{subscriberId}")]
        [Consumes("application/json", "text/json", "application/xml", "text/xml", "application/x-www-form-urlencoded")]
        [ValidateModelState]
        [ProducesResponseType(statusCode: 400, type: typeof(SCServiceChannelServicesMessagingErrorResponse))]
        [ProducesResponseType(statusCode: 401, type: typeof(SCServiceChannelServicesMessagingErrorResponse))]
        public abstract Task<IActionResult> SubscriberssubscriberId_0([FromRoute (Name = "subscriberId")][Required]int subscriberId, [FromBody]SCServiceChannelServicesMessagingSubscribersUpdateSubscriberInfoRequest subscriberInfo);
    }
}
