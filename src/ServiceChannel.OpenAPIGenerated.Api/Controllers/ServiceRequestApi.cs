/*
 * ServiceChannel API - v.3
 *
 * The ServiceChannel API is a RESTful and stateless API. It accepts standard HTTP verbs and supports OAuth 2.0 for authorizing requests.      Our API returns common HTTP status codes as well as JSON encapsulated data.      See [API Overview](https://developer.servicechannel.com/basics/introduction/overview/) for the intro to ServiceChannel API.<br>      <h3>Authentication and Authorization</h3>You should have a ServiceChannel account, register your application, and obtain `access_token` to integrate with our API.      See [Authentication and Authorization](https://developer.servicechannel.com/basics/general/authentication/) for more information.      To use this API playground, click **Authorize** and sign in to ServiceChannel.<br>      <h3>Environment</h3> All calls in this API Reference point to the **SB2 environment**.      See [Environments](https://developer.servicechannel.com/basics/general/environments/) for more information.<br>      <h3>API Version</h3>The current stable version of the ServiceChannel API is `v3`. In the request URL, `v3` is a version prefix that should be present.      When you omit the version prefix, calls point to the minimum supported version of the API.      We recommend you to always specify the API version to avoid possible errors.
 *
 * The version of the OpenAPI document: 3
 * 
 * Generated by: https://openapi-generator.tech
 */

using System;
using System.Collections.Generic;
using System.ComponentModel.DataAnnotations;
using System.Threading;
using System.Threading.Tasks;
using Microsoft.AspNetCore.Authorization;
using Microsoft.AspNetCore.Mvc;
using Microsoft.AspNetCore.Http;
using ServiceChannel.OpenAPIGenerated.Api.Attributes;
using ServiceChannel.OpenAPIGenerated.Api.Models;

namespace ServiceChannel.OpenAPIGenerated.Api.Controllers
{ 
    /// <summary>
    /// 
    /// </summary>
    [ApiController]
    public abstract class ServiceRequestApiController : ControllerBase
    { 
        /// <summary>
        /// 
        /// </summary>
        /// <param name="subscriberId"></param>
        /// <param name="areaName">Name of the area</param>
        /// <param name="problemType">Problem type</param>
        /// <param name="equipmentType">Equipment type</param>
        /// <param name="problemCode">Problem name</param>
        /// <param name="locationId">ID of a location</param>
        /// <param name="setupId">SetupId</param>
        /// <param name="callDate">Call Date</param>
        /// <response code="200">Request succeeded and the requested information is in the response.</response>
        /// <response code="400">Bad Request - the request could not be understood or was missing required parameters.</response>
        /// <response code="401">Unauthorized indicates that the requested resource requires authentication.              &lt;br/&gt;Error codes:              &lt;br/&gt; 504 - API call rejected by security permissions;</response>
        [HttpGet]
        [Route("/v3/providers/current/subscribers/{subscriberId}/applicationissuechoice/servicerequest/info")]
        [ValidateModelState]
        [ProducesResponseType(statusCode: 200, type: typeof(SCServiceChannelServicesMessagingWorkordersGetServiceRequestInfoRequest))]
        [ProducesResponseType(statusCode: 400, type: typeof(SCServiceChannelServicesMessagingErrorResponse))]
        [ProducesResponseType(statusCode: 401, type: typeof(SCServiceChannelServicesMessagingErrorResponse))]
        public abstract Task<IActionResult> ProvidersCurrentSubscriberssubscriberIdApplicationissuechoiceServicerequestInfoAreaNameAreaNameProblemTypeProblemTypeEquipmentTypeEquipmentTypeProblemCodeProblemCodeLocationIdLocationIdSetupIdSetupIdCallDateCallDate([FromRoute (Name = "subscriberId")][Required]int subscriberId, [FromQuery (Name = "areaName")]string? areaName, [FromQuery (Name = "problemType")]string? problemType, [FromQuery (Name = "equipmentType")]string? equipmentType, [FromQuery (Name = "problemCode")]string? problemCode, [FromQuery (Name = "locationId")]int? locationId, [FromQuery (Name = "setupId")]int? setupId, [FromQuery (Name = "callDate")]DateTime? callDate);

        /// <summary>
        /// 
        /// </summary>
        /// <param name="subscriberId"></param>
        /// <param name="locationId"></param>
        /// <response code="200">OK</response>
        [HttpGet]
        [Route("/v3/providers/current/subscriber/{subscriberId}/location/{locationId}/applicationissuechoice/servicerequest/info")]
        [ValidateModelState]
        [ProducesResponseType(statusCode: 200, type: typeof(Object))]
        public abstract Task<IActionResult> ProvidersCurrentSubscribersubscriberIdLocationlocationIdApplicationissuechoiceServicerequestInfo([FromRoute (Name = "subscriberId")][Required]int subscriberId, [FromRoute (Name = "locationId")][Required]int locationId);

        /// <summary>
        /// Get list of providers per service request
        /// </summary>
        /// <remarks>Returns providers for specified location and trade or equipment. If no location, trade specified in request equipment values are used.              &lt;br /&gt;&lt;br /&gt;Available for provider and subscriber usage.</remarks>
        /// <param name="locationId">Location Id</param>
        /// <param name="trade">Trade</param>
        /// <param name="equipmentType">Equipment type</param>
        /// <param name="providerRank">Sets default provider with specified rank</param>
        /// <param name="equipmentId">Sets default provider for specified equipment id</param>
        /// <response code="200">Request succeeded and the requested information is in the response.</response>
        /// <response code="400">Bad Request - the request could not be understood or was missing required parameters.</response>
        [HttpGet]
        [Route("/v3/servicerequest/providers")]
        [ValidateModelState]
        [ProducesResponseType(statusCode: 200, type: typeof(SCServiceChannelServicesMessagingProvidersGetServiceRequestProvidersResponse))]
        [ProducesResponseType(statusCode: 400, type: typeof(SCServiceChannelServicesMessagingErrorResponse))]
        public abstract Task<IActionResult> ServicerequestProviderslocationIdlocationIdtradetradeequipmentTypeequipmentTypeproviderRankproviderRankequipmentIdequipmentId([FromQuery (Name = "locationId")]int? locationId, [FromQuery (Name = "trade")]string? trade, [FromQuery (Name = "equipmentType")]string? equipmentType, [FromQuery (Name = "providerRank")]int? providerRank, [FromQuery (Name = "equipmentId")]int? equipmentId);

        /// <summary>
        /// 
        /// </summary>
        /// <param name="subscriberId"></param>
        /// <param name="setupId"></param>
        /// <param name="locationId"></param>
        /// <param name="providerId"></param>
        /// <param name="trade"></param>
        /// <response code="200">Indicates that the request succeeded and that the requested information is in the response.</response>
        /// <response code="400">Bad Request - the request could not be understood or was missing required parameters.              &lt;br/&gt;Error codes:              &lt;br/&gt; 503 - Request data is empty;</response>
        /// <response code="401">Indicates that the requested resource requires authentication.              &lt;br/&gt;Error codes:              &lt;br/&gt; 504 - API call rejected by security permissions;</response>
        /// <response code="404">Indicates that the requested resource does not exist on the server.</response>
        [HttpGet]
        [Route("/v3/subscribers/current/servicerequest/addresses")]
        [ValidateModelState]
        [ProducesResponseType(statusCode: 400, type: typeof(SCServiceChannelServicesMessagingErrorResponse))]
        [ProducesResponseType(statusCode: 401, type: typeof(SCServiceChannelServicesMessagingErrorResponse))]
        public abstract Task<IActionResult> SubscribersCurrentServicerequestAddressesSubscriberIdSubscriberIdSetupIdSetupIdLocationIdLocationIdProviderIdProviderIdTradeTrade([FromQuery (Name = "subscriberId")][Required()]int subscriberId, [FromQuery (Name = "setupId")][Required()]int setupId, [FromQuery (Name = "locationId")][Required()]int locationId, [FromQuery (Name = "providerId")][Required()]int providerId, [FromQuery (Name = "trade")][Required()]string trade);

        /// <summary>
        /// Get Service Request Info
        /// </summary>
        /// <remarks>Retrieves supporting info for \&quot;Create Work Order\&quot; operation.              &lt;br /&gt;&lt;br /&gt;This method can only be used for subscriber&#39;s users that have assigned dashboard.</remarks>
        /// <param name="areaName">Name of the area</param>
        /// <param name="problemType">Problem type</param>
        /// <param name="equipmentType">Equipment type</param>
        /// <param name="problemCode">Problem name</param>
        /// <param name="locationId">ID of a location</param>
        /// <param name="setupId">SetupId</param>
        /// <param name="callDate">Call Date</param>
        /// <response code="200">Request succeeded and the requested information is in the response.</response>
        /// <response code="400">Bad Request - the request could not be understood or was missing required parameters.              &lt;br/&gt;Error codes:              &lt;br/&gt; 917 - Invalid work order identifier. Returned if workorderId is &amp;lt;&#x3D; 0;</response>
        /// <response code="401">Unauthorized indicates that the requested resource requires authentication.              &lt;br/&gt;Error codes:              &lt;br/&gt; 504 - API call rejected by security permissions;</response>
        [HttpGet]
        [Route("/v3/subscribers/current/servicerequest/info")]
        [ValidateModelState]
        [ProducesResponseType(statusCode: 200, type: typeof(SCServiceChannelServicesMessagingWorkordersGetServiceRequestInfoResponse))]
        [ProducesResponseType(statusCode: 400, type: typeof(SCServiceChannelServicesMessagingErrorResponse))]
        [ProducesResponseType(statusCode: 401, type: typeof(SCServiceChannelServicesMessagingErrorResponse))]
        public abstract Task<IActionResult> SubscribersCurrentServicerequestInfoAreaNameAreaNameProblemTypeProblemTypeEquipmentTypeEquipmentTypeProblemCodeProblemCodeLocationIdLocationIdSetupIdSetupIdCallDateCallDate([FromQuery (Name = "areaName")]string? areaName, [FromQuery (Name = "problemType")]string? problemType, [FromQuery (Name = "equipmentType")]string? equipmentType, [FromQuery (Name = "problemCode")]string? problemCode, [FromQuery (Name = "locationId")]int? locationId, [FromQuery (Name = "setupId")]int? setupId, [FromQuery (Name = "callDate")]DateTime? callDate);

        /// <summary>
        /// Get Service Request Info Without Dashboard Settings
        /// </summary>
        /// <remarks>Retrieves supporting info for \&quot;Create Work Order\&quot; operation.              &lt;br /&gt;&lt;br /&gt;This method can only be used for subscriber&#39;s users that have assigned dashboard.</remarks>
        /// <param name="areaName">Name of the area</param>
        /// <param name="problemType">Problem type</param>
        /// <param name="equipmentType">Equipment type</param>
        /// <param name="problemCode">Problem name</param>
        /// <param name="locationId">ID of a location</param>
        /// <param name="setupId">SetupId</param>
        /// <param name="callDate">Call Date</param>
        /// <response code="200">Request succeeded and the requested information is in the response.</response>
        /// <response code="400">Bad Request - the request could not be understood or was missing required parameters.              &lt;br/&gt;Error codes:              &lt;br/&gt; 917 - Invalid work order identifier. Returned if workorderId is &amp;lt;&#x3D; 0;</response>
        /// <response code="401">Unauthorized indicates that the requested resource requires authentication.              &lt;br/&gt;Error codes:              &lt;br/&gt; 504 - API call rejected by security permissions;</response>
        [HttpGet]
        [Route("/v3/subscribers/current/servicerequest/info/nosettings")]
        [ValidateModelState]
        [ProducesResponseType(statusCode: 200, type: typeof(SCServiceChannelServicesMessagingWorkordersGetServiceRequestInfoResponse))]
        [ProducesResponseType(statusCode: 400, type: typeof(SCServiceChannelServicesMessagingErrorResponse))]
        [ProducesResponseType(statusCode: 401, type: typeof(SCServiceChannelServicesMessagingErrorResponse))]
        public abstract Task<IActionResult> SubscribersCurrentServicerequestInfoNosettingsAreaNameAreaNameProblemTypeProblemTypeEquipmentTypeEquipmentTypeProblemCodeProblemCodeLocationIdLocationIdSetupIdSetupIdCallDateCallDate([FromQuery (Name = "areaName")]string? areaName, [FromQuery (Name = "problemType")]string? problemType, [FromQuery (Name = "equipmentType")]string? equipmentType, [FromQuery (Name = "problemCode")]string? problemCode, [FromQuery (Name = "locationId")]int? locationId, [FromQuery (Name = "setupId")]int? setupId, [FromQuery (Name = "callDate")]DateTime? callDate);
    }
}
