/*
 * ServiceChannel API - v.3
 *
 * The ServiceChannel API is a RESTful and stateless API. It accepts standard HTTP verbs and supports OAuth 2.0 for authorizing requests.      Our API returns common HTTP status codes as well as JSON encapsulated data.      See [API Overview](https://developer.servicechannel.com/basics/introduction/overview/) for the intro to ServiceChannel API.<br>      <h3>Authentication and Authorization</h3>You should have a ServiceChannel account, register your application, and obtain `access_token` to integrate with our API.      See [Authentication and Authorization](https://developer.servicechannel.com/basics/general/authentication/) for more information.      To use this API playground, click **Authorize** and sign in to ServiceChannel.<br>      <h3>Environment</h3> All calls in this API Reference point to the **SB2 environment**.      See [Environments](https://developer.servicechannel.com/basics/general/environments/) for more information.<br>      <h3>API Version</h3>The current stable version of the ServiceChannel API is `v3`. In the request URL, `v3` is a version prefix that should be present.      When you omit the version prefix, calls point to the minimum supported version of the API.      We recommend you to always specify the API version to avoid possible errors.
 *
 * The version of the OpenAPI document: 3
 * 
 * Generated by: https://openapi-generator.tech
 */

using System;
using System.Collections.Generic;
using System.ComponentModel.DataAnnotations;
using System.Threading;
using System.Threading.Tasks;
using Microsoft.AspNetCore.Authorization;
using Microsoft.AspNetCore.Mvc;
using Microsoft.AspNetCore.Http;
using ServiceChannel.OpenAPIGenerated.Api.Attributes;
using ServiceChannel.OpenAPIGenerated.Api.Models;

namespace ServiceChannel.OpenAPIGenerated.Api.Controllers
{ 
    /// <summary>
    /// 
    /// </summary>
    [ApiController]
    public abstract class RefrigerantTrackingApiController : ControllerBase
    { 
        /// <summary>
        /// Update/Insert Leak Tracking Preferences
        /// </summary>
        /// <remarks>Update/Insert Leak Tracking Preferences. Returns Success/NoSuccess request.</remarks>
        /// <param name="request"></param>
        /// <response code="200">Indicates that the request succeeded and that the requested information is in the response.</response>
        /// <response code="400">Bad Request - the request could not be understood or was missing required parameters.              &lt;br/&gt;Error codes:                          &lt;br/&gt; 502 - No Update/Insert Leak Tracking Preferences;</response>
        /// <response code="401">Indicates that the requested resource requires authentication.              &lt;br&gt;Error codes:              &lt;br&gt; 504 - API call rejected by security permissions;</response>
        [HttpPut]
        [Route("/v3/refrigeranttracking")]
        [Consumes("application/json", "text/json", "application/xml", "text/xml", "application/x-www-form-urlencoded")]
        [ValidateModelState]
        [ProducesResponseType(statusCode: 200, type: typeof(Object))]
        [ProducesResponseType(statusCode: 400, type: typeof(SCServiceChannelServicesMessagingErrorResponse))]
        [ProducesResponseType(statusCode: 401, type: typeof(SCServiceChannelServicesMessagingErrorResponse))]
        public abstract Task<IActionResult> Refrigeranttracking([FromBody]SCServiceChannelServicesMessagingRefrigerantTrackingPreferencesRequest request);

        /// <summary>
        /// Add leak detector audit
        /// </summary>
        /// <param name="request"></param>
        /// <response code="200">Indicates that the request succeeded and that the requested information is in the response.</response>
        /// <response code="400">Bad Request - the request could not be understood or was missing required parameters.              &lt;br/&gt;Error codes:                          &lt;br/&gt; 502 - No Get leak Areas;</response>
        /// <response code="401">Indicates that the requested resource requires authentication.              &lt;br&gt;Error codes:              &lt;br&gt; 504 - API call rejected by security permissions;</response>
        [HttpPost]
        [Route("/v3/refrigeranttracking/addLeakDetectorAudit")]
        [Consumes("application/json", "text/json", "application/xml", "text/xml", "application/x-www-form-urlencoded")]
        [ValidateModelState]
        [ProducesResponseType(statusCode: 200, type: typeof(Object))]
        [ProducesResponseType(statusCode: 400, type: typeof(SCServiceChannelServicesMessagingErrorResponse))]
        [ProducesResponseType(statusCode: 401, type: typeof(SCServiceChannelServicesMessagingErrorResponse))]
        public abstract Task<IActionResult> RefrigeranttrackingAddLeakDetectorAudit([FromBody]SCServiceChannelServicesMessagingRefrigerantTrackingLeakDetectorAuditAddUpdateRequest request);

        /// <summary>
        /// 
        /// </summary>
        /// <param name="request"></param>
        /// <response code="200">Indicates that the request succeeded and that the requested information is in the response.</response>
        /// <response code="400">Bad Request - the request could not be understood or was missing required parameters.</response>
        /// <response code="401">Indicates that the requested resource requires authentication.&lt;br&gt;Error codes:&lt;br&gt; 504 - API call rejected by security permissions;</response>
        [HttpPost]
        [Route("/v3/refrigeranttracking/AddOrUpdateRefrigerationTypes")]
        [Consumes("application/json", "text/json", "application/xml", "text/xml", "application/x-www-form-urlencoded")]
        [ValidateModelState]
        [ProducesResponseType(statusCode: 200, type: typeof(Object))]
        [ProducesResponseType(statusCode: 401, type: typeof(SCServiceChannelServicesMessagingErrorResponse))]
        public abstract Task<IActionResult> RefrigeranttrackingAddOrUpdateRefrigerationTypes([FromBody]List<SCServiceChannelServicesMessagingRefrigerantTrackingRefrigerantType> request);

        /// <summary>
        /// Add Update Refrigeration Details
        /// </summary>
        /// <param name="equipmentId"></param>
        /// <param name="model"></param>
        /// <response code="200">Indicates that the request succeeded and that the requested information is in the response.</response>
        /// <response code="400">Bad Request - the request could not be understood or was missing required parameters.</response>
        /// <response code="401">Indicates that the requested resource requires authentication.              &lt;br&gt;Error codes:              &lt;br&gt; 504 - API call rejected by security permissions;</response>
        [HttpPost]
        [Route("/v3/refrigeranttracking/addUpdateRefrigerationDetails")]
        [Consumes("application/json", "text/json", "application/xml", "text/xml", "application/x-www-form-urlencoded")]
        [ValidateModelState]
        [ProducesResponseType(statusCode: 200, type: typeof(Object))]
        [ProducesResponseType(statusCode: 401, type: typeof(SCServiceChannelServicesMessagingErrorResponse))]
        public abstract Task<IActionResult> RefrigeranttrackingAddUpdateRefrigerationDetailsequipmentIdequipmentId([FromQuery (Name = "equipmentId")][Required()]int equipmentId, [FromBody]SCServiceChannelServicesMessagingRefrigerantTrackingAssetRefrigerant model);

        /// <summary>
        /// BulkLeakrecords
        /// </summary>
        /// <param name="request"></param>
        /// <response code="200">OK</response>
        /// <response code="400">Bad Request - the request could not be understood or was missing required parameters.</response>
        /// <response code="500">Indicates that the server encountered an unexpected condition that prevented it from fulfilling the request</response>
        [HttpPost]
        [Route("/v3/refrigeranttracking/BulkLeakrecords")]
        [Consumes("application/json", "text/json", "application/xml", "text/xml", "application/x-www-form-urlencoded")]
        [ValidateModelState]
        [ProducesResponseType(statusCode: 200, type: typeof(Object))]
        [ProducesResponseType(statusCode: 400, type: typeof(SCServiceChannelServicesMessagingErrorResponse))]
        [ProducesResponseType(statusCode: 500, type: typeof(SCServiceChannelServicesMessagingErrorResponse))]
        public abstract Task<IActionResult> RefrigeranttrackingBulkLeakrecords([FromBody]SCServiceChannelServicesMessagingRefrigerantTrackingLeakImmeasurableBulkChangeRequest request);

        /// <summary>
        /// Get Charge Descriptions
        /// </summary>
        /// <response code="200">OK</response>
        [HttpGet]
        [Route("/v3/refrigeranttracking/ChargeDescriptions")]
        [ValidateModelState]
        [ProducesResponseType(statusCode: 200, type: typeof(Object))]
        public abstract Task<IActionResult> RefrigeranttrackingChargeDescriptions();

        /// <summary>
        /// Check if Refrigerant Tracking Available for list of locations
        /// </summary>
        /// <remarks>GetLeakTrackingPreferences</remarks>
        /// <param name="locationIds">locationIds</param>
        /// <response code="200">Indicates that the request succeeded and that the requested information is in the response.</response>
        /// <response code="400">Bad Request - the request could not be understood or was missing required parameters.              &lt;br/&gt;Error codes:                         &lt;br/&gt; 502 - No Get Leak Tracking Preferences;</response>
        /// <response code="401">Indicates that the requested resource requires authentication.              &lt;br&gt;Error codes:              &lt;br&gt; 504 - API call rejected by security permissions;</response>
        [HttpPost]
        [Route("/v3/refrigeranttracking/CheckRefrigerantTrackingAvailable")]
        [Consumes("application/json", "text/json", "application/xml", "text/xml", "application/x-www-form-urlencoded")]
        [ValidateModelState]
        [ProducesResponseType(statusCode: 200, type: typeof(Object))]
        [ProducesResponseType(statusCode: 400, type: typeof(SCServiceChannelServicesMessagingErrorResponse))]
        [ProducesResponseType(statusCode: 401, type: typeof(SCServiceChannelServicesMessagingErrorResponse))]
        public abstract Task<IActionResult> RefrigeranttrackingCheckRefrigerantTrackingAvailable([FromBody]List<int> locationIds);

        /// <summary>
        /// Check if Refrigerant Tracking Available for list of locations
        /// </summary>
        /// <remarks>GetLeakTrackingPreferences</remarks>
        /// <param name="request">request</param>
        /// <response code="200">Indicates that the request succeeded and that the requested information is in the response.</response>
        /// <response code="400">Bad Request - the request could not be understood or was missing required parameters.              &lt;br/&gt;Error codes:                         &lt;br/&gt; 502 - No Get Leak Tracking Preferences;</response>
        /// <response code="401">Indicates that the requested resource requires authentication.              &lt;br&gt;Error codes:              &lt;br&gt; 504 - API call rejected by security permissions;</response>
        [HttpPost]
        [Route("/v3/refrigeranttracking/CheckRefrigerantTrackingAvailable_v1")]
        [Consumes("application/json", "text/json", "application/xml", "text/xml", "application/x-www-form-urlencoded")]
        [ValidateModelState]
        [ProducesResponseType(statusCode: 200, type: typeof(Object))]
        [ProducesResponseType(statusCode: 400, type: typeof(SCServiceChannelServicesMessagingErrorResponse))]
        [ProducesResponseType(statusCode: 401, type: typeof(SCServiceChannelServicesMessagingErrorResponse))]
        public abstract Task<IActionResult> RefrigeranttrackingCheckRefrigerantTrackingAvailableV1([FromBody]SCServiceChannelServicesCoreInternalRequestsRefrigerantTrackingCheckRefrigerantTrackingRequest request);

        /// <summary>
        /// Create Charge History
        /// </summary>
        /// <param name="model"></param>
        /// <response code="200">Indicates that the request succeeded and that the requested information is in the response.</response>
        /// <response code="400">Bad Request - the request could not be understood or was missing required parameters.</response>
        /// <response code="401">Indicates that the requested resource requires authentication.              &lt;br&gt;Error codes:              &lt;br&gt; 504 - API call rejected by security permissions;</response>
        [HttpPost]
        [Route("/v3/refrigeranttracking/createChargeHistory")]
        [Consumes("application/json", "text/json", "application/xml", "text/xml", "application/x-www-form-urlencoded")]
        [ValidateModelState]
        [ProducesResponseType(statusCode: 200, type: typeof(Object))]
        [ProducesResponseType(statusCode: 401, type: typeof(SCServiceChannelServicesMessagingErrorResponse))]
        public abstract Task<IActionResult> RefrigeranttrackingCreateChargeHistory([FromBody]SCServiceChannelServicesMessagingRefrigerantTrackingChargeHistoryRequest model);

        /// <summary>
        /// Creates Follow Up wo for non-closed leak records
        /// </summary>
        /// <param name="leakRecordId"></param>
        /// <param name="currentTrackingNumber"></param>
        /// <response code="200">Indicates that the request succeeded and that the requested information is in the response.</response>
        /// <response code="400">Bad Request - the request could not be understood or was missing required parameters.              &lt;br/&gt;Error codes:                          &lt;br/&gt; 502 - No Update/Insert Leak Tracking Preferences;</response>
        /// <response code="401">Indicates that the requested resource requires authentication.              &lt;br&gt;Error codes:              &lt;br&gt; 504 - API call rejected by security permissions;</response>
        [HttpPost]
        [Route("/v3/refrigeranttracking/CreateLeakRecordFollowupWo")]
        [ValidateModelState]
        [ProducesResponseType(statusCode: 200, type: typeof(Object))]
        [ProducesResponseType(statusCode: 400, type: typeof(SCServiceChannelServicesMessagingErrorResponse))]
        [ProducesResponseType(statusCode: 401, type: typeof(SCServiceChannelServicesMessagingErrorResponse))]
        public abstract Task<IActionResult> RefrigeranttrackingCreateLeakRecordFollowupWoleakRecordIdleakRecordIdcurrentTrackingNumbercurrentTrackingNumber([FromQuery (Name = "leakRecordId")][Required()]int leakRecordId, [FromQuery (Name = "currentTrackingNumber")][Required()]int currentTrackingNumber);

        /// <summary>
        /// Deactivated LeakImmeasurable
        /// </summary>
        /// <param name="id"></param>
        /// <response code="200">Indicates that the request succeeded and that the requested information is in the response.</response>
        [HttpDelete]
        [Route("/v3/refrigeranttracking/DeleteLeakRecordImmeasurable")]
        [ValidateModelState]
        [ProducesResponseType(statusCode: 200, type: typeof(Object))]
        public abstract Task<IActionResult> RefrigeranttrackingDeleteLeakRecordImmeasurableidid([FromQuery (Name = "id")][Required()]int id);

        /// <summary>
        /// get leak detector last audit
        /// </summary>
        /// <param name="assetId"></param>
        /// <param name="recId"></param>
        /// <response code="200">Indicates that the request succeeded and that the requested information is in the response.</response>
        /// <response code="400">Bad Request - the request could not be understood or was missing required parameters.              &lt;br/&gt;Error codes:                          &lt;br/&gt; 502 - No Get leak Areas;</response>
        /// <response code="401">Indicates that the requested resource requires authentication.              &lt;br&gt;Error codes:              &lt;br&gt; 504 - API call rejected by security permissions;</response>
        [HttpGet]
        [Route("/v3/refrigeranttracking/getLeakDetectorLastAudit")]
        [ValidateModelState]
        [ProducesResponseType(statusCode: 200, type: typeof(Object))]
        [ProducesResponseType(statusCode: 400, type: typeof(SCServiceChannelServicesMessagingErrorResponse))]
        [ProducesResponseType(statusCode: 401, type: typeof(SCServiceChannelServicesMessagingErrorResponse))]
        public abstract Task<IActionResult> RefrigeranttrackingGetLeakDetectorLastAuditassetIdassetIdrecIdrecId([FromQuery (Name = "assetId")][Required()]int assetId, [FromQuery (Name = "recId")][Required()]int recId);

        /// <summary>
        /// Get Rack Type List Items
        /// </summary>
        /// <response code="200">Indicates that the request succeeded and that the requested information is in the response.</response>
        [HttpGet]
        [Route("/v3/refrigeranttracking/GetRackTypeListItems")]
        [ValidateModelState]
        [ProducesResponseType(statusCode: 200, type: typeof(Object))]
        public abstract Task<IActionResult> RefrigeranttrackingGetRackTypeListItems();

        /// <summary>
        /// 
        /// </summary>
        /// <param name="locationId"></param>
        /// <response code="200">Indicates that the request succeeded and that the requested information is in the response.</response>
        /// <response code="400">Bad Request - the request could not be understood or was missing required parameters.              &lt;br/&gt;Error codes:                          &lt;br/&gt; 502 - No Update/Insert Leak Tracking Preferences;</response>
        /// <response code="401">Indicates that the requested resource requires authentication.              &lt;br&gt;Error codes:              &lt;br&gt; 504 - API call rejected by security permissions;</response>
        [HttpGet]
        [Route("/v3/refrigeranttracking/isRefrigerantTrackingAvailable/{locationId}")]
        [ValidateModelState]
        [ProducesResponseType(statusCode: 200, type: typeof(Object))]
        [ProducesResponseType(statusCode: 400, type: typeof(SCServiceChannelServicesMessagingErrorResponse))]
        [ProducesResponseType(statusCode: 401, type: typeof(SCServiceChannelServicesMessagingErrorResponse))]
        public abstract Task<IActionResult> RefrigeranttrackingIsRefrigerantTrackingAvailablelocationId([FromRoute (Name = "locationId")][Required]int locationId);

        /// <summary>
        /// Add Leak Inspection Compliance Acknowledgement
        /// </summary>
        /// <param name="model"></param>
        /// <response code="200">OK</response>
        [HttpPost]
        [Route("/v3/refrigeranttracking/LeakInspectionComplianceAcknowledgement")]
        [Consumes("application/json", "text/json", "application/xml", "text/xml", "application/x-www-form-urlencoded")]
        [ValidateModelState]
        [ProducesResponseType(statusCode: 200, type: typeof(Object))]
        public abstract Task<IActionResult> RefrigeranttrackingLeakInspectionComplianceAcknowledgement([FromBody]SCServiceChannelServicesMessagingRefrigerantTrackingLeakInspectionComplianceAcknowledgement model);

        /// <summary>
        /// Add leak note
        /// </summary>
        /// <param name="request"></param>
        /// <response code="200">Indicates that the request succeeded and that the requested information is in the response.</response>
        /// <response code="400">Bad Request - the request could not be understood or was missing required parameters.              &lt;br/&gt;Error codes:                          &lt;br/&gt; 502 - No Update/Insert Leak Tracking Preferences;</response>
        /// <response code="401">Indicates that the requested resource requires authentication.              &lt;br&gt;Error codes:              &lt;br&gt; 504 - API call rejected by security permissions;</response>
        [HttpPost]
        [Route("/v3/refrigeranttracking/leakNote")]
        [Consumes("application/json", "text/json", "application/xml", "text/xml", "application/x-www-form-urlencoded")]
        [ValidateModelState]
        [ProducesResponseType(statusCode: 200, type: typeof(Object))]
        [ProducesResponseType(statusCode: 400, type: typeof(SCServiceChannelServicesMessagingErrorResponse))]
        [ProducesResponseType(statusCode: 401, type: typeof(SCServiceChannelServicesMessagingErrorResponse))]
        public abstract Task<IActionResult> RefrigeranttrackingLeakNote([FromBody]SCServiceChannelServicesMessagingRefrigerantTrackingAddLeakNoteRequest request);

        /// <summary>
        /// Retrieve leak record action codes
        /// </summary>
        /// <response code="200">OK</response>
        [HttpGet]
        [Route("/v3/refrigeranttracking/leakRecord/actionCodes")]
        [ValidateModelState]
        [ProducesResponseType(statusCode: 200, type: typeof(Object))]
        public abstract Task<IActionResult> RefrigeranttrackingLeakRecordActionCodes();

        /// <summary>
        /// Retrieve leak record fault codes
        /// </summary>
        /// <response code="200">OK</response>
        [HttpGet]
        [Route("/v3/refrigeranttracking/leakRecord/faultCodes")]
        [ValidateModelState]
        [ProducesResponseType(statusCode: 200, type: typeof(Object))]
        public abstract Task<IActionResult> RefrigeranttrackingLeakRecordFaultCodes();

        /// <summary>
        /// Update entity to RT_LeakImmeasurable
        /// </summary>
        /// <param name="request"></param>
        /// <response code="200">Indicates that the request succeeded and that the requested information is in the response.</response>
        [HttpPut]
        [Route("/v3/refrigeranttracking/LeakRecordImmearusable")]
        [Consumes("application/json", "text/json", "application/xml", "text/xml", "application/x-www-form-urlencoded")]
        [ValidateModelState]
        [ProducesResponseType(statusCode: 200, type: typeof(Object))]
        public abstract Task<IActionResult> RefrigeranttrackingLeakRecordImmearusable([FromBody]SCServiceChannelServicesMessagingRefrigerantTrackingUpdateLeakImmeasurable request);

        /// <summary>
        /// Add entity to RT_LeakImmeasurable
        /// </summary>
        /// <param name="request"></param>
        /// <response code="200">Indicates that the request succeeded and that the requested information is in the response.</response>
        [HttpPost]
        [Route("/v3/refrigeranttracking/LeakRecordImmearusable")]
        [Consumes("application/json", "text/json", "application/xml", "text/xml", "application/x-www-form-urlencoded")]
        [ValidateModelState]
        [ProducesResponseType(statusCode: 200, type: typeof(Object))]
        public abstract Task<IActionResult> RefrigeranttrackingLeakRecordImmearusable_0([FromBody]SCServiceChannelServicesMessagingRefrigerantTrackingAddLeakImmeasurableRequest request);

        /// <summary>
        /// Get LeakImmeasurable by recId and assetID
        /// </summary>
        /// <param name="trackingNumber"></param>
        /// <param name="assetid"></param>
        /// <response code="200">OK</response>
        /// <response code="500">Indicates that the server encountered an unexpected condition that prevented it from fulfilling the request</response>
        [HttpGet]
        [Route("/v3/refrigeranttracking/LeakRecordImmearusable/{trackingNumber}")]
        [ValidateModelState]
        [ProducesResponseType(statusCode: 200, type: typeof(Object))]
        [ProducesResponseType(statusCode: 500, type: typeof(SCServiceChannelServicesMessagingErrorResponse))]
        public abstract Task<IActionResult> RefrigeranttrackingLeakRecordImmearusabletrackingNumberassetidassetid([FromRoute (Name = "trackingNumber")][Required]int trackingNumber, [FromQuery (Name = "assetid")]int? assetid);

        /// <summary>
        /// Get Leak Verification Methods
        /// </summary>
        /// <response code="200">Indicates that the request succeeded and that the requested information is in the response.</response>
        /// <response code="500">Indicates that the server encountered an unexpected condition that prevented it from fulfilling the request.</response>
        [HttpGet]
        [Route("/v3/refrigeranttracking/LeakVerificationMethods")]
        [ValidateModelState]
        [ProducesResponseType(statusCode: 200, type: typeof(List<SCServiceChannelServicesMessagingLeakRecordLeakVerifyMethod>))]
        [ProducesResponseType(statusCode: 500, type: typeof(SCServiceChannelServicesMessagingErrorResponse))]
        public abstract Task<IActionResult> RefrigeranttrackingLeakVerificationMethods();

        /// <summary>
        /// Get leak areas
        /// </summary>
        /// <response code="200">Indicates that the request succeeded and that the requested information is in the response.</response>
        /// <response code="400">Bad Request - the request could not be understood or was missing required parameters.              &lt;br/&gt;Error codes:                          &lt;br/&gt; 502 - No Get leak Areas;</response>
        /// <response code="401">Indicates that the requested resource requires authentication.              &lt;br&gt;Error codes:              &lt;br&gt; 504 - API call rejected by security permissions;</response>
        [HttpGet]
        [Route("/v3/refrigeranttracking/leakareas")]
        [ValidateModelState]
        [ProducesResponseType(statusCode: 200, type: typeof(Object))]
        [ProducesResponseType(statusCode: 400, type: typeof(SCServiceChannelServicesMessagingErrorResponse))]
        [ProducesResponseType(statusCode: 401, type: typeof(SCServiceChannelServicesMessagingErrorResponse))]
        public abstract Task<IActionResult> RefrigeranttrackingLeakareas();

        /// <summary>
        /// UpdateLeakRecord
        /// </summary>
        /// <param name="request"></param>
        /// <response code="200">Indicates that the request succeeded and that the requested information is in the response.</response>
        /// <response code="400">Bad Request - the request could not be understood or was missing required parameters.              &lt;br/&gt;Error codes:                          &lt;br/&gt; 502 - No Update Leak Record;</response>
        /// <response code="401">Indicates that the requested resource requires authentication.              &lt;br&gt;Error codes:              &lt;br&gt; 504 - API call rejected by security permissions;</response>
        [HttpPut]
        [Route("/v3/refrigeranttracking/leakrecord")]
        [Consumes("application/json", "text/json", "application/xml", "text/xml", "application/x-www-form-urlencoded")]
        [ValidateModelState]
        [ProducesResponseType(statusCode: 200, type: typeof(Object))]
        [ProducesResponseType(statusCode: 400, type: typeof(SCServiceChannelServicesMessagingErrorResponse))]
        [ProducesResponseType(statusCode: 401, type: typeof(SCServiceChannelServicesMessagingErrorResponse))]
        public abstract Task<IActionResult> RefrigeranttrackingLeakrecord([FromBody]SCServiceChannelServicesMessagingRefrigerantTrackingUpdateLeakRecordRequest request);

        /// <summary>
        /// UpdateLeakRecord With Returns Detail Operation Result
        /// </summary>
        /// <param name="request"></param>
        /// <response code="200">Indicates that the request succeeded and that the requested information is in the response.</response>
        /// <response code="400">Bad Request - the request could not be understood or was missing required parameters.              &lt;br/&gt;Error codes:                          &lt;br/&gt; 502 - No Update Leak Record;</response>
        /// <response code="401">Indicates that the requested resource requires authentication.              &lt;br&gt;Error codes:              &lt;br&gt; 504 - API call rejected by security permissions;</response>
        [HttpPut]
        [Route("/v3/refrigeranttracking/leakrecordV1")]
        [Consumes("application/json", "text/json", "application/xml", "text/xml", "application/x-www-form-urlencoded")]
        [ValidateModelState]
        [ProducesResponseType(statusCode: 200, type: typeof(Object))]
        [ProducesResponseType(statusCode: 400, type: typeof(SCServiceChannelServicesMessagingErrorResponse))]
        [ProducesResponseType(statusCode: 401, type: typeof(SCServiceChannelServicesMessagingErrorResponse))]
        public abstract Task<IActionResult> RefrigeranttrackingLeakrecordV1([FromBody]SCServiceChannelServicesMessagingRefrigerantTrackingUpdateLeakRecordRequest request);

        /// <summary>
        /// Retrieve leak records by filter
        /// </summary>
        /// <param name="request"></param>
        /// <response code="200">OK</response>
        [HttpPost]
        [Route("/v3/refrigeranttracking/leakrecords")]
        [Consumes("application/json", "text/json", "application/xml", "text/xml", "application/x-www-form-urlencoded")]
        [ValidateModelState]
        [ProducesResponseType(statusCode: 200, type: typeof(Object))]
        public abstract Task<IActionResult> RefrigeranttrackingLeakrecords([FromBody]SCServiceChannelServicesMessagingRefrigerantTrackingGetPagedLeakRecordsByFilterRequest request);

        /// <summary>
        /// Get LeakRecords with LeakImmeasurable
        /// </summary>
        /// <param name="trackingNumber"></param>
        /// <response code="200">OK</response>
        /// <response code="500">Indicates that the server encountered an unexpected condition that prevented it from fulfilling the request</response>
        [HttpGet]
        [Route("/v3/refrigeranttracking/leakrecords/{trackingNumber}")]
        [ValidateModelState]
        [ProducesResponseType(statusCode: 200, type: typeof(Object))]
        [ProducesResponseType(statusCode: 500, type: typeof(SCServiceChannelServicesMessagingErrorResponse))]
        public abstract Task<IActionResult> RefrigeranttrackingLeakrecordstrackingNumber([FromRoute (Name = "trackingNumber")][Required]int trackingNumber);

        /// <summary>
        /// Get Operational Statuses
        /// </summary>
        /// <response code="200">Indicates that the request succeeded and that the requested information is in the response.</response>
        [HttpGet]
        [Route("/v3/refrigeranttracking/OperationalStatuses")]
        [ValidateModelState]
        [ProducesResponseType(statusCode: 200, type: typeof(Object))]
        public abstract Task<IActionResult> RefrigeranttrackingOperationalStatuses();

        /// <summary>
        /// Create/Update Rack Connection
        /// </summary>
        /// <remarks>Create/Update Rack Connection</remarks>
        /// <param name="request"></param>
        /// <response code="200">Indicates that the request succeeded and that the requested information is in the response.</response>
        /// <response code="400">Bad Request - the request could not be understood or was missing required parameters.              &lt;br/&gt;Error codes:                         &lt;br/&gt; 502 - No Get Rack Connection</response>
        /// <response code="401">Indicates that the requested resource requires authentication.              &lt;br&gt;Error codes:              &lt;br&gt; 504 - API call rejected by security permissions;</response>
        [HttpPost]
        [Route("/v3/refrigeranttracking/rack")]
        [Consumes("application/json", "text/json", "application/xml", "text/xml", "application/x-www-form-urlencoded")]
        [ValidateModelState]
        [ProducesResponseType(statusCode: 200, type: typeof(Object))]
        [ProducesResponseType(statusCode: 400, type: typeof(SCServiceChannelServicesMessagingErrorResponse))]
        [ProducesResponseType(statusCode: 401, type: typeof(SCServiceChannelServicesMessagingErrorResponse))]
        public abstract Task<IActionResult> RefrigeranttrackingRack([FromBody]SCServiceChannelServicesMessagingRefrigerantTrackingCreateUpdateRackConnectionRequest request);

        /// <summary>
        /// Get Rack Connection
        /// </summary>
        /// <remarks>Rack Connection</remarks>
        /// <param name="id"></param>
        /// <response code="200">Indicates that the request succeeded and that the requested information is in the response.</response>
        /// <response code="400">Bad Request - the request could not be understood or was missing required parameters.              &lt;br/&gt;Error codes:                         &lt;br/&gt; 502 - No Get Rack Connection</response>
        /// <response code="401">Indicates that the requested resource requires authentication.              &lt;br&gt;Error codes:              &lt;br&gt; 504 - API call rejected by security permissions;</response>
        [HttpGet]
        [Route("/v3/refrigeranttracking/rack")]
        [ValidateModelState]
        [ProducesResponseType(statusCode: 200, type: typeof(Object))]
        [ProducesResponseType(statusCode: 400, type: typeof(SCServiceChannelServicesMessagingErrorResponse))]
        [ProducesResponseType(statusCode: 401, type: typeof(SCServiceChannelServicesMessagingErrorResponse))]
        public abstract Task<IActionResult> RefrigeranttrackingRackidid([FromQuery (Name = "id")][Required()]int id);

        /// <summary>
        /// Get refrigerant types
        /// </summary>
        /// <param name="subscriberId"></param>
        /// <response code="200">Indicates that the request succeeded and that the requested information is in the response.</response>
        /// <response code="400">Bad Request - the request could not be understood or was missing required parameters.              &lt;br/&gt;Error codes:                          &lt;br/&gt; 502 - No Get Refrigerant Types;</response>
        [HttpGet]
        [Route("/v3/refrigeranttracking/RefrigerantTypes")]
        [ValidateModelState]
        [ProducesResponseType(statusCode: 200, type: typeof(Object))]
        [ProducesResponseType(statusCode: 400, type: typeof(SCServiceChannelServicesMessagingErrorResponse))]
        public abstract Task<IActionResult> RefrigeranttrackingRefrigerantTypessubscriberIdsubscriberId([FromQuery (Name = "subscriberId")][Required()]int subscriberId);

        /// <summary>
        /// Retrieve retire retrofit plans
        /// </summary>
        /// <param name="request"></param>
        /// <response code="200">OK</response>
        [HttpPost]
        [Route("/v3/refrigeranttracking/retireretrofitplans")]
        [Consumes("application/json", "text/json", "application/xml", "text/xml", "application/x-www-form-urlencoded")]
        [ValidateModelState]
        [ProducesResponseType(statusCode: 200, type: typeof(Object))]
        public abstract Task<IActionResult> RefrigeranttrackingRetireretrofitplans([FromBody]SCServiceChannelServicesMessagingRefrigerantTrackingGetPagedLeakRecordsByFilterRequest request);

        /// <summary>
        /// Add/Update Refrigeration Details for an asset
        /// </summary>
        /// <param name="assetRefrigerant"></param>
        /// <response code="200">OK</response>
        [HttpPost]
        [Route("/v3/refrigeranttracking/SaveRefrigerationDetails")]
        [Consumes("application/json", "text/json", "application/xml", "text/xml", "application/x-www-form-urlencoded")]
        [ValidateModelState]
        [ProducesResponseType(statusCode: 200, type: typeof(Object))]
        public abstract Task<IActionResult> RefrigeranttrackingSaveRefrigerationDetails([FromBody]SCServiceChannelServicesMessagingRefrigerantTrackingEditAssetRefrigerantRequest assetRefrigerant);

        /// <summary>
        /// Get SubscriberIds With RefrigerantTracking Feature Flag
        /// </summary>
        /// <response code="200">Indicates that the request succeeded and that the requested information is in the response.</response>
        /// <response code="400">Bad Request - the request could not be understood or was missing required parameters.              &lt;br/&gt;Error codes:                          &lt;br/&gt; 502 - No Update/Insert Leak Tracking Preferences;</response>
        /// <response code="401">Indicates that the requested resource requires authentication.              &lt;br&gt;Error codes:              &lt;br&gt; 504 - API call rejected by security permissions;</response>
        [HttpGet]
        [Route("/v3/refrigeranttracking/subscribers")]
        [ValidateModelState]
        [ProducesResponseType(statusCode: 200, type: typeof(Object))]
        [ProducesResponseType(statusCode: 400, type: typeof(SCServiceChannelServicesMessagingErrorResponse))]
        [ProducesResponseType(statusCode: 401, type: typeof(SCServiceChannelServicesMessagingErrorResponse))]
        public abstract Task<IActionResult> RefrigeranttrackingSubscribers();

        /// <summary>
        /// Get System Locations
        /// </summary>
        /// <response code="200">Indicates that the request succeeded and that the requested information is in the response.</response>
        [HttpGet]
        [Route("/v3/refrigeranttracking/SystemLocations")]
        [ValidateModelState]
        [ProducesResponseType(statusCode: 200, type: typeof(Object))]
        public abstract Task<IActionResult> RefrigeranttrackingSystemLocations();

        /// <summary>
        /// Update WOLeakVerification
        /// </summary>
        /// <param name="request"></param>
        /// <response code="200">Indicates that the request succeeded.</response>
        /// <response code="404">Indicates that the recId is not found</response>
        /// <response code="500">Indicates that the server encountered an unexpected condition that prevented it from fulfilling the request</response>
        [HttpPut]
        [Route("/v3/refrigeranttracking/WOLeakVerification")]
        [Consumes("application/json", "text/json", "application/xml", "text/xml", "application/x-www-form-urlencoded")]
        [ValidateModelState]
        [ProducesResponseType(statusCode: 200, type: typeof(Object))]
        [ProducesResponseType(statusCode: 404, type: typeof(SCSystemWebHttpResultsNotFoundResult))]
        [ProducesResponseType(statusCode: 500, type: typeof(SCServiceChannelServicesMessagingErrorResponse))]
        public abstract Task<IActionResult> RefrigeranttrackingWOLeakVerification([FromBody]SCServiceChannelServicesMessagingEquipmentsAddUpdatePmLeakVerificationsRequest request);

        /// <summary>
        /// Add WOLeakVerification
        /// </summary>
        /// <param name="request"></param>
        /// <response code="200">Indicates that the request succeeded</response>
        /// <response code="404">Indicates that the recId is not found</response>
        /// <response code="500">Indicates that the server encountered an unexpected condition that prevented it from fulfilling the request</response>
        [HttpPost]
        [Route("/v3/refrigeranttracking/WOLeakVerification")]
        [Consumes("application/json", "text/json", "application/xml", "text/xml", "application/x-www-form-urlencoded")]
        [ValidateModelState]
        [ProducesResponseType(statusCode: 200, type: typeof(Object))]
        [ProducesResponseType(statusCode: 404, type: typeof(SCSystemWebHttpResultsNotFoundResult))]
        [ProducesResponseType(statusCode: 500, type: typeof(SCServiceChannelServicesMessagingErrorResponse))]
        public abstract Task<IActionResult> RefrigeranttrackingWOLeakVerification_0([FromBody]SCServiceChannelServicesMessagingEquipmentsAddUpdatePmLeakVerificationsRequest request);

        /// <summary>
        /// Get WOLeakVerification by tracking number and assetId
        /// </summary>
        /// <param name="trackingNumber"></param>
        /// <response code="200">Indicates that the request succeeded and that the requested information is in the response.</response>
        /// <response code="404">Indicates that the recId is not found</response>
        /// <response code="500">Indicates that the server encountered an unexpected condition that prevented it from fulfilling the request</response>
        [HttpGet]
        [Route("/v3/refrigeranttracking/WOLeakVerification/{trackingNumber}")]
        [ValidateModelState]
        [ProducesResponseType(statusCode: 200, type: typeof(SCServiceChannelApiModelRefrigerantTrackingWOLeakVerificationResponse))]
        [ProducesResponseType(statusCode: 404, type: typeof(SCSystemWebHttpResultsNotFoundResult))]
        [ProducesResponseType(statusCode: 500, type: typeof(SCServiceChannelServicesMessagingErrorResponse))]
        public abstract Task<IActionResult> RefrigeranttrackingWOLeakVerificationtrackingNumber([FromRoute (Name = "trackingNumber")][Required]int trackingNumber);

        /// <summary>
        /// Get Rack Equipment
        /// </summary>
        /// <remarks>RackEquipment</remarks>
        /// <param name="request"></param>
        /// <response code="200">Indicates that the request succeeded and that the requested information is in the response.</response>
        /// <response code="400">Bad Request - the request could not be understood or was missing required parameters.              &lt;br/&gt;Error codes:                         &lt;br/&gt; 502 - No Get Rack Equipments</response>
        /// <response code="401">Indicates that the requested resource requires authentication.              &lt;br&gt;Error codes:              &lt;br&gt; 504 - API call rejected by security permissions;</response>
        [HttpPost]
        [Route("/v3/refrigeranttracking")]
        [Consumes("application/json", "text/json", "application/xml", "text/xml", "application/x-www-form-urlencoded")]
        [ValidateModelState]
        [ProducesResponseType(statusCode: 200, type: typeof(Object))]
        [ProducesResponseType(statusCode: 400, type: typeof(SCServiceChannelServicesMessagingErrorResponse))]
        [ProducesResponseType(statusCode: 401, type: typeof(SCServiceChannelServicesMessagingErrorResponse))]
        public abstract Task<IActionResult> Refrigeranttracking_0([FromBody]SCServiceChannelServicesMessagingEquipmentsGetAvailableRacksRequest request);

        /// <summary>
        /// Get refrigerant usage summary
        /// </summary>
        /// <param name="assetId"></param>
        /// <response code="200">Indicates that the request succeeded and that the requested information is in the response.</response>
        /// <response code="400">Bad Request - the request could not be understood or was missing required parameters.              &lt;br/&gt;Error codes:                          &lt;br/&gt; 502 - No Update/Insert Leak Tracking Preferences;</response>
        /// <response code="401">Indicates that the requested resource requires authentication.              &lt;br&gt;Error codes:              &lt;br&gt; 504 - API call rejected by security permissions;</response>
        [HttpGet]
        [Route("/v3/refrigeranttracking/{assetId}/refrigerantusagesummary")]
        [ValidateModelState]
        [ProducesResponseType(statusCode: 200, type: typeof(Object))]
        [ProducesResponseType(statusCode: 400, type: typeof(SCServiceChannelServicesMessagingErrorResponse))]
        [ProducesResponseType(statusCode: 401, type: typeof(SCServiceChannelServicesMessagingErrorResponse))]
        public abstract Task<IActionResult> RefrigeranttrackingassetIdRefrigerantusagesummary([FromRoute (Name = "assetId")][Required]int assetId);

        /// <summary>
        /// Get refrigerant use types for equipment
        /// </summary>
        /// <param name="assetTypeId"></param>
        /// <response code="200">Indicates that the request succeeded and that the requested information is in the response.</response>
        /// <response code="400">Bad Request - the request could not be understood or was missing required parameters.</response>
        /// <response code="401">Indicates that the requested resource requires authentication.&lt;br&gt;Error codes:&lt;br&gt; 504 - API call rejected by security permissions;</response>
        [HttpGet]
        [Route("/v3/refrigeranttracking/{assetTypeId}/getRefrigerantUseTypes")]
        [ValidateModelState]
        [ProducesResponseType(statusCode: 200, type: typeof(Object))]
        [ProducesResponseType(statusCode: 401, type: typeof(SCServiceChannelServicesMessagingErrorResponse))]
        public abstract Task<IActionResult> RefrigeranttrackingassetTypeIdGetRefrigerantUseTypes([FromRoute (Name = "assetTypeId")][Required]int assetTypeId);

        /// <summary>
        /// Get Refrigerant settings by locationId
        /// </summary>
        /// <remarks>GetRefrigerantSettingsByLocationId</remarks>
        /// <param name="locationId">Location Id</param>
        /// <response code="200">Indicates that the request succeeded and that the requested information is in the response.</response>
        /// <response code="400">Bad Request - the request could not be understood or was missing required parameters.              &lt;br/&gt;Error codes:                         &lt;br/&gt; 502 - No Refrigerant Setings;</response>
        /// <response code="401">Indicates that the requested resource requires authentication.              &lt;br&gt;Error codes:              &lt;br&gt; 504 - API call rejected by security permissions;</response>
        [HttpGet]
        [Route("/v3/refrigeranttracking/{locationId}/GetRefrigerantSettings")]
        [ValidateModelState]
        [ProducesResponseType(statusCode: 200, type: typeof(Object))]
        [ProducesResponseType(statusCode: 400, type: typeof(SCServiceChannelServicesMessagingErrorResponse))]
        [ProducesResponseType(statusCode: 401, type: typeof(SCServiceChannelServicesMessagingErrorResponse))]
        public abstract Task<IActionResult> RefrigeranttrackinglocationIdGetRefrigerantSettings([FromRoute (Name = "locationId")][Required]int locationId);

        /// <summary>
        /// Get Refrigerant Use Reason Codes
        /// </summary>
        /// <remarks>GetRefrigerantUseReasonCodes</remarks>
        /// <param name="subscriberId">Subscriber Id</param>
        /// <response code="200">Indicates that the request succeeded and that the requested information is in the response.</response>
        /// <response code="400">Bad Request - the request could not be understood or was missing required parameters.              &lt;br/&gt;Error codes:                         &lt;br/&gt; 502 - No Get Leak Tracking Preferences;</response>
        /// <response code="401">Indicates that the requested resource requires authentication.              &lt;br&gt;Error codes:              &lt;br&gt; 504 - API call rejected by security permissions;</response>
        [HttpGet]
        [Route("/v3/refrigeranttracking/{subscriberId}/GetRefrigerantUseReasonCodes")]
        [ValidateModelState]
        [ProducesResponseType(statusCode: 200, type: typeof(Object))]
        [ProducesResponseType(statusCode: 400, type: typeof(SCServiceChannelServicesMessagingErrorResponse))]
        [ProducesResponseType(statusCode: 401, type: typeof(SCServiceChannelServicesMessagingErrorResponse))]
        public abstract Task<IActionResult> RefrigeranttrackingsubscriberIdGetRefrigerantUseReasonCodes([FromRoute (Name = "subscriberId")][Required]int subscriberId);

        /// <summary>
        /// Get leak locations
        /// </summary>
        /// <param name="subscriberId"></param>
        /// <response code="200">Indicates that the request succeeded and that the requested information is in the response.</response>
        /// <response code="400">Bad Request - the request could not be understood or was missing required parameters.              &lt;br/&gt;Error codes:                          &lt;br/&gt; 502 - No get Leak Locations;</response>
        /// <response code="401">Indicates that the requested resource requires authentication.              &lt;br&gt;Error codes:              &lt;br&gt; 504 - API call rejected by security permissions;</response>
        [HttpGet]
        [Route("/v3/refrigeranttracking/{subscriberId}/leaklocations")]
        [ValidateModelState]
        [ProducesResponseType(statusCode: 200, type: typeof(Object))]
        [ProducesResponseType(statusCode: 400, type: typeof(SCServiceChannelServicesMessagingErrorResponse))]
        [ProducesResponseType(statusCode: 401, type: typeof(SCServiceChannelServicesMessagingErrorResponse))]
        public abstract Task<IActionResult> RefrigeranttrackingsubscriberIdLeaklocations([FromRoute (Name = "subscriberId")][Required]int subscriberId);

        /// <summary>
        /// Get Leak Tracking Preferences
        /// </summary>
        /// <remarks>GetLeakTrackingPreferences</remarks>
        /// <param name="subscriberId">Subscriber Id</param>
        /// <response code="200">Indicates that the request succeeded and that the requested information is in the response.</response>
        /// <response code="400">Bad Request - the request could not be understood or was missing required parameters.              &lt;br/&gt;Error codes:                         &lt;br/&gt; 502 - No Get Leak Tracking Preferences;</response>
        /// <response code="401">Indicates that the requested resource requires authentication.              &lt;br&gt;Error codes:              &lt;br&gt; 504 - API call rejected by security permissions;</response>
        [HttpGet]
        [Route("/v3/refrigeranttracking")]
        [ValidateModelState]
        [ProducesResponseType(statusCode: 200, type: typeof(Object))]
        [ProducesResponseType(statusCode: 400, type: typeof(SCServiceChannelServicesMessagingErrorResponse))]
        [ProducesResponseType(statusCode: 401, type: typeof(SCServiceChannelServicesMessagingErrorResponse))]
        public abstract Task<IActionResult> RefrigeranttrackingsubscriberIdsubscriberId([FromQuery (Name = "subscriberId")][Required()]int subscriberId);

        /// <summary>
        /// Retrieve leak record by tracking number
        /// </summary>
        /// <param name="trackingNumber"></param>
        /// <response code="200">OK</response>
        [HttpGet]
        [Route("/v3/refrigeranttracking/{trackingNumber}/leakRecord")]
        [ValidateModelState]
        [ProducesResponseType(statusCode: 200, type: typeof(Object))]
        public abstract Task<IActionResult> RefrigeranttrackingtrackingNumberLeakRecord([FromRoute (Name = "trackingNumber")][Required]int trackingNumber);

        /// <summary>
        /// Check If Used Refrigerant Is Valid For Invoiceble Statuses
        /// </summary>
        /// <param name="workOrderId"></param>
        /// <param name="refrigerantWasUsed"></param>
        /// <response code="200">Indicates that the request succeeded and that the requested information is in the response.</response>
        [HttpGet]
        [Route("/v3/refrigeranttracking/{workOrderId}/checkRefrigerantWasUsedIsValidForInvoiceableStatuses")]
        [ValidateModelState]
        [ProducesResponseType(statusCode: 200, type: typeof(Object))]
        public abstract Task<IActionResult> RefrigeranttrackingworkOrderIdCheckRefrigerantWasUsedIsValidForInvoiceableStatusesrefrigerantWasUsedrefrigerantWasUsed([FromRoute (Name = "workOrderId")][Required]int workOrderId, [FromQuery (Name = "refrigerantWasUsed")]string? refrigerantWasUsed);

        /// <summary>
        /// Create Leak Record Follow Up WorkOrder
        /// </summary>
        /// <param name="workOrderId"></param>
        /// <response code="200">Indicates that the request succeeded and that the requested information is in the response.</response>
        [HttpPost]
        [Route("/v3/refrigeranttracking/{workOrderId}/createLeakRecordFollowUpWoForStatusUpdate")]
        [ValidateModelState]
        [ProducesResponseType(statusCode: 200, type: typeof(Object))]
        public abstract Task<IActionResult> RefrigeranttrackingworkOrderIdCreateLeakRecordFollowUpWoForStatusUpdate([FromRoute (Name = "workOrderId")][Required]int workOrderId);

        /// <summary>
        /// Check If WO Status Is Limited By RTSetup
        /// </summary>
        /// <param name="workOrderId"></param>
        /// <response code="200">Indicates that the request succeeded and that the requested information is in the response.</response>
        [HttpGet]
        [Route("/v3/refrigeranttracking/{workOrderId}/isCompletedStatusesLimitedByRTSetup")]
        [ValidateModelState]
        [ProducesResponseType(statusCode: 200, type: typeof(Object))]
        public abstract Task<IActionResult> RefrigeranttrackingworkOrderIdIsCompletedStatusesLimitedByRTSetup([FromRoute (Name = "workOrderId")][Required]int workOrderId);
    }
}
