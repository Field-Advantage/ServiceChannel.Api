/*
 * ServiceChannel API - v.3
 *
 * The ServiceChannel API is a RESTful and stateless API. It accepts standard HTTP verbs and supports OAuth 2.0 for authorizing requests.      Our API returns common HTTP status codes as well as JSON encapsulated data.      See [API Overview](https://developer.servicechannel.com/basics/introduction/overview/) for the intro to ServiceChannel API.<br>      <h3>Authentication and Authorization</h3>You should have a ServiceChannel account, register your application, and obtain `access_token` to integrate with our API.      See [Authentication and Authorization](https://developer.servicechannel.com/basics/general/authentication/) for more information.      To use this API playground, click **Authorize** and sign in to ServiceChannel.<br>      <h3>Environment</h3> All calls in this API Reference point to the **SB2 environment**.      See [Environments](https://developer.servicechannel.com/basics/general/environments/) for more information.<br>      <h3>API Version</h3>The current stable version of the ServiceChannel API is `v3`. In the request URL, `v3` is a version prefix that should be present.      When you omit the version prefix, calls point to the minimum supported version of the API.      We recommend you to always specify the API version to avoid possible errors.
 *
 * The version of the OpenAPI document: 3
 * 
 * Generated by: https://openapi-generator.tech
 */

using System;
using System.Collections.Generic;
using System.ComponentModel.DataAnnotations;
using System.Threading;
using System.Threading.Tasks;
using Microsoft.AspNetCore.Authorization;
using Microsoft.AspNetCore.Mvc;
using Microsoft.AspNetCore.Http;
using ServiceChannel.OpenAPIGenerated.Api.Attributes;
using ServiceChannel.OpenAPIGenerated.Api.Models;

namespace ServiceChannel.OpenAPIGenerated.Api.Controllers
{ 
    /// <summary>
    /// 
    /// </summary>
    [ApiController]
    public abstract class IssueListApiController : ControllerBase
    { 
        /// <summary>
        /// 
        /// </summary>
        /// <param name="subscriberId"></param>
        /// <response code="200">OK</response>
        [HttpGet]
        [Route("/v3/api/subscribers/{subscriberId}/issuelist/headers")]
        [ValidateModelState]
        [ProducesResponseType(statusCode: 200, type: typeof(Object))]
        public abstract Task<IActionResult> ApiSubscriberssubscriberIdIssuelistHeaders([FromRoute (Name = "subscriberId")][Required]int subscriberId);

        /// <summary>
        /// The post.
        /// </summary>
        /// <param name="subscriberId"></param>
        /// <param name="request">The request.</param>
        /// <response code="200">OK</response>
        [HttpPost]
        [Route("/v3/api/subscribers/{subscriberId}/issuelists")]
        [Consumes("application/json", "text/json", "application/xml", "text/xml", "application/x-www-form-urlencoded")]
        [ValidateModelState]
        [ProducesResponseType(statusCode: 200, type: typeof(Object))]
        public abstract Task<IActionResult> ApiSubscriberssubscriberIdIssuelists([FromRoute (Name = "subscriberId")][Required]string subscriberId, [FromBody]SCServiceChannelServicesMessagingIssueListsPostIssueListRequest request);

        /// <summary>
        /// The get issue list history.
        /// </summary>
        /// <param name="subscriberId">The subscriber id.</param>
        /// <param name="pageIndex">The page index.</param>
        /// <param name="pageSize">The page size.</param>
        /// <response code="200">OK</response>
        [HttpGet]
        [Route("/v3/api/subscribers/{subscriberId}/issuelists/history")]
        [ValidateModelState]
        [ProducesResponseType(statusCode: 200, type: typeof(Object))]
        public abstract Task<IActionResult> ApiSubscriberssubscriberIdIssuelistsHistorypageIndexpageIndexpageSizepageSize([FromRoute (Name = "subscriberId")][Required]int subscriberId, [FromQuery (Name = "pageIndex")]int? pageIndex, [FromQuery (Name = "pageSize")]int? pageSize);

        /// <summary>
        /// The post.
        /// </summary>
        /// <param name="subscriberId">The subscriber Id.</param>
        /// <param name="pageIndex">The page index.</param>
        /// <param name="pageSize">The page size.</param>
        /// <response code="200">OK</response>
        [HttpGet]
        [Route("/v3/api/subscribers/{subscriberId}/issuelists")]
        [ValidateModelState]
        [ProducesResponseType(statusCode: 200, type: typeof(Object))]
        public abstract Task<IActionResult> ApiSubscriberssubscriberIdIssuelistspageIndexpageIndexpageSizepageSize([FromRoute (Name = "subscriberId")][Required]int subscriberId, [FromQuery (Name = "pageIndex")]int? pageIndex, [FromQuery (Name = "pageSize")]int? pageSize);

        /// <summary>
        /// The get.
        /// </summary>
        /// <param name="subscriberId">The subscriber id.</param>
        /// <param name="equipmentType">The Equipment Type.</param>
        /// <param name="locationId">The location id.</param>
        /// <param name="setupId"></param>
        /// <response code="200">OK</response>
        [HttpGet]
        [Route("/v3/api/subscribers/{subscriberId}/storedashboards/issuelist/items")]
        [ValidateModelState]
        [ProducesResponseType(statusCode: 200, type: typeof(Object))]
        public abstract Task<IActionResult> ApiSubscriberssubscriberIdStoredashboardsIssuelistItemsequipmentTypeequipmentTypelocationIdlocationIdsetupIdsetupId([FromRoute (Name = "subscriberId")][Required]int subscriberId, [FromQuery (Name = "equipmentType")][Required()]string equipmentType, [FromQuery (Name = "locationId")]int? locationId, [FromQuery (Name = "setupId")]int? setupId);

        /// <summary>
        /// The get.
        /// </summary>
        /// <param name="subscriberId">The subscriber id.</param>
        /// <param name="dashboardId">The dashboard id.</param>
        /// <response code="200">OK</response>
        [HttpGet]
        [Route("/v3/api/subscribers/{subscriberId}/storedashboards/{dashboardId}/issuelist")]
        [ValidateModelState]
        [ProducesResponseType(statusCode: 200, type: typeof(Object))]
        public abstract Task<IActionResult> ApiSubscriberssubscriberIdStoredashboardsdashboardIdIssuelist([FromRoute (Name = "subscriberId")][Required]int subscriberId, [FromRoute (Name = "dashboardId")][Required]int dashboardId);

        /// <summary>
        /// The get items filtered by area type and location.
        /// </summary>
        /// <param name="subscriberId">The subsriber id.</param>
        /// <param name="dashboardId">The dashboard id.</param>
        /// <param name="areaId">The area Id.</param>
        /// <param name="problemType">The problem type.</param>
        /// <param name="locationId">The location id.</param>
        /// <response code="200">OK</response>
        [HttpGet]
        [Route("/v3/api/subscribers/{subscriberId}/storedashboards/{dashboardId}/issuelist/areas/{areaId}/items")]
        [ValidateModelState]
        [ProducesResponseType(statusCode: 200, type: typeof(Object))]
        public abstract Task<IActionResult> ApiSubscriberssubscriberIdStoredashboardsdashboardIdIssuelistAreasareaIdItemsproblemTypeproblemTypelocationIdlocationId([FromRoute (Name = "subscriberId")][Required]int subscriberId, [FromRoute (Name = "dashboardId")][Required]int dashboardId, [FromRoute (Name = "areaId")][Required]int areaId, [FromQuery (Name = "problemType")][Required()]string problemType, [FromQuery (Name = "locationId")][Required()]int locationId);

        /// <summary>
        /// The get problems filtered by area type and location.
        /// </summary>
        /// <param name="subscriberId">The subsriber id.</param>
        /// <param name="dashboardId">The dashboard id.</param>
        /// <param name="areaId">The area id.</param>
        /// <param name="problemType">The problem type.</param>
        /// <param name="item">The item.</param>
        /// <response code="200">OK</response>
        [HttpGet]
        [Route("/v3/api/subscribers/{subscriberId}/storedashboards/{dashboardId}/issuelist/areas/{areaId}/problems")]
        [ValidateModelState]
        [ProducesResponseType(statusCode: 200, type: typeof(Object))]
        public abstract Task<IActionResult> ApiSubscriberssubscriberIdStoredashboardsdashboardIdIssuelistAreasareaIdProblemsproblemTypeproblemTypeitemitem([FromRoute (Name = "subscriberId")][Required]int subscriberId, [FromRoute (Name = "dashboardId")][Required]int dashboardId, [FromRoute (Name = "areaId")][Required]int areaId, [FromQuery (Name = "problemType")][Required()]string problemType, [FromQuery (Name = "item")][Required()]string item);

        /// <summary>
        /// The get problem types.
        /// </summary>
        /// <param name="subscriberId">The subscriber id.</param>
        /// <param name="dashboardId">The dashboard id.</param>
        /// <param name="areaId">The area id.</param>
        /// <response code="200">OK</response>
        [HttpGet]
        [Route("/v3/api/subscribers/{subscriberId}/storedashboards/{dashboardId}/issuelist/areas/{areaId}/problemtypes")]
        [ValidateModelState]
        [ProducesResponseType(statusCode: 200, type: typeof(Object))]
        public abstract Task<IActionResult> ApiSubscriberssubscriberIdStoredashboardsdashboardIdIssuelistAreasareaIdProblemtypes([FromRoute (Name = "subscriberId")][Required]int subscriberId, [FromRoute (Name = "dashboardId")][Required]int dashboardId, [FromRoute (Name = "areaId")][Required]int areaId);

        /// <summary>
        /// The get global fields.
        /// </summary>
        /// <param name="subscriberId">The subscriber id.</param>
        /// <param name="dashboardId">The dashboard id.</param>
        /// <response code="200">OK</response>
        [HttpGet]
        [Route("/v3/api/subscribers/{subscriberId}/storedashboards/{dashboardId}/issuelist/fields")]
        [ValidateModelState]
        [ProducesResponseType(statusCode: 200, type: typeof(Object))]
        public abstract Task<IActionResult> ApiSubscriberssubscriberIdStoredashboardsdashboardIdIssuelistFields([FromRoute (Name = "subscriberId")][Required]int subscriberId, [FromRoute (Name = "dashboardId")][Required]int dashboardId);

        /// <summary>
        /// The get issue choice.
        /// </summary>
        /// <param name="subscriberId"></param>
        /// <param name="dashboardId"></param>
        /// <param name="request">Get Issue Choice request</param>
        /// <response code="200">OK</response>
        [HttpGet]
        [Route("/v3/api/subscribers/{subscriberId}/storedashboards/{dashboardId}/issuelist/issuechoice")]
        [Consumes("application/json", "text/json", "application/xml", "text/xml", "application/x-www-form-urlencoded")]
        [ValidateModelState]
        [ProducesResponseType(statusCode: 200, type: typeof(Object))]
        public abstract Task<IActionResult> ApiSubscriberssubscriberIdStoredashboardsdashboardIdIssuelistIssuechoice([FromRoute (Name = "subscriberId")][Required]string subscriberId, [FromRoute (Name = "dashboardId")][Required]string dashboardId, [FromBody]SCServiceChannelServicesMessagingIssueListsGetIssueChoiceRequest request);

        /// <summary>
        /// The get issue choice fiels.
        /// </summary>
        /// <param name="subscriberId">The subscriber id.</param>
        /// <param name="dashboardId">The dashboard id.</param>
        /// <param name="problemType">The problem type.</param>
        /// <param name="item">The item.</param>
        /// <param name="problem">The problem.</param>
        /// <response code="200">OK</response>
        [HttpGet]
        [Route("/v3/api/subscribers/{subscriberId}/storedashboards/{dashboardId}/issuelist/issuechoice/fields")]
        [ValidateModelState]
        [ProducesResponseType(statusCode: 200, type: typeof(Object))]
        public abstract Task<IActionResult> ApiSubscriberssubscriberIdStoredashboardsdashboardIdIssuelistIssuechoiceFieldsproblemTypeproblemTypeitemitemproblemproblem([FromRoute (Name = "subscriberId")][Required]int subscriberId, [FromRoute (Name = "dashboardId")][Required]int dashboardId, [FromQuery (Name = "problemType")][Required()]string problemType, [FromQuery (Name = "item")][Required()]string item, [FromQuery (Name = "problem")][Required()]string problem);

        /// <summary>
        /// The set issue list for dashboard.
        /// </summary>
        /// <param name="subscriberId"></param>
        /// <param name="dashboardId"></param>
        /// <param name="issueListId"></param>
        /// <param name="request">The request.</param>
        /// <response code="200">OK</response>
        [HttpPut]
        [Route("/v3/api/subscribers/{subscriberId}/storedashboards/{dashboardId}/issuelist/{issueListId}")]
        [Consumes("application/json", "text/json", "application/xml", "text/xml", "application/x-www-form-urlencoded")]
        [ValidateModelState]
        [ProducesResponseType(statusCode: 200, type: typeof(Object))]
        public abstract Task<IActionResult> ApiSubscriberssubscriberIdStoredashboardsdashboardIdIssuelistissueListId([FromRoute (Name = "subscriberId")][Required]string subscriberId, [FromRoute (Name = "dashboardId")][Required]string dashboardId, [FromRoute (Name = "issueListId")][Required]string issueListId, [FromBody]SCServiceChannelServicesMessagingIssueListsSetIssueListForDashboardRequest request);

        /// <summary>
        /// Get Areas
        /// </summary>
        /// <remarks>List Issue Areas. Returns Issue Areas for successful request.              &lt;br /&gt;&lt;br /&gt;Available for subscriber usage.</remarks>
        /// <param name="locationId">selected locationId.</param>
        /// <param name="setupId">Numeric id of the Store Dashboard setup.</param>
        /// <response code="200">Indicates that the request succeeded and that the requested information is in the response.</response>
        /// <response code="400">Bad Request - the request could not be understood or was missing required parameters.              &lt;br/&gt;Error codes:              &lt;br/&gt; 1000 - Invalid setupId(dashboard) for current user;</response>
        /// <response code="401">Indicates that the requested resource requires authentication.              &lt;br/&gt;Error codes:              &lt;br/&gt; 504 - API call rejected by security permissions;</response>
        /// <response code="500">Indicates that a generic error has occurred on the server.</response>
        [HttpGet]
        [Route("/v3/issuelist/areas")]
        [ValidateModelState]
        [ProducesResponseType(statusCode: 200, type: typeof(SCServiceChannelServicesMessagingIssueListsGetIssueAreasResponse))]
        [ProducesResponseType(statusCode: 400, type: typeof(SCServiceChannelServicesMessagingErrorResponse))]
        [ProducesResponseType(statusCode: 401, type: typeof(SCServiceChannelServicesMessagingErrorResponse))]
        [ProducesResponseType(statusCode: 500, type: typeof(SCServiceChannelServicesMessagingErrorResponse))]
        public abstract Task<IActionResult> IssuelistAreaslocationIdlocationIdsetupIdsetupId([FromQuery (Name = "locationId")]int? locationId, [FromQuery (Name = "setupId")]int? setupId);

        /// <summary>
        /// 
        /// </summary>
        /// <param name="id"></param>
        /// <param name="setupId"></param>
        /// <response code="200">OK</response>
        [HttpGet]
        [Route("/v3/issuelist/field")]
        [ValidateModelState]
        [ProducesResponseType(statusCode: 200, type: typeof(Object))]
        public abstract Task<IActionResult> IssuelistFieldididsetupIdsetupId([FromQuery (Name = "id")][Required()]string id, [FromQuery (Name = "setupId")]int? setupId);

        /// <summary>
        /// The get global fields. Authorized version of &#39;storedashboards/{dashboardId:int}/issuelist/fields&#39;
        /// </summary>
        /// <param name="locationId"></param>
        /// <param name="subscriberId"></param>
        /// <param name="setupId"></param>
        /// <response code="200">OK</response>
        [HttpGet]
        [Route("/v3/issuelist/globalfields")]
        [ValidateModelState]
        [ProducesResponseType(statusCode: 200, type: typeof(Object))]
        public abstract Task<IActionResult> IssuelistGlobalfieldslocationIdlocationIdsubscriberIdsubscriberIdsetupIdsetupId([FromQuery (Name = "locationId")]int? locationId, [FromQuery (Name = "subscriberId")]int? subscriberId, [FromQuery (Name = "setupId")]int? setupId);

        /// <summary>
        /// The get issue choice info.
        /// </summary>
        /// <param name="trackingNumber">The Tracking Number.</param>
        /// <response code="200">OK</response>
        [HttpGet]
        [Route("/v3/issuelist/issuechoiceinfo/{trackingNumber}")]
        [ValidateModelState]
        [ProducesResponseType(statusCode: 200, type: typeof(Object))]
        public abstract Task<IActionResult> IssuelistIssuechoiceinfotrackingNumber([FromRoute (Name = "trackingNumber")][Required]int trackingNumber);

        /// <summary>
        /// 
        /// </summary>
        /// <param name="problemType"></param>
        /// <param name="equipmentType"></param>
        /// <param name="problemCode"></param>
        /// <param name="locationId"></param>
        /// <param name="setupId"></param>
        /// <response code="200">OK</response>
        [HttpGet]
        [Route("/v3/issuelist/issuechoice")]
        [ValidateModelState]
        [ProducesResponseType(statusCode: 200, type: typeof(Object))]
        public abstract Task<IActionResult> IssuelistIssuechoiceproblemTypeproblemTypeequipmentTypeequipmentTypeproblemCodeproblemCodelocationIdlocationIdsetupIdsetupId([FromQuery (Name = "problemType")][Required()]string problemType, [FromQuery (Name = "equipmentType")][Required()]string equipmentType, [FromQuery (Name = "problemCode")][Required()]string problemCode, [FromQuery (Name = "locationId")][Required()]int locationId, [FromQuery (Name = "setupId")]int? setupId);

        /// <summary>
        /// Get Equipment items
        /// </summary>
        /// <remarks>List equipment items.              &lt;br /&gt;&lt;br /&gt;Available for subscriber usage.</remarks>
        /// <param name="locationId">Numeric id of the Location.</param>
        /// <param name="areaId">Numeric id of the Location Area.</param>
        /// <param name="problemType">Problem type.</param>
        /// <param name="setupId">Numeric id of the Store Dashboard setup.</param>
        /// <response code="200">Indicates that the request succeeded and that the requested information is in the response.</response>
        /// <response code="400">Bad Request - the request could not be understood or was missing required parameters.              &lt;br/&gt;Error codes:              &lt;br/&gt; 1000 - Invalid setupId(dashboard) for current user;              &lt;br/&gt; 1001 - No issue list is available, please load it through issue list converter;</response>
        /// <response code="401">Indicates that the requested resource requires authentication.              &lt;br/&gt;Error codes:              &lt;br/&gt; 504 - API call rejected by security permissions;</response>
        /// <response code="500">Indicates that a generic error has occurred on the server.</response>
        [HttpGet]
        [Route("/v3/issuelist/items")]
        [ValidateModelState]
        [ProducesResponseType(statusCode: 200, type: typeof(SCServiceChannelServicesMessagingIssueListsGetIssueEquipmentTypesResponse))]
        [ProducesResponseType(statusCode: 400, type: typeof(SCServiceChannelServicesMessagingErrorResponse))]
        [ProducesResponseType(statusCode: 401, type: typeof(SCServiceChannelServicesMessagingErrorResponse))]
        [ProducesResponseType(statusCode: 500, type: typeof(SCServiceChannelServicesMessagingErrorResponse))]
        public abstract Task<IActionResult> IssuelistItemslocationIdlocationIdareaIdareaIdproblemTypeproblemTypesetupIdsetupId([FromQuery (Name = "locationId")][Required()]int locationId, [FromQuery (Name = "areaId")][Required()]int areaId, [FromQuery (Name = "problemType")][Required()]string problemType, [FromQuery (Name = "setupId")]int? setupId);

        /// <summary>
        /// Get Problem codes
        /// </summary>
        /// <remarks>List problem codes.              &lt;br /&gt;&lt;br /&gt;Available for subscriber usage.</remarks>
        /// <param name="areaId">Numeric id of the Location Area.</param>
        /// <param name="problemType">Problem type.</param>
        /// <param name="equipmentType">Equipment type.</param>
        /// <param name="locationId">selected locationId.</param>
        /// <param name="setupId">Numeric id of the Store Dashboard setup.</param>
        /// <response code="200">Indicates that the request succeeded and that the requested information is in the response.</response>
        /// <response code="400">Bad Request - the request could not be understood or was missing required parameters.              &lt;br/&gt;Error codes:              &lt;br/&gt; 1000 - Invalid setupId(dashboard) for current user;              &lt;br/&gt; 1001 - No issue list is available, please load it through issue list converter;</response>
        /// <response code="401">Indicates that the requested resource requires authentication.              &lt;br/&gt;Error codes:              &lt;br/&gt; 504 - API call rejected by security permissions;</response>
        /// <response code="500">Indicates that a generic error has occurred on the server.</response>
        [HttpGet]
        [Route("/v3/issuelist/problems")]
        [ValidateModelState]
        [ProducesResponseType(statusCode: 200, type: typeof(SCServiceChannelServicesMessagingIssueListsGetProblemsFilteredByAreaTypeAndLocationResponse))]
        [ProducesResponseType(statusCode: 400, type: typeof(SCServiceChannelServicesMessagingErrorResponse))]
        [ProducesResponseType(statusCode: 401, type: typeof(SCServiceChannelServicesMessagingErrorResponse))]
        [ProducesResponseType(statusCode: 500, type: typeof(SCServiceChannelServicesMessagingErrorResponse))]
        public abstract Task<IActionResult> IssuelistProblemsareaIdareaIdproblemTypeproblemTypeequipmentTypeequipmentTypelocationIdlocationIdsetupIdsetupId([FromQuery (Name = "areaId")][Required()]int areaId, [FromQuery (Name = "problemType")][Required()]string problemType, [FromQuery (Name = "equipmentType")][Required()]string equipmentType, [FromQuery (Name = "locationId")]int? locationId, [FromQuery (Name = "setupId")]int? setupId);

        /// <summary>
        /// Get Problem types
        /// </summary>
        /// <remarks>List Problem types. Returns Problem types for successful request.</remarks>
        /// <param name="areaId">Numeric id of the Location Area.</param>
        /// <param name="locationId">Numeric id of location.</param>
        /// <param name="setupId">Numeric id of the Store Dashboard setup.</param>
        /// <param name="subscriberId">Numeric id of subscriber.</param>
        /// <response code="200">Indicates that the request succeeded and that the requested information is in the response.</response>
        /// <response code="400">Bad Request - the request could not be understood or was missing required parameters.              &lt;br/&gt;Error codes:              &lt;br/&gt; 1000 - Invalid setupId(dashboard) for current user;              &lt;br/&gt; 1001 - No issue list is available, please load it through issue list converter;</response>
        /// <response code="401">Indicates that the requested resource requires authentication.              &lt;br/&gt;Error codes:              &lt;br/&gt; 504 - API call rejected by security permissions;</response>
        [HttpGet]
        [Route("/v3/issuelist/problemtypes")]
        [ValidateModelState]
        [ProducesResponseType(statusCode: 200, type: typeof(SCServiceChannelServicesMessagingIssueListsGetProblemTypesResponse))]
        [ProducesResponseType(statusCode: 400, type: typeof(SCServiceChannelServicesMessagingErrorResponse))]
        [ProducesResponseType(statusCode: 401, type: typeof(SCServiceChannelServicesMessagingErrorResponse))]
        public abstract Task<IActionResult> IssuelistProblemtypesareaIdareaIdlocationIdlocationIdsetupIdsetupIdsubscriberIdsubscriberId([FromQuery (Name = "areaId")][Required()]int areaId, [FromQuery (Name = "locationId")]int? locationId, [FromQuery (Name = "setupId")]int? setupId, [FromQuery (Name = "subscriberId")]int? subscriberId);

        /// <summary>
        /// Get Problem types
        /// </summary>
        /// <remarks>List Problem types. Returns Problem types for successful request.</remarks>
        /// <param name="areaId">Numeric id of the Location Area.</param>
        /// <param name="locationId">Numeric id of location.</param>
        /// <param name="setupId">Numeric id of the Store Dashboard setup.</param>
        /// <param name="subscriberId">Numeric id of subscriber.</param>
        /// <response code="200">Indicates that the request succeeded and that the requested information is in the response.</response>
        /// <response code="400">Bad Request - the request could not be understood or was missing required parameters.              &lt;br/&gt;Error codes:              &lt;br/&gt; 1000 - Invalid setupId(dashboard) for current user;              &lt;br/&gt; 1001 - No issue list is available, please load it through issue list converter;</response>
        /// <response code="401">Indicates that the requested resource requires authentication.              &lt;br/&gt;Error codes:              &lt;br/&gt; 504 - API call rejected by security permissions;</response>
        [HttpGet]
        [Route("/v3/providers/current/applicationissuelist/areas/{areaId}/problemtypes")]
        [ValidateModelState]
        [ProducesResponseType(statusCode: 200, type: typeof(SCServiceChannelServicesMessagingIssueListsGetProblemTypesResponse))]
        [ProducesResponseType(statusCode: 400, type: typeof(SCServiceChannelServicesMessagingErrorResponse))]
        [ProducesResponseType(statusCode: 401, type: typeof(SCServiceChannelServicesMessagingErrorResponse))]
        public abstract Task<IActionResult> ProvidersCurrentApplicationissuelistAreasareaIdProblemtypeslocationIdlocationIdsetupIdsetupIdsubscriberIdsubscriberId([FromRoute (Name = "areaId")][Required]int areaId, [FromQuery (Name = "locationId")]int? locationId, [FromQuery (Name = "setupId")]int? setupId, [FromQuery (Name = "subscriberId")]int? subscriberId);

        /// <summary>
        /// 
        /// </summary>
        /// <param name="subscriberId"></param>
        /// <param name="locationId"></param>
        /// <param name="areaId"></param>
        /// <param name="trade"></param>
        /// <param name="problemType"></param>
        /// <response code="200">OK</response>
        [HttpGet]
        [Route("/v3/providers/current/applicationissuelist/issueitems")]
        [ValidateModelState]
        [ProducesResponseType(statusCode: 200, type: typeof(Object))]
        public abstract Task<IActionResult> ProvidersCurrentApplicationissuelistIssueitemssubscriberIdsubscriberIdlocationIdlocationIdareaIdareaIdtradetradeproblemTypeproblemType([FromQuery (Name = "subscriberId")][Required()]int subscriberId, [FromQuery (Name = "locationId")][Required()]int locationId, [FromQuery (Name = "areaId")][Required()]int areaId, [FromQuery (Name = "trade")][Required()]string trade, [FromQuery (Name = "problemType")][Required()]string problemType);

        /// <summary>
        /// Get Areas
        /// </summary>
        /// <remarks>List Issue Areas. Returns Issue Areas for successful request.              &lt;br /&gt;&lt;br /&gt;Available for provider usage.</remarks>
        /// <param name="subscriberId">The subscriber id is required.</param>
        /// <param name="locationId">Numeric id of location.</param>
        /// <response code="200">Indicates that the request succeeded and that the requested information is in the response.</response>
        /// <response code="400">Bad Request - the request could not be understood or was missing required parameters.              &lt;br/&gt;Error codes:              &lt;br/&gt; 1000 - Invalid setupId(dashboard) for current user;</response>
        /// <response code="401">Indicates that the requested resource requires authentication.              &lt;br/&gt;Error codes:              &lt;br/&gt; 504 - API call rejected by security permissions;</response>
        /// <response code="500">Indicates that a generic error has occurred on the server.</response>
        [HttpGet]
        [Route("/v3/providers/current/subscribers/{subscriberId}/applicationissuelist/areas")]
        [ValidateModelState]
        [ProducesResponseType(statusCode: 200, type: typeof(SCServiceChannelServicesMessagingIssueListsGetIssueAreasResponse))]
        [ProducesResponseType(statusCode: 400, type: typeof(SCServiceChannelServicesMessagingErrorResponse))]
        [ProducesResponseType(statusCode: 401, type: typeof(SCServiceChannelServicesMessagingErrorResponse))]
        [ProducesResponseType(statusCode: 500, type: typeof(SCServiceChannelServicesMessagingErrorResponse))]
        public abstract Task<IActionResult> ProvidersCurrentSubscriberssubscriberIdApplicationissuelistAreaslocationIdlocationId([FromRoute (Name = "subscriberId")][Required]int subscriberId, [FromQuery (Name = "locationId")]int? locationId);

        /// <summary>
        /// The get global fields. Authorized version of &#39;storedashboards/{dashboardId:int}/issuelist/fields&#39;
        /// </summary>
        /// <param name="subscriberId">The subscriber id is required.</param>
        /// <param name="locationId">Numeric id of location.</param>
        /// <response code="200">OK</response>
        [HttpGet]
        [Route("/v3/providers/current/subscribers/{subscriberId}/applicationissuelist/globalfields")]
        [ValidateModelState]
        [ProducesResponseType(statusCode: 200, type: typeof(Object))]
        public abstract Task<IActionResult> ProvidersCurrentSubscriberssubscriberIdApplicationissuelistGlobalfieldslocationIdlocationId([FromRoute (Name = "subscriberId")][Required]int subscriberId, [FromQuery (Name = "locationId")]int? locationId);

        /// <summary>
        /// Get Equipment items
        /// </summary>
        /// <remarks>List equipment items.              &lt;br /&gt;&lt;br /&gt;Available for provider usage.</remarks>
        /// <param name="subscriberId">This parameter is required.</param>
        /// <param name="locationId">Numeric id of the Location.</param>
        /// <param name="areaId">Numeric id of the Location Area.</param>
        /// <param name="problemType">Problem type.</param>
        /// <response code="200">Indicates that the request succeeded and that the requested information is in the response.</response>
        /// <response code="400">Bad Request - the request could not be understood or was missing required parameters.              &lt;br/&gt;Error codes:              &lt;br/&gt; 1000 - Invalid setupId(dashboard) for current user;              &lt;br/&gt; 1001 - No issue list is available, please load it through issue list converter;</response>
        /// <response code="401">Indicates that the requested resource requires authentication.              &lt;br/&gt;Error codes:              &lt;br/&gt; 504 - API call rejected by security permissions;</response>
        /// <response code="500">Indicates that a generic error has occurred on the server.</response>
        [HttpGet]
        [Route("/v3/providers/current/subscribers/{subscriberId}/applicationissuelist/items")]
        [ValidateModelState]
        [ProducesResponseType(statusCode: 200, type: typeof(SCServiceChannelServicesMessagingIssueListsGetIssueEquipmentTypesResponse))]
        [ProducesResponseType(statusCode: 400, type: typeof(SCServiceChannelServicesMessagingErrorResponse))]
        [ProducesResponseType(statusCode: 401, type: typeof(SCServiceChannelServicesMessagingErrorResponse))]
        [ProducesResponseType(statusCode: 500, type: typeof(SCServiceChannelServicesMessagingErrorResponse))]
        public abstract Task<IActionResult> ProvidersCurrentSubscriberssubscriberIdApplicationissuelistItemslocationIdlocationIdareaIdareaIdproblemTypeproblemType([FromRoute (Name = "subscriberId")][Required]int subscriberId, [FromQuery (Name = "locationId")][Required()]int locationId, [FromQuery (Name = "areaId")][Required()]int areaId, [FromQuery (Name = "problemType")][Required()]string problemType);

        /// <summary>
        /// Get Problem codes
        /// </summary>
        /// <remarks>List problem codes.              &lt;br /&gt;&lt;br /&gt;Available for provider usage.</remarks>
        /// <param name="subscriberId">This parametr is required.</param>
        /// <param name="areaId">Numeric id of the Location Area.</param>
        /// <param name="problemType">Problem type.</param>
        /// <param name="equipmentType">Equipment type.</param>
        /// <param name="locationId">Numeric id of location.</param>
        /// <response code="200">Indicates that the request succeeded and that the requested information is in the response.</response>
        /// <response code="400">Bad Request - the request could not be understood or was missing required parameters.              &lt;br/&gt;Error codes:              &lt;br/&gt; 1000 - Invalid setupId(dashboard) for current user;              &lt;br/&gt; 1001 - No issue list is available, please load it through issue list converter;</response>
        /// <response code="401">Indicates that the requested resource requires authentication.              &lt;br/&gt;Error codes:              &lt;br/&gt; 504 - API call rejected by security permissions;</response>
        /// <response code="500">Indicates that a generic error has occurred on the server.</response>
        [HttpGet]
        [Route("/v3/providers/current/subscribers/{subscriberId}/applicationissuelist/problems")]
        [ValidateModelState]
        [ProducesResponseType(statusCode: 200, type: typeof(SCServiceChannelServicesMessagingIssueListsGetProblemsFilteredByAreaTypeAndLocationResponse))]
        [ProducesResponseType(statusCode: 400, type: typeof(SCServiceChannelServicesMessagingErrorResponse))]
        [ProducesResponseType(statusCode: 401, type: typeof(SCServiceChannelServicesMessagingErrorResponse))]
        [ProducesResponseType(statusCode: 500, type: typeof(SCServiceChannelServicesMessagingErrorResponse))]
        public abstract Task<IActionResult> ProvidersCurrentSubscriberssubscriberIdApplicationissuelistProblemsareaIdareaIdproblemTypeproblemTypeequipmentTypeequipmentTypelocationIdlocationId([FromRoute (Name = "subscriberId")][Required]int subscriberId, [FromQuery (Name = "areaId")][Required()]int areaId, [FromQuery (Name = "problemType")][Required()]string problemType, [FromQuery (Name = "equipmentType")][Required()]string equipmentType, [FromQuery (Name = "locationId")]int? locationId);

        /// <summary>
        /// Retrieves the issue list for a FTM provider
        /// </summary>
        /// <param name="subscriberId"></param>
        /// <param name="assetId">Optional asset ID</param>
        /// <param name="locationId">Optional location ID</param>
        /// <response code="200">OK</response>
        [HttpGet]
        [Route("/v3/providers/current/subscribers/{subscriberId}/issuelist")]
        [ValidateModelState]
        [ProducesResponseType(statusCode: 200, type: typeof(Object))]
        public abstract Task<IActionResult> ProvidersCurrentSubscriberssubscriberIdIssuelistassetIdassetIdlocationIdlocationId([FromRoute (Name = "subscriberId")][Required]int subscriberId, [FromQuery (Name = "assetId")]int? assetId, [FromQuery (Name = "locationId")]int? locationId);

        /// <summary>
        /// 
        /// </summary>
        /// <param name="subscriberId"></param>
        /// <param name="locationId"></param>
        /// <response code="200">OK</response>
        [HttpGet]
        [Route("/v3/providers/current/subscriber/{subscriberId}/location/{locationId}/applicationissuelist/problemtypes")]
        [ValidateModelState]
        [ProducesResponseType(statusCode: 200, type: typeof(Object))]
        public abstract Task<IActionResult> ProvidersCurrentSubscribersubscriberIdLocationlocationIdApplicationissuelistProblemtypes([FromRoute (Name = "subscriberId")][Required]int subscriberId, [FromRoute (Name = "locationId")][Required]int locationId);

        /// <summary>
        /// Get Equipment items not filtered by location.
        /// </summary>
        /// <remarks>List equipment items not filtered by location.              &lt;br /&gt;&lt;br /&gt;Available for subscriber usage.</remarks>
        /// <param name="setupId">Numeric id of the Store Dashboard setup.</param>
        /// <param name="areaId">Numeric id of the Location Area.</param>
        /// <param name="problemType">Problem type.</param>
        /// <response code="200">Indicates that the request succeeded and that the requested information is in the response.</response>
        /// <response code="400">Bad Request - the request could not be understood or was missing required parameters.              &lt;br/&gt;Error codes:              &lt;br/&gt; 1000 - Invalid setupId(dashboard) for current user;              &lt;br/&gt; 1001 - No issue list is available, please load it through issue list converter;</response>
        /// <response code="401">Indicates that the requested resource requires authentication.              &lt;br/&gt;Error codes:              &lt;br/&gt; 504 - API call rejected by security permissions;</response>
        /// <response code="500">Indicates that a generic error has occurred on the server.</response>
        [HttpGet]
        [Route("/v3/subscribers/current/dashboard/{setupId}/issuelist/equipmenttypes")]
        [ValidateModelState]
        [ProducesResponseType(statusCode: 200, type: typeof(SCServiceChannelServicesMessagingIssueListsGetIssueEquipmentTypesResponse))]
        [ProducesResponseType(statusCode: 400, type: typeof(SCServiceChannelServicesMessagingErrorResponse))]
        [ProducesResponseType(statusCode: 401, type: typeof(SCServiceChannelServicesMessagingErrorResponse))]
        [ProducesResponseType(statusCode: 500, type: typeof(SCServiceChannelServicesMessagingErrorResponse))]
        public abstract Task<IActionResult> SubscribersCurrentDashboardsetupIdIssuelistEquipmenttypesareaIdareaIdproblemTypeproblemType([FromRoute (Name = "setupId")][Required]int setupId, [FromQuery (Name = "areaId")][Required()]int areaId, [FromQuery (Name = "problemType")][Required()]string problemType);

        /// <summary>
        /// Get Equipment items
        /// </summary>
        /// <remarks>List equipment items.              &lt;br /&gt;&lt;br /&gt;Available for subscriber usage.</remarks>
        /// <param name="locationId">Numeric id of the Location.</param>
        /// <param name="areaId">Numeric id of the Location Area.</param>
        /// <param name="problemType">Problem type.</param>
        /// <param name="setupId">Numeric id of the Store Dashboard setup.</param>
        /// <response code="200">Indicates that the request succeeded and that the requested information is in the response.</response>
        /// <response code="400">Bad Request - the request could not be understood or was missing required parameters.              &lt;br/&gt;Error codes:              &lt;br/&gt; 1000 - Invalid setupId(dashboard) for current user;              &lt;br/&gt; 1001 - No issue list is available, please load it through issue list converter;</response>
        /// <response code="401">Indicates that the requested resource requires authentication.              &lt;br/&gt;Error codes:              &lt;br/&gt; 504 - API call rejected by security permissions;</response>
        /// <response code="500">Indicates that a generic error has occurred on the server.</response>
        [HttpGet]
        [Route("/v3/subscribers/current/storedashboards/current/issuelist/areas/{areaId}/equipmenttypes")]
        [ValidateModelState]
        [ProducesResponseType(statusCode: 200, type: typeof(SCServiceChannelServicesMessagingIssueListsGetIssueEquipmentTypesResponse))]
        [ProducesResponseType(statusCode: 400, type: typeof(SCServiceChannelServicesMessagingErrorResponse))]
        [ProducesResponseType(statusCode: 401, type: typeof(SCServiceChannelServicesMessagingErrorResponse))]
        [ProducesResponseType(statusCode: 500, type: typeof(SCServiceChannelServicesMessagingErrorResponse))]
        public abstract Task<IActionResult> SubscribersCurrentStoredashboardsCurrentIssuelistAreasareaIdEquipmenttypeslocationIdlocationIdproblemTypeproblemTypesetupIdsetupId([FromQuery (Name = "locationId")][Required()]int locationId, [FromRoute (Name = "areaId")][Required]int areaId, [FromQuery (Name = "problemType")][Required()]string problemType, [FromQuery (Name = "setupId")]int? setupId);

        /// <summary>
        /// Get Problem codes
        /// </summary>
        /// <remarks>List problem codes.              &lt;br /&gt;&lt;br /&gt;Available for subscriber usage.</remarks>
        /// <param name="areaId">Numeric id of the Location Area.</param>
        /// <param name="problemType">Problem type.</param>
        /// <param name="equipmentType">Equipment type.</param>
        /// <param name="locationId">selected locationId.</param>
        /// <param name="setupId">Numeric id of the Store Dashboard setup.</param>
        /// <response code="200">Indicates that the request succeeded and that the requested information is in the response.</response>
        /// <response code="400">Bad Request - the request could not be understood or was missing required parameters.              &lt;br/&gt;Error codes:              &lt;br/&gt; 1000 - Invalid setupId(dashboard) for current user;              &lt;br/&gt; 1001 - No issue list is available, please load it through issue list converter;</response>
        /// <response code="401">Indicates that the requested resource requires authentication.              &lt;br/&gt;Error codes:              &lt;br/&gt; 504 - API call rejected by security permissions;</response>
        /// <response code="500">Indicates that a generic error has occurred on the server.</response>
        [HttpGet]
        [Route("/v3/subscribers/current/storedashboards/current/issuelist/areas/{areaId}/problemcodes")]
        [ValidateModelState]
        [ProducesResponseType(statusCode: 200, type: typeof(SCServiceChannelServicesMessagingIssueListsGetProblemsFilteredByAreaTypeAndLocationResponse))]
        [ProducesResponseType(statusCode: 400, type: typeof(SCServiceChannelServicesMessagingErrorResponse))]
        [ProducesResponseType(statusCode: 401, type: typeof(SCServiceChannelServicesMessagingErrorResponse))]
        [ProducesResponseType(statusCode: 500, type: typeof(SCServiceChannelServicesMessagingErrorResponse))]
        public abstract Task<IActionResult> SubscribersCurrentStoredashboardsCurrentIssuelistAreasareaIdProblemcodesproblemTypeproblemTypeequipmentTypeequipmentTypelocationIdlocationIdsetupIdsetupId([FromRoute (Name = "areaId")][Required]int areaId, [FromQuery (Name = "problemType")][Required()]string problemType, [FromQuery (Name = "equipmentType")][Required()]string equipmentType, [FromQuery (Name = "locationId")]int? locationId, [FromQuery (Name = "setupId")]int? setupId);

        /// <summary>
        /// Get Problem types
        /// </summary>
        /// <remarks>List Problem types. Returns Problem types for successful request.</remarks>
        /// <param name="areaId">Numeric id of the Location Area.</param>
        /// <param name="locationId">Numeric id of location.</param>
        /// <param name="setupId">Numeric id of the Store Dashboard setup.</param>
        /// <param name="subscriberId">Numeric id of subscriber.</param>
        /// <response code="200">Indicates that the request succeeded and that the requested information is in the response.</response>
        /// <response code="400">Bad Request - the request could not be understood or was missing required parameters.              &lt;br/&gt;Error codes:              &lt;br/&gt; 1000 - Invalid setupId(dashboard) for current user;              &lt;br/&gt; 1001 - No issue list is available, please load it through issue list converter;</response>
        /// <response code="401">Indicates that the requested resource requires authentication.              &lt;br/&gt;Error codes:              &lt;br/&gt; 504 - API call rejected by security permissions;</response>
        [HttpGet]
        [Route("/v3/subscribers/current/storedashboards/current/issuelist/areas/{areaId}/problemtypes")]
        [ValidateModelState]
        [ProducesResponseType(statusCode: 200, type: typeof(SCServiceChannelServicesMessagingIssueListsGetProblemTypesResponse))]
        [ProducesResponseType(statusCode: 400, type: typeof(SCServiceChannelServicesMessagingErrorResponse))]
        [ProducesResponseType(statusCode: 401, type: typeof(SCServiceChannelServicesMessagingErrorResponse))]
        public abstract Task<IActionResult> SubscribersCurrentStoredashboardsCurrentIssuelistAreasareaIdProblemtypeslocationIdlocationIdsetupIdsetupIdsubscriberIdsubscriberId([FromRoute (Name = "areaId")][Required]int areaId, [FromQuery (Name = "locationId")]int? locationId, [FromQuery (Name = "setupId")]int? setupId, [FromQuery (Name = "subscriberId")]int? subscriberId);

        /// <summary>
        /// Get Areas
        /// </summary>
        /// <remarks>List Issue Areas. Returns Issue Areas for successful request.              &lt;br /&gt;&lt;br /&gt;Available for subscriber usage.</remarks>
        /// <param name="locationId">selected locationId.</param>
        /// <param name="setupId">Numeric id of the Store Dashboard setup.</param>
        /// <response code="200">Indicates that the request succeeded and that the requested information is in the response.</response>
        /// <response code="400">Bad Request - the request could not be understood or was missing required parameters.              &lt;br/&gt;Error codes:              &lt;br/&gt; 1000 - Invalid setupId(dashboard) for current user;</response>
        /// <response code="401">Indicates that the requested resource requires authentication.              &lt;br/&gt;Error codes:              &lt;br/&gt; 504 - API call rejected by security permissions;</response>
        /// <response code="500">Indicates that a generic error has occurred on the server.</response>
        [HttpGet]
        [Route("/v3/subscribers/current/storedashboards/current/issuelist/areas")]
        [ValidateModelState]
        [ProducesResponseType(statusCode: 200, type: typeof(SCServiceChannelServicesMessagingIssueListsGetIssueAreasResponse))]
        [ProducesResponseType(statusCode: 400, type: typeof(SCServiceChannelServicesMessagingErrorResponse))]
        [ProducesResponseType(statusCode: 401, type: typeof(SCServiceChannelServicesMessagingErrorResponse))]
        [ProducesResponseType(statusCode: 500, type: typeof(SCServiceChannelServicesMessagingErrorResponse))]
        public abstract Task<IActionResult> SubscribersCurrentStoredashboardsCurrentIssuelistAreaslocationIdlocationIdsetupIdsetupId([FromQuery (Name = "locationId")]int? locationId, [FromQuery (Name = "setupId")]int? setupId);

        /// <summary>
        /// 
        /// </summary>
        /// <param name="id"></param>
        /// <param name="setupId"></param>
        /// <response code="200">OK</response>
        [HttpGet]
        [Route("/v3/subscribers/current/storedashboards/current/issuelist/field")]
        [ValidateModelState]
        [ProducesResponseType(statusCode: 200, type: typeof(Object))]
        public abstract Task<IActionResult> SubscribersCurrentStoredashboardsCurrentIssuelistFieldididsetupIdsetupId([FromQuery (Name = "id")][Required()]string id, [FromQuery (Name = "setupId")]int? setupId);

        /// <summary>
        /// 
        /// </summary>
        /// <param name="problemType"></param>
        /// <param name="equipmentType"></param>
        /// <param name="problemCode"></param>
        /// <param name="locationId"></param>
        /// <param name="setupId"></param>
        /// <response code="200">OK</response>
        [HttpGet]
        [Route("/v3/subscribers/current/storedashboards/current/issuelist/issuechoice")]
        [ValidateModelState]
        [ProducesResponseType(statusCode: 200, type: typeof(Object))]
        public abstract Task<IActionResult> SubscribersCurrentStoredashboardsCurrentIssuelistIssuechoiceproblemTypeproblemTypeequipmentTypeequipmentTypeproblemCodeproblemCodelocationIdlocationIdsetupIdsetupId([FromQuery (Name = "problemType")][Required()]string problemType, [FromQuery (Name = "equipmentType")][Required()]string equipmentType, [FromQuery (Name = "problemCode")][Required()]string problemCode, [FromQuery (Name = "locationId")][Required()]int locationId, [FromQuery (Name = "setupId")]int? setupId);

        /// <summary>
        /// Get specific issue choice
        /// </summary>
        /// <param name="subscriberId"></param>
        /// <param name="dashboardSetupId"></param>
        /// <param name="trade"></param>
        /// <param name="priority"></param>
        /// <param name="category"></param>
        /// <response code="200">OK</response>
        [HttpGet]
        [Route("/v3/subscribers/current/storedashboards/current/issuelist/specific/issuechoice")]
        [ValidateModelState]
        [ProducesResponseType(statusCode: 200, type: typeof(Object))]
        public abstract Task<IActionResult> SubscribersCurrentStoredashboardsCurrentIssuelistSpecificIssuechoiceSubscriberIdSubscriberIdDashboardSetupIdDashboardSetupIdTradeTradePriorityPriorityCategoryCategory([FromQuery (Name = "subscriberId")][Required()]int subscriberId, [FromQuery (Name = "dashboardSetupId")][Required()]int dashboardSetupId, [FromQuery (Name = "trade")][Required()]string trade, [FromQuery (Name = "priority")][Required()]string priority, [FromQuery (Name = "category")][Required()]string category);
    }
}
