/*
 * ServiceChannel API - v.3
 *
 * The ServiceChannel API is a RESTful and stateless API. It accepts standard HTTP verbs and supports OAuth 2.0 for authorizing requests.      Our API returns common HTTP status codes as well as JSON encapsulated data.      See [API Overview](https://developer.servicechannel.com/basics/introduction/overview/) for the intro to ServiceChannel API.<br>      <h3>Authentication and Authorization</h3>You should have a ServiceChannel account, register your application, and obtain `access_token` to integrate with our API.      See [Authentication and Authorization](https://developer.servicechannel.com/basics/general/authentication/) for more information.      To use this API playground, click **Authorize** and sign in to ServiceChannel.<br>      <h3>Environment</h3> All calls in this API Reference point to the **SB2 environment**.      See [Environments](https://developer.servicechannel.com/basics/general/environments/) for more information.<br>      <h3>API Version</h3>The current stable version of the ServiceChannel API is `v3`. In the request URL, `v3` is a version prefix that should be present.      When you omit the version prefix, calls point to the minimum supported version of the API.      We recommend you to always specify the API version to avoid possible errors.
 *
 * The version of the OpenAPI document: 3
 * 
 * Generated by: https://openapi-generator.tech
 */

using System;
using System.Collections.Generic;
using System.ComponentModel.DataAnnotations;
using System.Threading;
using System.Threading.Tasks;
using Microsoft.AspNetCore.Authorization;
using Microsoft.AspNetCore.Mvc;
using Microsoft.AspNetCore.Http;
using ServiceChannel.OpenAPIGenerated.Api.Attributes;
using ServiceChannel.OpenAPIGenerated.Api.Models;

namespace ServiceChannel.OpenAPIGenerated.Api.Controllers
{ 
    /// <summary>
    /// 
    /// </summary>
    [ApiController]
    public abstract class AssetsApiController : ControllerBase
    { 
        /// <summary>
        /// Update an asset
        /// </summary>
        /// <remarks>Modifies the details of an existing asset.</remarks>
        /// <param name="assetRequest">Request model to update an asset.              &lt;br /&gt;The following parameters are required in the request:               • **Id**: Unique numeric identification number of an asset you want to update.               • **Tag**: Alphanumeric asset identifier assigned by the client, aka **Tag ID**.               • **Manufacturer**: Company brand that produces an asset and exists in the system.               • **StoreId**: Alphanumeric identifier of the existing location.               • **Trade**: The line of work an asset is used for. For example, *ELECTRICAL*, *CARPENTRY*, *CCTV*.               • **Type**: Type of an asset. For example, *Refrigerator*, *Computer Monitor*.              &lt;br /&gt;***Note***. The &#x60;Tag&#x60; and &#x60;Location&#x60; parameters should remain unchanged.</param>
        /// <response code="200">The ID of the updated asset is in the response.</response>
        /// <response code="400">The request is not accepted due to bad syntax, missing parameters, insufficient data, etc.              &lt;br/&gt;Error codes:              502 — No asset to update              502 — Asset is not found              503 — Unknown Brand name              503 — Request is empty or null              503 — Do not have rights for editing Asset              503 — Unknown Equipment type              503 — &#39;Uses Refrigerant&#39; attribute can not be changed              503 — Asset location can not be changed: There are active PM services for this asset.</response>
        /// <response code="401">The request is not authorized.              &lt;br&gt;Error codes:              504 — API call rejected by security permissions</response>
        /// <response code="500">The server was unable to complete the request due to an internal error.              &lt;br&gt;Error codes:              501 — Object reference is not set to an instance of an object.</response>
        /// <response code="502">The server, while acting as a gateway or proxy, received an invalid response from the upstream server.</response>
        [HttpPut]
        [Route("/v3/assets")]
        [Consumes("application/json", "text/json", "application/xml", "text/xml", "application/x-www-form-urlencoded")]
        [ValidateModelState]
        [ProducesResponseType(statusCode: 200, type: typeof(Object))]
        [ProducesResponseType(statusCode: 400, type: typeof(SCServiceChannelServicesMessagingErrorResponse))]
        [ProducesResponseType(statusCode: 401, type: typeof(SCServiceChannelServicesMessagingErrorResponse))]
        [ProducesResponseType(statusCode: 500, type: typeof(SCServiceChannelServicesMessagingErrorResponse))]
        [ProducesResponseType(statusCode: 502, type: typeof(SCServiceChannelServicesMessagingErrorResponse))]
        public abstract Task<IActionResult> Assets([FromBody]SCServiceChannelServicesMessagingAssetsUpdateAssetRequest assetRequest);

        /// <summary>
        /// Activates or deactivates an asset depending on passed parameter.
        /// </summary>
        /// <param name="request">A set of values to indicate asset and action.              IsActive \&quot;true\&quot; means that asset must be activated.              IsActive \&quot;false\&quot; means that asset must be inactivated.</param>
        /// <response code="200">Indicates that the request succeeded and that the requested information is in the response.</response>
        /// <response code="400">Bad Request - the request could not be understood or was missing required parameters.</response>
        /// <response code="401">Indicates that the requested resource requires authentication.</response>
        /// <response code="403">Forbidden - the data could not be processed by security reasons.</response>
        [HttpPost]
        [Route("/v3/assets/Activation")]
        [Consumes("application/json", "text/json", "application/xml", "text/xml", "application/x-www-form-urlencoded")]
        [ValidateModelState]
        [ProducesResponseType(statusCode: 200, type: typeof(Object))]
        [ProducesResponseType(statusCode: 400, type: typeof(SCServiceChannelServicesMessagingErrorResponse))]
        [ProducesResponseType(statusCode: 401, type: typeof(SCServiceChannelServicesMessagingErrorResponse))]
        [ProducesResponseType(statusCode: 403, type: typeof(SCServiceChannelServicesMessagingErrorResponse))]
        public abstract Task<IActionResult> AssetsActivation([FromBody]SCServiceChannelServicesMessagingEquipmentsActivateAssetRequest request);

        /// <summary>
        /// Add Update Asset
        /// </summary>
        /// <param name="request"></param>
        /// <response code="200">The ID of the updated asset is in the response.</response>
        /// <response code="400">The request is not accepted due to bad syntax, missing parameters, insufficient data, etc.              &lt;br/&gt;Error codes:              502 — No asset to update              502 — Asset is not found              503 — Unknown Brand name              503 — Request is empty or null              503 — Do not have rights for editing Asset              503 — Unknown Equipment type              503 — &#39;Uses Refrigerant&#39; attribute can not be changed              503 — Asset location can not be changed: There are active PM services for this asset.</response>
        /// <response code="401">The request is not authorized.              &lt;br&gt;Error codes:              504 — API call rejected by security permissions</response>
        /// <response code="500">The server was unable to complete the request due to an internal error.              &lt;br&gt;Error codes:              501 — Object reference is not set to an instance of an object.</response>
        /// <response code="502">The server, while acting as a gateway or proxy, received an invalid response from the upstream server.</response>
        [HttpPost]
        [Route("/v3/assets/AddUpdateAsset")]
        [Consumes("application/json", "text/json", "application/xml", "text/xml", "application/x-www-form-urlencoded")]
        [ValidateModelState]
        [ProducesResponseType(statusCode: 200, type: typeof(Object))]
        [ProducesResponseType(statusCode: 400, type: typeof(SCServiceChannelServicesMessagingErrorResponse))]
        [ProducesResponseType(statusCode: 401, type: typeof(SCServiceChannelServicesMessagingErrorResponse))]
        [ProducesResponseType(statusCode: 500, type: typeof(SCServiceChannelServicesMessagingErrorResponse))]
        [ProducesResponseType(statusCode: 502, type: typeof(SCServiceChannelServicesMessagingErrorResponse))]
        public abstract Task<IActionResult> AssetsAddUpdateAsset([FromBody]SCServiceChannelServicesMessagingAssetsAddUpdateAssetRequest request);

        /// <summary>
        /// Add asset meters
        /// </summary>
        /// <remarks>Attaches an asset meter to a certain asset by specifying a particular asset type meter.</remarks>
        /// <param name="request">Request to add an asset meter to the existing asset.</param>
        /// <response code="200">The asset meter is successfully added.</response>
        /// <response code="400">The request is not accepted due to bad syntax, missing parameters, insufficient data, etc.              &lt;br/&gt;Error codes:              Failed to add an asset meter</response>
        /// <response code="401">The request is not authorized.              &lt;br/&gt;Error codes:              504 — API call rejected by security permissions</response>
        [HttpPost]
        [Route("/v3/assets/AssetMeter")]
        [Consumes("application/json", "text/json", "application/xml", "text/xml", "application/x-www-form-urlencoded")]
        [ValidateModelState]
        [ProducesResponseType(statusCode: 400, type: typeof(SCServiceChannelServicesMessagingErrorResponse))]
        [ProducesResponseType(statusCode: 401, type: typeof(SCServiceChannelServicesMessagingErrorResponse))]
        public abstract Task<IActionResult> AssetsAssetMeter([FromBody]SCServiceChannelServicesMessagingAssetsAddAssetMeterRequest request);

        /// <summary>
        /// Update an asset meter reading
        /// </summary>
        /// <remarks>Updates information of a particular asset meter reading.</remarks>
        /// <param name="request">Request to update the existing asset meter reading.</param>
        /// <response code="200">The asset meter reading is successfully updated.</response>
        /// <response code="400">The request is not accepted due to bad syntax, missing parameters, insufficient data, etc.              &lt;br/&gt;Error codes:              Failed to Update Asset Meter Reading</response>
        /// <response code="401">The request is not authorized.              &lt;br/&gt;Error codes:              504 — API call rejected by security permissions</response>
        [HttpPut]
        [Route("/v3/assets/AssetMeterReading")]
        [Consumes("application/json", "text/json", "application/xml", "text/xml", "application/x-www-form-urlencoded")]
        [ValidateModelState]
        [ProducesResponseType(statusCode: 400, type: typeof(SCServiceChannelServicesMessagingErrorResponse))]
        [ProducesResponseType(statusCode: 401, type: typeof(SCServiceChannelServicesMessagingErrorResponse))]
        public abstract Task<IActionResult> AssetsAssetMeterReading([FromBody]SCServiceChannelServicesMessagingAssetsUpdateAssetMeterReadingRequest request);

        /// <summary>
        /// 
        /// </summary>
        /// <param name="request"></param>
        /// <response code="200">The asset meter reading is successfully added.</response>
        /// <response code="400">The request is not accepted due to bad syntax, missing parameters, insufficient data, etc.              &lt;br/&gt;Error codes:              Failed to add asset meter reading.</response>
        /// <response code="401">The request is not authorized.              &lt;br/&gt;Error codes:              504 — API call rejected by security permissions</response>
        [HttpPost]
        [Route("/v3/assets/AssetMeterReading")]
        [Consumes("application/json", "text/json", "application/xml", "text/xml", "application/x-www-form-urlencoded")]
        [ValidateModelState]
        [ProducesResponseType(statusCode: 400, type: typeof(SCServiceChannelServicesMessagingErrorResponse))]
        [ProducesResponseType(statusCode: 401, type: typeof(SCServiceChannelServicesMessagingErrorResponse))]
        public abstract Task<IActionResult> AssetsAssetMeterReading_0([FromBody]SCServiceChannelServicesMessagingAssetsAddAssetMeterReadingRequest request);

        /// <summary>
        /// Get asset readings
        /// </summary>
        /// <remarks>Returns asset meter readings details of the specified asset for the current subscriber.              &lt;br /&gt;Send the [PUT /assets/AssetMeterReadings](https://developer.servicechannel.com/swagger/ui/index?version&#x3D;3#/Assets/PUTv3_assets_AssetMeterReading) request to edit a particular asset meter reading.              &lt;br /&gt;Refer to ServiceChannel University to learn more about [asset meter readings](https://servicechannel.atlassian.net/wiki/spaces/SCU/pages/834469973/Asset+Meter+Reading).</remarks>
        /// <param name="assetId">Unique numeric asset identifier you want to retrieve asset meter readings for.</param>
        /// <param name="lastMeterReadingValuesOnly">When it is true the response should contain one last AssetMeterReading entry for each AssetTypeMeter.</param>
        /// <response code="200">The asset meter readings details are in the response.</response>
        /// <response code="400">The request is not accepted due to bad syntax, missing parameters, insufficient data, etc.</response>
        /// <response code="401">The request is not authorized.              &lt;br/&gt;Error codes:              504 — API call rejected by security permissions</response>
        /// <response code="404">The resource you are looking for has been removed, had its name changed, or is temporarily unavailable. / The request URI is incorrect, or the resource does not exist.</response>
        [HttpGet]
        [Route("/v3/assets/AssetMeterReadings/{assetId}")]
        [ValidateModelState]
        [ProducesResponseType(statusCode: 200, type: typeof(List<SCServiceChannelServicesMessagingAssetsAssetMeterReadingResponseItem>))]
        [ProducesResponseType(statusCode: 400, type: typeof(SCServiceChannelServicesMessagingErrorResponse))]
        [ProducesResponseType(statusCode: 401, type: typeof(SCServiceChannelServicesMessagingErrorResponse))]
        [ProducesResponseType(statusCode: 404, type: typeof(SCServiceChannelServicesMessagingErrorResponse))]
        public abstract Task<IActionResult> AssetsAssetMeterReadingsassetIdlastMeterReadingValuesOnlylastMeterReadingValuesOnly([FromRoute (Name = "assetId")][Required]int assetId, [FromQuery (Name = "lastMeterReadingValuesOnly")]bool? lastMeterReadingValuesOnly);

        /// <summary>
        /// Get asset meters
        /// </summary>
        /// <remarks>Returns the details of an asset meter by sending the &#x60;assetMeterId&#x60; parameter  or the details of one or several asset meters by using the &#x60;assetId&#x60; parameter.</remarks>
        /// <param name="assetMeterId">Unique numeric asset meter identifier you want to get the details of.</param>
        /// <param name="assetId">Unique numeric asset identifier you want to retrieve asset meter details for.</param>
        /// <response code="200">The asset meter details are in the response.</response>
        /// <response code="400">The request was not accepted due to bad syntax, missing parameters, insufficient data, etc.              &lt;br/&gt;Error codes:              AssetId and Id can&#39;t be both null</response>
        /// <response code="401">The request is not authorized.              &lt;br/&gt;Error codes:              504 — API call rejected by security permissions</response>
        [HttpGet]
        [Route("/v3/assets/AssetMeters")]
        [ValidateModelState]
        [ProducesResponseType(statusCode: 200, type: typeof(List<SCServiceChannelServicesMessagingAssetsAssetMeter>))]
        [ProducesResponseType(statusCode: 400, type: typeof(SCServiceChannelServicesMessagingErrorResponse))]
        [ProducesResponseType(statusCode: 401, type: typeof(SCServiceChannelServicesMessagingErrorResponse))]
        public abstract Task<IActionResult> AssetsAssetMetersassetMeterIdassetMeterIdassetIdassetId([FromQuery (Name = "assetMeterId")]int? assetMeterId, [FromQuery (Name = "assetId")]int? assetId);

        /// <summary>
        /// Get circuits and components
        /// </summary>
        /// <remarks>Retrieves all circuits and components added to the specified parent assets.              &lt;br /&gt;Learn more about [updating assets on work orders](https://servicechannel.atlassian.net/wiki/spaces/SCU/pages/1484194012/Updating+Assets+on+Work+Orders) in ServiceChannel University.</remarks>
        /// <param name="request">Request to get circuits and components for the specified parent assets.              &lt;br /&gt;Request parameters:               • **ParentIds**. Add one or several asset IDs you want to get circuits and components for.               • **OnlyRefrigerantTrackingAssets**. Enter &#x60;true&#x60; to retrieve only circuits and components that contain refrigerant and F-gases.</param>
        /// <response code="200">The circuits and components for the specified parent assets are in the response.</response>
        /// <response code="401">The request is not authorized.              &lt;br/&gt;Error codes:              504 — API call rejected by security permissions</response>
        /// <response code="500">The server was unable to complete the request due to an internal error.              &lt;br/&gt;Error codes:              501 — Object reference is not set to an instance of an object</response>
        [HttpPost]
        [Route("/v3/assets/assetcomponents")]
        [Consumes("application/json", "text/json", "application/xml", "text/xml", "application/x-www-form-urlencoded")]
        [ValidateModelState]
        [ProducesResponseType(statusCode: 401, type: typeof(SCServiceChannelServicesMessagingErrorResponse))]
        [ProducesResponseType(statusCode: 500, type: typeof(SCServiceChannelServicesMessagingErrorResponse))]
        public abstract Task<IActionResult> AssetsAssetcomponents([FromBody]SCServiceChannelServicesMessagingEquipmentsAssetComponentsRequest request);

        /// <summary>
        /// Get Asset Repair Status By AssetId
        /// </summary>
        /// <param name="assetId"></param>
        /// <response code="200">Request succeeded and the requested information is in the response.</response>
        /// <response code="400">Bad Request - the request could not be understood or was missing required parameters.              &lt;br/&gt;Error codes:              503 — User info should not be null;              SubscriberId is null;</response>
        /// <response code="401">Unauthorized indicates that the requested resource requires authentication.              &lt;br/&gt;Error codes:              504 — API call rejected by security permissions;</response>
        [HttpGet]
        [Route("/v3/assets/assetrepairstatus")]
        [ValidateModelState]
        [ProducesResponseType(statusCode: 200, type: typeof(string))]
        [ProducesResponseType(statusCode: 400, type: typeof(SCServiceChannelServicesMessagingErrorResponse))]
        [ProducesResponseType(statusCode: 401, type: typeof(SCServiceChannelServicesMessagingErrorResponse))]
        public abstract Task<IActionResult> AssetsAssetrepairstatusassetIdassetId([FromQuery (Name = "assetId")][Required()]int assetId);

        /// <summary>
        /// Get Assets For Replacement
        /// </summary>
        /// <param name="request"></param>
        /// <response code="200">OK</response>
        [HttpPost]
        [Route("/v3/assets/assetsforreplacement")]
        [Consumes("application/json", "text/json", "application/xml", "text/xml", "application/x-www-form-urlencoded")]
        [ValidateModelState]
        [ProducesResponseType(statusCode: 200, type: typeof(Object))]
        public abstract Task<IActionResult> AssetsAssetsforreplacement([FromBody]SCServiceChannelServicesMessagingAssetsGetAssetsForReplacementRequest request);

        /// <summary>
        /// Get Asset Status History By AssetId
        /// </summary>
        /// <param name="assetId"></param>
        /// <response code="200">Request succeeded and the requested information is in the response.</response>
        /// <response code="400">Bad Request - the request could not be understood or was missing required parameters.              &lt;br/&gt;Error codes:              503 — User info should not be null;              SubscriberId is null;</response>
        /// <response code="401">Unauthorized indicates that the requested resource requires authentication.              &lt;br/&gt;Error codes:              504 — API call rejected by security permissions;</response>
        [HttpGet]
        [Route("/v3/assets/assetstatushistory")]
        [ValidateModelState]
        [ProducesResponseType(statusCode: 200, type: typeof(SCServiceChannelServicesMessagingAssetsAssetStatusHistoryResponse))]
        [ProducesResponseType(statusCode: 400, type: typeof(SCServiceChannelServicesMessagingErrorResponse))]
        [ProducesResponseType(statusCode: 401, type: typeof(SCServiceChannelServicesMessagingErrorResponse))]
        public abstract Task<IActionResult> AssetsAssetstatushistoryassetIdassetId([FromQuery (Name = "assetId")][Required()]int assetId);

        /// <summary>
        /// Associate Asset Code
        /// </summary>
        /// <param name="request"></param>
        /// <response code="200">OK</response>
        [HttpPost]
        [Route("/v3/assets/AssociateAssetCode")]
        [Consumes("application/json", "text/json", "application/xml", "text/xml", "application/x-www-form-urlencoded")]
        [ValidateModelState]
        [ProducesResponseType(statusCode: 200, type: typeof(Object))]
        public abstract Task<IActionResult> AssetsAssociateAssetCode([FromBody]SCServiceChannelServicesMessagingEquipmentsAssociateAssetRequest request);

        /// <summary>
        /// Get Brands
        /// </summary>
        /// <response code="200">Request succeeded and the requested information is in the response.</response>
        /// <response code="400">Bad Request - the request could not be understood or was missing required parameters.              &lt;br/&gt;Error codes:              503 — User info should not be null;              SubscriberId is null;</response>
        /// <response code="401">Unauthorized indicates that the requested resource requires authentication.              &lt;br/&gt;Error codes:              504 — API call rejected by security permissions;</response>
        [HttpGet]
        [Route("/v3/assets/Brands")]
        [ValidateModelState]
        [ProducesResponseType(statusCode: 200, type: typeof(List<SCServiceChannelServicesMessagingAssetsManufacturer>))]
        [ProducesResponseType(statusCode: 400, type: typeof(SCServiceChannelServicesMessagingErrorResponse))]
        [ProducesResponseType(statusCode: 401, type: typeof(SCServiceChannelServicesMessagingErrorResponse))]
        public abstract Task<IActionResult> AssetsBrands();

        /// <summary>
        /// Getting permission for provider for create new asset
        /// </summary>
        /// <param name="assetTypeId"></param>
        /// <response code="200">OK</response>
        [HttpGet]
        [Route("/v3/assets/CanCreateAsset/{assetTypeId}")]
        [ValidateModelState]
        [ProducesResponseType(statusCode: 200, type: typeof(Object))]
        public abstract Task<IActionResult> AssetsCanCreateAssetassetTypeId([FromRoute (Name = "assetTypeId")][Required]int assetTypeId);

        /// <summary>
        /// Check if provider is allowed to manage attachments
        /// </summary>
        /// <param name="subscriberId"></param>
        /// <response code="200">IsAllowed value is successfully retured.</response>
        /// <response code="400">Bad Request - the request could not be understood or was missing required parameters.</response>
        /// <response code="401">Unauthorized indicates that the requested resource requires authentication.              &lt;br/&gt;Error codes:              504 — API call rejected by security permissions;</response>
        [HttpPut]
        [Route("/v3/assets/canManageAttachments")]
        [ValidateModelState]
        [ProducesResponseType(statusCode: 400, type: typeof(SCServiceChannelServicesMessagingErrorResponse))]
        [ProducesResponseType(statusCode: 401, type: typeof(SCServiceChannelServicesMessagingErrorResponse))]
        public abstract Task<IActionResult> AssetsCanManageAttachmentssubscriberIdsubscriberId([FromQuery (Name = "subscriberId")][Required()]int subscriberId);

        /// <summary>
        /// Getting permission for provider for create new asset
        /// </summary>
        /// <param name="tradeId"></param>
        /// <response code="200">OK</response>
        [HttpGet]
        [Route("/v3/assets/CanProviderCreateAssetForTrade/{tradeId}")]
        [ValidateModelState]
        [ProducesResponseType(statusCode: 200, type: typeof(Object))]
        public abstract Task<IActionResult> AssetsCanProviderCreateAssetForTradetradeId([FromRoute (Name = "tradeId")][Required]int tradeId);

        /// <summary>
        /// Getting permission for edit asset
        /// </summary>
        /// <param name="assetTypeId"></param>
        /// <response code="200">OK</response>
        [HttpGet]
        [Route("/v3/assets/CanUserEditAsset")]
        [ValidateModelState]
        [ProducesResponseType(statusCode: 200, type: typeof(Object))]
        public abstract Task<IActionResult> AssetsCanUserEditAssetassetTypeIdassetTypeId([FromQuery (Name = "assetTypeId")]int? assetTypeId);

        /// <summary>
        /// Asset meter readings bulk create
        /// </summary>
        /// <remarks>Creates asset meter readings.              &lt;br /&gt;Learn more about [adding asset meter reading](https://servicechannel.atlassian.net/wiki/spaces/SCU/pages/988840218/Adding+Asset+s+Meter+Reading+Data) in ServiceChannel University.</remarks>
        /// <param name="request">Request to create asset readings.</param>
        /// <response code="200">The asset meter readings details are in the response.</response>
        /// <response code="400">The request is not accepted due to bad syntax, missing parameters, insufficient data, etc.              &lt;br/&gt;Error codes:              Failed to create asset meter readings.</response>
        /// <response code="401">The request is not authorized.              &lt;br/&gt;Error codes:              504 — API call rejected by security permissions</response>
        /// <response code="404">The request URI is incorrect, or the resource does not exist.              &lt;br/&gt;Error codes:              502 — Asset is not found</response>
        [HttpPost]
        [Route("/v3/assets/CreateAssetMeterReadingsBulk")]
        [Consumes("application/json", "text/json", "application/xml", "text/xml", "application/x-www-form-urlencoded")]
        [ValidateModelState]
        [ProducesResponseType(statusCode: 200, type: typeof(List<SCServiceChannelServicesMessagingAssetsAssetMeterReadingResponseItem>))]
        [ProducesResponseType(statusCode: 400, type: typeof(SCServiceChannelServicesMessagingErrorResponse))]
        [ProducesResponseType(statusCode: 401, type: typeof(SCServiceChannelServicesMessagingErrorResponse))]
        [ProducesResponseType(statusCode: 404, type: typeof(SCServiceChannelServicesMessagingErrorResponse))]
        public abstract Task<IActionResult> AssetsCreateAssetMeterReadingsBulk([FromBody]List<SCServiceChannelServicesMessagingAssetsAddAssetMeterReadingRequestItem> request);

        /// <summary>
        /// Get asset type groups by assetsIds
        /// </summary>
        /// <remarks>Adds assetsids. Returns list of assetTypeGroup for successful request.</remarks>
        /// <param name="request"></param>
        /// <response code="200">Request succeeded and the requested information is in the response.</response>
        /// <response code="400">Bad Request - the request could not be understood or was missing required parameters.              &lt;br/&gt;Error codes:              503 — Request Data should not be null.              User info should not be null.              SubscriberId is null.              Unknown Asset type;</response>
        /// <response code="401">Indicates that the requested resource requires authentication.              &lt;br/&gt;Error codes:              504 — API call rejected by security permissions;</response>
        [HttpPost]
        [Route("/v3/assets/GetAssetTypeGroupsByAssetsIds")]
        [Consumes("application/json", "text/json", "application/xml", "text/xml", "application/x-www-form-urlencoded")]
        [ValidateModelState]
        [ProducesResponseType(statusCode: 200, type: typeof(Dictionary<string, SCServiceChannelServicesMessagingAssetTypesAssetTypeGroup>))]
        [ProducesResponseType(statusCode: 400, type: typeof(SCServiceChannelServicesMessagingErrorResponse))]
        [ProducesResponseType(statusCode: 401, type: typeof(SCServiceChannelServicesMessagingErrorResponse))]
        public abstract Task<IActionResult> AssetsGetAssetTypeGroupsByAssetsIds([FromBody]SCServiceChannelServicesMessagingAssetTypesGetAssetTypeGroupsRequest request);

        /// <summary>
        /// Returns asset tag validation information for the specified assets and the work order
        /// </summary>
        /// <param name="request"></param>
        /// <response code="200">Request succeeded</response>
        /// <response code="400">Request did NOT succeed and the error information is in the response</response>
        [HttpPost]
        [Route("/v3/assets/GetAssetValidationHistoryByTrackingNumber")]
        [Consumes("application/json", "text/json", "application/xml", "text/xml", "application/x-www-form-urlencoded")]
        [ValidateModelState]
        [ProducesResponseType(statusCode: 200, type: typeof(List<SCServiceChannelServicesMessagingAssetsAssetTagScanAuditRecord>))]
        [ProducesResponseType(statusCode: 400, type: typeof(SCServiceChannelServicesMessagingErrorResponse))]
        public abstract Task<IActionResult> AssetsGetAssetValidationHistoryByTrackingNumber([FromBody]SCServiceChannelServicesCoreInternalRequestsAssetsGetAssetValidationHistoryRequestInternal request);

        /// <summary>
        /// Returns asset tag validation information for the specified list of assets
        /// </summary>
        /// <param name="auditRequests"></param>
        /// <response code="200">Request succeeded</response>
        /// <response code="400">Request did NOT succeed and the error information is in the response</response>
        [HttpPost]
        [Route("/v3/assets/GetAssetValidationInformation")]
        [Consumes("application/json", "text/json", "application/xml", "text/xml", "application/x-www-form-urlencoded")]
        [ValidateModelState]
        [ProducesResponseType(statusCode: 200, type: typeof(List<SCServiceChannelServicesMessagingAssetsAssetTagScanAuditRecord>))]
        [ProducesResponseType(statusCode: 400, type: typeof(SCServiceChannelServicesMessagingErrorResponse))]
        public abstract Task<IActionResult> AssetsGetAssetValidationInformation([FromBody]List<SCServiceChannelServicesMessagingAssetsAssetTagScanAuditRecord> auditRequests);

        /// <summary>
        /// Get primary attachments for asset list
        /// </summary>
        /// <remarks>Adds new asset. Returns list of attachments for successful request.</remarks>
        /// <param name="listOfAssetIds"></param>
        /// <response code="200">Request succeeded and the requested information is in the response.</response>
        /// <response code="400">Bad Request - the request could not be understood or was missing required parameters.              &lt;br/&gt;Error codes:              503 — Request Data should not be null.              User info should not be null.              SubscriberId is null.              Unknown Asset type;</response>
        /// <response code="401">Indicates that the requested resource requires authentication.              &lt;br/&gt;Error codes:              504 — API call rejected by security permissions;</response>
        [HttpPost]
        [Route("/v3/assets/getPrimaryAttachmentsForAssetList")]
        [Consumes("application/json", "text/json", "application/xml", "text/xml", "application/x-www-form-urlencoded")]
        [ValidateModelState]
        [ProducesResponseType(statusCode: 200, type: typeof(List<SCServiceChannelServicesMessagingAssetsAssetPrimaryAttachment>))]
        [ProducesResponseType(statusCode: 400, type: typeof(SCServiceChannelServicesMessagingErrorResponse))]
        [ProducesResponseType(statusCode: 401, type: typeof(SCServiceChannelServicesMessagingErrorResponse))]
        public abstract Task<IActionResult> AssetsGetPrimaryAttachmentsForAssetList([FromBody]List<int> listOfAssetIds);

        /// <summary>
        /// Get primary attachments for asset list
        /// </summary>
        /// <remarks>Adds new asset. Returns list of attachments for successful request.</remarks>
        /// <param name="assetAttachmentsRequest"></param>
        /// <response code="200">Request succeeded and the requested information is in the response.</response>
        /// <response code="400">Bad Request - the request could not be understood or was missing required parameters.              &lt;br/&gt;Error codes:              503 — Request Data should not be null.              User info should not be null.              SubscriberId is null.              Unknown Asset type;</response>
        /// <response code="401">Indicates that the requested resource requires authentication.              &lt;br/&gt;Error codes:              504 — API call rejected by security permissions;</response>
        [HttpPost]
        [Route("/v3/assets/getPrimaryAttachmentsForAssetList_v1")]
        [Consumes("application/json", "text/json", "application/xml", "text/xml", "application/x-www-form-urlencoded")]
        [ValidateModelState]
        [ProducesResponseType(statusCode: 200, type: typeof(List<SCServiceChannelServicesMessagingAssetsAssetPrimaryAttachment>))]
        [ProducesResponseType(statusCode: 400, type: typeof(SCServiceChannelServicesMessagingErrorResponse))]
        [ProducesResponseType(statusCode: 401, type: typeof(SCServiceChannelServicesMessagingErrorResponse))]
        public abstract Task<IActionResult> AssetsGetPrimaryAttachmentsForAssetListV1([FromBody]SCServiceChannelServicesWebApiModelsAssetAttachmentsRequest assetAttachmentsRequest);

        /// <summary>
        /// Gets list of asset validation statuses for multiple work order.
        /// </summary>
        /// <param name="request"></param>
        /// <response code="200">Request succeeded and response contains list of validation statuses</response>
        /// <response code="400">Request did NOT succeed and response contains error information</response>
        [HttpPost]
        [Route("/v3/assets/GetValidationStatusesForMultipleWorkOrders")]
        [Consumes("application/json", "text/json", "application/xml", "text/xml", "application/x-www-form-urlencoded")]
        [ValidateModelState]
        [ProducesResponseType(statusCode: 200, type: typeof(SCServiceChannelServicesMessagingAssetsWorkOrderAssetsCommonValidationResponse))]
        [ProducesResponseType(statusCode: 400, type: typeof(SCServiceChannelServicesMessagingErrorResponse))]
        public abstract Task<IActionResult> AssetsGetValidationStatusesForMultipleWorkOrders([FromBody]SCServiceChannelServicesMessagingGetByIdsRequest request);

        /// <summary>
        /// Get Assets WorkOrders
        /// </summary>
        /// <remarks>This method allows to get WorkOrder objects by Asset Ids.&lt;br /&gt;</remarks>
        /// <param name="workOrdersCount"></param>
        /// <param name="assetIds"></param>
        /// <response code="200">Request succeeded and the requested information is in the response.</response>
        /// <response code="400">Bad Request - the request could not be understood or was missing required parameters.              &lt;br/&gt;Error codes:              503 — User info should not be null;              SubscriberId is null;</response>
        /// <response code="401">Unauthorized indicates that the requested resource requires authentication.              &lt;br/&gt;Error codes:              504 — API call rejected by security permissions;</response>
        [HttpPost]
        [Route("/v3/assets/getassetwohistory")]
        [Consumes("application/json", "text/json", "application/xml", "text/xml", "application/x-www-form-urlencoded")]
        [ValidateModelState]
        [ProducesResponseType(statusCode: 200, type: typeof(Dictionary<string, List<SCServiceChannelServicesMessagingWorkordersWorkOrder>>))]
        [ProducesResponseType(statusCode: 400, type: typeof(SCServiceChannelServicesMessagingErrorResponse))]
        [ProducesResponseType(statusCode: 401, type: typeof(SCServiceChannelServicesMessagingErrorResponse))]
        public abstract Task<IActionResult> AssetsGetassetwohistoryworkOrdersCountworkOrdersCount([FromQuery (Name = "workOrdersCount")][Required()]int workOrdersCount, [FromBody]List<int> assetIds);

        /// <summary>
        /// Ge tFiltered Asset Leaks
        /// </summary>
        /// <param name="request"></param>
        /// <response code="200">OK</response>
        [HttpPost]
        [Route("/v3/assets/getfilteredassetleaks")]
        [Consumes("application/json", "text/json", "application/xml", "text/xml", "application/x-www-form-urlencoded")]
        [ValidateModelState]
        [ProducesResponseType(statusCode: 200, type: typeof(Object))]
        public abstract Task<IActionResult> AssetsGetfilteredassetleaks([FromBody]SCServiceChannelServicesMessagingAssetsGetFilteredAssetsRequest request);

        /// <summary>
        /// Get Filtered Assets
        /// </summary>
        /// <param name="request"></param>
        /// <response code="200">OK</response>
        [HttpPost]
        [Route("/v3/assets/getfilteredassets")]
        [Consumes("application/json", "text/json", "application/xml", "text/xml", "application/x-www-form-urlencoded")]
        [ValidateModelState]
        [ProducesResponseType(statusCode: 200, type: typeof(Object))]
        public abstract Task<IActionResult> AssetsGetfilteredassets([FromBody]SCServiceChannelServicesMessagingAssetsGetFilteredAssetsRequest request);

        /// <summary>
        /// Get Filtered Assets V1
        /// </summary>
        /// <param name="request">The request to perform action with.</param>
        /// <param name="providerId">The provider identifier. Required for sub-contractor request. [Required Special permissions]</param>
        /// <response code="200">OK</response>
        [HttpPost]
        [Route("/v3/assets/getfilteredassetsV1")]
        [Consumes("application/json", "text/json", "application/xml", "text/xml", "application/x-www-form-urlencoded")]
        [ValidateModelState]
        [ProducesResponseType(statusCode: 200, type: typeof(Object))]
        public abstract Task<IActionResult> AssetsGetfilteredassetsV1providerIdproviderId([FromBody]SCServiceChannelServicesMessagingAssetsGetFilteredAssetsRequest request, [FromQuery (Name = "providerId")]int? providerId);

        /// <summary>
        /// Get Wo Asset Tracking
        /// </summary>
        /// <param name="woId"></param>
        /// <response code="200">OK</response>
        [HttpPost]
        [Route("/v3/assets/getwoassettracking")]
        [ValidateModelState]
        [ProducesResponseType(statusCode: 200, type: typeof(Object))]
        public abstract Task<IActionResult> AssetsGetwoassettrackingwoIdwoId([FromQuery (Name = "woId")][Required()]int woId);

        /// <summary>
        /// Determines if the specified asset has had its tag validated or not
        /// </summary>
        /// <param name="auditRequest"></param>
        /// <response code="200">Request succeeded</response>
        /// <response code="400">Request did NOT succeed and the error information is in the response</response>
        [HttpPost]
        [Route("/v3/assets/HasAssetBeenValidated")]
        [Consumes("application/json", "text/json", "application/xml", "text/xml", "application/x-www-form-urlencoded")]
        [ValidateModelState]
        [ProducesResponseType(statusCode: 200, type: typeof(bool))]
        [ProducesResponseType(statusCode: 400, type: typeof(SCServiceChannelServicesMessagingErrorResponse))]
        public abstract Task<IActionResult> AssetsHasAssetBeenValidated([FromBody]SCServiceChannelServicesMessagingAssetsAssetTagScanAuditRecord auditRequest);

        /// <summary>
        /// 
        /// </summary>
        /// <param name="locationId"></param>
        /// <param name="trade"></param>
        /// <response code="200">Request succeeded and the requested information is in the response.</response>
        /// <response code="400">Bad Request - the request could not be understood or was missing required parameters.              &lt;br/&gt;Error codes:              503 — User info should not be null;              SubscriberId is null;</response>
        /// <response code="401">Unauthorized indicates that the requested resource requires authentication.              &lt;br/&gt;Error codes:              504 — API call rejected by security permissions;</response>
        [HttpPost]
        [Route("/v3/assets/locationAssetsTree")]
        [ValidateModelState]
        [ProducesResponseType(statusCode: 200, type: typeof(List<SCServiceChannelServicesMessagingAssetsAssetsResponseTreeNode>))]
        [ProducesResponseType(statusCode: 400, type: typeof(SCServiceChannelServicesMessagingErrorResponse))]
        [ProducesResponseType(statusCode: 401, type: typeof(SCServiceChannelServicesMessagingErrorResponse))]
        public abstract Task<IActionResult> AssetsLocationAssetsTreelocationIdlocationIdtradetrade([FromQuery (Name = "locationId")][Required()]int locationId, [FromQuery (Name = "trade")]string? trade);

        /// <summary>
        /// Get assets
        /// </summary>
        /// <remarks>Returns a list of assets with all details for the specified location. Enter the &#x60;trade&#x60; parameter to make your request more specific.               &lt;br /&gt;               You can use the [GET/assets/{assetId}](https://developer.servicechannel.com/swagger/ui/index?version&#x3D;3#/Assets/GETv3_assets__assetId__locationId__locationId__storeId__storeId__tagId__tagId__trackingNumber__trackingNumber_) method to get the details of a particular asset.</remarks>
        /// <param name="locationId">Unique numeric identifier of the location you want to retrieve assets details of.</param>
        /// <param name="trade">Trade of an asset type the asset is assigned to, for example, *CARPENTRY* or *PLUMBING*.</param>
        /// <response code="200">The assets for the specified location are in the response.</response>
        /// <response code="400">The request is not accepted due to bad syntax, missing parameters, insufficient data, etc.</response>
        /// <response code="401">The request is not authorized.              &lt;br/&gt;Error codes:              504 — API call rejected by security permissions</response>
        /// <response code="404">The request URI is incorrect, or the resource does not exist.</response>
        [HttpGet]
        [Route("/v3/assets/locations/{locationId}")]
        [ValidateModelState]
        [ProducesResponseType(statusCode: 200, type: typeof(SCServiceChannelServicesMessagingAssetsAssetsInfoResponse))]
        [ProducesResponseType(statusCode: 400, type: typeof(SCServiceChannelServicesMessagingErrorResponse))]
        [ProducesResponseType(statusCode: 401, type: typeof(SCServiceChannelServicesMessagingErrorResponse))]
        [ProducesResponseType(statusCode: 404, type: typeof(SCServiceChannelServicesMessagingErrorResponse))]
        public abstract Task<IActionResult> AssetsLocationslocationIdtradetrade([FromRoute (Name = "locationId")][Required]int locationId, [FromQuery (Name = "trade")]string? trade);

        /// <summary>
        /// Records an audit record for the asset tag that was scanned
        /// </summary>
        /// <param name="auditRequest"></param>
        /// <response code="200">Request succeeded</response>
        /// <response code="400">Request did NOT succeed and the error information is in the response</response>
        [HttpPost]
        [Route("/v3/assets/RecordScannedAsset")]
        [Consumes("application/json", "text/json", "application/xml", "text/xml", "application/x-www-form-urlencoded")]
        [ValidateModelState]
        [ProducesResponseType(statusCode: 200, type: typeof(bool))]
        [ProducesResponseType(statusCode: 400, type: typeof(SCServiceChannelServicesMessagingErrorResponse))]
        public abstract Task<IActionResult> AssetsRecordScannedAsset([FromBody]SCServiceChannelServicesMessagingAssetsAssetTagScanAuditRecord auditRequest);

        /// <summary>
        /// Search Assets
        /// </summary>
        /// <param name="request"></param>
        /// <response code="200">OK</response>
        [HttpPost]
        [Route("/v3/assets/searchassets")]
        [Consumes("application/json", "text/json", "application/xml", "text/xml", "application/x-www-form-urlencoded")]
        [ValidateModelState]
        [ProducesResponseType(statusCode: 200, type: typeof(Object))]
        public abstract Task<IActionResult> AssetsSearchassets([FromBody]SCServiceChannelServicesMessagingEquipmentsSearchAssetRequest request);

        /// <summary>
        /// Get list of assets grouped by AsseTypeGroupID
        /// </summary>
        /// <param name="request"></param>
        /// <response code="200">Request succeeded and the requested information is in the response.</response>
        /// <response code="400">Bad Request - the request could not be understood or was missing required parameters.              &lt;br/&gt;Error codes:              503 — User info should not be null;              SubscriberId is null;</response>
        /// <response code="401">Unauthorized indicates that the requested resource requires authentication.              &lt;br/&gt;Error codes:              504 — API call rejected by security permissions;</response>
        [HttpPost]
        [Route("/v3/assets/searchassetsByGroupId")]
        [Consumes("application/json", "text/json", "application/xml", "text/xml", "application/x-www-form-urlencoded")]
        [ValidateModelState]
        [ProducesResponseType(statusCode: 200, type: typeof(List<SCServiceChannelServicesMessagingAssetsAssetsGroupedByCategoriesResponse>))]
        [ProducesResponseType(statusCode: 400, type: typeof(SCServiceChannelServicesMessagingErrorResponse))]
        [ProducesResponseType(statusCode: 401, type: typeof(SCServiceChannelServicesMessagingErrorResponse))]
        public abstract Task<IActionResult> AssetsSearchassetsByGroupId([FromBody]SCServiceChannelServicesMessagingEquipmentsSearchAssetsByGroupIDRequest request);

        /// <summary>
        /// Gets list of unable to add reasons.
        /// </summary>
        /// <response code="200">Request succeeded and response contains list of unable to add reasons</response>
        /// <response code="400">Request did NOT succeed and response contains error information</response>
        [HttpGet]
        [Route("/v3/assets/UnableToAddReasons")]
        [ValidateModelState]
        [ProducesResponseType(statusCode: 200, type: typeof(SCServiceChannelServicesMessagingAdministrationAssetRulesUnableToAddReason))]
        [ProducesResponseType(statusCode: 400, type: typeof(SCServiceChannelServicesMessagingErrorResponse))]
        public abstract Task<IActionResult> AssetsUnableToAddReasons();

        /// <summary>
        /// Creates wo_UnableToAddAssetHistory.
        /// </summary>
        /// <param name="model"></param>
        /// <response code="200">Request succeeded</response>
        /// <response code="400">Request did NOT succeed and response contains error information</response>
        [HttpPost]
        [Route("/v3/assets/UnableToAddReasons")]
        [Consumes("application/json", "text/json", "application/xml", "text/xml", "application/x-www-form-urlencoded")]
        [ValidateModelState]
        [ProducesResponseType(statusCode: 200, type: typeof(SCServiceChannelServicesMessagingAssetsUnableToAddAssetReasonRequest))]
        [ProducesResponseType(statusCode: 400, type: typeof(SCServiceChannelServicesMessagingErrorResponse))]
        public abstract Task<IActionResult> AssetsUnableToAddReasons_0([FromBody]SCServiceChannelServicesMessagingAssetsUnableToAddAssetReasonRequest model);

        /// <summary>
        /// Creates wo_UnableToScanAssetHistory.
        /// </summary>
        /// <param name="model"></param>
        /// <response code="200">Request succeeded</response>
        /// <response code="400">Request did NOT succeed and response contains error information</response>
        [HttpPost]
        [Route("/v3/assets/UnableToScanReasons")]
        [Consumes("application/json", "text/json", "application/xml", "text/xml", "application/x-www-form-urlencoded")]
        [ValidateModelState]
        [ProducesResponseType(statusCode: 200, type: typeof(SCServiceChannelServicesMessagingAssetsUnableToScanAssetReasonRequest))]
        [ProducesResponseType(statusCode: 400, type: typeof(SCServiceChannelServicesMessagingErrorResponse))]
        public abstract Task<IActionResult> AssetsUnableToScanReasons([FromBody]SCServiceChannelServicesMessagingAssetsUnableToScanAssetReasonRequest model);

        /// <summary>
        /// Gets list of unable to scan reasons not attached assets.
        /// </summary>
        /// <response code="200">Request succeeded and response contains list of unable to scan reasons not attached assets</response>
        /// <response code="400">Request did NOT succeed and response contains error information</response>
        [HttpGet]
        [Route("/v3/assets/UnableToScanReasonsNotAttachedAsset")]
        [ValidateModelState]
        [ProducesResponseType(statusCode: 200, type: typeof(SCServiceChannelServicesMessagingAdministrationAssetRulesUnableToScanReasonsNotAttachedAsset))]
        [ProducesResponseType(statusCode: 400, type: typeof(SCServiceChannelServicesMessagingErrorResponse))]
        public abstract Task<IActionResult> AssetsUnableToScanReasonsNotAttachedAsset();

        /// <summary>
        /// Gets list of unable to scan reasons.
        /// </summary>
        /// <param name="subscriberId">Subscriber unique indentifier</param>
        /// <response code="200">Request succeeded and response contains list of unable to scan reasons</response>
        /// <response code="400">Request did NOT succeed and response contains error information</response>
        [HttpGet]
        [Route("/v3/assets/UnableToScanReasons")]
        [ValidateModelState]
        [ProducesResponseType(statusCode: 200, type: typeof(SCServiceChannelServicesMessagingAdministrationAssetRulesUnableToScanReason))]
        [ProducesResponseType(statusCode: 400, type: typeof(SCServiceChannelServicesMessagingErrorResponse))]
        public abstract Task<IActionResult> AssetsUnableToScanReasonssubscriberIdsubscriberId([FromQuery (Name = "subscriberId")]int? subscriberId);

        /// <summary>
        /// Gets list of unable to validate reasons.
        /// </summary>
        /// <response code="200">Request succeeded and response contains list of unable to validate reasons</response>
        /// <response code="400">Request did NOT succeed and response contains error information</response>
        [HttpGet]
        [Route("/v3/assets/UnableToValidateReasons")]
        [ValidateModelState]
        [ProducesResponseType(statusCode: 200, type: typeof(SCServiceChannelServicesMessagingAdministrationAssetRulesUnableToValidateReason))]
        [ProducesResponseType(statusCode: 400, type: typeof(SCServiceChannelServicesMessagingErrorResponse))]
        public abstract Task<IActionResult> AssetsUnableToValidateReasons();

        /// <summary>
        /// Gets list of unable to validate reasons not attached assets.
        /// </summary>
        /// <response code="200">Request succeeded and response contains list of unable to validate reasons not attached assets</response>
        /// <response code="400">Request did NOT succeed and response contains error information</response>
        [HttpGet]
        [Route("/v3/assets/UnableToValidateReasonsNotAttachedAsset")]
        [ValidateModelState]
        [ProducesResponseType(statusCode: 200, type: typeof(SCServiceChannelServicesMessagingAdministrationAssetRulesUnableToValidateReasonsNotAttachedAsset))]
        [ProducesResponseType(statusCode: 400, type: typeof(SCServiceChannelServicesMessagingErrorResponse))]
        public abstract Task<IActionResult> AssetsUnableToValidateReasonsNotAttachedAsset();

        /// <summary>
        /// Creates wo_UnableToValidateAssetHistory.
        /// </summary>
        /// <param name="model"></param>
        /// <response code="200">Request succeeded</response>
        /// <response code="400">Request did NOT succeed and response contains error information</response>
        [HttpPost]
        [Route("/v3/assets/UnableToValidateReasons")]
        [Consumes("application/json", "text/json", "application/xml", "text/xml", "application/x-www-form-urlencoded")]
        [ValidateModelState]
        [ProducesResponseType(statusCode: 200, type: typeof(SCServiceChannelServicesMessagingAssetsUnableToValidateAssetReasonRequest))]
        [ProducesResponseType(statusCode: 400, type: typeof(SCServiceChannelServicesMessagingErrorResponse))]
        public abstract Task<IActionResult> AssetsUnableToValidateReasons_0([FromBody]SCServiceChannelServicesMessagingAssetsUnableToValidateAssetReasonRequest model);

        /// <summary>
        /// Update asset location
        /// </summary>
        /// <remarks>Updates asset location</remarks>
        /// <param name="assetId">Asset update id</param>
        /// <param name="locationId">New location id</param>
        /// <response code="200">Indicates that the request succeeded and that the requested information is in the response.</response>
        /// <response code="400">Bad Request - the request could not be understood or was missing required parameters.              &lt;br/&gt;Error codes:              503 — Request Data should not be null;              User info should not be null;              SubscriberId is null;              Asset ID is absent;              502 — No asset or location to update;</response>
        /// <response code="401">Indicates that the requested resource requires authentication.              &lt;br&gt;Error codes:              504 — API call rejected by security permissions;</response>
        [HttpPut]
        [Route("/v3/assets/updateAssetLocation")]
        [ValidateModelState]
        [ProducesResponseType(statusCode: 200, type: typeof(Object))]
        [ProducesResponseType(statusCode: 400, type: typeof(SCServiceChannelServicesMessagingErrorResponse))]
        [ProducesResponseType(statusCode: 401, type: typeof(SCServiceChannelServicesMessagingErrorResponse))]
        public abstract Task<IActionResult> AssetsUpdateAssetLocationassetIdassetIdlocationIdlocationId([FromQuery (Name = "assetId")][Required()]int assetId, [FromQuery (Name = "locationId")][Required()]int locationId);

        /// <summary>
        /// Asset meter readings bulk update
        /// </summary>
        /// <remarks>Updates information about asset meter readings.</remarks>
        /// <param name="request">Request to update the existing asset meter readings.</param>
        /// <response code="200">The asset meter readings details are in the response.</response>
        /// <response code="400">The request is not accepted due to bad syntax, missing parameters, insufficient data, etc.              &lt;br/&gt;Error codes:              Failed to update asset meter readings.</response>
        /// <response code="401">The request is not authorized.              &lt;br/&gt;Error codes:              504 — API call rejected by security permissions</response>
        [HttpPut]
        [Route("/v3/assets/UpdateAssetMeterReadingsBulk")]
        [Consumes("application/json", "text/json", "application/xml", "text/xml", "application/x-www-form-urlencoded")]
        [ValidateModelState]
        [ProducesResponseType(statusCode: 200, type: typeof(List<SCServiceChannelServicesMessagingAssetsAssetMeterReadingResponseItem>))]
        [ProducesResponseType(statusCode: 400, type: typeof(SCServiceChannelServicesMessagingErrorResponse))]
        [ProducesResponseType(statusCode: 401, type: typeof(SCServiceChannelServicesMessagingErrorResponse))]
        public abstract Task<IActionResult> AssetsUpdateAssetMeterReadingsBulk([FromBody]List<SCServiceChannelServicesMessagingAssetsUpdateAssetMeterReadingRequestItem> request);

        /// <summary>
        /// Update Asset Status By AssetId
        /// </summary>
        /// <param name="request"></param>
        /// <response code="200">The asset status is successfully updated.</response>
        /// <response code="400">Bad Request - the request could not be understood or was missing required parameters.              &lt;br/&gt;Error codes:              503 — Asset ID is absent;</response>
        /// <response code="401">Unauthorized indicates that the requested resource requires authentication.              &lt;br/&gt;Error codes:              504 — API call rejected by security permissions;</response>
        /// <response code="404">The request URI is incorrect, or the resource does not exist.              &lt;br/&gt;Error codes:              502 — Asset is not found</response>
        [HttpPut]
        [Route("/v3/assets/updateAssetStatus")]
        [Consumes("application/json", "text/json", "application/xml", "text/xml", "application/x-www-form-urlencoded")]
        [ValidateModelState]
        [ProducesResponseType(statusCode: 200, type: typeof(bool))]
        [ProducesResponseType(statusCode: 400, type: typeof(SCServiceChannelServicesMessagingErrorResponse))]
        [ProducesResponseType(statusCode: 401, type: typeof(SCServiceChannelServicesMessagingErrorResponse))]
        [ProducesResponseType(statusCode: 404, type: typeof(SCServiceChannelServicesMessagingErrorResponse))]
        public abstract Task<IActionResult> AssetsUpdateAssetStatus([FromBody]SCServiceChannelServicesMessagingAssetsUpdateAssetStatusRequest request);

        /// <summary>
        /// Update Assets Statuses
        /// </summary>
        /// <param name="request"></param>
        /// <response code="200">Assets statuses is successfully updated.</response>
        /// <response code="400">Bad Request - the request could not be understood or was missing required parameters.              &lt;br/&gt;Error codes:              503 — Asset ID is absent;</response>
        /// <response code="401">Unauthorized indicates that the requested resource requires authentication.              &lt;br/&gt;Error codes:              504 — API call rejected by security permissions;</response>
        /// <response code="404">The request URI is incorrect, or the resource does not exist.              &lt;br/&gt;Error codes:              502 — Asset is not found</response>
        [HttpPut]
        [Route("/v3/assets/updateAssetsStatuses")]
        [Consumes("application/json", "text/json", "application/xml", "text/xml", "application/x-www-form-urlencoded")]
        [ValidateModelState]
        [ProducesResponseType(statusCode: 400, type: typeof(SCServiceChannelServicesMessagingErrorResponse))]
        [ProducesResponseType(statusCode: 401, type: typeof(SCServiceChannelServicesMessagingErrorResponse))]
        [ProducesResponseType(statusCode: 404, type: typeof(SCServiceChannelServicesMessagingErrorResponse))]
        public abstract Task<IActionResult> AssetsUpdateAssetsStatuses([FromBody]SCServiceChannelServicesMessagingAssetsUpdateAssetsStatusesRequest request);

        /// <summary>
        /// Update Asset Repair Status By AssetId
        /// </summary>
        /// <param name="request"></param>
        /// <response code="200">Request succeeded and the requested information is in the response.</response>
        /// <response code="400">Bad Request - the request could not be understood or was missing required parameters.              &lt;br/&gt;Error codes:              503 — User info should not be null;              SubscriberId is null;</response>
        /// <response code="401">Unauthorized indicates that the requested resource requires authentication.              &lt;br/&gt;Error codes:              504 — API call rejected by security permissions;</response>
        [HttpPut]
        [Route("/v3/assets/updateassetrepairstatus")]
        [Consumes("application/json", "text/json", "application/xml", "text/xml", "application/x-www-form-urlencoded")]
        [ValidateModelState]
        [ProducesResponseType(statusCode: 200, type: typeof(bool))]
        [ProducesResponseType(statusCode: 400, type: typeof(SCServiceChannelServicesMessagingErrorResponse))]
        [ProducesResponseType(statusCode: 401, type: typeof(SCServiceChannelServicesMessagingErrorResponse))]
        public abstract Task<IActionResult> AssetsUpdateassetrepairstatus([FromBody]SCServiceChannelServicesMessagingAssetsUpdateAssetRepairStatusRequest request);

        /// <summary>
        /// Get Brands (ver.2)
        /// </summary>
        /// <param name="keyword"></param>
        /// <param name="startIndex"></param>
        /// <param name="pageSize"></param>
        /// <response code="200">Request succeeded and the requested information is in the response.</response>
        /// <response code="400">Bad Request - the request could not be understood or was missing required parameters.              &lt;br/&gt;Error codes:              503 — User info should not be null;              SubscriberId is null;</response>
        /// <response code="401">Unauthorized indicates that the requested resource requires authentication.              &lt;br/&gt;Error codes:              504 — API call rejected by security permissions;</response>
        [HttpGet]
        [Route("/v3/assets/v2/Brands")]
        [ValidateModelState]
        [ProducesResponseType(statusCode: 200, type: typeof(SCServiceChannelServicesMessagingAssetsManufacturersResponce))]
        [ProducesResponseType(statusCode: 400, type: typeof(SCServiceChannelServicesMessagingErrorResponse))]
        [ProducesResponseType(statusCode: 401, type: typeof(SCServiceChannelServicesMessagingErrorResponse))]
        public abstract Task<IActionResult> AssetsV2BrandskeywordkeywordstartIndexstartIndexpageSizepageSize([FromQuery (Name = "keyword")]string? keyword, [FromQuery (Name = "startIndex")]int? startIndex, [FromQuery (Name = "pageSize")]int? pageSize);

        /// <summary>
        /// Gets the asset tag validation settings for multiple subscribers.
        /// </summary>
        /// <param name="request">request</param>
        /// <response code="200">Request succeeded and response contains asset tag validation exception information</response>
        /// <response code="400">Request did NOT succeed and response contains error information</response>
        [HttpPost]
        [Route("/v3/assets/ValidationRulesForMultipleSubscribers")]
        [Consumes("application/json", "text/json", "application/xml", "text/xml", "application/x-www-form-urlencoded")]
        [ValidateModelState]
        [ProducesResponseType(statusCode: 200, type: typeof(SCServiceChannelServicesMessagingAdministrationAssetRulesAssetTagging))]
        [ProducesResponseType(statusCode: 400, type: typeof(SCServiceChannelServicesMessagingErrorResponse))]
        public abstract Task<IActionResult> AssetsValidationRulesForMultipleSubscribers([FromBody]SCServiceChannelServicesCoreInternalRequestsAdministrationGetAssetTagValidationRequest request);

        /// <summary>
        /// Get Work Orders Area list
        /// </summary>
        /// <param name="subscriberId"></param>
        /// <response code="200">Request succeeded and the requested information is in the response.</response>
        /// <response code="400">Bad Request - the request could not be understood or was missing required parameters.              &lt;br/&gt; Request data should not be null.              &lt;br/&gt; Subscriber User can obtain only own Areas</response>
        /// <response code="401">Unauthorized indicates that the requested resource requires authentication.              &lt;br/&gt;Error codes:              504 — API call rejected by security permissions;</response>
        [HttpGet]
        [Route("/v3/assets/WorkorderAreas/{subscriberId}")]
        [ValidateModelState]
        [ProducesResponseType(statusCode: 200, type: typeof(List<SCSystemCollectionsGenericKeyValuePairSystemInt32SystemString>))]
        [ProducesResponseType(statusCode: 400, type: typeof(SCServiceChannelServicesMessagingErrorResponse))]
        [ProducesResponseType(statusCode: 401, type: typeof(SCServiceChannelServicesMessagingErrorResponse))]
        public abstract Task<IActionResult> AssetsWorkorderAreassubscriberId([FromRoute (Name = "subscriberId")][Required]int subscriberId);

        /// <summary>
        /// Add assets
        /// </summary>
        /// <remarks>Assigns several assets to the specified work order at a time. The *MultipleAssetsPerWorkOrder* FF should be enabled for the method to work properly.              &lt;br /&gt;***Note***: Assets added before will remain attached to the work order along with the new ones.</remarks>
        /// <param name="request">Request to add one or several assets to a particular work order.</param>
        /// <response code="200">The specified assets are attached to the work order.</response>
        /// <response code="400">The request is not accepted due to bad syntax, missing parameters, insufficient data, etc.              &lt;br/&gt;Error codes:              502 — Asset is not found</response>
        /// <response code="401">The request is not authorized.              &lt;br&gt;Error codes:              504 — API call rejected by security permissions</response>
        [HttpPut]
        [Route("/v3/assets/workorders/attachassets")]
        [Consumes("application/json", "text/json", "application/xml", "text/xml", "application/x-www-form-urlencoded")]
        [ValidateModelState]
        [ProducesResponseType(statusCode: 200, type: typeof(Object))]
        [ProducesResponseType(statusCode: 400, type: typeof(SCServiceChannelServicesMessagingErrorResponse))]
        [ProducesResponseType(statusCode: 401, type: typeof(SCServiceChannelServicesMessagingErrorResponse))]
        public abstract Task<IActionResult> AssetsWorkordersAttachassets([FromBody]SCServiceChannelServicesMessagingAssetsUpdateAssetsInWORequest request);

        /// <summary>
        /// Remove specified assets from specified work order
        /// </summary>
        /// <remarks>Remove Assets from Work Order.</remarks>
        /// <param name="request">The work order identity and assets ids.</param>
        /// <response code="200">Indicates that the request succeeded and that the requested information is in the response.</response>
        /// <response code="400">Bad Request - the request could not be understood or was missing required parameters.              &lt;br/&gt;Error codes:              503 — Request Data should not be null;              User info should not be null;              Asset identity is absent;              Work Order identity is absent;              502 — No asset to update;</response>
        /// <response code="401">Indicates that the requested resource requires authentication.              &lt;br&gt;Error codes:              504 — API call rejected by security permissions;</response>
        [HttpPost]
        [Route("/v3/assets/workorders/removeassets")]
        [Consumes("application/json", "text/json", "application/xml", "text/xml", "application/x-www-form-urlencoded")]
        [ValidateModelState]
        [ProducesResponseType(statusCode: 200, type: typeof(Object))]
        [ProducesResponseType(statusCode: 400, type: typeof(SCServiceChannelServicesMessagingErrorResponse))]
        [ProducesResponseType(statusCode: 401, type: typeof(SCServiceChannelServicesMessagingErrorResponse))]
        public abstract Task<IActionResult> AssetsWorkordersRemoveassets([FromBody]SCServiceChannelServicesMessagingAssetsRemoveAssetsFromWORequest request);

        /// <summary>
        /// Add and replace assets
        /// </summary>
        /// <remarks>Assigns several assets to the specified work order at a time. The *MultipleAssetsPerWorkOrder* FF should be enabled for the method to work properly.              &lt;br /&gt;***Note***. Existing assets will be replaced with the new ones.</remarks>
        /// <param name="request">Request to add one or several assets to a particular work order.</param>
        /// <response code="200">The specified assets are attached to the work order.</response>
        /// <response code="400">The request is not accepted due to bad syntax, missing parameters, insufficient data, etc.              &lt;br/&gt;Error codes:              502 — Asset is not found</response>
        /// <response code="401">The request is not authorized.              &lt;br&gt;Error codes:              504 — API call rejected by security permissions</response>
        [HttpPut]
        [Route("/v3/assets/workorders/setupassets")]
        [Consumes("application/json", "text/json", "application/xml", "text/xml", "application/x-www-form-urlencoded")]
        [ValidateModelState]
        [ProducesResponseType(statusCode: 200, type: typeof(Object))]
        [ProducesResponseType(statusCode: 400, type: typeof(SCServiceChannelServicesMessagingErrorResponse))]
        [ProducesResponseType(statusCode: 401, type: typeof(SCServiceChannelServicesMessagingErrorResponse))]
        public abstract Task<IActionResult> AssetsWorkordersSetupassets([FromBody]SCServiceChannelServicesMessagingAssetsUpdateAssetsInWORequest request);

        /// <summary>
        /// Attach an asset
        /// </summary>
        /// <remarks>Assigns the specified asset to a particular work order. You can attach multiple assets to one work order by sending several requests.              &lt;br /&gt;***Note***: A work order and an asset you want to attach should belong to the same trade and location.              &lt;br /&gt;***Note***: Assets added do not replace existing assets.              &lt;br /&gt;Refer to ServiceChannel University to learn more about [updating assets on work orders](https://servicechannel.atlassian.net/wiki/spaces/SCU/pages/1484194012/Updating+Assets+on+Work+Orders).</remarks>
        /// <param name="workorderId">Unique numeric identifier of the work order you want to assign an asset to. To retrieve IDs of work orders, use the [GET /workorders](https://developer.servicechannel.com/swagger/ui/index?version&#x3D;3#/WorkOrders/GETv3_workorders_locationId__locationId__storeId__storeId_) method.</param>
        /// <param name="attachAssetRequest">Request to assign the specified asset</param>
        /// <response code="200">The ID of the asset attached to the work order is in the response.</response>
        /// <response code="400">The request is not accepted due to bad syntax, missing parameters, insufficient data, etc.              &lt;br/&gt;Error codes:              502 — Asset is not found or Asset Location/Trade does not correspond to WO Location/Trade              502 — Work order is not found</response>
        /// <response code="401">The request is not authorized.              &lt;br/&gt;Error codes:              504 — API call rejected by security permissions</response>
        /// <response code="403">You are not authorized to request this resource, or the resource is unavailable for some reason.              &lt;br/&gt;Error codes:              100 — Current Asset has already been assigned to the work order RecId: workorderId              100 — Work Order either has connection with a leak record or is a Leak Inspection.</response>
        /// <response code="500">The server was unable to complete the request due to an internal error.              &lt;br/&gt;Error codes:              501 — Object reference is not set to an instance of an object</response>
        [HttpPut]
        [Route("/v3/assets/workorders/{workorderId}/attach")]
        [Consumes("application/json", "text/json", "application/xml", "text/xml", "application/x-www-form-urlencoded")]
        [ValidateModelState]
        [ProducesResponseType(statusCode: 200, type: typeof(Object))]
        [ProducesResponseType(statusCode: 400, type: typeof(SCServiceChannelServicesMessagingErrorResponse))]
        [ProducesResponseType(statusCode: 401, type: typeof(SCServiceChannelServicesMessagingErrorResponse))]
        [ProducesResponseType(statusCode: 403, type: typeof(SCServiceChannelServicesMessagingErrorResponse))]
        [ProducesResponseType(statusCode: 500, type: typeof(SCServiceChannelServicesMessagingErrorResponse))]
        public abstract Task<IActionResult> AssetsWorkordersworkorderIdAttach([FromRoute (Name = "workorderId")][Required]int workorderId, [FromBody]SCServiceChannelServicesMessagingAssetsAttachAssetRequest attachAssetRequest);

        /// <summary>
        /// Remove assets
        /// </summary>
        /// <remarks>Removes all assets assigned to the specified work order.</remarks>
        /// <param name="workorderId">Unique numeric identifier of the work order you want to remove assets from. To retrieve IDs of work orders, use the [GET /workorders](https://developer.servicechannel.com/swagger/ui/index?version&#x3D;3#/WorkOrders/GETv3_workorders_locationId__locationId__storeId__storeId_) method.</param>
        /// <response code="200">The assets are successfully removed from the specified work order.</response>
        /// <response code="400">The request is not accepted due to bad syntax, missing parameters, insufficient data, etc.              &lt;br/&gt;Error codes:              502 — Work order is not found</response>
        /// <response code="401">The request is not authorized.              &lt;br&gt;Error codes:              504 — API call rejected by security permissions</response>
        [HttpPut]
        [Route("/v3/assets/workorders/{workorderId}/detach")]
        [ValidateModelState]
        [ProducesResponseType(statusCode: 200, type: typeof(Object))]
        [ProducesResponseType(statusCode: 400, type: typeof(SCServiceChannelServicesMessagingErrorResponse))]
        [ProducesResponseType(statusCode: 401, type: typeof(SCServiceChannelServicesMessagingErrorResponse))]
        public abstract Task<IActionResult> AssetsWorkordersworkorderIdDetach([FromRoute (Name = "workorderId")][Required]int workorderId);

        /// <summary>
        /// Remove specified assets from specified work request
        /// </summary>
        /// <remarks>*In limited availability phase.*              &lt;br /&gt;Remove Assets from Work Request.</remarks>
        /// <param name="request">The work request identity and assets ids.</param>
        /// <response code="200">Indicates that the request succeeded and that the requested information is in the response.</response>
        /// <response code="400">Bad Request - the request could not be understood or was missing required parameters.              &lt;br/&gt;Error codes:              503 — Request Data should not be null;              User info should not be null;                          Asset identity is absent;              Work Request identity is absent;              502 — No asset to update;</response>
        /// <response code="401">Indicates that the requested resource requires authentication.              &lt;br&gt;Error codes:              504 — API call rejected by security permissions;</response>
        [HttpPost]
        [Route("/v3/assets/workrequest/remove")]
        [Consumes("application/json", "text/json", "application/xml", "text/xml", "application/x-www-form-urlencoded")]
        [ValidateModelState]
        [ProducesResponseType(statusCode: 200, type: typeof(Object))]
        [ProducesResponseType(statusCode: 400, type: typeof(SCServiceChannelServicesMessagingErrorResponse))]
        [ProducesResponseType(statusCode: 401, type: typeof(SCServiceChannelServicesMessagingErrorResponse))]
        public abstract Task<IActionResult> AssetsWorkrequestRemove([FromBody]SCServiceChannelServicesMessagingAssetsRemoveAssetsWorkRequest request);

        /// <summary>
        /// Setup assets to the work request
        /// </summary>
        /// <remarks>*In limited availability phase.*              &lt;br /&gt;Setup Assets to Work Request.</remarks>
        /// <param name="request">The work request identity and assets ids.</param>
        /// <response code="200">Indicates that the request succeeded and that the requested information is in the response.</response>
        /// <response code="400">Bad Request - the request could not be understood or was missing required parameters.              &lt;br/&gt;Error codes:              502 — Asset is not found;              Invalid Work Request Identifier;</response>
        /// <response code="401">Indicates that the requested resource requires authentication.              &lt;br&gt;Error codes:              504 — API call rejected by security permissions;</response>
        [HttpPut]
        [Route("/v3/assets/workrequest/setup")]
        [Consumes("application/json", "text/json", "application/xml", "text/xml", "application/x-www-form-urlencoded")]
        [ValidateModelState]
        [ProducesResponseType(statusCode: 200, type: typeof(Object))]
        [ProducesResponseType(statusCode: 400, type: typeof(SCServiceChannelServicesMessagingErrorResponse))]
        [ProducesResponseType(statusCode: 401, type: typeof(SCServiceChannelServicesMessagingErrorResponse))]
        public abstract Task<IActionResult> AssetsWorkrequestSetup([FromBody]SCServiceChannelServicesMessagingAssetsAssetsWorkRequest request);

        /// <summary>
        /// Setup assets to the specified work order
        /// </summary>
        /// <remarks>*In limited availability phase.*              &lt;br /&gt;Setup Assets to Work Order.</remarks>
        /// <param name="workRequestId"></param>
        /// <response code="200">Indicates that the request succeeded and that the requested information is in the response.</response>
        /// <response code="400">Bad Request - the request could not be understood or was missing required parameters.              &lt;br/&gt;Error codes:              503 — Request Data should not be null;              User info should not be null;                          Asset identity is absent;              Work Request identity is absent;              502 — No asset to update;</response>
        /// <response code="401">Indicates that the requested resource requires authentication.              &lt;br&gt;Error codes:              504 — API call rejected by security permissions;</response>
        [HttpGet]
        [Route("/v3/assets/workrequest/{workRequestId}")]
        [ValidateModelState]
        [ProducesResponseType(statusCode: 200, type: typeof(Object))]
        [ProducesResponseType(statusCode: 400, type: typeof(SCServiceChannelServicesMessagingErrorResponse))]
        [ProducesResponseType(statusCode: 401, type: typeof(SCServiceChannelServicesMessagingErrorResponse))]
        public abstract Task<IActionResult> AssetsWorkrequestworkRequestId([FromRoute (Name = "workRequestId")][Required]int workRequestId);

        /// <summary>
        /// Add an asset
        /// </summary>
        /// <remarks>Creates a new asset for the existing asset type. Since you need to specify which type an asset will belong to, you can:              &lt;br /&gt; • use the [GET /AssetTypes](https://developer.servicechannel.com/swagger/ui/index?version&#x3D;3#/AssetTypes/GETv3_AssetTypes) method to get a list of asset types of the current provider.              &lt;br /&gt; • create a new asset type by sending the [POST /AssetTypes](https://developer.servicechannel.com/swagger/ui/index?version&#x3D;3#/AssetTypes/POSTv3_AssetTypes) request.              &lt;br /&gt;You can learn more about [adding and editing assets](https://servicechannel.atlassian.net/wiki/spaces/SCU/pages/573178120/Adding+and+Editing+Assets) in ServiceChannel University.</remarks>
        /// <param name="assetRequest">Request to create a new asset.              &lt;br /&gt;Required parameters:              &lt;br /&gt; • **Tag** (aka **Tag ID**). Create an alphanumeric identifier for your asset, for example, AD-3421              &lt;br /&gt; • **Manufacturer**. Enter the brand name that exists in the system.              &lt;br /&gt; • **StoreId**. Specify the alphanumeric identifier of the existing location.              &lt;br /&gt; • **Trade**. Define the line of work an asset is used for, for example, *Electrical*, *Plumbing*, *Carpentry*.              &lt;br /&gt; • **Type**. Enter the type of an asset, for example, *Refrigerator*, *Computer Monitor*.</param>
        /// <response code="201">The created asset ID is in the response.</response>
        /// <response code="400">The request is not accepted due to bad syntax, missing parameters, insufficient data, etc.              &lt;br/&gt;Error codes:              503 — Unknown Brand name              503 — Asset Tag ID is empty              503 — Request is empty or null              503 — No Store ID in the request              503 — Trade not found               503 — Unknown Equipment type              503 — Unknown Store ID              503 — Other Trade in Asset Type</response>
        /// <response code="401">The request is not authorized.              &lt;br/&gt;Error codes:              504 — API call rejected by security permissions</response>
        [HttpPost]
        [Route("/v3/assets")]
        [Consumes("application/json", "text/json", "application/xml", "text/xml", "application/x-www-form-urlencoded")]
        [ValidateModelState]
        [ProducesResponseType(statusCode: 400, type: typeof(SCServiceChannelServicesMessagingErrorResponse))]
        [ProducesResponseType(statusCode: 401, type: typeof(SCServiceChannelServicesMessagingErrorResponse))]
        public abstract Task<IActionResult> Assets_0([FromBody]SCServiceChannelServicesMessagingAssetsAddAssetRequest assetRequest);

        /// <summary>
        /// Get an asset
        /// </summary>
        /// <remarks>Returns the details of the specified asset for the current subscriber.&lt;br /&gt;              Send the [GET/ assets/locations/{locationId}](https://developer.servicechannel.com/swagger/ui/index?version&#x3D;3#/Assets/GETv3_assets_locations__locationId__trade__trade_) request to retrieve assets for a particular location.</remarks>
        /// <param name="assetId">Unique numeric asset identifier you want to get information of.</param>
        /// <param name="locationId">Unique numeric location identifier. Should be paired with the &#x60;tagId&#x60; parameter to work correctly.</param>
        /// <param name="storeId">Alphanumeric location identifier in the client’s system. Should be paired with the &#x60;tagId&#x60; parameter to work correctly.</param>
        /// <param name="tagId">Alphanumeric asset identifier assigned by the client. Should be paired with either &#x60;locationId&#x60; or &#x60;storeId&#x60; to work correctly.</param>
        /// <param name="trackingNumber">Unique ID of the work order. Use the parameter to get asset validation attributes: &#x60;AssetValidated&#x60;, &#x60;ValidationRequired&#x60;.</param>
        /// <response code="200">The details of the requested asset are in the response.</response>
        /// <response code="400">The request is not accepted due to bad syntax, missing parameters, insufficient data, etc.</response>
        /// <response code="401">The request is not authorized.              &lt;br/&gt;Error codes:              504 — API call rejected by security permissions</response>
        /// <response code="404">The request URI is incorrect, or the resource does not exist.              &lt;br/&gt;Error codes:              502 — Asset is not found</response>
        [HttpGet]
        [Route("/v3/assets/{assetId}")]
        [ValidateModelState]
        [ProducesResponseType(statusCode: 200, type: typeof(SCServiceChannelServicesMessagingAssetsAssetResponse))]
        [ProducesResponseType(statusCode: 400, type: typeof(SCServiceChannelServicesMessagingErrorResponse))]
        [ProducesResponseType(statusCode: 401, type: typeof(SCServiceChannelServicesMessagingErrorResponse))]
        [ProducesResponseType(statusCode: 404, type: typeof(SCServiceChannelServicesMessagingErrorResponse))]
        public abstract Task<IActionResult> AssetsassetIdlocationIdlocationIdstoreIdstoreIdtagIdtagIdtrackingNumbertrackingNumber([FromRoute (Name = "assetId")][Required]int assetId, [FromQuery (Name = "locationId")]int? locationId, [FromQuery (Name = "storeId")]string? storeId, [FromQuery (Name = "tagId")]string? tagId, [FromQuery (Name = "trackingNumber")]int? trackingNumber);

        /// <summary>
        /// Get asset workorder history
        /// </summary>
        /// <param name="assetid"></param>
        /// <response code="200">Request succeeded and the requested information is in the response.</response>
        /// <response code="400">Bad Request - the request could not be understood or was missing required parameters.              &lt;br/&gt;Error codes:              503 — User info should not be null;              SubscriberId is null;</response>
        /// <response code="401">Unauthorized indicates that the requested resource requires authentication.              &lt;br/&gt;Error codes:              504 — API call rejected by security permissions;</response>
        [HttpGet]
        [Route("/v3/assets/{assetid}/assetwohistory")]
        [ValidateModelState]
        [ProducesResponseType(statusCode: 200, type: typeof(List<SCServiceChannelApiModelEquipmentsAssetWorkHistory>))]
        [ProducesResponseType(statusCode: 400, type: typeof(SCServiceChannelServicesMessagingErrorResponse))]
        [ProducesResponseType(statusCode: 401, type: typeof(SCServiceChannelServicesMessagingErrorResponse))]
        public abstract Task<IActionResult> AssetsassetidAssetwohistory([FromRoute (Name = "assetid")][Required]int assetid);

        /// <summary>
        /// Add Brand
        /// </summary>
        /// <param name="brandName"></param>
        /// <response code="200">Request succeeded and the requested information is in the response.</response>
        /// <response code="400">Bad Request - the request could not be understood or was missing required parameters.              &lt;br/&gt;Error codes:              503 — User info should not be null;              SubscriberId is null;</response>
        /// <response code="401">Unauthorized indicates that the requested resource requires authentication.              &lt;br/&gt;Error codes:              504 — API call rejected by security permissions;</response>
        [HttpPost]
        [Route("/v3/assets/{brandName}/AddBrand")]
        [ValidateModelState]
        [ProducesResponseType(statusCode: 200, type: typeof(int))]
        [ProducesResponseType(statusCode: 400, type: typeof(SCServiceChannelServicesMessagingErrorResponse))]
        [ProducesResponseType(statusCode: 401, type: typeof(SCServiceChannelServicesMessagingErrorResponse))]
        public abstract Task<IActionResult> AssetsbrandNameAddBrand([FromRoute (Name = "brandName")][Required]string brandName);

        /// <summary>
        /// Gets the asset tag validation settings for the specified subscriber.
        /// </summary>
        /// <param name="subscriberId"></param>
        /// <response code="200">Request succeeded and response contains asset tag validation exception information</response>
        /// <response code="400">Request did NOT succeed and response contains error information</response>
        [HttpGet]
        [Route("/v3/assets/{subscriberId}/ValidationRules")]
        [ValidateModelState]
        [ProducesResponseType(statusCode: 200, type: typeof(SCServiceChannelServicesMessagingAdministrationAssetRulesAssetTagging))]
        [ProducesResponseType(statusCode: 400, type: typeof(SCServiceChannelServicesMessagingErrorResponse))]
        public abstract Task<IActionResult> AssetssubscriberIdValidationRules([FromRoute (Name = "subscriberId")][Required]int subscriberId);

        /// <summary>
        /// Get Scan Method
        /// </summary>
        /// <param name="trackingNumber">Tracking Number</param>
        /// <response code="200">Indicates that the request succeeded and that the requested information is in the response.</response>
        /// <response code="400">Bad Request - the request could not be understood or was missing required parameters.              &lt;br/&gt;Error codes:              503 — Request Data should not be null;</response>
        /// <response code="401">Indicates that the requested resource requires authentication.              &lt;br&gt;Error codes:              504 — API call rejected by security permissions;</response>
        [HttpGet]
        [Route("/v3/assets/{trackingNumber}/IsValidationRequired")]
        [ValidateModelState]
        [ProducesResponseType(statusCode: 200, type: typeof(Object))]
        [ProducesResponseType(statusCode: 400, type: typeof(SCServiceChannelServicesMessagingErrorResponse))]
        [ProducesResponseType(statusCode: 401, type: typeof(SCServiceChannelServicesMessagingErrorResponse))]
        public abstract Task<IActionResult> AssetstrackingNumberIsValidationRequired([FromRoute (Name = "trackingNumber")][Required]int trackingNumber);

        /// <summary>
        /// Get asset type groups by tradeId
        /// </summary>
        /// <remarks>Adds tradeId. Returns list of assetTypeGroup for successful request.</remarks>
        /// <param name="tradeId"></param>
        /// <response code="200">Request succeeded and the requested information is in the response.</response>
        /// <response code="400">Bad Request - the request could not be understood or was missing required parameters.              &lt;br/&gt;Error codes:              503 — Request Data should not be null.              User info should not be null.              SubscriberId is null.              Unknown Asset type;</response>
        /// <response code="401">Indicates that the requested resource requires authentication.              &lt;br/&gt;Error codes:              504 — API call rejected by security permissions;</response>
        [HttpGet]
        [Route("/v3/assets/{tradeId}/getAssetTypeGroupsByTradeId")]
        [ValidateModelState]
        [ProducesResponseType(statusCode: 200, type: typeof(List<SCServiceChannelServicesMessagingAssetTypesAssetTypeGroup>))]
        [ProducesResponseType(statusCode: 400, type: typeof(SCServiceChannelServicesMessagingErrorResponse))]
        [ProducesResponseType(statusCode: 401, type: typeof(SCServiceChannelServicesMessagingErrorResponse))]
        public abstract Task<IActionResult> AssetstradeIdGetAssetTypeGroupsByTradeId([FromRoute (Name = "tradeId")][Required]int tradeId);

        /// <summary>
        /// 
        /// </summary>
        /// <param name="processDuplicatedAssetTag"></param>
        /// <param name="code"></param>
        /// <param name="equipmentId"></param>
        /// <param name="expand">Expand a navigation property.</param>
        /// <param name="select">Select a set of properties to return.</param>
        /// <param name="filter">Filter a collection of resources addressed by a request URL.</param>
        /// <param name="orderby">Order resources by the specified property in the response.</param>
        /// <param name="top">Return the specified number of items in the response.</param>
        /// <param name="skip">Skip the specified number of items in the response.</param>
        /// <param name="count">Include the count of the matching resources in the response.</param>
        /// <response code="200">Indicates that the request succeeded and that the requested information is in the response.</response>
        [HttpGet]
        [Route("/v3/odata/assets/Service.AssociateAssetCode(equipmentId={equipmentId},code={code},processDuplicatedAssetTag={processDuplicatedAssetTag})")]
        [ValidateModelState]
        public abstract Task<IActionResult> AssociateAssetCode([FromRoute (Name = "processDuplicatedAssetTag")][Required]bool processDuplicatedAssetTag, [FromRoute (Name = "code")][Required]string code, [FromRoute (Name = "equipmentId")][Required]int equipmentId, [FromQuery (Name = "$expand")]string? expand, [FromQuery (Name = "$select")]string? select, [FromQuery (Name = "$filter")]string? filter, [FromQuery (Name = "$orderby")]string? orderby, [FromQuery (Name = "$top")]int? top, [FromQuery (Name = "$skip")]int? skip, [FromQuery (Name = "$count")]bool? count);

        /// <summary>
        /// Finds assets using the supplied search criteria.  The following fields will be searched for a match to the search criteria:  tag ID, asset type, brand, serial Number
        /// </summary>
        /// <param name="searchCriteria"></param>
        /// <param name="expand">Expand a navigation property.</param>
        /// <param name="select">Select a set of properties to return.</param>
        /// <param name="filter">Filter a collection of resources addressed by a request URL.</param>
        /// <param name="orderby">Order resources by the specified property in the response.</param>
        /// <param name="top">Return the specified number of items in the response.</param>
        /// <param name="skip">Skip the specified number of items in the response.</param>
        /// <param name="count">Include the count of the matching resources in the response.</param>
        /// <response code="200">Indicates that the request succeeded and that the requested information is in the response.</response>
        /// <response code="400">Indicates that the request DID NOT succeed and that the related error information is in the response.</response>
        [HttpGet]
        [Route("/v3/odata/assets/Service.FindAssets(searchCriteria={searchCriteria})")]
        [ValidateModelState]
        [ProducesResponseType(statusCode: 200, type: typeof(List<SCServiceChannelServicesMessagingAssetsAssetResponse>))]
        [ProducesResponseType(statusCode: 400, type: typeof(SCServiceChannelServicesMessagingErrorResponse))]
        public abstract Task<IActionResult> FindAssets([FromRoute (Name = "searchCriteria")][Required]string searchCriteria, [FromQuery (Name = "$expand")]string? expand, [FromQuery (Name = "$select")]string? select, [FromQuery (Name = "$filter")]string? filter, [FromQuery (Name = "$orderby")]string? orderby, [FromQuery (Name = "$top")]int? top, [FromQuery (Name = "$skip")]int? skip, [FromQuery (Name = "$count")]bool? count);

        /// <summary>
        /// 
        /// </summary>
        /// <param name="locationId"></param>
        /// <param name="searchCriteria"></param>
        /// <param name="expand">Expand a navigation property.</param>
        /// <param name="select">Select a set of properties to return.</param>
        /// <param name="filter">Filter a collection of resources addressed by a request URL.</param>
        /// <param name="orderby">Order resources by the specified property in the response.</param>
        /// <param name="top">Return the specified number of items in the response.</param>
        /// <param name="skip">Skip the specified number of items in the response.</param>
        /// <param name="count">Include the count of the matching resources in the response.</param>
        /// <response code="200">Indicates that the request succeeded and that the requested information is in the response.</response>
        /// <response code="400">Indicates that the request DID NOT succeed and that the related error information is in the response.</response>
        [HttpGet]
        [Route("/v3/odata/assets/Service.FindAssetsByLocation(searchCriteria={searchCriteria},locationId={locationId})")]
        [ValidateModelState]
        [ProducesResponseType(statusCode: 200, type: typeof(List<SCServiceChannelServicesMessagingAssetsAssetResponse>))]
        [ProducesResponseType(statusCode: 400, type: typeof(SCServiceChannelServicesMessagingErrorResponse))]
        public abstract Task<IActionResult> FindAssetsByLocation([FromRoute (Name = "locationId")][Required]int locationId, [FromRoute (Name = "searchCriteria")][Required]string searchCriteria, [FromQuery (Name = "$expand")]string? expand, [FromQuery (Name = "$select")]string? select, [FromQuery (Name = "$filter")]string? filter, [FromQuery (Name = "$orderby")]string? orderby, [FromQuery (Name = "$top")]int? top, [FromQuery (Name = "$skip")]int? skip, [FromQuery (Name = "$count")]bool? count);

        /// <summary>
        /// Finds assets using the supplied search criteria.  The following fields will be searched for a match to the search criteria:  tag ID, asset type, brand, serial Number
        /// </summary>
        /// <param name="subscriberId"></param>
        /// <param name="searchCriteria"></param>
        /// <param name="expand">Expand a navigation property.</param>
        /// <param name="select">Select a set of properties to return.</param>
        /// <param name="filter">Filter a collection of resources addressed by a request URL.</param>
        /// <param name="orderby">Order resources by the specified property in the response.</param>
        /// <param name="top">Return the specified number of items in the response.</param>
        /// <param name="skip">Skip the specified number of items in the response.</param>
        /// <param name="count">Include the count of the matching resources in the response.</param>
        /// <response code="200">Indicates that the request succeeded and that the requested information is in the response.</response>
        /// <response code="400">Indicates that the request DID NOT succeed and that the related error information is in the response.</response>
        [HttpGet]
        [Route("/v3/odata/assets/Service.FindAssetsBySubscriber(searchCriteria={searchCriteria},subscriberId={subscriberId})")]
        [ValidateModelState]
        [ProducesResponseType(statusCode: 200, type: typeof(List<SCServiceChannelServicesMessagingAssetsAssetResponse>))]
        [ProducesResponseType(statusCode: 400, type: typeof(SCServiceChannelServicesMessagingErrorResponse))]
        public abstract Task<IActionResult> FindAssetsBySubscriber([FromRoute (Name = "subscriberId")][Required]int subscriberId, [FromRoute (Name = "searchCriteria")][Required]string searchCriteria, [FromQuery (Name = "$expand")]string? expand, [FromQuery (Name = "$select")]string? select, [FromQuery (Name = "$filter")]string? filter, [FromQuery (Name = "$orderby")]string? orderby, [FromQuery (Name = "$top")]int? top, [FromQuery (Name = "$skip")]int? skip, [FromQuery (Name = "$count")]bool? count);

        /// <summary>
        /// Get an asset
        /// </summary>
        /// <remarks>Returns the details of the specified asset for the current subscriber.</remarks>
        /// <param name="assetId">Unique numeric asset identifier you want to get the details of.</param>
        /// <param name="expand">Expand a navigation property.</param>
        /// <param name="select">Select a set of properties to return.</param>
        /// <param name="filter">Filter a collection of resources addressed by a request URL.</param>
        /// <param name="orderby">Order resources by the specified property in the response.</param>
        /// <param name="top">Return the specified number of items in the response.</param>
        /// <param name="skip">Skip the specified number of items in the response.</param>
        /// <param name="count">Include the count of the matching resources in the response.</param>
        /// <response code="200">The requested asset with its details is in the response.</response>
        /// <response code="400">The request is not accepted due to bad syntax, missing parameters, insufficient data, etc.</response>
        /// <response code="404">The request URI is incorrect, or the resource does not exist.</response>
        [HttpGet]
        [Route("/v3/odata/assets({assetId})")]
        [ValidateModelState]
        [ProducesResponseType(statusCode: 200, type: typeof(SCServiceChannelServicesMessagingAssetsAssetResponse))]
        [ProducesResponseType(statusCode: 400, type: typeof(SCServiceChannelServicesMessagingErrorResponse))]
        [ProducesResponseType(statusCode: 404, type: typeof(SCServiceChannelServicesMessagingErrorResponse))]
        public abstract Task<IActionResult> GetAsset([FromRoute (Name = "assetId")][Required]int assetId, [FromQuery (Name = "$expand")]string? expand, [FromQuery (Name = "$select")]string? select, [FromQuery (Name = "$filter")]string? filter, [FromQuery (Name = "$orderby")]string? orderby, [FromQuery (Name = "$top")]int? top, [FromQuery (Name = "$skip")]int? skip, [FromQuery (Name = "$count")]bool? count);

        /// <summary>
        /// Get assets by &#x60;locationId&#x60; and &#x60;code&#x60;
        /// </summary>
        /// <remarks>Returns a list of assets for the current subscriber based on the specified &#x60;locationId&#x60; and &#x60;code&#x60; parameters. You can narrow the search by applying other filter parameters.</remarks>
        /// <param name="code">Also known as AssetTag. The value must be entered in &#39;29182-A&#39;</param>
        /// <param name="locationId">Unique numeric identifier of the location you want to get assets of.</param>
        /// <param name="expand">Expand a navigation property.</param>
        /// <param name="select">Select a set of properties to return.</param>
        /// <param name="filter">Filter a collection of resources addressed by a request URL.</param>
        /// <param name="orderby">Order resources by the specified property in the response.</param>
        /// <param name="top">Return the specified number of items in the response.</param>
        /// <param name="skip">Skip the specified number of items in the response.</param>
        /// <param name="count">Include the count of the matching resources in the response.</param>
        /// <response code="200">The requested assets are in the response.</response>
        /// <response code="401">The request is not authorized.&lt;br/&gt;&lt;br/&gt;Error codes:&lt;br/&gt; 504 � API call rejected by security permissions</response>
        [HttpGet]
        [Route("/v3/odata/assets/Service.Search(locationId={locationId},code={code})")]
        [ValidateModelState]
        [ProducesResponseType(statusCode: 200, type: typeof(List<SCServiceChannelServicesMessagingAssetsAssetResponse>))]
        [ProducesResponseType(statusCode: 401, type: typeof(SCServiceChannelServicesMessagingErrorResponse))]
        public abstract Task<IActionResult> SearchAssets([FromRoute (Name = "code")][Required]string code, [FromRoute (Name = "locationId")][Required]int locationId, [FromQuery (Name = "$expand")]string? expand, [FromQuery (Name = "$select")]string? select, [FromQuery (Name = "$filter")]string? filter, [FromQuery (Name = "$orderby")]string? orderby, [FromQuery (Name = "$top")]int? top, [FromQuery (Name = "$skip")]int? skip, [FromQuery (Name = "$count")]bool? count);
    }
}
