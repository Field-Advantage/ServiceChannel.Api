/*
 * ServiceChannel API - v.3
 *
 * The ServiceChannel API is a RESTful and stateless API. It accepts standard HTTP verbs and supports OAuth 2.0 for authorizing requests.      Our API returns common HTTP status codes as well as JSON encapsulated data.      See [API Overview](https://developer.servicechannel.com/basics/introduction/overview/) for the intro to ServiceChannel API.<br>      <h3>Authentication and Authorization</h3>You should have a ServiceChannel account, register your application, and obtain `access_token` to integrate with our API.      See [Authentication and Authorization](https://developer.servicechannel.com/basics/general/authentication/) for more information.      To use this API playground, click **Authorize** and sign in to ServiceChannel.<br>      <h3>Environment</h3> All calls in this API Reference point to the **SB2 environment**.      See [Environments](https://developer.servicechannel.com/basics/general/environments/) for more information.<br>      <h3>API Version</h3>The current stable version of the ServiceChannel API is `v3`. In the request URL, `v3` is a version prefix that should be present.      When you omit the version prefix, calls point to the minimum supported version of the API.      We recommend you to always specify the API version to avoid possible errors.
 *
 * The version of the OpenAPI document: 3
 * 
 * Generated by: https://openapi-generator.tech
 */

using System;
using System.Collections.Generic;
using System.ComponentModel.DataAnnotations;
using System.Threading;
using System.Threading.Tasks;
using Microsoft.AspNetCore.Authorization;
using Microsoft.AspNetCore.Mvc;
using Microsoft.AspNetCore.Http;
using ServiceChannel.OpenAPIGenerated.Api.Attributes;
using ServiceChannel.OpenAPIGenerated.Api.Models;

namespace ServiceChannel.OpenAPIGenerated.Api.Controllers
{ 
    /// <summary>
    /// 
    /// </summary>
    [ApiController]
    public abstract class ProposalsApiController : ControllerBase
    { 
        /// <summary>
        /// Retrieve Proposal Categories
        /// </summary>
        /// <remarks>Retrieve Proposal Categories</remarks>
        /// <param name="proposalId"></param>
        /// <param name="expand">Expand a navigation property.</param>
        /// <param name="select">Select a set of properties to return.</param>
        /// <param name="filter">Filter a collection of resources addressed by a request URL.</param>
        /// <param name="orderby">Order resources by the specified property in the response.</param>
        /// <param name="top">Return the specified number of items in the response.</param>
        /// <param name="skip">Skip the specified number of items in the response.</param>
        /// <param name="count">Include the count of the matching resources in the response.</param>
        /// <response code="200">Indicates that the request succeeded and that the requested information is in the response.</response>
        [HttpGet]
        [Route("/v3/odata/proposals({proposalId})/Service.Categories()")]
        [ValidateModelState]
        [ProducesResponseType(statusCode: 200, type: typeof(List<SCServiceChannelServicesMessagingProposalsProposalCategory>))]
        public abstract Task<IActionResult> GetProposalCategories([FromRoute (Name = "proposalId")][Required]int proposalId, [FromQuery (Name = "$expand")]string? expand, [FromQuery (Name = "$select")]string? select, [FromQuery (Name = "$filter")]string? filter, [FromQuery (Name = "$orderby")]string? orderby, [FromQuery (Name = "$top")]int? top, [FromQuery (Name = "$skip")]int? skip, [FromQuery (Name = "$count")]bool? count);

        /// <summary>
        /// Retrieve Proposals
        /// </summary>
        /// <remarks>Retrieve Proposals              &lt;br /&gt;The filter expressions by defaul is \&quot;$filter CreatedDate ge (Now-90 days)\&quot;.              &lt;br /&gt;The maximum CreatedDate value is 365 days even if provided.              &lt;br /&gt;Dates without &#39;Dto&#39; endings return UTC date format.              &lt;br /&gt;Dates without &#39;Dto&#39; endings are not recommended for using.</remarks>
        /// <param name="expand">Expand a navigation property.</param>
        /// <param name="select">Select a set of properties to return.</param>
        /// <param name="filter">Filter a collection of resources addressed by a request URL.</param>
        /// <param name="orderby">Order resources by the specified property in the response.</param>
        /// <param name="top">Return the specified number of items in the response.</param>
        /// <param name="skip">Skip the specified number of items in the response.</param>
        /// <param name="count">Include the count of the matching resources in the response.</param>
        /// <response code="200">Indicates that the request succeeded and that the requested information is in the response.</response>
        /// <response code="400">Indicates that the requested Proposal is in void status.</response>
        [HttpGet]
        [Route("/v3/odata/proposals")]
        [ValidateModelState]
        [ProducesResponseType(statusCode: 200, type: typeof(List<SCServiceChannelServicesMessagingProposalsProposalInfo>))]
        [ProducesResponseType(statusCode: 400, type: typeof(SCServiceChannelServicesMessagingErrorResponse))]
        public abstract Task<IActionResult> GetProposals([FromQuery (Name = "$expand")]string? expand, [FromQuery (Name = "$select")]string? select, [FromQuery (Name = "$filter")]string? filter, [FromQuery (Name = "$orderby")]string? orderby, [FromQuery (Name = "$top")]int? top, [FromQuery (Name = "$skip")]int? skip, [FromQuery (Name = "$count")]bool? count);

        /// <summary>
        /// Retrieve Rfp Proposals
        /// </summary>
        /// <remarks>Retrieve Rfp Proposals</remarks>
        /// <param name="rfpId"></param>
        /// <param name="expand">Expand a navigation property.</param>
        /// <param name="select">Select a set of properties to return.</param>
        /// <param name="filter">Filter a collection of resources addressed by a request URL.</param>
        /// <param name="orderby">Order resources by the specified property in the response.</param>
        /// <param name="top">Return the specified number of items in the response.</param>
        /// <param name="skip">Skip the specified number of items in the response.</param>
        /// <param name="count">Include the count of the matching resources in the response.</param>
        /// <response code="200">Indicates that the request succeeded and that the requested information is in the response.</response>
        [HttpGet]
        [Route("/v3/odata/rfps({rfpId})/proposals")]
        [ValidateModelState]
        [ProducesResponseType(statusCode: 200, type: typeof(List<SCServiceChannelServicesMessagingProposalsProposalInfo>))]
        public abstract Task<IActionResult> GetProposalsForRfp([FromRoute (Name = "rfpId")][Required]int rfpId, [FromQuery (Name = "$expand")]string? expand, [FromQuery (Name = "$select")]string? select, [FromQuery (Name = "$filter")]string? filter, [FromQuery (Name = "$orderby")]string? orderby, [FromQuery (Name = "$top")]int? top, [FromQuery (Name = "$skip")]int? skip, [FromQuery (Name = "$count")]bool? count);

        /// <summary>
        /// Add a user to an MLP level
        /// </summary>
        /// <remarks>Assigns a user to an existing MLP level. Get a username by sending the [GET /users](https://developer.servicechannel.com/swagger/ui/index?version&#x3D;3#/Users/GETv3_users_subscriberId__subscriberId__startIndex__startIndex__maxCount__maxCount_) request.              &lt;br /&gt;Once you assign a user to an MLP level, you can assign a location to the user and MLP level by using the [PUT /proposals/AddLocationToUserLevel](https://developer.servicechannel.com/swagger/ui/index?version&#x3D;3#/Proposals/PUTv3_proposals_AddLocationToUserLevel_userName__userName__location__location_) method.              &lt;br /&gt;***Note***: Each user can be added to only one MLP level. If a user should be assigned to another level, you first need to [remove this user from the MLP level](https://developer.servicechannel.com/swagger/ui/index?version&#x3D;3#/Proposals/PUTv3_proposals_RemoveUserFromLevel_userName__userName__location__location_) they currently belong to.</remarks>
        /// <param name="userName">Username to log into the system. The field is case sensitive.</param>
        /// <param name="levelName">MLP level name.</param>
        /// <response code="200">The specified user is assigned to the MLP level.</response>
        /// <response code="400">The request is not accepted due to bad syntax, missing parameters, insufficient data, etc.              &lt;br/&gt;Error codes:              400 — Bad Request              503 — Request is empty or null              3401 — The user has already been assigned</response>
        /// <response code="401">The request is not authorized.              &lt;br/&gt;Error codes:              504 — API call rejected by security permissions</response>
        [HttpPut]
        [Route("/v3/proposals/AddUserToMlpLevel")]
        [ValidateModelState]
        [ProducesResponseType(statusCode: 400, type: typeof(SCServiceChannelServicesMessagingErrorResponse))]
        [ProducesResponseType(statusCode: 401, type: typeof(SCServiceChannelServicesMessagingErrorResponse))]
        public abstract Task<IActionResult> ProposalsAddUserToMlpLeveluserNameuserNamelevelNamelevelName([FromQuery (Name = "userName")][Required()]string userName, [FromQuery (Name = "levelName")][Required()]string levelName);

        /// <summary>
        /// Retrieve proposal approval reasons
        /// </summary>
        /// <remarks>Returns the reasons for approving a proposal for the current subscriber.              &lt;br /&gt;Admin users can manage proposal approval reasons in Service Automation in **Admin** &amp;gt; **Proposals** &amp;gt; **Proposal Approve Reasons** if the subscriber has this feature enabled.</remarks>
        /// <param name="trade">The type of work a provider performs. Has a narrower definition than &#x60;Category&#x60;.</param>
        /// <param name="category">The overall classification of the performed work.</param>
        /// <response code="200">Proposal approval reasons are in the response.</response>
        /// <response code="400">The request is not accepted due to bad syntax, missing parameters, insufficient data, etc.</response>
        /// <response code="401">The request is not authorized.              &lt;br/&gt;Error codes:              504 — API call rejected by security permissions</response>
        /// <response code="403">The requested resource is not allowed for the current user.</response>
        [HttpGet]
        [Route("/v3/proposals/ApprovalReasons")]
        [ValidateModelState]
        [ProducesResponseType(statusCode: 400, type: typeof(SCServiceChannelServicesMessagingErrorResponse))]
        [ProducesResponseType(statusCode: 401, type: typeof(SCServiceChannelServicesMessagingErrorResponse))]
        [ProducesResponseType(statusCode: 403, type: typeof(SCServiceChannelServicesMessagingErrorResponse))]
        public abstract Task<IActionResult> ProposalsApprovalReasonsTradeTradeCategoryCategory([FromQuery (Name = "Trade")][Required()]string trade, [FromQuery (Name = "Category")][Required()]string category);

        /// <summary>
        /// Add a location to a user’s MLP level
        /// </summary>
        /// <remarks>Assigns a particular location to the specified user along with the MLP level.              &lt;br /&gt;You can remove a location from the user and MLP level by using the [PUT /proposals/RemoveLocationFromUserLevel](https://developer.servicechannel.com/swagger/ui/index?version&#x3D;3#/Proposals/PUTv3_proposals_RemoveLocationFromUserLevel_userName__userName__location__location_) method.</remarks>
        /// <param name="userName">Username to log into the system.</param>
        /// <param name="location">Alphanumeric location identifier in the client’s system.</param>
        /// <response code="200">The location is assigned to the specified user and MLP level.</response>
        /// <response code="400">The request is not accepted due to bad syntax, missing parameters, insufficient data, etc.              &lt;br/&gt;Error codes:              400 — Bad Request              503 — Request is empty or null              3401 — The location doesn&#39;t exist</response>
        /// <response code="401">The request is not authorized.              &lt;br/&gt;Error codes:              504 — API call rejected by security permissions</response>
        [HttpPut]
        [Route("/v3/proposals/AssignLocationToMlpUser")]
        [ValidateModelState]
        [ProducesResponseType(statusCode: 400, type: typeof(SCServiceChannelServicesMessagingErrorResponse))]
        [ProducesResponseType(statusCode: 401, type: typeof(SCServiceChannelServicesMessagingErrorResponse))]
        public abstract Task<IActionResult> ProposalsAssignLocationToMlpUseruserNameuserNamelocationlocation([FromQuery (Name = "userName")][Required()]string userName, [FromQuery (Name = "location")][Required()]string location);

        /// <summary>
        /// Assign a ProjectId to a ProposalId and Rfp
        /// </summary>
        /// <param name="proposalId"></param>
        /// <param name="projectId"></param>
        /// <response code="200">Assign a ProjectId to a ProposalId and Rfp</response>
        /// <response code="400">The request is not accepted due to bad syntax, missing parameters, insufficient data, etc.              &lt;br/&gt;Error codes:              400 - Bad Request              503 — Request is empty or null</response>
        /// <response code="401">The request is not authorized.              &lt;br/&gt;Error codes:              504 — API call rejected by security permissions</response>
        [HttpPut]
        [Route("/v3/proposals/AssignProjectIdToProposalAndRfp")]
        [ValidateModelState]
        [ProducesResponseType(statusCode: 400, type: typeof(SCServiceChannelServicesMessagingErrorResponse))]
        [ProducesResponseType(statusCode: 401, type: typeof(SCServiceChannelServicesMessagingErrorResponse))]
        public abstract Task<IActionResult> ProposalsAssignProjectIdToProposalAndRfpproposalIdproposalIdprojectIdprojectId([FromQuery (Name = "proposalId")][Required()]int proposalId, [FromQuery (Name = "projectId")][Required()]int projectId);

        /// <summary>
        /// Retrieve the reasons for assigning a proposal
        /// </summary>
        /// <remarks>Returns the reasons for assigning a proposal to another user in the subscriber’s organization.              &lt;br /&gt;Admin users can manage the reasons for assigning proposals in Service Automation in **Admin** &amp;gt; **Proposals** &amp;gt; **Proposal Assign Reasons** if the subscriber has this feature enabled.</remarks>
        /// <param name="trade">The type of work a provider performs. Has a narrower definition than &#x60;Category&#x60;.</param>
        /// <param name="category">The overall classification of the performed work.</param>
        /// <response code="200">The reasons for assigning a proposal are in the response.</response>
        /// <response code="400">The request is not accepted due to bad syntax, missing parameters, insufficient data, etc.</response>
        /// <response code="401">The request is not authorized.              &lt;br/&gt;Error codes:              504 — API call rejected by security permissions</response>
        /// <response code="403">The requested resource is not allowed for the current user.</response>
        [HttpGet]
        [Route("/v3/proposals/AssignReasons")]
        [ValidateModelState]
        [ProducesResponseType(statusCode: 400, type: typeof(SCServiceChannelServicesMessagingErrorResponse))]
        [ProducesResponseType(statusCode: 401, type: typeof(SCServiceChannelServicesMessagingErrorResponse))]
        [ProducesResponseType(statusCode: 403, type: typeof(SCServiceChannelServicesMessagingErrorResponse))]
        public abstract Task<IActionResult> ProposalsAssignReasonsTradeTradeCategoryCategory([FromQuery (Name = "Trade")][Required()]string trade, [FromQuery (Name = "Category")]string? category);

        /// <summary>
        /// Get MLP levels for a subscriber
        /// </summary>
        /// <remarks>Returns all MLP levels with their information for the current subscriber.              &lt;br /&gt;To retrieve all users assigned to a particular level, use the [GET /proposals/GetUsersByLevelName](https://developer.servicechannel.com/swagger/ui/index?version&#x3D;3#/Proposals/GETv3_proposals_GetUsersByLevelName_levelName__levelName_) method.</remarks>
        /// <response code="200">The MLP levels for the current subscriber are in the response.</response>
        /// <response code="400">The request is not accepted due to bad syntax, missing parameters, insufficient data, etc.              &lt;br/&gt;Error codes:              400 - Bad Request</response>
        /// <response code="401">The request is not authorized.              &lt;br/&gt;Error codes:              504 — API call rejected by security permissions</response>
        [HttpGet]
        [Route("/v3/proposals/GetMlpLevelsForSubscriber")]
        [ValidateModelState]
        [ProducesResponseType(statusCode: 400, type: typeof(SCServiceChannelServicesMessagingErrorResponse))]
        [ProducesResponseType(statusCode: 401, type: typeof(SCServiceChannelServicesMessagingErrorResponse))]
        public abstract Task<IActionResult> ProposalsGetMlpLevelsForSubscriber();

        /// <summary>
        /// Get Proposals
        /// </summary>
        /// <param name="proposalModel"></param>
        /// <response code="200">Indicates that the request succeeded and that the requested information is in the response.</response>
        /// <response code="400">Bad Request - the request could not be understood or was missing required parameters.              &lt;br/&gt;Error codes:              &lt;br&gt; 400 - Bad Request              &lt;br/&gt; 503 - Request should not be null</response>
        /// <response code="401">Indicates that the requested resource requires authentication.              &lt;br/&gt;Error codes:              &lt;br/&gt; 504 - API call rejected by security permissions              &lt;br/&gt;User does not have Location or Trade access to perform this operation</response>
        /// <response code="500">Indicates that a generic error has occurred on the server.</response>
        [HttpPost]
        [Route("/v3/proposals/GetProposals")]
        [Consumes("application/json", "text/json", "application/xml", "text/xml", "application/x-www-form-urlencoded")]
        [ValidateModelState]
        [ProducesResponseType(statusCode: 400, type: typeof(SCServiceChannelServicesMessagingErrorResponse))]
        [ProducesResponseType(statusCode: 401, type: typeof(SCServiceChannelServicesMessagingErrorResponse))]
        [ProducesResponseType(statusCode: 500, type: typeof(SCServiceChannelServicesMessagingErrorResponse))]
        public abstract Task<IActionResult> ProposalsGetProposals([FromBody]SCServiceChannelServicesMessagingProposalsSearchProposalModel proposalModel);

        /// <summary>
        /// 
        /// </summary>
        /// <param name="trackingNumber"></param>
        /// <response code="200">Get all proposals for a work order based on tracking numbers that are not associated with an RFP.</response>
        /// <response code="400">The request is not accepted due to bad syntax, missing parameters, insufficient data, etc.              &lt;br/&gt;Error codes:              400 - Bad Request              503 — Request is empty or null</response>
        /// <response code="401">The request is not authorized.              &lt;br/&gt;Error codes:              504 — API call rejected by security permissions</response>
        [HttpGet]
        [Route("/v3/proposals/GetProposalsAssociatedWithWorkOderExceptRfp")]
        [ValidateModelState]
        [ProducesResponseType(statusCode: 400, type: typeof(SCServiceChannelServicesMessagingErrorResponse))]
        [ProducesResponseType(statusCode: 401, type: typeof(SCServiceChannelServicesMessagingErrorResponse))]
        public abstract Task<IActionResult> ProposalsGetProposalsAssociatedWithWorkOderExceptRfptrackingNumbertrackingNumber([FromQuery (Name = "trackingNumber")][Required()]int trackingNumber);

        /// <summary>
        /// Get proposals associated with work order by tracking number. Only for Subscriber
        /// </summary>
        /// <param name="trackingNumber"></param>
        /// <response code="200">Get proposals associated with work order by tracking number.</response>
        /// <response code="400">The request is not accepted due to bad syntax, missing parameters, insufficient data, etc.              &lt;br/&gt;Error codes:              400 - Bad Request              503 — Request is empty or null</response>
        /// <response code="401">The request is not authorized.              &lt;br/&gt;Error codes:              504 — API call rejected by security permissions</response>
        [HttpGet]
        [Route("/v3/proposals/GetProposalsAssociatedWithWorkOrderAsync")]
        [ValidateModelState]
        [ProducesResponseType(statusCode: 400, type: typeof(SCServiceChannelServicesMessagingErrorResponse))]
        [ProducesResponseType(statusCode: 401, type: typeof(SCServiceChannelServicesMessagingErrorResponse))]
        public abstract Task<IActionResult> ProposalsGetProposalsAssociatedWithWorkOrderAsynctrackingNumbertrackingNumber([FromQuery (Name = "trackingNumber")][Required()]int trackingNumber);

        /// <summary>
        /// Retrieve proposals that can be reject
        /// </summary>
        /// <remarks>Returns list of the proposals that can be reject.              &lt;br /&gt;***Note:*** This method is only available to subscriber users.</remarks>
        /// <param name="trackingNumber">The unique numeric identifier of the WO.</param>
        /// <response code="200">Users that can be added to the list of email recipients to notify when a proposal is approved or rejected are in the response.</response>
        /// <response code="400">The request is not accepted due to bad syntax, missing parameters, insufficient data, etc.              &lt;br/&gt;Error codes:              502 — Proposals to Reject not found              502 — Cannot find proposal data              503 — Invalid WO identifier</response>
        /// <response code="401">The request is not authorized.              &lt;br/&gt;Error codes:              504 — API call rejected by security permissions</response>
        [HttpGet]
        [Route("/v3/proposals/GetProposalsToReject")]
        [ValidateModelState]
        [ProducesResponseType(statusCode: 200, type: typeof(List<SCServiceChannelServicesMessagingNotesEmailRecipientResponse>))]
        [ProducesResponseType(statusCode: 400, type: typeof(SCServiceChannelServicesMessagingErrorResponse))]
        [ProducesResponseType(statusCode: 401, type: typeof(SCServiceChannelServicesMessagingErrorResponse))]
        public abstract Task<IActionResult> ProposalsGetProposalsToRejecttrackingNumbertrackingNumber([FromQuery (Name = "trackingNumber")][Required()]int trackingNumber);

        /// <summary>
        /// Get users by level name
        /// </summary>
        /// <remarks>Returns the usernames of employees appointed to the specified MLP level.              &lt;br /&gt;You can get MLP levels information for the current subscriber by sending the [GET /proposals/GetMlpLevelsForSubscriber](https://developer.servicechannel.com/swagger/ui/index?version&#x3D;3#/Proposals/GETv3_proposals_GetMlpLevelsForSubscriber) request.              &lt;br /&gt;Refer to ServiceChannel University to learn more about [how to configure MLP levels](https://servicechannel.atlassian.net/wiki/spaces/SCU/pages/621282301/Configuring+MLP+Levels).</remarks>
        /// <param name="levelName">MLP level name.</param>
        /// <response code="200">The users assigned to the specified level are in the response.</response>
        /// <response code="400">The request is not accepted due to bad syntax, missing parameters, insufficient data, etc.              &lt;br/&gt;Error codes:              400 — Bad Request              503 — Request is empty or null              3401 — The level doesn&#39;t exist</response>
        /// <response code="401">The request is not authorized.              &lt;br/&gt;Error codes:              504 — API call rejected by security permissions</response>
        [HttpGet]
        [Route("/v3/proposals/GetUsersByLevelName")]
        [ValidateModelState]
        [ProducesResponseType(statusCode: 400, type: typeof(SCServiceChannelServicesMessagingErrorResponse))]
        [ProducesResponseType(statusCode: 401, type: typeof(SCServiceChannelServicesMessagingErrorResponse))]
        public abstract Task<IActionResult> ProposalsGetUsersByLevelNamelevelNamelevelName([FromQuery (Name = "levelName")][Required()]string levelName);

        /// <summary>
        /// Get proposal actions by ID
        /// </summary>
        /// <remarks>Returns available actions for the specified proposals:               • **Edit.** Proposals that can be changed by your client.               • **Open.** Proposals that haven&#39;t been reviewed by your client.               • **On hold.** Proposals that require your client’s further review before being approved or rejected.               • **Approve.** Proposals that have been already approved by your client.               • **Reject.** Proposals that have been rejected by your client.               • **Assign.** Proposals that have not been assigned by your client.              &lt;br /&gt;In ServiceChannel University, you can find out more about [taking action on proposals](https://servicechannel.atlassian.net/wiki/spaces/SCU/pages/560103501/Taking+Action+on+Proposals).</remarks>
        /// <param name="proposalIds">Unique numeric identifier of the proposal.</param>
        /// <response code="200">The available proposal actions are in the response.</response>
        /// <response code="400">The request is not accepted due to bad syntax, missing parameters, insufficient data, etc</response>
        /// <response code="401">The request is not authorized.              &lt;br/&gt;Error codes:              504 — API call rejected by security permissions</response>
        [HttpGet]
        [Route("/v3/proposals/proposalIds")]
        [ValidateModelState]
        [ProducesResponseType(statusCode: 400, type: typeof(SCServiceChannelServicesMessagingErrorResponse))]
        [ProducesResponseType(statusCode: 401, type: typeof(SCServiceChannelServicesMessagingErrorResponse))]
        public abstract Task<IActionResult> ProposalsProposalIdsproposalIds0proposalIds0proposalIds1proposalIds1([FromQuery (Name = "proposalIds")][Required()]List<int> proposalIds);

        /// <summary>
        /// Reject proposals
        /// </summary>
        /// <remarks>Updates the status of the specified proposal to *Rejected*.              &lt;br /&gt;***Note:*** This method is only available to subscriber users.</remarks>
        /// <param name="data"></param>
        /// <response code="204">The proposal status is set to *Rejected*, users are notified based on the passed parameters, and the values of the specified parameters are updated.&lt;br/&gt;The response is intentionally blank.</response>
        /// <response code="400">The request is not accepted due to bad syntax, missing parameters, insufficient data, etc.              &lt;br/&gt;Error codes:               100 — Proposal was already rejected              100 — User has no rights to perform this action              401 — Invalid subscriber id              502 — Wrong Proposal Id              502 — Proposal not found              502 — Cannot find proposal data              502 — Cannot find assigned Work Order              502 — Proposal not has WO              502 — Proposals are linked to a different Work Order              502 — You don&#39;t have permissions to process Proposal              502 — Proposal is not MLP and cannot be rejected by an MLP user              502 — Proposal is already rejected              502 — Couldn’t find Proposals to Reject              502 — Couldn&#39;t find the Provider for Proposal              502 — Escalation can&#39;t be performed as all upper levels are empty              502 — Rule set not found              503 — Wrong Work Order Id              503 — More information Required              503 — Proposal requires a Reason for Rejection              503 — The request contains proposals with the same Proposal ID              503 — Request is empty or null</response>
        /// <response code="401">The request is not authorized.              &lt;br/&gt;Error codes:              504 — API call rejected by security permissions</response>
        [HttpPut]
        [Route("/v3/proposals/ProposalsReject")]
        [Consumes("application/json", "text/json", "application/xml", "text/xml", "application/x-www-form-urlencoded")]
        [ValidateModelState]
        [ProducesResponseType(statusCode: 400, type: typeof(SCServiceChannelServicesMessagingErrorResponse))]
        [ProducesResponseType(statusCode: 401, type: typeof(SCServiceChannelServicesMessagingErrorResponse))]
        public abstract Task<IActionResult> ProposalsProposalsReject([FromBody]List<SCServiceChannelServicesMessagingProposalsUpdateProposalsStatusRequest> data);

        /// <summary>
        /// Retrieve proposal rejection reasons
        /// </summary>
        /// <remarks>Returns numeric identifiers and descriptions of the reasons for rejecting a proposal.</remarks>
        /// <response code="200">Proposal rejection reasons are in the response.</response>
        /// <response code="400">The request is not accepted due to bad syntax, missing parameters, insufficient data, etc.              &lt;br/&gt;Error codes:              400 — Bad Request</response>
        /// <response code="401">The request is not authorized.              &lt;br/&gt;Error codes:              504 — API call rejected by security permissions</response>
        /// <response code="500">The server was unable to complete the request due to an internal error.</response>
        [HttpGet]
        [Route("/v3/proposals/RejectionReasons")]
        [ValidateModelState]
        [ProducesResponseType(statusCode: 400, type: typeof(SCServiceChannelServicesMessagingErrorResponse))]
        [ProducesResponseType(statusCode: 401, type: typeof(SCServiceChannelServicesMessagingErrorResponse))]
        [ProducesResponseType(statusCode: 500, type: typeof(SCServiceChannelServicesMessagingErrorResponse))]
        public abstract Task<IActionResult> ProposalsRejectionReasons();

        /// <summary>
        /// Remove a location from a user’s MLP level
        /// </summary>
        /// <remarks>Removes the specified location from the user and user’s MLP level.              &lt;br /&gt;To add a location, send the [PUT /proposals/AddLocationToUserLevel](https://developer.servicechannel.com/swagger/ui/index?version&#x3D;3#/Proposals/PUTv3_proposals_AddLocationToUserLevel_userName__userName__location__location_) request.</remarks>
        /// <param name="userName">Username to log into the system.</param>
        /// <param name="location">Alphanumeric location identifier in the client’s system.</param>
        /// <response code="200">The location is successfully removed from the user and MLP level.</response>
        /// <response code="400">The request is not accepted due to bad syntax, missing parameters, insufficient data, etc.              &lt;br/&gt;Error codes:              400 — Bad Request              503 — Request is empty or null              3401 — The location doesn&#39;t exist</response>
        /// <response code="401">The request is not authorized.              &lt;br/&gt;Error codes:              504 — API call rejected by security permissions</response>
        [HttpPut]
        [Route("/v3/proposals/RemoveLocationFromMlpUser")]
        [ValidateModelState]
        [ProducesResponseType(statusCode: 400, type: typeof(SCServiceChannelServicesMessagingErrorResponse))]
        [ProducesResponseType(statusCode: 401, type: typeof(SCServiceChannelServicesMessagingErrorResponse))]
        public abstract Task<IActionResult> ProposalsRemoveLocationFromMlpUseruserNameuserNamelocationlocation([FromQuery (Name = "userName")][Required()]string userName, [FromQuery (Name = "location")][Required()]string location);

        /// <summary>
        /// Whether the user can be deleted from MLP level.
        /// </summary>
        /// <remarks>Whether the user can be deleted from MLP level.</remarks>
        /// <param name="userId">The User Id.</param>
        /// <response code="200">Whether the user can be deleted from MLP level.</response>
        /// <response code="400">The request is not accepted due to bad syntax, missing parameters, insufficient data, etc.              &lt;br/&gt;Error codes:              400 — Bad Request              503 — Request is empty or null              3401 — The user has already been assigned</response>
        /// <response code="401">The request is not authorized.              &lt;br/&gt;Error codes:              504 — API call rejected by security permissions</response>
        [HttpPut]
        [Route("/v3/proposals/RemoveMlpUserValidationAsync")]
        [ValidateModelState]
        [ProducesResponseType(statusCode: 400, type: typeof(SCServiceChannelServicesMessagingErrorResponse))]
        [ProducesResponseType(statusCode: 401, type: typeof(SCServiceChannelServicesMessagingErrorResponse))]
        public abstract Task<IActionResult> ProposalsRemoveMlpUserValidationAsyncuserIduserId([FromQuery (Name = "userId")][Required()]int userId);

        /// <summary>
        /// Remove a user from an MLP level
        /// </summary>
        /// <remarks>Removes the specified user from the assigned MLP level.              &lt;br /&gt;To assign a user to an MLP level, use the [PUT /proposals/AddUserToMlpLevel](https://developer.servicechannel.com/swagger/ui/index?version&#x3D;3#/Proposals/PUTv3_proposals_AddUserToLevelLocation) method.</remarks>
        /// <param name="userName">Username to log into the system.</param>
        /// <response code="200">The user is successfully removed from the MLP level.</response>
        /// <response code="400">The request is not accepted due to bad syntax, missing parameters, insufficient data, etc.              &lt;br/&gt;Error codes:              400 — Bad Request              503 — Request is empty or null              3401 — The user has already been assigned</response>
        /// <response code="401">The request is not authorized.              &lt;br/&gt;Error codes:              504 — API call rejected by security permissions</response>
        [HttpPut]
        [Route("/v3/proposals/RemoveUserFromMlpLevel")]
        [ValidateModelState]
        [ProducesResponseType(statusCode: 400, type: typeof(SCServiceChannelServicesMessagingErrorResponse))]
        [ProducesResponseType(statusCode: 401, type: typeof(SCServiceChannelServicesMessagingErrorResponse))]
        public abstract Task<IActionResult> ProposalsRemoveUserFromMlpLeveluserNameuserName([FromQuery (Name = "userName")][Required()]string userName);

        /// <summary>
        /// Retrieve statistics on RFPs and proposals
        /// </summary>
        /// <remarks>Returns statistics on requests for proposals (RFPs) and proposals for the specified time period for the current provider:               • RFPs awaiting response               • Open proposals               • Approved proposals               • Proposals in the _On Hold_ and _Reviewed_ statuses               • Rejected proposals</remarks>
        /// <param name="daysPeriod">Time period set as the number of days prior to the current date for which statistics on RFPs and proposals are returned. The default is 30.</param>
        /// <response code="200">Statistics on RFPs and proposals for the requested time period are returned in the response.</response>
        /// <response code="400">The request is not accepted due to bad syntax, missing parameters, insufficient data, etc.              &lt;br/&gt;Error codes:              503 — Only for providers usage</response>
        /// <response code="401">The request is not authorized.              &lt;br/&gt;Error codes:              504 — API call rejected by security permissions</response>
        [HttpGet]
        [Route("/v3/proposals/statistics")]
        [ValidateModelState]
        [ProducesResponseType(statusCode: 200, type: typeof(SCServiceChannelServicesMessagingProposalsProposalStatisticsResponse))]
        [ProducesResponseType(statusCode: 400, type: typeof(SCServiceChannelServicesMessagingErrorResponse))]
        [ProducesResponseType(statusCode: 401, type: typeof(SCServiceChannelServicesMessagingErrorResponse))]
        public abstract Task<IActionResult> ProposalsStatisticsdaysPerioddaysPeriod([FromQuery (Name = "daysPeriod")]int? daysPeriod);

        /// <summary>
        /// Approve a proposal
        /// </summary>
        /// <remarks>Updates the status of the specified proposal to *Approved*.              &lt;br /&gt;***Note:*** This method is only available to subscriber users.              &lt;br /&gt;**Example Request**                                PUT /proposals/{proposalId}/approve                  {                     \&quot;Comments\&quot;: \&quot;The project starts earlier than expected\&quot;,                     \&quot;ProviderEmail\&quot;: \&quot;\&quot;,                     \&quot;UserEmail\&quot;: \&quot;\&quot;,                     \&quot;RejectReasonCodeId\&quot;: 0,                     \&quot;ActionSource\&quot;: \&quot;Standard\&quot;,                     \&quot;ReasonString\&quot;: \&quot;Best fit for the job and scope\&quot;                  }</remarks>
        /// <param name="proposalId">The unique numeric identifier of the proposal to approve.</param>
        /// <param name="request">The request to update the proposal status to *Approved*.</param>
        /// <response code="204">The proposal status is set to *Approved*, users are notified based on the passed parameters, and the values of the specified parameters are updated.&lt;br/&gt;The response is intentionally blank.</response>
        /// <response code="400">The request is not accepted due to bad syntax, missing parameters, insufficient data, etc.              &lt;br/&gt;Error codes:              100 — Proposal amount exceeds user’s NTE limit              401 — Invalid subscriber id              502 — Proposal not found              503 — The proposal status is already Approved              503 — Cannot Approve Proposal that is not assigned to Work Order              503 — Cannot Approve Proposal. The Work Order this proposal is linked to has already been invoiced              503 — The user is MLP user              503 — Request is empty or null</response>
        /// <response code="401">The request is not authorized.              &lt;br/&gt;Error codes:              504 — API call rejected by security permissions</response>
        [HttpPut]
        [Route("/v3/proposals/{proposalId}/approve")]
        [Consumes("application/json", "text/json", "application/xml", "text/xml", "application/x-www-form-urlencoded")]
        [ValidateModelState]
        [ProducesResponseType(statusCode: 400, type: typeof(SCServiceChannelServicesMessagingErrorResponse))]
        [ProducesResponseType(statusCode: 401, type: typeof(SCServiceChannelServicesMessagingErrorResponse))]
        public abstract Task<IActionResult> ProposalsproposalIdApprove([FromRoute (Name = "proposalId")][Required]int proposalId, [FromBody]SCServiceChannelServicesMessagingProposalsUpdateProposalStatusRequest request);

        /// <summary>
        /// Assign a proposal to a user
        /// </summary>
        /// <remarks>Assigns the proposal to the specified user in the subscriber’s organization. If the proposal already has an assignee, the appointed user is updated.              &lt;br /&gt;***Note:*** You cannot [assign a proposal](https://developer.servicechannel.com/guides/proposals/assign-or-escalate-a-proposal/#assign-a-proposal-to-a-user) in the *Approved* or *Rejected* status.              &lt;br /&gt;**Example Request**                                PUT /proposals/{proposalId}/assignUser                  {                     \&quot;UserId\&quot;: 1417703,                     \&quot;Comments\&quot;: \&quot;Proposal reassigned at the request of the Store Manager\&quot;,                     \&quot;UserEmail\&quot;: \&quot;\&quot;,                     \&quot;ReasonString\&quot;: \&quot;\&quot;,                     \&quot;Note\&quot;: \&quot;\&quot;                  }</remarks>
        /// <param name="proposalId">The unique numeric identifier of the proposal to assign to the specified user.</param>
        /// <param name="request">The request to assign the proposal to the specified user.</param>
        /// <response code="204">The proposal is assigned to the specified user, and the response is intentionally blank.</response>
        /// <response code="400">The request is not accepted due to bad syntax, missing parameters, insufficient data, etc.              &lt;br/&gt;Error codes:               502 — Proposal not found              503 — Request is empty or null              503 — Wrong User Id              503 — Selected proposal has been finalized              503 — Selected user has no required rights              503 — Selected user doesn&#39;t have Location or Trade access</response>
        /// <response code="401">The request is not authorized.              &lt;br/&gt;Error codes:              504 — API call rejected by security permissions</response>
        [HttpPut]
        [Route("/v3/proposals/{proposalId}/assignUser")]
        [Consumes("application/json", "text/json", "application/xml", "text/xml", "application/x-www-form-urlencoded")]
        [ValidateModelState]
        [ProducesResponseType(statusCode: 400, type: typeof(SCServiceChannelServicesMessagingErrorResponse))]
        [ProducesResponseType(statusCode: 401, type: typeof(SCServiceChannelServicesMessagingErrorResponse))]
        public abstract Task<IActionResult> ProposalsproposalIdAssignUser([FromRoute (Name = "proposalId")][Required]int proposalId, [FromBody]SCServiceChannelServicesMessagingProposalsAssignUserToProposalRequest request);

        /// <summary>
        /// Attach a work order to a proposal
        /// </summary>
        /// <remarks>Links the specified work order to the proposal. If the proposal already has a linked service request, the attached work order is updated. See [Link a WO to a Proposal](https://developer.servicechannel.com/guides/proposals/link-a-WO-to-a-proposal/) for more information.              &lt;br /&gt;***Note:*** This method is only available to subscriber users.</remarks>
        /// <param name="proposalId">The unique numeric identifier of the proposal to attach the work order to.</param>
        /// <param name="workorderId">The unique numeric identifier of the work order to link to the proposal.</param>
        /// <param name="isFromProjectsModule">Is request from projects module.</param>
        /// <response code="204">The specified work order is attached to the proposal, and the response is intentionally blank.</response>
        /// <response code="400">The request is not accepted due to bad syntax, missing parameters, insufficient data, etc.              &lt;br/&gt;Error codes:              401 — Invalid subscriber id              502 — Proposal not found              503 — Request is empty or null              503 — Proposal already approved              503 — Workorder doesn&#39;t match              503 — The user is MLP user              917 — Invalid WO Identifier</response>
        /// <response code="401">The request is not authorized.              &lt;br/&gt;Error codes:              504 — API call rejected by security permissions</response>
        [HttpPut]
        [Route("/v3/proposals/{proposalId}/assignWO")]
        [Consumes("application/json", "text/json", "application/xml", "text/xml", "application/x-www-form-urlencoded")]
        [ValidateModelState]
        [ProducesResponseType(statusCode: 400, type: typeof(SCServiceChannelServicesMessagingErrorResponse))]
        [ProducesResponseType(statusCode: 401, type: typeof(SCServiceChannelServicesMessagingErrorResponse))]
        public abstract Task<IActionResult> ProposalsproposalIdAssignWOisFromProjectsModuleisFromProjectsModule([FromRoute (Name = "proposalId")][Required]int proposalId, [FromBody]int workorderId, [FromQuery (Name = "isFromProjectsModule")]bool? isFromProjectsModule);

        /// <summary>
        /// Escalate a proposal
        /// </summary>
        /// <remarks>Escalates the specified proposal to another user in the subscriber’s multi-level proposal (MLP) approval hierarchy. The proposal can be approved, rejected, put on hold, or returned upon escalation. You can attach an existing work order or create a new one while submitting the request.              &lt;br /&gt;***Note:*** This method is only available to subscribers with the MLP setting enabled.              &lt;br /&gt;MLP users can [escalate a proposal](https://developer.servicechannel.com/guides/proposals/assign-or-escalate-a-proposal/#escalate-a-proposal-for-mlp-users) if the following conditions are met:               • The user&#39;s approval level corresponds to the proposal level.               • The Override option is enabled for the user in case their level is higher than the proposal level.              &lt;br /&gt;**Example Request**                                PUT /proposals/{proposalId}/escalate                  {                     \&quot;Action\&quot;: \&quot;Approve\&quot;,                     \&quot;WoType\&quot;: 2,                     \&quot;TrackingNumber\&quot;: 140324907,                     \&quot;PoNumber\&quot;: \&quot;\&quot;,                     \&quot;ExistingPoNumber\&quot;: \&quot;\&quot;,                     \&quot;Category\&quot;: \&quot;\&quot;,                     \&quot;CategoryId\&quot;: ,                     \&quot;ApprovalCode\&quot;: \&quot;\&quot;,                     \&quot;Priority\&quot;: \&quot;\&quot;,                     \&quot;Comment\&quot;: \&quot;Escalating proposal to the General Manager\&quot;,                     \&quot;RejectReasonCodeId\&quot;: 0,                     \&quot;ReasonString\&quot;: \&quot;\&quot;,                     \&quot;EmailsToNotify\&quot;: \&quot;john.smith@domain.com\&quot;,                     \&quot;EmailMyself\&quot;: false,                     \&quot;MyEmail\&quot;: \&quot;\&quot;,                     \&quot;ProposalId\&quot;: 10010836                  }</remarks>
        /// <param name="proposalId">The unique numeric identifier of the proposal to escalate.</param>
        /// <param name="request">The request to escalate the proposal to another user in the MLP hierarchy.</param>
        /// <response code="204">The specified proposal is escalated and updated with the passed parameters. The response is intentionally blank.</response>
        /// <response code="400">The request is not accepted due to bad syntax, missing parameters, insufficient data, etc.              &lt;br/&gt;Error codes:              401 — Invalid subscriber id              502 — Proposal not found              503 — Request is empty or null              503 — The user is not MLP user              503 — Invalid WO Tracking Number              503 — Invalid WO Tracking Number in Proposal              503 — Invalid Wo Type              503 — There is no WO recommendation              503 — Action not found in rules              503 — User level less than Proposal level              503 — ForwardTo item is empty              503 — There is no the action in next rule              503 — Invalid Level              503 — Override flag is false              503 — EndStatus item is empty              503 — Invalid Action</response>
        /// <response code="401">The request is not authorized.              &lt;br/&gt;Error codes:              504 — API call rejected by security permissions</response>
        [HttpPut]
        [Route("/v3/proposals/{proposalId}/escalate")]
        [Consumes("application/json", "text/json", "application/xml", "text/xml", "application/x-www-form-urlencoded")]
        [ValidateModelState]
        [ProducesResponseType(statusCode: 400, type: typeof(SCServiceChannelServicesMessagingErrorResponse))]
        [ProducesResponseType(statusCode: 401, type: typeof(SCServiceChannelServicesMessagingErrorResponse))]
        public abstract Task<IActionResult> ProposalsproposalIdEscalate([FromRoute (Name = "proposalId")][Required]int proposalId, [FromBody]SCServiceChannelServicesMessagingProposalsMlpWoRecommendationRequest request);

        /// <summary>
        /// Put a proposal on hold
        /// </summary>
        /// <remarks>Updates the status of the specified proposal to *On Hold*.              &lt;br /&gt;***Note:*** This method is only available to subscriber users.              &lt;br /&gt;**Example Request**                                PUT /proposals/{proposalId}/onhold                  {                     \&quot;Comments\&quot;: \&quot;The proposal needs further review\&quot;,                     \&quot;ProviderEmail\&quot;: \&quot;\&quot;,                     \&quot;UserEmail\&quot;: \&quot;\&quot;,                     \&quot;RejectReasonCodeId\&quot;: 0,                     \&quot;ActionSource\&quot;: \&quot;Standard\&quot;,                     \&quot;ReasonString\&quot;: \&quot;\&quot;                      }</remarks>
        /// <param name="proposalId">The unique numeric identifier of the proposal to put on hold.</param>
        /// <param name="request">The request to update the proposal status to *On Hold*.</param>
        /// <response code="204">The proposal status is set to *On Hold*, users are notified based on the passed parameters, and the values of the specified parameters are updated.&lt;br/&gt;The response is intentionally blank.</response>
        /// <response code="400">The request is not accepted due to bad syntax, missing parameters, insufficient data, etc.              &lt;br/&gt;Error codes:              401 — Invalid subscriber id              502 — Proposal not found              503 — The proposal status is already On Hold              503 — The user is MLP user              503 — Request is empty or null</response>
        /// <response code="401">The request is not authorized.              &lt;br&gt;Error codes:              504 — API call rejected by security permissions</response>
        [HttpPut]
        [Route("/v3/proposals/{proposalId}/onhold")]
        [Consumes("application/json", "text/json", "application/xml", "text/xml", "application/x-www-form-urlencoded")]
        [ValidateModelState]
        [ProducesResponseType(statusCode: 400, type: typeof(SCServiceChannelServicesMessagingErrorResponse))]
        [ProducesResponseType(statusCode: 401, type: typeof(SCServiceChannelServicesMessagingErrorResponse))]
        public abstract Task<IActionResult> ProposalsproposalIdOnhold([FromRoute (Name = "proposalId")][Required]int proposalId, [FromBody]SCServiceChannelServicesMessagingProposalsUpdateProposalStatusRequest request);

        /// <summary>
        /// Open a proposal
        /// </summary>
        /// <remarks>Updates the status of the specified proposal to *Open*.              &lt;br /&gt;***Note:*** This method is only available to subscriber users.              &lt;br /&gt;**Example Request**                                PUT /proposals/{proposalId}/open                  {                     \&quot;Comments\&quot;: \&quot;The project is resumed\&quot;,                     \&quot;ProviderEmail\&quot;: \&quot;\&quot;,                     \&quot;UserEmail\&quot;: \&quot;\&quot;,                     \&quot;RejectReasonCodeId\&quot;: 0,                     \&quot;ActionSource\&quot;: \&quot;Standard\&quot;,                     \&quot;ReasonString\&quot;: \&quot;\&quot;                      }</remarks>
        /// <param name="proposalId">The unique numeric identifier of the proposal to open.</param>
        /// <param name="request">The request to update the proposal status to *Open*.</param>
        /// <response code="204">The proposal status is set to *Open*, users are notified based on the passed parameters, and the values of the specified parameters are updated.&lt;br/&gt;The response is intentionally blank.</response>
        /// <response code="400">The request is not accepted due to bad syntax, missing parameters, insufficient data, etc.              &lt;br/&gt;Error codes:              401 — Invalid subscriber id              502 — Proposal not found              503 — The proposal status is already Open              503 — The user is MLP user              503 — Request is empty or null</response>
        /// <response code="401">The request is not authorized.              &lt;br/&gt;Error codes:              504 — API call rejected by security permissions</response>
        [HttpPut]
        [Route("/v3/proposals/{proposalId}/open")]
        [Consumes("application/json", "text/json", "application/xml", "text/xml", "application/x-www-form-urlencoded")]
        [ValidateModelState]
        [ProducesResponseType(statusCode: 400, type: typeof(SCServiceChannelServicesMessagingErrorResponse))]
        [ProducesResponseType(statusCode: 401, type: typeof(SCServiceChannelServicesMessagingErrorResponse))]
        public abstract Task<IActionResult> ProposalsproposalIdOpen([FromRoute (Name = "proposalId")][Required]int proposalId, [FromBody]SCServiceChannelServicesMessagingProposalsUpdateProposalStatusRequest request);

        /// <summary>
        /// Retrieve users who can be added to the list of email recipients to notify of a proposal approval or rejection
        /// </summary>
        /// <remarks>Returns users who can be added to the list of email recipients to notify when the specified proposal is approved or rejected.              &lt;br /&gt;***Note:*** This method is only available to subscriber users.</remarks>
        /// <param name="proposalId">The unique numeric identifier of the proposal.</param>
        /// <response code="200">Users who can be added to the list of email recipients to notify when a proposal is approved or rejected are in the response.</response>
        /// <response code="400">The request is not accepted due to bad syntax, missing parameters, insufficient data, etc.              &lt;br/&gt;Error codes:              503 — Invalid proposal identifier              503 — Request is empty or null</response>
        /// <response code="401">The request is not authorized.              &lt;br/&gt;Error codes:              504 — API call rejected by security permissions</response>
        [HttpGet]
        [Route("/v3/proposals/{proposalId}/recipients")]
        [ValidateModelState]
        [ProducesResponseType(statusCode: 200, type: typeof(List<SCServiceChannelServicesMessagingNotesEmailRecipientResponse>))]
        [ProducesResponseType(statusCode: 400, type: typeof(SCServiceChannelServicesMessagingErrorResponse))]
        [ProducesResponseType(statusCode: 401, type: typeof(SCServiceChannelServicesMessagingErrorResponse))]
        public abstract Task<IActionResult> ProposalsproposalIdRecipients([FromRoute (Name = "proposalId")][Required]int proposalId);

        /// <summary>
        /// Reject a proposal
        /// </summary>
        /// <remarks>Updates the status of the specified proposal to *Rejected*.              &lt;br /&gt;You can send a proposal rejection notification to a specific user or to all users from the **Proposals/Proposal Alerts** list.               • &#x60;ProviderEmail&#x60; and &#x60;UserEmail&#x60;. Use these parameters to send a proposal rejection notification to a specific user. If passed, any of these parameters prevails over &#x60;useProposalAlertEmails&#x60;. In case you pass a value to the &#x60;ProviderEmail&#x60; or &#x60;UserEmail&#x60; parameter in the request body and set &#x60;useProposalAlertEmails&#x60; to &#x60;true&#x60;, a notification is sent to the specified email address, while users from the **Proposals/Proposal Alerts** list are not notified.               • &#x60;useProposalAlertEmails&#x60;. Set this parameter to &#x60;true&#x60; to send proposal rejection notifications to all users listed in the **Proposals/Proposal Alerts** section of **Dispatch Preferences**.              &lt;br /&gt;***Note:*** This method is only available to subscriber users.              &lt;br /&gt;**Example Request**                                PUT /proposals/{proposalId}/reject                  {                     \&quot;Comments\&quot;: \&quot;The project is canceled\&quot;,                     \&quot;ProviderEmail\&quot;: \&quot;\&quot;,                     \&quot;UserEmail\&quot;: \&quot;\&quot;,                     \&quot;RejectReasonCodeId\&quot;: 7,                     \&quot;ActionSource\&quot;: \&quot;Standard\&quot;,                     \&quot;ReasonString\&quot;: \&quot;\&quot;                      }</remarks>
        /// <param name="proposalId">The unique numeric identifier of the proposal to reject.</param>
        /// <param name="request">The request to update the proposal status to *Rejected*.</param>
        /// <param name="useProposalAlertEmails">Defines if a proposal rejection notification is sent to all users listed in the **Proposals/Proposal Alerts** section of **Dispatch Preferences**.              If the parameter value is &#x60;true&#x60;, users from the **Proposals/Proposal Alerts** list get a notification if the &#x60;ProviderEmail&#x60; and &#x60;UserEmail&#x60; parameters are not passed. If set to &#x60;false&#x60; or not passed, this parameter is ignored.</param>
        /// <response code="204">The proposal status is set to *Rejected*, users are notified based on the passed parameters, and the values of the specified parameters are updated.&lt;br/&gt;The response is intentionally blank.</response>
        /// <response code="400">The request is not accepted due to bad syntax, missing parameters, insufficient data, etc.              &lt;br/&gt;Error codes:              401 — Invalid subscriber id              502 — Proposal not found              503 — The proposal status is already Rejected              503 — The user is MLP user              503 — Request is empty or null</response>
        /// <response code="401">The request is not authorized.              &lt;br/&gt;Error codes:              504 — API call rejected by security permissions</response>
        [HttpPut]
        [Route("/v3/proposals/{proposalId}/reject")]
        [Consumes("application/json", "text/json", "application/xml", "text/xml", "application/x-www-form-urlencoded")]
        [ValidateModelState]
        [ProducesResponseType(statusCode: 400, type: typeof(SCServiceChannelServicesMessagingErrorResponse))]
        [ProducesResponseType(statusCode: 401, type: typeof(SCServiceChannelServicesMessagingErrorResponse))]
        public abstract Task<IActionResult> ProposalsproposalIdRejectuseProposalAlertEmailsuseProposalAlertEmails([FromRoute (Name = "proposalId")][Required]int proposalId, [FromBody]SCServiceChannelServicesMessagingProposalsUpdateProposalStatusRequest request, [FromQuery (Name = "useProposalAlertEmails")]bool? useProposalAlertEmails);

        /// <summary>
        /// Retrieve users who can be assigned a proposal
        /// </summary>
        /// <remarks>Returns a list of users in the subscriber’s organization who can be assigned the specified proposal. You can send this request to retrieve the user ID before [assigning a proposal](https://developer.servicechannel.com/guides/proposals/assign-or-escalate-a-proposal/#assign-a-proposal-to-a-user).</remarks>
        /// <param name="proposalId">The unique numeric identifier of the proposal.</param>
        /// <response code="200">Users who can be assigned the specified proposal are in the response.</response>
        /// <response code="400">The request is not accepted due to bad syntax, missing parameters, insufficient data, etc.              &lt;br/&gt;Error codes:              502 — Proposal not found</response>
        /// <response code="401">The request is not authorized.              &lt;br/&gt;Error codes:              504 — API call rejected by security permissions</response>
        [HttpGet]
        [Route("/v3/proposals/{proposalId}/users")]
        [ValidateModelState]
        [ProducesResponseType(statusCode: 200, type: typeof(SCServiceChannelServicesMessagingUsersUserInfo))]
        [ProducesResponseType(statusCode: 400, type: typeof(SCServiceChannelServicesMessagingErrorResponse))]
        [ProducesResponseType(statusCode: 401, type: typeof(SCServiceChannelServicesMessagingErrorResponse))]
        public abstract Task<IActionResult> ProposalsproposalIdUsers([FromRoute (Name = "proposalId")][Required]int proposalId);

        /// <summary>
        /// Validate a proposal
        /// </summary>
        /// <remarks>Checks if the specified proposal exists for the current user.</remarks>
        /// <param name="proposalId">The unique numeric identifier of the proposal to validate.</param>
        /// <response code="200">The specified proposal exists for the current user.</response>
        /// <response code="400">The request is not accepted due to bad syntax, missing parameters, insufficient data, etc.              &lt;br/&gt;Error codes:              502 — Proposal not found</response>
        /// <response code="401">The request is not authorized.              &lt;br/&gt;Error codes:              504 — API call rejected by security permissions</response>
        [HttpGet]
        [Route("/v3/proposals/{proposalId}/validate")]
        [ValidateModelState]
        [ProducesResponseType(statusCode: 400, type: typeof(SCServiceChannelServicesMessagingErrorResponse))]
        [ProducesResponseType(statusCode: 401, type: typeof(SCServiceChannelServicesMessagingErrorResponse))]
        public abstract Task<IActionResult> ProposalsproposalIdValidate([FromRoute (Name = "proposalId")][Required]int proposalId);

        /// <summary>
        /// Delete Proposal and Rfp reference with projectId by rfpId
        /// </summary>
        /// <remarks>Delete Proposal and Rfp reference with projectId by rfpId</remarks>
        /// <param name="rfpId">The unique numeric identifier of the RFP.</param>
        /// <response code="200">The projectId reference is successfully removed from proposal and rfp.</response>
        /// <response code="400">The request is not accepted due to bad syntax, missing parameters, insufficient data, etc.              &lt;br/&gt;Error codes:              400 — Bad Request              503 — Request is empty or null</response>
        /// <response code="401">The request is not authorized.              &lt;br/&gt;Error codes:              504 — API call rejected by security permissions</response>
        [HttpPut]
        [Route("/v3/proposals/{rfpId}")]
        [ValidateModelState]
        [ProducesResponseType(statusCode: 400, type: typeof(SCServiceChannelServicesMessagingErrorResponse))]
        [ProducesResponseType(statusCode: 401, type: typeof(SCServiceChannelServicesMessagingErrorResponse))]
        public abstract Task<IActionResult> ProposalsrfpId([FromRoute (Name = "rfpId")][Required]int rfpId);

        /// <summary>
        /// Retrieve proposals
        /// </summary>
        /// <remarks>Returns proposals based on the specified input parameters for the current subscriber.</remarks>
        /// <param name="statuses">Proposal statuses separated by commas. Valid values: *Open*, *On Hold*, *Approved*, *Rejected*, *Void*, *Reviewed*.              Proposals in all statuses are returned if the value is not passed.</param>
        /// <param name="assignedTo">The unique numeric identifier of the user who is assigned the proposals.</param>
        /// <param name="skip">The number of entries to skip in the response (starting from the first one).</param>
        /// <param name="top">The number of entries to return. The default value is 50.</param>
        /// <response code="200">The requested proposals are in the response.</response>
        /// <response code="400">The request is not accepted due to bad syntax, missing parameters, insufficient data, etc.</response>
        /// <response code="401">The request is not authorized.              &lt;br/&gt;Error codes:              504 — API call rejected by security permissions</response>
        [HttpGet]
        [Route("/v3/proposals")]
        [ValidateModelState]
        [ProducesResponseType(statusCode: 200, type: typeof(SCServiceChannelServicesMessagingProposalsProposalStatisticsResponse))]
        [ProducesResponseType(statusCode: 400, type: typeof(SCServiceChannelServicesMessagingErrorResponse))]
        [ProducesResponseType(statusCode: 401, type: typeof(SCServiceChannelServicesMessagingErrorResponse))]
        public abstract Task<IActionResult> ProposalsstatusesstatusesassignedToassignedToskipskiptoptop([FromQuery (Name = "statuses")]string? statuses, [FromQuery (Name = "assignedTo")]int? assignedTo, [FromQuery (Name = "skip")]int? skip, [FromQuery (Name = "top")]int? top);
    }
}
