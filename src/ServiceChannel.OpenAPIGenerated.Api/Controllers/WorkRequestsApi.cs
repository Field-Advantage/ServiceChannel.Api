/*
 * ServiceChannel API - v.3
 *
 * The ServiceChannel API is a RESTful and stateless API. It accepts standard HTTP verbs and supports OAuth 2.0 for authorizing requests.      Our API returns common HTTP status codes as well as JSON encapsulated data.      See [API Overview](https://developer.servicechannel.com/basics/introduction/overview/) for the intro to ServiceChannel API.<br>      <h3>Authentication and Authorization</h3>You should have a ServiceChannel account, register your application, and obtain `access_token` to integrate with our API.      See [Authentication and Authorization](https://developer.servicechannel.com/basics/general/authentication/) for more information.      To use this API playground, click **Authorize** and sign in to ServiceChannel.<br>      <h3>Environment</h3> All calls in this API Reference point to the **SB2 environment**.      See [Environments](https://developer.servicechannel.com/basics/general/environments/) for more information.<br>      <h3>API Version</h3>The current stable version of the ServiceChannel API is `v3`. In the request URL, `v3` is a version prefix that should be present.      When you omit the version prefix, calls point to the minimum supported version of the API.      We recommend you to always specify the API version to avoid possible errors.
 *
 * The version of the OpenAPI document: 3
 * 
 * Generated by: https://openapi-generator.tech
 */

using System;
using System.Collections.Generic;
using System.ComponentModel.DataAnnotations;
using System.Threading;
using System.Threading.Tasks;
using Microsoft.AspNetCore.Authorization;
using Microsoft.AspNetCore.Mvc;
using Microsoft.AspNetCore.Http;
using ServiceChannel.OpenAPIGenerated.Api.Attributes;
using ServiceChannel.OpenAPIGenerated.Api.Models;

namespace ServiceChannel.OpenAPIGenerated.Api.Controllers
{ 
    /// <summary>
    /// 
    /// </summary>
    [ApiController]
    public abstract class WorkRequestsApiController : ControllerBase
    { 
        /// <summary>
        /// Creates a work request
        /// </summary>
        /// <remarks>*In limited availability phase.*</remarks>
        /// <param name="request"></param>
        /// <response code="201">Created indicates that the request resulted in a new resource created before the response was sent.</response>
        /// <response code="400">The request is not accepted due to bad syntax, missing parameters, insufficient data, etc.              &lt;br/&gt;Error codes:              101 - Invalid provider id              301 - Contract not found for specified subscribers location, provider and trade              401 - Invalid subscriber              601 - Location is not found              701 - Invalid trade              8001 — Description is required              8002 — Call Date is required              8003 — Issue is required              8005 - CallDate has wrong format              8006 - ScheduledDate has wrong format              8007 - Invalid status              8008 - Invalid extended status              8009 - Invalid category              8010 - Invalid priority              8011 - Invalid currency              8012 - Invalid setup              8013 - Invalid area              8014 - Invalid asset              8017 - ProblemCode is required              8018 - ProblemType is required              8019 - ScheduledDate must be greater than CallDate</response>
        /// <response code="401">The request is not authorized.              &lt;br/&gt;Error codes:              504 — API call rejected by security permissions</response>
        /// <response code="500">Indicates that a generic error has occurred on the server.              &lt;br/&gt;Error codes:              501 - Internal Error code</response>
        [HttpPost]
        [Route("/v3/workrequests")]
        [Consumes("application/json", "text/json", "application/xml", "text/xml", "application/x-www-form-urlencoded")]
        [ValidateModelState]
        [ProducesResponseType(statusCode: 201, type: typeof(SCServiceChannelServicesMessagingWorkRequestsCreateWorkRequestResponse))]
        [ProducesResponseType(statusCode: 400, type: typeof(SCServiceChannelServicesMessagingErrorResponse))]
        [ProducesResponseType(statusCode: 401, type: typeof(SCServiceChannelServicesMessagingErrorResponse))]
        [ProducesResponseType(statusCode: 500, type: typeof(SCServiceChannelServicesMessagingErrorResponse))]
        public abstract Task<IActionResult> Workrequests([FromBody]SCServiceChannelServicesMessagingWorkRequestsCreateWorkRequestRequest request);

        /// <summary>
        /// Get providers available for reassign
        /// </summary>
        /// <param name="workRequestId">Work request id</param>
        /// <response code="201">Created indicates that the request resulted in a new resource created before the response was sent.</response>
        /// <response code="400">The request is not accepted due to bad syntax, missing parameters, insufficient data, etc.              &lt;br/&gt;Error codes:                         503 - Invalid Equipment Id              503 - Invalid Location Id              804 - API call rejected by lack of provider permissions              502 - We could not find the service provider for the problem you have indicated</response>
        /// <response code="401">The request is not authorized.              &lt;br/&gt;Error codes:              504 — API call rejected by security permissions</response>
        /// <response code="404">The requested resource does not exist on the server.              &lt;br/&gt;Error codes:              502 — We could not find the service provider for the problem you have indicated</response>
        /// <response code="500">Indicates that a generic error has occurred on the server.              &lt;br/&gt;Error codes:              501 - Internal Error code</response>
        [HttpGet]
        [Route("/v3/workrequests/providersforreassignment")]
        [ValidateModelState]
        [ProducesResponseType(statusCode: 201, type: typeof(SCServiceChannelServicesMessagingProvidersServiceRequestProvider))]
        [ProducesResponseType(statusCode: 400, type: typeof(SCServiceChannelServicesMessagingErrorResponse))]
        [ProducesResponseType(statusCode: 401, type: typeof(SCServiceChannelServicesMessagingErrorResponse))]
        [ProducesResponseType(statusCode: 500, type: typeof(SCServiceChannelServicesMessagingErrorResponse))]
        public abstract Task<IActionResult> WorkrequestsProvidersforreassignmentworkRequestIdworkRequestId([FromQuery (Name = "workRequestId")][Required()]int workRequestId);

        /// <summary>
        /// Performs search of work requests by specified filter expression.                One page contains 50 items by default (\&quot;PageSize\&quot;&#x3D;50).               To get next 50 items use the “Page” parameter (for example Page&#x3D;2 and so on).
        /// </summary>
        /// <remarks>*In limited availability phase.*</remarks>
        /// <param name="request"></param>
        /// <response code="200">Work requests are in the response.</response>
        /// <response code="400">The request is not accepted due to bad syntax, missing parameters, insufficient data, etc.              &lt;br/&gt;Error codes:                         8100 - CallDateFrom has wrong format              8101 - CallDateTo has wrong format              8102 - ScheduledDateFrom has wrong format              8103 - ScheduledDateTo has wrong format              8104 - CloseDateFrom has wrong format              8105 - CloseDateTo has wrong format</response>
        /// <response code="401">The request is not authorized.              &lt;br/&gt;Error codes:              504 — API call rejected by security permissions</response>
        /// <response code="500">The server was unable to complete the request due to an internal error.</response>
        [HttpPost]
        [Route("/v3/workrequests/search")]
        [Consumes("application/json", "text/json", "application/xml", "text/xml", "application/x-www-form-urlencoded")]
        [ValidateModelState]
        [ProducesResponseType(statusCode: 200, type: typeof(List<SCServiceChannelServicesMessagingWorkRequestsWorkRequest>))]
        [ProducesResponseType(statusCode: 400, type: typeof(SCServiceChannelServicesMessagingErrorResponse))]
        [ProducesResponseType(statusCode: 401, type: typeof(SCServiceChannelServicesMessagingErrorResponse))]
        [ProducesResponseType(statusCode: 500, type: typeof(SCServiceChannelServicesMessagingErrorResponse))]
        public abstract Task<IActionResult> WorkrequestsSearch([FromBody]SCServiceChannelServicesMessagingWorkRequestsSearchWorkRequestRequest request);

        /// <summary>
        /// Retrieve a work request
        /// </summary>
        /// <remarks>*In limited availability phase.*</remarks>
        /// <param name="id">Numeric Id of the work request to perform action with.</param>
        /// <response code="200">Indicates that the request succeeded and that the requested information is in the response.</response>
        /// <response code="401">Indicates that the requested resource requires authentication.              &lt;br/&gt;Error codes:              &lt;br/&gt; 504 - API call rejected by security permissions;</response>
        /// <response code="404">The requested resource does not exist on the server.              &lt;br/&gt;Error codes:              502 — Data not found</response>
        [HttpGet]
        [Route("/v3/workrequests/{id}")]
        [ValidateModelState]
        [ProducesResponseType(statusCode: 200, type: typeof(SCServiceChannelServicesMessagingWorkRequestsWorkRequest))]
        [ProducesResponseType(statusCode: 401, type: typeof(SCServiceChannelServicesMessagingErrorResponse))]
        public abstract Task<IActionResult> Workrequestsid([FromRoute (Name = "id")][Required]int id);

        /// <summary>
        /// Delete a work request
        /// </summary>
        /// <remarks>*In limited availability phase.*</remarks>
        /// <param name="id">Numeric Id of the work request to perform action with.</param>
        /// <response code="200">Indicates that the request succeeded and that the requested information is in the response.</response>
        /// <response code="401">Indicates that the requested resource requires authentication.              &lt;br/&gt;Error codes:              &lt;br/&gt; 504 - API call rejected by security permissions;</response>
        /// <response code="404">The requested resource does not exist on the server.              &lt;br/&gt;Error codes:              502 — Data not found</response>
        [HttpDelete]
        [Route("/v3/workrequests/{id}")]
        [ValidateModelState]
        [ProducesResponseType(statusCode: 401, type: typeof(SCServiceChannelServicesMessagingErrorResponse))]
        public abstract Task<IActionResult> Workrequestsid_0([FromRoute (Name = "id")][Required]int id);

        /// <summary>
        /// Update a work request
        /// </summary>
        /// <remarks>*In limited availability phase.*</remarks>
        /// <param name="workRequestId">Numeric Id of the work request to perform action with.</param>
        /// <param name="updateRequest">The update request.</param>
        /// <response code="200">Indicates that the request succeeded and that the requested information is in the response.</response>
        /// <response code="400">Bad Request - the request could not be understood or was missing required parameters.              &lt;br/&gt;Error codes:              301 - Contract not found for specified subscribers location, provider and trade              502 - WorkRequest not found              701 - Invalid trade              8006 - ScheduledDate has wrong format              8007 - Invalid status              8008 - Invalid extended status              8009 - Invalid category              8010 - Invalid priority                   8011 - Invalid currency              8019 - ScheduledDate must be greater than CallDate              8107 - Work request is closed              8108 - Closed reason is required for Closed status              8109 - Work order id is required for this closed reason              8110 - Invalid closed reason              8111 - Closed reason could be set only for Closed status              8112 - Invalid work order id              8113 - Work order id could be set only for Closed status              8114 - Work order id could be set only for &amp;apos;Work order created&amp;apos; reason</response>
        /// <response code="401">The request is not authorized.              &lt;br/&gt;Error codes:              504 — API call rejected by security permissions</response>
        /// <response code="500">Indicates that a generic error has occurred on the server.              &lt;br/&gt;Error codes:              501 - Internal Error code</response>
        [HttpPut]
        [Route("/v3/workrequests/{workRequestId}")]
        [Consumes("application/json", "text/json", "application/xml", "text/xml", "application/x-www-form-urlencoded")]
        [ValidateModelState]
        [ProducesResponseType(statusCode: 400, type: typeof(SCServiceChannelServicesMessagingErrorResponse))]
        [ProducesResponseType(statusCode: 401, type: typeof(SCServiceChannelServicesMessagingErrorResponse))]
        [ProducesResponseType(statusCode: 500, type: typeof(SCServiceChannelServicesMessagingErrorResponse))]
        public abstract Task<IActionResult> WorkrequestsworkRequestId([FromRoute (Name = "workRequestId")][Required]int workRequestId, [FromBody]SCServiceChannelServicesMessagingWorkRequestsUpdateWorkRequestRequest updateRequest);

        /// <summary>
        /// Update work request category
        /// </summary>
        /// <remarks>*In limited availability phase.*</remarks>
        /// <param name="workRequestId">Numeric Id of the work request to perform action with.</param>
        /// <param name="categoryId">Category Id.</param>
        /// <response code="200">Indicates that the request succeeded and that the requested information is in the response.</response>
        /// <response code="400">Bad Request - the request could not be understood or was missing required parameters.              &lt;br/&gt;Error codes:              502 - WorkRequest not found              8009 - Invalid category</response>
        /// <response code="401">The request is not authorized.              &lt;br/&gt;Error codes:              504 — API call rejected by security permissions</response>
        /// <response code="500">Indicates that a generic error has occurred on the server.              &lt;br/&gt;Error codes:              501 - Internal Error code</response>
        [HttpPut]
        [Route("/v3/workrequests/{workRequestId}/category")]
        [ValidateModelState]
        [ProducesResponseType(statusCode: 400, type: typeof(SCServiceChannelServicesMessagingErrorResponse))]
        [ProducesResponseType(statusCode: 401, type: typeof(SCServiceChannelServicesMessagingErrorResponse))]
        [ProducesResponseType(statusCode: 500, type: typeof(SCServiceChannelServicesMessagingErrorResponse))]
        public abstract Task<IActionResult> WorkrequestsworkRequestIdCategorycategoryIdcategoryId([FromRoute (Name = "workRequestId")][Required]int workRequestId, [FromQuery (Name = "categoryId")][Required()]int categoryId);

        /// <summary>
        /// Update work request description
        /// </summary>
        /// <remarks>*In limited availability phase.*</remarks>
        /// <param name="workRequestId">Numeric Id of the work request to perform action with.</param>
        /// <param name="updateRequest">The update request. Work request description.</param>
        /// <response code="200">Indicates that the request succeeded and that the requested information is in the response.</response>
        /// <response code="400">Bad Request - the request could not be understood or was missing required parameters.              &lt;br/&gt;Error codes:              502 - WorkRequest not found</response>
        /// <response code="401">The request is not authorized.              &lt;br/&gt;Error codes:              504 — API call rejected by security permissions</response>
        /// <response code="500">Indicates that a generic error has occurred on the server.              &lt;br/&gt;Error codes:              501 - Internal Error code</response>
        [HttpPut]
        [Route("/v3/workrequests/{workRequestId}/description")]
        [Consumes("application/json", "text/json", "application/xml", "text/xml", "application/x-www-form-urlencoded")]
        [ValidateModelState]
        [ProducesResponseType(statusCode: 400, type: typeof(SCServiceChannelServicesMessagingErrorResponse))]
        [ProducesResponseType(statusCode: 401, type: typeof(SCServiceChannelServicesMessagingErrorResponse))]
        [ProducesResponseType(statusCode: 500, type: typeof(SCServiceChannelServicesMessagingErrorResponse))]
        public abstract Task<IActionResult> WorkrequestsworkRequestIdDescription([FromRoute (Name = "workRequestId")][Required]int workRequestId, [FromBody]SCServiceChannelServicesMessagingWorkRequestsChangeWorkRequestStringFieldsRequest updateRequest);

        /// <summary>
        /// Update work request NTE
        /// </summary>
        /// <remarks>*In limited availability phase.*</remarks>
        /// <param name="workRequestId">Numeric Id of the work request to perform action with.</param>
        /// <param name="updateRequest">The update request. Work request NTE.</param>
        /// <response code="200">Indicates that the request succeeded and that the requested information is in the response.</response>
        /// <response code="400">Bad Request - the request could not be understood or was missing required parameters.              &lt;br/&gt;Error codes:              502 - WorkRequest not found              8011 - Invalid currency</response>
        /// <response code="401">The request is not authorized.              &lt;br/&gt;Error codes:              504 — API call rejected by security permissions</response>
        /// <response code="500">Indicates that a generic error has occurred on the server.              &lt;br/&gt;Error codes:              501 - Internal Error code</response>
        [HttpPut]
        [Route("/v3/workrequests/{workRequestId}/nte")]
        [Consumes("application/json", "text/json", "application/xml", "text/xml", "application/x-www-form-urlencoded")]
        [ValidateModelState]
        [ProducesResponseType(statusCode: 400, type: typeof(SCServiceChannelServicesMessagingErrorResponse))]
        [ProducesResponseType(statusCode: 401, type: typeof(SCServiceChannelServicesMessagingErrorResponse))]
        [ProducesResponseType(statusCode: 500, type: typeof(SCServiceChannelServicesMessagingErrorResponse))]
        public abstract Task<IActionResult> WorkrequestsworkRequestIdNte([FromRoute (Name = "workRequestId")][Required]int workRequestId, [FromBody]SCServiceChannelServicesMessagingWorkRequestsChangeWorkRequestNteRequest updateRequest);

        /// <summary>
        /// Update work request priority
        /// </summary>
        /// <remarks>*In limited availability phase.*</remarks>
        /// <param name="workRequestId">Numeric Id of the work request to perform action with.</param>
        /// <param name="priorityId">Priority Id.</param>
        /// <response code="200">Indicates that the request succeeded and that the requested information is in the response.</response>
        /// <response code="400">Bad Request - the request could not be understood or was missing required parameters.              &lt;br/&gt;Error codes:              502 - WorkRequest not found              8010 - Invalid priority</response>
        /// <response code="401">The request is not authorized.              &lt;br/&gt;Error codes:              504 — API call rejected by security permissions</response>
        /// <response code="500">Indicates that a generic error has occurred on the server.              &lt;br/&gt;Error codes:              501 - Internal Error code</response>
        [HttpPut]
        [Route("/v3/workrequests/{workRequestId}/priority")]
        [ValidateModelState]
        [ProducesResponseType(statusCode: 400, type: typeof(SCServiceChannelServicesMessagingErrorResponse))]
        [ProducesResponseType(statusCode: 401, type: typeof(SCServiceChannelServicesMessagingErrorResponse))]
        [ProducesResponseType(statusCode: 500, type: typeof(SCServiceChannelServicesMessagingErrorResponse))]
        public abstract Task<IActionResult> WorkrequestsworkRequestIdPrioritypriorityIdpriorityId([FromRoute (Name = "workRequestId")][Required]int workRequestId, [FromQuery (Name = "priorityId")][Required()]int priorityId);

        /// <summary>
        /// Reassign work request to another provider
        /// </summary>
        /// <remarks>*In limited availability phase.*</remarks>
        /// <param name="workRequestId">Numeric Id of the work request to perform action with.</param>
        /// <param name="reassignRequest">The request to perform action with.</param>
        /// <response code="200">Indicates that the request succeeded and that the requested information is in the response.</response>
        /// <response code="400">Bad Request - the request could not be understood or was missing required parameters.              &lt;br/&gt;Error codes:              100 - Invalid provider id passed              301 - Contract not found for specified subscribers location, provider and trade              502 - WorkRequest not found              503 - Provider should be changed              701 - Invalid trade              8006 - ScheduledDate has wrong format              8009 - Invalid category              8010 - Invalid priority              8011 - Invalid currency              8019 - ScheduledDate must be greater than CallDate</response>
        /// <response code="401">The request is not authorized.              &lt;br/&gt;Error codes:              504 — API call rejected by security permissions</response>
        /// <response code="500">Indicates that a generic error has occurred on the server.              &lt;br/&gt;Error codes:              501 - Internal Error code</response>
        [HttpPut]
        [Route("/v3/workrequests/{workRequestId}/reassign")]
        [Consumes("application/json", "text/json", "application/xml", "text/xml", "application/x-www-form-urlencoded")]
        [ValidateModelState]
        [ProducesResponseType(statusCode: 400, type: typeof(SCServiceChannelServicesMessagingErrorResponse))]
        [ProducesResponseType(statusCode: 401, type: typeof(SCServiceChannelServicesMessagingErrorResponse))]
        [ProducesResponseType(statusCode: 500, type: typeof(SCServiceChannelServicesMessagingErrorResponse))]
        public abstract Task<IActionResult> WorkrequestsworkRequestIdReassign([FromRoute (Name = "workRequestId")][Required]int workRequestId, [FromBody]SCServiceChannelServicesMessagingWorkRequestsReassignWorkRequestRequest reassignRequest);

        /// <summary>
        /// Update work request schedule date
        /// </summary>
        /// <remarks>*In limited availability phase.*</remarks>
        /// <param name="workRequestId">Numeric Id of the work request to perform action with.</param>
        /// <param name="scheduledDate">Scheduled date.</param>
        /// <response code="200">Indicates that the request succeeded and that the requested information is in the response.</response>
        /// <response code="400">Bad Request - the request could not be understood or was missing required parameters.              &lt;br/&gt;Error codes:              502 - WorkRequest not found              8006 - ScheduledDate has wrong format              8019 - ScheduledDate must be greater than CallDate</response>
        /// <response code="401">The request is not authorized.              &lt;br/&gt;Error codes:              504 — API call rejected by security permissions</response>
        /// <response code="500">Indicates that a generic error has occurred on the server.              &lt;br/&gt;Error codes:              501 - Internal Error code</response>
        [HttpPut]
        [Route("/v3/workrequests/{workRequestId}/scheduledate")]
        [ValidateModelState]
        [ProducesResponseType(statusCode: 400, type: typeof(SCServiceChannelServicesMessagingErrorResponse))]
        [ProducesResponseType(statusCode: 401, type: typeof(SCServiceChannelServicesMessagingErrorResponse))]
        [ProducesResponseType(statusCode: 500, type: typeof(SCServiceChannelServicesMessagingErrorResponse))]
        public abstract Task<IActionResult> WorkrequestsworkRequestIdScheduledatescheduledDatescheduledDate([FromRoute (Name = "workRequestId")][Required]int workRequestId, [FromQuery (Name = "scheduledDate")][Required()]string scheduledDate);

        /// <summary>
        /// Update a work request status
        /// </summary>
        /// <remarks>*In limited availability phase.*</remarks>
        /// <param name="workRequestId">Numeric Id of the work request to perform action with.</param>
        /// <param name="updateRequest">The update request. Work request Status.</param>
        /// <response code="200">Indicates that the request succeeded and that the requested information is in the response.</response>
        /// <response code="400">Bad Request - the request could not be understood or was missing required parameters.              &lt;br/&gt;Error codes:              502 - WorkRequest not found              8007 - Invalid status              8008 - Invalid extended status</response>
        /// <response code="401">The request is not authorized.              &lt;br/&gt;Error codes:              504 — API call rejected by security permissions</response>
        /// <response code="500">Indicates that a generic error has occurred on the server.              &lt;br/&gt;Error codes:              501 - Internal Error code</response>
        [HttpPut]
        [Route("/v3/workrequests/{workRequestId}/status")]
        [Consumes("application/json", "text/json", "application/xml", "text/xml", "application/x-www-form-urlencoded")]
        [ValidateModelState]
        [ProducesResponseType(statusCode: 400, type: typeof(SCServiceChannelServicesMessagingErrorResponse))]
        [ProducesResponseType(statusCode: 401, type: typeof(SCServiceChannelServicesMessagingErrorResponse))]
        [ProducesResponseType(statusCode: 500, type: typeof(SCServiceChannelServicesMessagingErrorResponse))]
        public abstract Task<IActionResult> WorkrequestsworkRequestIdStatus([FromRoute (Name = "workRequestId")][Required]int workRequestId, [FromBody]SCServiceChannelServicesMessagingWorkRequestsChangeWorkRequestStatusRequest updateRequest);

        /// <summary>
        /// Update work request trade
        /// </summary>
        /// <remarks>*In limited availability phase.*</remarks>
        /// <param name="workRequestId">Numeric Id of the Work request to perform action with.</param>
        /// <param name="tradeId">Trade id.</param>
        /// <response code="200">Indicates that the request succeeded and that the requested information is in the response.</response>
        /// <response code="400">Bad Request - the request could not be understood or was missing required parameters.              &lt;br/&gt;Error codes:              301 - Contract not found for specified subscribers location, provider and trade              502 - WorkRequest not found              701 - Invalid trade</response>
        /// <response code="401">The request is not authorized.              &lt;br/&gt;Error codes:              504 — API call rejected by security permissions</response>
        /// <response code="500">Indicates that a generic error has occurred on the server.              &lt;br/&gt;Error codes:              501 - Internal Error code</response>
        [HttpPut]
        [Route("/v3/workrequests/{workRequestId}/trade")]
        [ValidateModelState]
        [ProducesResponseType(statusCode: 400, type: typeof(SCServiceChannelServicesMessagingErrorResponse))]
        [ProducesResponseType(statusCode: 401, type: typeof(SCServiceChannelServicesMessagingErrorResponse))]
        [ProducesResponseType(statusCode: 500, type: typeof(SCServiceChannelServicesMessagingErrorResponse))]
        public abstract Task<IActionResult> WorkrequestsworkRequestIdTradetradeIdtradeId([FromRoute (Name = "workRequestId")][Required]int workRequestId, [FromQuery (Name = "tradeId")][Required()]int tradeId);
    }
}
