/*
 * ServiceChannel API - v.3
 *
 * The ServiceChannel API is a RESTful and stateless API. It accepts standard HTTP verbs and supports OAuth 2.0 for authorizing requests.      Our API returns common HTTP status codes as well as JSON encapsulated data.      See [API Overview](https://developer.servicechannel.com/basics/introduction/overview/) for the intro to ServiceChannel API.<br>      <h3>Authentication and Authorization</h3>You should have a ServiceChannel account, register your application, and obtain `access_token` to integrate with our API.      See [Authentication and Authorization](https://developer.servicechannel.com/basics/general/authentication/) for more information.      To use this API playground, click **Authorize** and sign in to ServiceChannel.<br>      <h3>Environment</h3> All calls in this API Reference point to the **SB2 environment**.      See [Environments](https://developer.servicechannel.com/basics/general/environments/) for more information.<br>      <h3>API Version</h3>The current stable version of the ServiceChannel API is `v3`. In the request URL, `v3` is a version prefix that should be present.      When you omit the version prefix, calls point to the minimum supported version of the API.      We recommend you to always specify the API version to avoid possible errors.
 *
 * The version of the OpenAPI document: 3
 * 
 * Generated by: https://openapi-generator.tech
 */

using System;
using System.Collections.Generic;
using System.ComponentModel.DataAnnotations;
using System.Threading;
using System.Threading.Tasks;
using Microsoft.AspNetCore.Authorization;
using Microsoft.AspNetCore.Mvc;
using Microsoft.AspNetCore.Http;
using ServiceChannel.OpenAPIGenerated.Api.Attributes;
using ServiceChannel.OpenAPIGenerated.Api.Models;

namespace ServiceChannel.OpenAPIGenerated.Api.Controllers
{ 
    /// <summary>
    /// 
    /// </summary>
    [ApiController]
    public abstract class NotificationWebHooksApiController : ControllerBase
    { 
        /// <summary>
        /// List existing webhooks
        /// </summary>
        /// <remarks>Returns a list of webhooks for the current subscriber or provider.</remarks>
        /// <response code="200">The webhooks are in the response.</response>
        /// <response code="401">The request is not authorized.              &lt;br/&gt;Error codes:              504 - Missing or incorrect authentication credentials</response>
        [HttpGet]
        [Route("/v3/NotificationWebHooks")]
        [ValidateModelState]
        [ProducesResponseType(statusCode: 200, type: typeof(List<SCServiceChannelServicesMessagingNotificationsWebHooksWebHook>))]
        [ProducesResponseType(statusCode: 401, type: typeof(SCServiceChannelServicesMessagingErrorResponse))]
        public abstract Task<IActionResult> NotificationWebHooks();

        /// <summary>
        /// Create a webhook
        /// </summary>
        /// <remarks>Creates a new webhook for the specified [event types](https://developer.servicechannel.com/guides/wh/types-of-events/). Returns a unique webhook ID for a successful request.              See [Event Objects](https://developer.servicechannel.com/guides/wh/event-objects/) for example notification objects and descriptions of their fields.              &lt;br /&gt;***Note:*** You can create webhooks using API or via the [Service Automation Admin](https://developer.servicechannel.com/guides/wh/create-and-manage-webhooks-in-UI/).              &lt;br /&gt;**Example Request**                                POST /NotificationWebHooks                  {                    \&quot;Subscriptions\&quot;: [                      {                        \&quot;Name\&quot;: \&quot;Subscription to new WOs\&quot;,                        \&quot;EventTypes\&quot;: [                          \&quot;WorkOrderCreated\&quot;                        ],                        \&quot;Rules\&quot;: {                          \&quot;Trades\&quot;: [                            \&quot;GLASS\&quot;                          ],                          \&quot;Categories\&quot;: [                            \&quot;MAINTENANCE\&quot;                          ],                          \&quot;Statuses\&quot;: [                            \&quot;COMPLETED/CONFIRMED\&quot;                          ]                        }                      }                    ],                    \&quot;Enabled\&quot;: true,                    \&quot;Name\&quot;: \&quot;New WO webhook\&quot;,                    \&quot;Description\&quot;: \&quot;I want to receive notifications when new WOs of GLASS trade and MAINTENANCE category are created.\&quot;,                    \&quot;Url\&quot;: \&quot;https://your-company.com/webhook-target-URL\&quot;                  }</remarks>
        /// <param name="req">The webhook object that needs to be created.</param>
        /// <response code="201">The webhook is created.</response>
        /// <response code="400">The request is not accepted due to bad syntax, missing parameters, insufficient data, etc.              &lt;br/&gt;Error codes:              503 - Required data missing or incorrect</response>
        /// <response code="401">The request is not authorized.              &lt;br/&gt;Error codes:              504 - Missing or incorrect authentication credentials</response>
        [HttpPost]
        [Route("/v3/NotificationWebHooks")]
        [Consumes("application/json", "text/json", "application/xml", "text/xml", "application/x-www-form-urlencoded")]
        [ValidateModelState]
        [ProducesResponseType(statusCode: 201, type: typeof(SCServiceChannelServicesMessagingNotificationsWebHooksAddWebHookResponse))]
        [ProducesResponseType(statusCode: 400, type: typeof(SCServiceChannelServicesMessagingErrorResponse))]
        [ProducesResponseType(statusCode: 401, type: typeof(SCServiceChannelServicesMessagingErrorResponse))]
        public abstract Task<IActionResult> NotificationWebHooks_0([FromBody]SCServiceChannelServicesMessagingNotificationsWebHooksAddWebHookRequest req);

        /// <summary>
        /// Get a webhook
        /// </summary>
        /// <remarks>Retrieves the details of the specified webhook.</remarks>
        /// <param name="id">The unique ID of the webhook to return.</param>
        /// <response code="200">The requested webhook is in the response.</response>
        /// <response code="400">The requested data are not found.              &lt;br/&gt;Error codes:              502 - Webhook not found</response>
        /// <response code="401">The request is not authorized.              &lt;br/&gt;Error codes:              504 - Missing or incorrect authentication credentials</response>
        [HttpGet]
        [Route("/v3/NotificationWebHooks/{id}")]
        [ValidateModelState]
        [ProducesResponseType(statusCode: 200, type: typeof(SCServiceChannelServicesMessagingNotificationsWebHooksWebHook))]
        [ProducesResponseType(statusCode: 400, type: typeof(SCServiceChannelServicesMessagingErrorResponse))]
        [ProducesResponseType(statusCode: 401, type: typeof(SCServiceChannelServicesMessagingErrorResponse))]
        public abstract Task<IActionResult> NotificationWebHooksid([FromRoute (Name = "id")][Required]int id);

        /// <summary>
        /// Update a webhook
        /// </summary>
        /// <remarks>Updates the specified webhook by setting the values of the parameters passed.              &lt;br /&gt;**Example Request**                                PUT /NotificationWebHooks/{id}                  {                    \&quot;Subscriptions\&quot;: [                      {                        \&quot;Id\&quot;: 1111,                        \&quot;Name\&quot;: \&quot;Subscription to new WOs\&quot;,                        \&quot;EventTypes\&quot;: [                          \&quot;WorkOrderCreated\&quot;                        ],                        \&quot;Rules\&quot;: {                          \&quot;Trades\&quot;: [                            \&quot;GLASS\&quot;                          ],                          \&quot;Categories\&quot;: [                            \&quot;MAINTENANCE\&quot;                          ],                          \&quot;Statuses\&quot;: [                            \&quot;COMPLETED/CONFIRMED\&quot;                          ]                        }                      }                    ],                    \&quot;Id\&quot;: 1,                    \&quot;Enabled\&quot;: true,                    \&quot;Name\&quot;: \&quot;New WO webhook\&quot;,                    \&quot;Description\&quot;: \&quot;I want to receive notifications when new WOs of GLASS trade and MAINTENANCE category are created.\&quot;,                    \&quot;Url\&quot;: \&quot;https://your-company.com/webhook-target-URL\&quot;                  }</remarks>
        /// <param name="id">The unique ID of the webhook to update.</param>
        /// <param name="req">The webhook object that needs to be updated.</param>
        /// <response code="204">The webhook is updated, and the response is intentionally blank.</response>
        /// <response code="400">The request is not accepted due to bad syntax, missing parameters, insufficient data, etc.              &lt;br/&gt;Error codes:              502 - Webhook not found              503 - Required data missing or incorrect</response>
        /// <response code="401">The request is not authorized.              &lt;br/&gt;Error codes:              504 - Missing or incorrect authentication credentials</response>
        [HttpPut]
        [Route("/v3/NotificationWebHooks/{id}")]
        [Consumes("application/json", "text/json", "application/xml", "text/xml", "application/x-www-form-urlencoded")]
        [ValidateModelState]
        [ProducesResponseType(statusCode: 400, type: typeof(SCServiceChannelServicesMessagingErrorResponse))]
        [ProducesResponseType(statusCode: 401, type: typeof(SCServiceChannelServicesMessagingErrorResponse))]
        public abstract Task<IActionResult> NotificationWebHooksid_0([FromRoute (Name = "id")][Required]int id, [FromBody]SCServiceChannelServicesMessagingNotificationsWebHooksWebHook req);

        /// <summary>
        /// Delete a webhook
        /// </summary>
        /// <remarks>Permanently deletes the specified webhook. It cannot be undone.</remarks>
        /// <param name="id">The unique ID of the webhook to delete.</param>
        /// <response code="204">The webhook is deleted, and the response is intentionally blank.</response>
        /// <response code="400">The requested data are not found.              &lt;br/&gt;Error codes:              502 - Webhook not found</response>
        /// <response code="401">The request is not authorized.              &lt;br/&gt;Error codes:              504 - Missing or incorrect authentication credentials</response>
        [HttpDelete]
        [Route("/v3/NotificationWebHooks/{id}")]
        [ValidateModelState]
        [ProducesResponseType(statusCode: 400, type: typeof(SCServiceChannelServicesMessagingErrorResponse))]
        [ProducesResponseType(statusCode: 401, type: typeof(SCServiceChannelServicesMessagingErrorResponse))]
        public abstract Task<IActionResult> NotificationWebHooksid_1([FromRoute (Name = "id")][Required]int id);
    }
}
