/*
 * ServiceChannel API - v.3
 *
 * The ServiceChannel API is a RESTful and stateless API. It accepts standard HTTP verbs and supports OAuth 2.0 for authorizing requests.      Our API returns common HTTP status codes as well as JSON encapsulated data.      See [API Overview](https://developer.servicechannel.com/basics/introduction/overview/) for the intro to ServiceChannel API.<br>      <h3>Authentication and Authorization</h3>You should have a ServiceChannel account, register your application, and obtain `access_token` to integrate with our API.      See [Authentication and Authorization](https://developer.servicechannel.com/basics/general/authentication/) for more information.      To use this API playground, click **Authorize** and sign in to ServiceChannel.<br>      <h3>Environment</h3> All calls in this API Reference point to the **SB2 environment**.      See [Environments](https://developer.servicechannel.com/basics/general/environments/) for more information.<br>      <h3>API Version</h3>The current stable version of the ServiceChannel API is `v3`. In the request URL, `v3` is a version prefix that should be present.      When you omit the version prefix, calls point to the minimum supported version of the API.      We recommend you to always specify the API version to avoid possible errors.
 *
 * The version of the OpenAPI document: 3
 * 
 * Generated by: https://openapi-generator.tech
 */

using System;
using System.Collections.Generic;
using System.ComponentModel.DataAnnotations;
using System.Threading;
using System.Threading.Tasks;
using Microsoft.AspNetCore.Authorization;
using Microsoft.AspNetCore.Mvc;
using Microsoft.AspNetCore.Http;
using ServiceChannel.OpenAPIGenerated.Api.Attributes;
using ServiceChannel.OpenAPIGenerated.Api.Models;

namespace ServiceChannel.OpenAPIGenerated.Api.Controllers
{ 
    /// <summary>
    /// 
    /// </summary>
    [ApiController]
    public abstract class AfterHoursApiController : ControllerBase
    { 
        /// <summary>
        /// Retrieve Business Hours
        /// </summary>
        /// <remarks>Returns opening and closing hours from Monday to Sunday for the specified location.</remarks>
        /// <param name="locationId">Unique identifier of the subscriber’s location you want to retrieve business hours for.</param>
        /// <response code="200">Business hours are in the response.</response>
        /// <response code="400">The request is not accepted due to bad syntax, missing parameters, insufficient data, etc.              &lt;br/&gt;Error codes:              601 — Location is not found</response>
        /// <response code="401">The request is not authorized.              &lt;br/&gt;Error codes:              504 — API call rejected by security permissions</response>
        /// <response code="500">The server was unable to complete the request due to an internal error.</response>
        [HttpGet]
        [Route("/v3/locations/{locationId}/businesshours")]
        [ValidateModelState]
        [ProducesResponseType(statusCode: 200, type: typeof(SCServiceChannelServicesMessagingAfterHoursBusinessHoursApiResponse))]
        [ProducesResponseType(statusCode: 400, type: typeof(SCServiceChannelServicesMessagingErrorResponse))]
        [ProducesResponseType(statusCode: 401, type: typeof(SCServiceChannelServicesMessagingErrorResponse))]
        [ProducesResponseType(statusCode: 500, type: typeof(SCServiceChannelServicesMessagingErrorResponse))]
        public abstract Task<IActionResult> LocationslocationIdBusinesshours([FromRoute (Name = "locationId")][Required]int locationId);

        /// <summary>
        /// Update business hours
        /// </summary>
        /// <remarks>Modifies the existing business hours for the specified location.              &lt;br /&gt;Send this request [GET /locations/{locationId}/businesshours](https://developer.servicechannel.com/swagger/ui/index?version&#x3D;3#/AfterHours/GETv3_locations__locationId__businesshours) to get the location business hours.              &lt;br /&gt;Learn [how to manage business hours](https://servicechannel.atlassian.net/wiki/spaces/SCU/pages/683409418/Managing+Business+Hours+and+Holidays+for+a+Location) in ServiceChannel University.              &lt;br /&gt;**Example Request**                                POST / locations/{locationId}/businesshours                  {                    \&quot;businessHours\&quot;: [                      {                        \&quot;DayOfWeek\&quot;: \&quot;Monday\&quot;,                        \&quot;OpenTime\&quot;: \&quot;10:15 AM\&quot;,                        \&quot;CloseTime\&quot;: \&quot;06:00 PM\&quot;,                        \&quot;ClosedAllDay\&quot;: false                      }                  }</remarks>
        /// <param name="locationId">Unique identifier of the subscriber’s location you want to change business hours for.</param>
        /// <param name="businessHoursModel">Request model to update business hours.</param>
        /// <response code="200">Business hours are updated for the specified location.</response>
        /// <response code="400">The request is not accepted due to bad syntax, missing parameters, insufficient data, etc.              &lt;br/&gt;Error codes:              &lt;br/&gt; 613 — Incorrect format of the Open Time or Close Time. Valid format: HH:mm or hh:mm tt (for example, 23:59 or 11:59 PM).              &lt;br/&gt; 614 — Business Hours should not overlap between days of the week              &lt;br/&gt; 615 — Incorrect format of the day of the week. Valid values: Monday, Tuesday, Wednesday, Thursday, Friday, Saturday, Sunday.              &lt;br/&gt; 616 — Duplicate &#39;Day of the Week&#39; value;              &lt;br/&gt; 617 — Business Hours are not set for the location. For the initial setup, configure Business Hours for each day of the week.              &lt;br/&gt; 618 — Open Time or Close Time cannot be empty for a specific day of the week              &lt;br/&gt; 628 — Incorrect format of the &#x60;Close All Day&#x60; value. Valid values: true, false.</response>
        /// <response code="401">The request is not authorized.              &lt;br/&gt;Error codes:              &lt;br/&gt; 504 — API call rejected by security permissions</response>
        /// <response code="404">The requested resource does not exist on the server.              &lt;br/&gt;Error codes:              &lt;br/&gt; 601 — Location is not found</response>
        /// <response code="500">The server was unable to complete the request due to an internal error.</response>
        [HttpPost]
        [Route("/v3/locations/{locationId}/businesshours")]
        [Consumes("application/json", "text/json", "application/xml", "text/xml", "application/x-www-form-urlencoded")]
        [ValidateModelState]
        [ProducesResponseType(statusCode: 400, type: typeof(SCServiceChannelServicesMessagingErrorResponse))]
        [ProducesResponseType(statusCode: 401, type: typeof(SCServiceChannelServicesMessagingErrorResponse))]
        [ProducesResponseType(statusCode: 404, type: typeof(SCServiceChannelServicesMessagingErrorResponse))]
        [ProducesResponseType(statusCode: 500, type: typeof(SCServiceChannelServicesMessagingErrorResponse))]
        public abstract Task<IActionResult> LocationslocationIdBusinesshours_0([FromRoute (Name = "locationId")][Required]int locationId, [FromBody]SCServiceChannelServicesMessagingAfterHoursUpdateLocationBusinessHoursApiModelRequest businessHoursModel);

        /// <summary>
        /// Retrieve location holidays
        /// </summary>
        /// <remarks>Returns the details of each holiday for the specified location.</remarks>
        /// <param name="locationId">Unique identifier of the subscriber’s location you want to retrieve holidays for.</param>
        /// <response code="200">Location holidays are in the response.</response>
        /// <response code="400">The request is not accepted due to bad syntax, missing parameters, insufficient data, etc.              &lt;br/&gt;Error codes:              &lt;br/&gt; 601 — Location is not found;</response>
        /// <response code="401">The request is not authorized.              &lt;br/&gt;Error codes:              &lt;br/&gt; 504 — API call rejected by security permissions</response>
        /// <response code="500">The server was unable to complete the request due to an internal error.</response>
        [HttpGet]
        [Route("/v3/locations/{locationId}/holidays")]
        [ValidateModelState]
        [ProducesResponseType(statusCode: 200, type: typeof(SCServiceChannelServicesMessagingAfterHoursHolidaysApiResponse))]
        [ProducesResponseType(statusCode: 400, type: typeof(SCServiceChannelServicesMessagingErrorResponse))]
        [ProducesResponseType(statusCode: 401, type: typeof(SCServiceChannelServicesMessagingErrorResponse))]
        [ProducesResponseType(statusCode: 500, type: typeof(SCServiceChannelServicesMessagingErrorResponse))]
        public abstract Task<IActionResult> LocationslocationIdHolidays([FromRoute (Name = "locationId")][Required]int locationId);

        /// <summary>
        /// Add a holiday
        /// </summary>
        /// <remarks>Adds a holiday to the specified location.               &lt;br /&gt;Send this request [GET /locations/{locationId}/holidays](https://developer.servicechannel.com/swagger/ui/index?version&#x3D;3#/AfterHours/GETv3_locations__locationId__holidays) to get the location holidays.              &lt;br /&gt;Learn [how to manage holidays for a location](https://servicechannel.atlassian.net/wiki/spaces/SCU/pages/683409418/Managing+Business+Hours+and+Holidays+for+a+Location) in ServiceChannel University.              &lt;br /&gt;**Example Request**                                POST /locations/{locationId}/holidays                  {                   \&quot;HolidayName\&quot;: \&quot;Happy Weekend\&quot;,                   \&quot;OpenTime\&quot;: \&quot;10:00 AM\&quot;,                   \&quot;CloseTime\&quot;: \&quot;06:00 PM\&quot;,                   \&quot;ClosedAllDay\&quot;: false,                   \&quot;Frequency\&quot;: \&quot;Yearly\&quot;,                   \&quot;StartDate\&quot;: \&quot;2021-07-03T00:10:00.308Z\&quot;,                   \&quot;RepeatEvery\&quot;: \&quot;1\&quot;,                   \&quot;RepeatBy\&quot;: \&quot;DayOfWeek\&quot;,                   \&quot;RepeatOnDays\&quot;: [                     \&quot;Saturday\&quot;, \&quot;Sunday\&quot;                   ],                   \&quot;RepeatOnMonths\&quot;: [                     “June”, \&quot;July\&quot;, \&quot;August\&quot;                   ]                  }</remarks>
        /// <param name="locationId">Unique identifier of the subscriber’s location you want to add or update holidays for.</param>
        /// <param name="holidayModel">Request to add a holiday to the specified location.</param>
        /// <response code="200">The holiday is added to the specified location.</response>
        /// <response code="400">The request is not accepted due to bad syntax, missing parameters, insufficient data, etc.              &lt;br/&gt;Error codes:              &lt;br/&gt; 616 — Duplicate &#39;Day of the Week&#39; value              &lt;br/&gt; 619 — Incorrect format of the &#x60;Repeat by status&#x60; value. Valid values: DayOfWeek, DayOfMonth.              &lt;br/&gt; 620 — List of days cannot be empty when submitting the &#x60;Weekly&#x60; frequency              &lt;br/&gt; 621 — List of months cannot be empty when submitting the &#x60;Yearly&#x60; frequency              &lt;br/&gt; 622 — Incorrect month format. Valid values: January, February, March, April, May, June, July, August, September, October, November, December.              &lt;br/&gt; 623 — The &#x60;Holiday Name&#x60; value cannot be empty. The maximum length is 100 characters.              &lt;br/&gt; 624 — Incorrect format of the &#39;Repeat every&#39; value. The value should be a number between 1 and 60.              &lt;br/&gt; 625 — The same month is specified twice in the &#39;Month&#39; value              &lt;br/&gt; 626 — Incorrect format of the frequency. Valid values: Weekly, Monthly, Yearly, Singular.              &lt;br/&gt; 627 — Start date cannot be an empty value              &lt;br/&gt; 628 — Incorrect format of the &#x60;Close All Day&#x60; value. Valid values: true, false.              &lt;br/&gt; 3502 — The holiday name is already in use. Please suggest another name.</response>
        /// <response code="401">The request is not authorized.              &lt;br/&gt;Error codes:              &lt;br/&gt; 504 — API call rejected by security permissions;</response>
        /// <response code="404">The requested resource does not exist on the server.              &lt;br/&gt;Error codes:              &lt;br/&gt; 601 — Location is not found</response>
        /// <response code="500">The server was unable to complete the request due to an internal error.              &lt;br/&gt;Error codes:              &lt;br/&gt;501 — Object reference not set to an instance of an object;</response>
        [HttpPost]
        [Route("/v3/locations/{locationId}/holidays")]
        [Consumes("application/json", "text/json", "application/xml", "text/xml", "application/x-www-form-urlencoded")]
        [ValidateModelState]
        [ProducesResponseType(statusCode: 200, type: typeof(SCServiceChannelServicesMessagingAfterHoursHolidayIdsApiResponse))]
        [ProducesResponseType(statusCode: 400, type: typeof(SCServiceChannelServicesMessagingErrorResponse))]
        [ProducesResponseType(statusCode: 401, type: typeof(SCServiceChannelServicesMessagingErrorResponse))]
        [ProducesResponseType(statusCode: 404, type: typeof(SCServiceChannelServicesMessagingErrorResponse))]
        [ProducesResponseType(statusCode: 500, type: typeof(SCServiceChannelServicesMessagingErrorResponse))]
        public abstract Task<IActionResult> LocationslocationIdHolidays_0([FromRoute (Name = "locationId")][Required]int locationId, [FromBody]SCServiceChannelServicesMessagingAfterHoursAddHolidayApiModelRequest holidayModel);

        /// <summary>
        /// Delete a holiday
        /// </summary>
        /// <remarks>Permanently removes a holiday from the specified location.</remarks>
        /// <param name="locationId">Unique identifier of the location to delete a holiday from.</param>
        /// <param name="holidayName">The name of the holiday you want to remove.</param>
        /// <response code="200">ID of the deleted holiday is in the response.</response>
        /// <response code="400">The request is not accepted due to bad syntax, missing parameters, insufficient data, etc.              &lt;br/&gt;Error codes:              &lt;br/&gt; 601 — Location is not found              &lt;br/&gt; 623 — The &#x60;Holiday Name&#x60; value cannot be empty. The maximum length is 100 characters.              &lt;br/&gt; 629 — The holiday doesn&#39;t exist at the location</response>
        /// <response code="401">The request is not authorized.              &lt;br/&gt;Error codes:              &lt;br/&gt; 504 — API call rejected by security permissions</response>
        /// <response code="404">The requested resource does not exist on the server.              &lt;br/&gt;Error codes:              &lt;br/&gt; 601 — Location is not found              &lt;br/&gt; 601 — Invalid Location Id</response>
        /// <response code="500">The server was unable to complete the request due to an internal error.</response>
        [HttpDelete]
        [Route("/v3/locations/{locationId}/holidays")]
        [ValidateModelState]
        [ProducesResponseType(statusCode: 200, type: typeof(SCServiceChannelServicesMessagingAfterHoursHolidayIdsApiResponse))]
        [ProducesResponseType(statusCode: 400, type: typeof(SCServiceChannelServicesMessagingErrorResponse))]
        [ProducesResponseType(statusCode: 401, type: typeof(SCServiceChannelServicesMessagingErrorResponse))]
        [ProducesResponseType(statusCode: 404, type: typeof(SCServiceChannelServicesMessagingErrorResponse))]
        [ProducesResponseType(statusCode: 500, type: typeof(SCServiceChannelServicesMessagingErrorResponse))]
        public abstract Task<IActionResult> LocationslocationIdHolidaysholidayNameholidayName([FromRoute (Name = "locationId")][Required]int locationId, [FromQuery (Name = "holidayName")][Required()]string holidayName);
    }
}
