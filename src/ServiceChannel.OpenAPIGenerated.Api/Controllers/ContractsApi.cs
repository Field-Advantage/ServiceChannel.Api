/*
 * ServiceChannel API - v.3
 *
 * The ServiceChannel API is a RESTful and stateless API. It accepts standard HTTP verbs and supports OAuth 2.0 for authorizing requests.      Our API returns common HTTP status codes as well as JSON encapsulated data.      See [API Overview](https://developer.servicechannel.com/basics/introduction/overview/) for the intro to ServiceChannel API.<br>      <h3>Authentication and Authorization</h3>You should have a ServiceChannel account, register your application, and obtain `access_token` to integrate with our API.      See [Authentication and Authorization](https://developer.servicechannel.com/basics/general/authentication/) for more information.      To use this API playground, click **Authorize** and sign in to ServiceChannel.<br>      <h3>Environment</h3> All calls in this API Reference point to the **SB2 environment**.      See [Environments](https://developer.servicechannel.com/basics/general/environments/) for more information.<br>      <h3>API Version</h3>The current stable version of the ServiceChannel API is `v3`. In the request URL, `v3` is a version prefix that should be present.      When you omit the version prefix, calls point to the minimum supported version of the API.      We recommend you to always specify the API version to avoid possible errors.
 *
 * The version of the OpenAPI document: 3
 * 
 * Generated by: https://openapi-generator.tech
 */

using System;
using System.Collections.Generic;
using System.ComponentModel.DataAnnotations;
using System.Threading;
using System.Threading.Tasks;
using Microsoft.AspNetCore.Authorization;
using Microsoft.AspNetCore.Mvc;
using Microsoft.AspNetCore.Http;
using ServiceChannel.OpenAPIGenerated.Api.Attributes;
using ServiceChannel.OpenAPIGenerated.Api.Models;

namespace ServiceChannel.OpenAPIGenerated.Api.Controllers
{ 
    /// <summary>
    /// 
    /// </summary>
    [ApiController]
    public abstract class ContractsApiController : ControllerBase
    { 
        /// <summary>
        /// 
        /// </summary>
        /// <param name="request"></param>
        /// <response code="200">OK</response>
        [HttpPost]
        [Route("/v3/contracts")]
        [Consumes("application/json", "text/json", "application/xml", "text/xml", "application/x-www-form-urlencoded")]
        [ValidateModelState]
        [ProducesResponseType(statusCode: 200, type: typeof(Object))]
        public abstract Task<IActionResult> Contracts([FromBody]SCServiceChannelServicesMessagingLocationAssignProviderRequest request);

        /// <summary>
        /// Retire Provider Contract. When &#39;Trade&#39; and &#39;StoreId&#39; are not specified then provider is &#39;retired&#39; from all subscriber&#39;s stores.
        /// </summary>
        /// <remarks>Available only for Subscriber Super Admin user.</remarks>
        /// <param name="request"></param>
        /// <response code="200">Indicates that the request succeeded. When &#39;Trade&#39; and &#39;StoreId&#39; are not specified then provider is &#39;retired&#39; from all subscriber&#39;s stores.</response>
        [HttpPut]
        [Route("/v3/contracts/retire")]
        [Consumes("application/json", "text/json", "application/xml", "text/xml", "application/x-www-form-urlencoded")]
        [ValidateModelState]
        [ProducesResponseType(statusCode: 200, type: typeof(Object))]
        public abstract Task<IActionResult> ContractsRetire([FromBody]SCServiceChannelServicesMessagingLocationRetireProviderRequest request);

        /// <summary>
        /// Returns provider active contracts by providerId, locationId and trade
        /// </summary>
        /// <remarks>Available only for Subscriber user.</remarks>
        /// <param name="locationId"></param>
        /// <param name="locationDbId"></param>
        /// <param name="providerId"></param>
        /// <param name="trade"></param>
        /// <param name="tradeId"></param>
        /// <response code="200">The requested contracts are in the response.</response>
        /// <response code="400">The request is not accepted due to bad syntax, missing parameters, insufficient data, etc.              &lt;br/&gt;Error codes:              503 — Bad Request; locationId or locationDbId should be provided              503 — Location not found              503 — Trade not found              503 — Provider not found              503 — User does not have Location access to perform this operation</response>
        /// <response code="401">The request is not authorized.              &lt;br/&gt;Error codes:              504 — API call rejected by security permissions</response>
        /// <response code="403">The request is not allowed.              &lt;br/&gt;Error codes:              100 — Only for subscribers usage</response>
        /// <response code="500">The server was unable to complete the request due to an internal error.</response>
        [HttpGet]
        [Route("/v3/contracts")]
        [ValidateModelState]
        [ProducesResponseType(statusCode: 200, type: typeof(SCServiceChannelServicesMessagingContractsGetContractsResponse))]
        [ProducesResponseType(statusCode: 400, type: typeof(SCServiceChannelServicesMessagingErrorResponse))]
        [ProducesResponseType(statusCode: 401, type: typeof(SCServiceChannelServicesMessagingErrorResponse))]
        [ProducesResponseType(statusCode: 403, type: typeof(SCServiceChannelServicesMessagingErrorResponse))]
        [ProducesResponseType(statusCode: 500, type: typeof(SCServiceChannelServicesMessagingErrorResponse))]
        public abstract Task<IActionResult> ContractslocationIdlocationIdlocationDbIdlocationDbIdproviderIdproviderIdtradetradetradeIdtradeId([FromQuery (Name = "locationId")]string? locationId, [FromQuery (Name = "locationDbId")]int? locationDbId, [FromQuery (Name = "providerId")]int? providerId, [FromQuery (Name = "trade")]string? trade, [FromQuery (Name = "tradeId")]int? tradeId);
    }
}
