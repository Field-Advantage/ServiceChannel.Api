/*
 * ServiceChannel API - v.3
 *
 * The ServiceChannel API is a RESTful and stateless API. It accepts standard HTTP verbs and supports OAuth 2.0 for authorizing requests.      Our API returns common HTTP status codes as well as JSON encapsulated data.      See [API Overview](https://developer.servicechannel.com/basics/introduction/overview/) for the intro to ServiceChannel API.<br>      <h3>Authentication and Authorization</h3>You should have a ServiceChannel account, register your application, and obtain `access_token` to integrate with our API.      See [Authentication and Authorization](https://developer.servicechannel.com/basics/general/authentication/) for more information.      To use this API playground, click **Authorize** and sign in to ServiceChannel.<br>      <h3>Environment</h3> All calls in this API Reference point to the **SB2 environment**.      See [Environments](https://developer.servicechannel.com/basics/general/environments/) for more information.<br>      <h3>API Version</h3>The current stable version of the ServiceChannel API is `v3`. In the request URL, `v3` is a version prefix that should be present.      When you omit the version prefix, calls point to the minimum supported version of the API.      We recommend you to always specify the API version to avoid possible errors.
 *
 * The version of the OpenAPI document: 3
 * 
 * Generated by: https://openapi-generator.tech
 */

using System;
using System.Collections.Generic;
using System.ComponentModel.DataAnnotations;
using System.Threading;
using System.Threading.Tasks;
using Microsoft.AspNetCore.Authorization;
using Microsoft.AspNetCore.Mvc;
using Microsoft.AspNetCore.Http;
using ServiceChannel.OpenAPIGenerated.Api.Attributes;
using ServiceChannel.OpenAPIGenerated.Api.Models;

namespace ServiceChannel.OpenAPIGenerated.Api.Controllers
{ 
    /// <summary>
    /// 
    /// </summary>
    [ApiController]
    public abstract class NotesApiController : ControllerBase
    { 
        /// <summary>
        /// Retrieve Work Order Note
        /// </summary>
        /// <param name="noteId"></param>
        /// <param name="workorderId"></param>
        /// <param name="expand">Expand a navigation property.</param>
        /// <param name="select">Select a set of properties to return.</param>
        /// <param name="filter">Filter a collection of resources addressed by a request URL.</param>
        /// <param name="orderby">Order resources by the specified property in the response.</param>
        /// <param name="top">Return the specified number of items in the response.</param>
        /// <param name="skip">Skip the specified number of items in the response.</param>
        /// <param name="count">Include the count of the matching resources in the response.</param>
        /// <response code="200">Indicates that the request succeeded and that the requested information is in the response.</response>
        [HttpGet]
        [Route("/v3/odata/workorders({workorderId})/notes({noteId})")]
        [ValidateModelState]
        [ProducesResponseType(statusCode: 200, type: typeof(List<SCServiceChannelServicesMessagingNotesNote>))]
        public abstract Task<IActionResult> GetWorkOrderNote([FromRoute (Name = "noteId")][Required]int noteId, [FromRoute (Name = "workorderId")][Required]int workorderId, [FromQuery (Name = "$expand")]string? expand, [FromQuery (Name = "$select")]string? select, [FromQuery (Name = "$filter")]string? filter, [FromQuery (Name = "$orderby")]string? orderby, [FromQuery (Name = "$top")]int? top, [FromQuery (Name = "$skip")]int? skip, [FromQuery (Name = "$count")]bool? count);

        /// <summary>
        /// Retrieve Work Order Notes
        /// </summary>
        /// <param name="workorderId"></param>
        /// <param name="expand">Expand a navigation property.</param>
        /// <param name="select">Select a set of properties to return.</param>
        /// <param name="filter">Filter a collection of resources addressed by a request URL.</param>
        /// <param name="orderby">Order resources by the specified property in the response.</param>
        /// <param name="top">Return the specified number of items in the response.</param>
        /// <param name="skip">Skip the specified number of items in the response.</param>
        /// <param name="count">Include the count of the matching resources in the response.</param>
        /// <response code="200">Indicates that the request succeeded and that the requested information is in the response.</response>
        [HttpGet]
        [Route("/v3/odata/workorders({workorderId})/notes")]
        [ValidateModelState]
        [ProducesResponseType(statusCode: 200, type: typeof(List<SCServiceChannelServicesMessagingNotesNote>))]
        public abstract Task<IActionResult> GetWorkOrderNotes([FromRoute (Name = "workorderId")][Required]int workorderId, [FromQuery (Name = "$expand")]string? expand, [FromQuery (Name = "$select")]string? select, [FromQuery (Name = "$filter")]string? filter, [FromQuery (Name = "$orderby")]string? orderby, [FromQuery (Name = "$top")]int? top, [FromQuery (Name = "$skip")]int? skip, [FromQuery (Name = "$count")]bool? count);

        /// <summary>
        /// Create a Work order Note
        /// </summary>
        /// <remarks>Returns Note Id for successful request.</remarks>
        /// <param name="workorderId">Numeric Id of the Work order to perform action with.</param>
        /// <param name="noteRequest">The note request model.</param>
        /// <response code="201">Created indicates that the request resulted in a new resource created before the response was sent.</response>
        /// <response code="400">Bad Request - the request could not be understood or was missing required parameters.              &lt;br/&gt;Error codes:              &lt;br/&gt; 100 - You don&#39;t have location access to perform this operation;              &lt;br/&gt; 503 - Validation fails. Invalid WorkOrder Id or Note value;</response>
        /// <response code="401">Indicates that the requested resource requires authentication.              &lt;br/&gt;Error codes:              &lt;br/&gt; 504 - API call rejected by security permissions;</response>
        /// <response code="500">Indicates that a generic error has occurred on the server.</response>
        [HttpPost]
        [Route("/v3/workorders/{workorderId}/notes")]
        [Consumes("application/json", "text/json", "application/xml", "text/xml", "application/x-www-form-urlencoded")]
        [ValidateModelState]
        [ProducesResponseType(statusCode: 400, type: typeof(SCServiceChannelServicesMessagingErrorResponse))]
        [ProducesResponseType(statusCode: 401, type: typeof(SCServiceChannelServicesMessagingErrorResponse))]
        [ProducesResponseType(statusCode: 500, type: typeof(SCServiceChannelServicesMessagingErrorResponse))]
        public abstract Task<IActionResult> WorkordersworkorderIdNotes([FromRoute (Name = "workorderId")][Required]int workorderId, [FromBody]SCServiceChannelServicesMessagingWorkordersCreateWoNoteRequest noteRequest);

        /// <summary>
        /// Add Followers to Work order notes
        /// </summary>
        /// <remarks>&lt;para&gt;Add Followers to Work order.&lt;/para&gt;</remarks>
        /// <param name="workorderId">Numeric Id of the Work order to perform action with.</param>
        /// <param name="request">The request model to perform action with.</param>
        /// <response code="201">Created indicates that the request resulted in a new resource created before the response was sent.</response>
        /// <response code="400">Bad Request - the request could not be understood or was missing required parameters.&lt;br&gt;Error codes:&lt;br&gt;503 - Request data is empty;&lt;br&gt;There is no followers in request;&lt;br&gt;Empty tracking number (workorder Id);</response>
        /// <response code="404">Indicates that the requested resource does not exist on the server.</response>
        [HttpPost]
        [Route("/v3/workorders/{workorderId}/notes/followers")]
        [Consumes("application/json", "text/json", "application/xml", "text/xml", "application/x-www-form-urlencoded")]
        [ValidateModelState]
        [ProducesResponseType(statusCode: 400, type: typeof(SCServiceChannelServicesMessagingErrorResponse))]
        public abstract Task<IActionResult> WorkordersworkorderIdNotesFollowers([FromRoute (Name = "workorderId")][Required]int workorderId, [FromBody]SCServiceChannelServicesMessagingWorkordersAddFollowersRequest request);

        /// <summary>
        /// Remove Follower from Work order notes
        /// </summary>
        /// <remarks>&lt;para&gt;Remove Follower from Work order.&lt;/para&gt;</remarks>
        /// <param name="workorderId">Numeric Id of the Work order to perform action with.</param>
        /// <param name="email">The follower email address.</param>
        /// <response code="200">Indicates that the request succeeded and that the requested information is in the response.</response>
        /// <response code="400">Bad Request - the request could not be understood or was missing required parameters.&lt;br&gt;Error codes:&lt;br&gt;503 - Request data is empty;&lt;br&gt;There is no followers in request;&lt;br&gt;Empty tracking number (workorder Id);</response>
        /// <response code="404">Indicates that the requested resource does not exist on the server.</response>
        [HttpDelete]
        [Route("/v3/workorders/{workorderId}/notes/followers")]
        [ValidateModelState]
        [ProducesResponseType(statusCode: 400, type: typeof(SCServiceChannelServicesMessagingErrorResponse))]
        public abstract Task<IActionResult> WorkordersworkorderIdNotesFollowersemailemail([FromRoute (Name = "workorderId")][Required]int workorderId, [FromQuery (Name = "email")][Required()]string email);

        /// <summary>
        /// Note email recipients
        /// </summary>
        /// <remarks>&lt;para&gt;List of email recipients, who can be added to the list of note followers&lt;/para&gt;</remarks>
        /// <param name="workorderId">Numeric Id of the Work order to perform action with.</param>
        /// <param name="showExcluded">If set to true, returns all recipients even those that have &#39;exclude from note recipient&#39; flag in their setup. False by Default.</param>
        /// <param name="noteVisibility">NoteVisibility.Public is used by default</param>
        /// <response code="200">Request succeeded and the requested information is in the response.</response>
        /// <response code="400">Bad Request - the request could not be understood or was missing required parameters.              &lt;br/&gt;Error codes:              &lt;br/&gt; 917 - Invalid work order identifier. Returned if workorderId is &amp;lt;&#x3D; 0;</response>
        /// <response code="401">Unauthorized indicates that the requested resource requires authentication.              &lt;br/&gt;Error codes:              &lt;br/&gt; 504 - API call rejected by security permissions;</response>
        /// <response code="404">The requested resource does not exist on the server.</response>
        [HttpGet]
        [Route("/v3/workorders/{workorderId}/notes/recipients")]
        [ValidateModelState]
        [ProducesResponseType(statusCode: 200, type: typeof(List<SCServiceChannelServicesMessagingNotesEmailRecipientResponse>))]
        [ProducesResponseType(statusCode: 400, type: typeof(SCServiceChannelServicesMessagingErrorResponse))]
        [ProducesResponseType(statusCode: 401, type: typeof(SCServiceChannelServicesMessagingErrorResponse))]
        public abstract Task<IActionResult> WorkordersworkorderIdNotesRecipientsshowExcludedshowExcludednoteVisibilitynoteVisibility([FromRoute (Name = "workorderId")][Required]int workorderId, [FromQuery (Name = "showExcluded")]bool? showExcluded, [FromQuery (Name = "noteVisibility")]string? noteVisibility);

        /// <summary>
        /// Work order Notes Collection
        /// </summary>
        /// <remarks>Returns list of work order notes, sorted descending by creation date.</remarks>
        /// <param name="workorderId">Numeric Id of the Work order to perform action with.</param>
        /// <param name="paging">Paging of the collection. Format of the string is: &#39;pageNumber:pageSize&#39;, be advised that pageNumber starts with 1 not 0 Default: \&quot;1:10\&quot;.              To get all notes specify page size as some big number which is 100% bigger then total notes count (9999 works for all cases) and page number as 1.</param>
        /// <response code="200">Request succeeded and the requested information is in the response.</response>
        /// <response code="400">Bad Request - the request could not be understood or was missing required parameters.              &lt;br/&gt;Error codes:              &lt;br/&gt; 917 - Invalid work order identifier. Returned if workorderId is &amp;lt;&#x3D; 0;              &lt;br/&gt; 922 - Invalid paging parameter. Returned if paging parameter doesn&#39;t correspond to valid format;              &lt;br/&gt; 100 - You don&#39;t have location access to perform this operation;</response>
        /// <response code="401">Unauthorized indicates that the requested resource requires authentication.&lt;br&gt;Error codes:&lt;br&gt; 504 - API call rejected by security permissions;</response>
        [HttpGet]
        [Route("/v3/workorders/{workorderId}/notes")]
        [ValidateModelState]
        [ProducesResponseType(statusCode: 200, type: typeof(SCServiceChannelServicesMessagingNotesGetNotesResponse))]
        [ProducesResponseType(statusCode: 400, type: typeof(SCServiceChannelServicesMessagingErrorResponse))]
        [ProducesResponseType(statusCode: 401, type: typeof(SCServiceChannelServicesMessagingErrorResponse))]
        public abstract Task<IActionResult> WorkordersworkorderIdNotespagingpaging([FromRoute (Name = "workorderId")][Required]int workorderId, [FromQuery (Name = "paging")]string? paging);
    }
}
