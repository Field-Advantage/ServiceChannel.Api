/*
 * ServiceChannel API - v.3
 *
 * The ServiceChannel API is a RESTful and stateless API. It accepts standard HTTP verbs and supports OAuth 2.0 for authorizing requests.      Our API returns common HTTP status codes as well as JSON encapsulated data.      See [API Overview](https://developer.servicechannel.com/basics/introduction/overview/) for the intro to ServiceChannel API.<br>      <h3>Authentication and Authorization</h3>You should have a ServiceChannel account, register your application, and obtain `access_token` to integrate with our API.      See [Authentication and Authorization](https://developer.servicechannel.com/basics/general/authentication/) for more information.      To use this API playground, click **Authorize** and sign in to ServiceChannel.<br>      <h3>Environment</h3> All calls in this API Reference point to the **SB2 environment**.      See [Environments](https://developer.servicechannel.com/basics/general/environments/) for more information.<br>      <h3>API Version</h3>The current stable version of the ServiceChannel API is `v3`. In the request URL, `v3` is a version prefix that should be present.      When you omit the version prefix, calls point to the minimum supported version of the API.      We recommend you to always specify the API version to avoid possible errors.
 *
 * The version of the OpenAPI document: 3
 * 
 * Generated by: https://openapi-generator.tech
 */

using System;
using System.Collections.Generic;
using System.ComponentModel.DataAnnotations;
using System.Threading;
using System.Threading.Tasks;
using Microsoft.AspNetCore.Authorization;
using Microsoft.AspNetCore.Mvc;
using Microsoft.AspNetCore.Http;
using ServiceChannel.OpenAPIGenerated.Api.Attributes;
using ServiceChannel.OpenAPIGenerated.Api.Models;

namespace ServiceChannel.OpenAPIGenerated.Api.Controllers
{ 
    /// <summary>
    /// 
    /// </summary>
    [ApiController]
    public abstract class CtoolsApiController : ControllerBase
    { 
        /// <summary>
        /// Get refrigerant certifications
        /// </summary>
        /// <remarks>Returns all refrigerant certifications for the specified provider for EPA compliance. You can also retrieve certifications for one technician only by specifying their &#x60;authUserId&#x60;.</remarks>
        /// <param name="providerId">Unique provider identifier.</param>
        /// <param name="authUserId">Technician’s single sign-on (SSO) ID.</param>
        /// <response code="200">The requested refrigerant certifications are in the response.</response>
        /// <response code="400">The request is not accepted due to bad syntax, missing parameters, insufficient data, etc.</response>
        /// <response code="401">The request is not authorized.              &lt;br/&gt;Error codes:              504 — API call rejected by security permissions</response>
        /// <response code="500">The server was unable to complete the request due to an internal error.</response>
        [HttpGet]
        [Route("/v3/ctools/refrigerantcertifications")]
        [ValidateModelState]
        [ProducesResponseType(statusCode: 200, type: typeof(List<SCServiceChannelServicesMessagingContractorToolsExtendedRefrigerantCertificationDTO>))]
        public abstract Task<IActionResult> CtoolsRefrigerantcertificationsproviderIdproviderIdauthUserIdauthUserId([FromQuery (Name = "providerId")][Required()]int providerId, [FromQuery (Name = "authUserId")]int? authUserId);

        /// <summary>
        /// Retrieve technicians who accepted a work order
        /// </summary>
        /// <remarks>Returns technicians who accepted the specified work order. Note that only Field Tech Manager (FTM) technicians can accept work orders.              &lt;br /&gt;***Note:*** This method is only available to provider admins.</remarks>
        /// <param name="workOrderId">The unique numeric identifier of the work order for which you want to retrieve technicians who accepted it.</param>
        /// <response code="200">The technicians who accepted the specified work order are in the response.</response>
        /// <response code="400">The request is not accepted due to bad syntax, missing parameters, insufficient data, etc.</response>
        /// <response code="401">The request is not authorized.</response>
        /// <response code="500">The server was unable to complete the request due to an internal error.</response>
        [HttpGet]
        [Route("/v3/ctools/workorder/{workOrderId}/acceptedtechnicians")]
        [ValidateModelState]
        [ProducesResponseType(statusCode: 200, type: typeof(List<SCServiceChannelServicesMessagingContractorToolsTechnicianDto>))]
        public abstract Task<IActionResult> CtoolsWorkorderworkOrderIdAcceptedtechnicians([FromRoute (Name = "workOrderId")][Required]int workOrderId);

        /// <summary>
        /// Accept a work order on behalf of a technician
        /// </summary>
        /// <remarks>Accepts a work order on behalf of the specified technician. Only Field Tech Manager (FTM) technicians can accept work orders.              &lt;br /&gt;Once the work order is accepted, its status changes to *In Progress/Dispatch Confirmed*.              &lt;br /&gt;***Note:*** This method is only available to provider admins.</remarks>
        /// <param name="workOrderId">The unique numeric identifier of the work order you want to accept on behalf of a technician.</param>
        /// <param name="userId">The ID of the technician — who accepts the work order — in the Authentication service.</param>
        /// <response code="201">The work order is successfully accepted by the specified technician. The response is intentionally blank.</response>
        /// <response code="400">The request is not accepted due to bad syntax, missing parameters, insufficient data, etc.</response>
        /// <response code="401">The request is not authorized.</response>
        /// <response code="500">The server was unable to complete the request due to an internal error.</response>
        [HttpPut]
        [Route("/v3/ctools/workorder/{workOrderId}/accept")]
        [ValidateModelState]
        public abstract Task<IActionResult> CtoolsWorkorderworkOrderIdAcceptuserIduserId([FromRoute (Name = "workOrderId")][Required]int workOrderId, [FromQuery (Name = "userId")][Required()]int userId);

        /// <summary>
        /// Retrieve technicians assigned to a work order
        /// </summary>
        /// <remarks>Returns technicians assigned to the specified work order.              &lt;br /&gt;***Note:*** This method is only available to provider admins.</remarks>
        /// <param name="workOrderId">The unique numeric identifier of the work order to retrieve assigned technicians for.</param>
        /// <response code="200">The technicians assigned to the specified work order are in the response.</response>
        /// <response code="400">The request is not accepted due to bad syntax, missing parameters, insufficient data, etc.</response>
        /// <response code="401">The request is not authorized.</response>
        /// <response code="500">The server was unable to complete the request due to an internal error.</response>
        [HttpGet]
        [Route("/v3/ctools/workorder/{workOrderId}/assignedtechnicians")]
        [ValidateModelState]
        [ProducesResponseType(statusCode: 200, type: typeof(List<SCServiceChannelServicesMessagingContractorToolsTechnicianDto>))]
        public abstract Task<IActionResult> CtoolsWorkorderworkOrderIdAssignedtechnicians([FromRoute (Name = "workOrderId")][Required]int workOrderId);

        /// <summary>
        /// Assign a technician to a work order
        /// </summary>
        /// <remarks>Assigns a technician to the specified work order.              &lt;br /&gt;***Note:*** This method is only available to provider admins.</remarks>
        /// <param name="workOrderId">The unique numeric identifier of the work order to assign to a technician.</param>
        /// <param name="userId">The ID of the technician in the Authentication service to assign the work order to.</param>
        /// <response code="201">The technician is successfully assigned to the specified work order.</response>
        /// <response code="400">The request is not accepted due to bad syntax, missing parameters, insufficient data, etc.</response>
        /// <response code="401">The request is not authorized.</response>
        /// <response code="500">The server was unable to complete the request due to an internal error.</response>
        [HttpPost]
        [Route("/v3/ctools/workorder/{workOrderId}/assigntechnician")]
        [ValidateModelState]
        public abstract Task<IActionResult> CtoolsWorkorderworkOrderIdAssigntechnicianuserIduserId([FromRoute (Name = "workOrderId")][Required]int workOrderId, [FromQuery (Name = "userId")][Required()]int userId);

        /// <summary>
        /// Decline a work order on behalf of a technician
        /// </summary>
        /// <remarks>Declines a work order on behalf of the specified technician. Only Field Tech Manager (FTM) technicians can decline work orders.              &lt;br /&gt;If additional technician permissions are enabled for your company — “Technician”, “Supervising Tech”, and “Regional Manager” — the work order declined by a technician is automatically assigned to a Supervising Tech or Regional Manager or forwarded to the next ranked provider based on the configured auto-assignment rules. If these permissions are not enabled, the work order is either forwarded to the next ranked provider or moved to the *Open/Declined* status, depending on the setup. Learn more about [automating work order assignments and setting up forwarding rules](https://servicechannel.atlassian.net/wiki/spaces/SCU/pages/640582807/Automating+Work+Order+Assignments+and+Forwarding+Work+Orders) in ServiceChannel University.              &lt;br /&gt;***Note:*** This method is only available to provider admins.</remarks>
        /// <param name="workOrderId">The unique numeric identifier of the work order you want to decline on behalf of a technician.</param>
        /// <param name="userId">The ID of the technician — who declines the work order — in the Authentication service.</param>
        /// <response code="201">The work order is successfully declined by the specified technician. The response is intentionally blank.</response>
        /// <response code="400">The request is not accepted due to bad syntax, missing parameters, insufficient data, etc.</response>
        /// <response code="401">The request is not authorized.</response>
        /// <response code="500">The server was unable to complete the request due to an internal error.</response>
        [HttpPut]
        [Route("/v3/ctools/workorder/{workOrderId}/decline")]
        [ValidateModelState]
        public abstract Task<IActionResult> CtoolsWorkorderworkOrderIdDeclineuserIduserId([FromRoute (Name = "workOrderId")][Required]int workOrderId, [FromQuery (Name = "userId")][Required()]int userId);

        /// <summary>
        /// Cancel the acceptance of a work order on behalf of a technician
        /// </summary>
        /// <remarks>Removes a technician as accepted on the specified work order. Note that only Field Tech Manager (FTM) technicians can accept work orders.              &lt;br /&gt;If the technician is currently checked into the work order, the request will fail.              &lt;br /&gt;***Note:*** This method is only available to provider admins.</remarks>
        /// <param name="workOrderId">The unique numeric identifier of the work order for which you want to cancel acceptance on behalf of a technician.</param>
        /// <param name="userId">The ID of the technician in the Authentication service to cancel the work order acceptance for.</param>
        /// <response code="200">The technician is removed as accepted on the specified work order. The response is intentionally blank.</response>
        /// <response code="400">The request is not accepted due to bad syntax, missing parameters, insufficient data, etc.</response>
        /// <response code="401">The request is not authorized.</response>
        /// <response code="500">The server was unable to complete the request due to an internal error.</response>
        [HttpPut]
        [Route("/v3/ctools/workorder/{workOrderId}/rescindacceptance")]
        [ValidateModelState]
        public abstract Task<IActionResult> CtoolsWorkorderworkOrderIdRescindacceptanceuserIduserId([FromRoute (Name = "workOrderId")][Required]int workOrderId, [FromQuery (Name = "userId")][Required()]int userId);

        /// <summary>
        /// Unassign a technician from a work order
        /// </summary>
        /// <remarks>Unassigns a technician from the specified work order.              &lt;br /&gt;***Note:*** This method is only available to provider admins.</remarks>
        /// <param name="workOrderId">The unique numeric identifier of the work order to unassign a technician from.</param>
        /// <param name="userId">The ID of the technician in the Authentication service to unassign the work order from.</param>
        /// <response code="200">The technician is successfully unassigned from the specified work order.</response>
        /// <response code="400">The request is not accepted due to bad syntax, missing parameters, insufficient data, etc.</response>
        /// <response code="401">The request is not authorized.</response>
        /// <response code="500">The server was unable to complete the request due to an internal error.</response>
        [HttpDelete]
        [Route("/v3/ctools/workorder/{workOrderId}/unassigntechnician")]
        [ValidateModelState]
        public abstract Task<IActionResult> CtoolsWorkorderworkOrderIdUnassigntechnicianuserIduserId([FromRoute (Name = "workOrderId")][Required]int workOrderId, [FromQuery (Name = "userId")][Required()]int userId);
    }
}
