/*
 * ServiceChannel API - v.3
 *
 * The ServiceChannel API is a RESTful and stateless API. It accepts standard HTTP verbs and supports OAuth 2.0 for authorizing requests.      Our API returns common HTTP status codes as well as JSON encapsulated data.      See [API Overview](https://developer.servicechannel.com/basics/introduction/overview/) for the intro to ServiceChannel API.<br>      <h3>Authentication and Authorization</h3>You should have a ServiceChannel account, register your application, and obtain `access_token` to integrate with our API.      See [Authentication and Authorization](https://developer.servicechannel.com/basics/general/authentication/) for more information.      To use this API playground, click **Authorize** and sign in to ServiceChannel.<br>      <h3>Environment</h3> All calls in this API Reference point to the **SB2 environment**.      See [Environments](https://developer.servicechannel.com/basics/general/environments/) for more information.<br>      <h3>API Version</h3>The current stable version of the ServiceChannel API is `v3`. In the request URL, `v3` is a version prefix that should be present.      When you omit the version prefix, calls point to the minimum supported version of the API.      We recommend you to always specify the API version to avoid possible errors.
 *
 * The version of the OpenAPI document: 3
 * 
 * Generated by: https://openapi-generator.tech
 */

using System;
using System.Collections.Generic;
using System.ComponentModel.DataAnnotations;
using System.Threading;
using System.Threading.Tasks;
using Microsoft.AspNetCore.Authorization;
using Microsoft.AspNetCore.Mvc;
using Microsoft.AspNetCore.Http;
using ServiceChannel.OpenAPIGenerated.Api.Attributes;
using ServiceChannel.OpenAPIGenerated.Api.Models;

namespace ServiceChannel.OpenAPIGenerated.Api.Controllers
{ 
    /// <summary>
    /// 
    /// </summary>
    [ApiController]
    public abstract class CheckListsApiController : ControllerBase
    { 
        /// <summary>
        /// Submit a response to a checklist question
        /// </summary>
        /// <remarks>Creates a response to the specified checklist question. Learn more about [submitting checklist responses](https://developer.servicechannel.com/guides/checklists/submit-a-checklist-response/).</remarks>
        /// <param name="checkListResponseRequest">Request to create a response to a checklist question. Retrieve checklist parameters using the [GET /checklists/detail](https://developer.servicechannel.com/swagger/ui/index?version&#x3D;3#/CheckLists/GETv3_checklists_detail_tradeid__tradeid__checklistid__checklistid__categoryid__categoryid__subscriberId__subscriberId__tradeName__tradeName__checkListName__checkListName__categoryName__categoryName__locationId__locationId__storeId__storeId_) method to make sure you pass valid values.              &lt;br /&gt;Pass the following parameters in the request:               • **CheckListQuestionId** *(Required)*: ID of the checklist question to submit a response for.               • **CheckListQuestionOptionId**: ID of the answer option configured for a checklist question of the **Selector** type.               • **ProviderId** *(Required)*: ID of the provider on whose behalf you are submitting a response.               • **TechnicianID**: ID of the technician on whose behalf you are submitting a response.               • **AuthUserId**: Single sign-on (SSO) ID of the technician on whose behalf you are submitting a response.               • **Answer**: Answer to a checklist question of the following types:                ◦ **Acknowledgement**. Valid values: &#x60;on&#x60;, &#x60;off&#x60;, &#x60;1&#x60;, &#x60;0&#x60;, &#x60;true&#x60;, &#x60;false&#x60;, &#x60;yes&#x60;, &#x60;no&#x60;.                ◦ **Text Entry**. Enter a text answer. The maximum length is 500 characters.                ◦ **Numeric Input**. Submit a number.               • **FreeTextAnswer**: Comment to an answer option with the &#x60;IsConditionalFollowUp&#x60; attribute. Answer options are configured for questions of the **Selector** type.               • **EntityId** *(Required)*: Unique ID of the work order for which you are creating a response to a checklist question.               • **Attempt** *(Required)*: Order of a technician’s on-site visit to submit a checklist response for.              &lt;br /&gt;**Example Object for the Acknowledgement Question**                                {                    \\\&quot;CheckListQuestionID\\\&quot;: 3834,                    \\\&quot;ProviderID\\\&quot;: 2000090505,                    \\\&quot;TechnicianID\\\&quot;: 270592,                    \\\&quot;AuthUserId\\\&quot;: 141,                    \\\&quot;Answer\\\&quot;: \\\&quot;on\\\&quot;,                    \\\&quot;EntityID\\\&quot;: 179826000,                    \\\&quot;Attempt\\\&quot;: 1                  }</param>
        /// <param name="file">File to attach to the response to a checklist question. Required for questions with the &#x60;PictureFlag&#x60; parameter set to 2.</param>
        /// <response code="201">A response to a checklist question is created. A checklist response object and an attachment object are returned.</response>
        /// <response code="400">The request is not accepted due to bad syntax, missing parameters, insufficient data, etc.              &lt;br/&gt;Error codes:              502 — Work order is not found              503 — Not all required parameters were specified              503 — The FreeTextAnswer is required              503 — The picture is required              503 — Checkbox responses only support next values: on, off, 1, 0, true, false, yes, no</response>
        /// <response code="401">The request is not authorized.              &lt;br/&gt;Error codes:              504 — API call rejected by security permissions</response>
        /// <response code="500">The server was unable to complete the request due to an internal error.</response>
        [HttpPost]
        [Route("/v3/checklists/CheckListResponse")]
        [Consumes("multipart/form-data")]
        [ValidateModelState]
        [ProducesResponseType(statusCode: 201, type: typeof(SCServiceChannelServicesMessagingCheckListDetailsCheckListResponsesResponsePicture))]
        [ProducesResponseType(statusCode: 400, type: typeof(SCServiceChannelServicesMessagingErrorResponse))]
        [ProducesResponseType(statusCode: 401, type: typeof(SCServiceChannelServicesMessagingErrorResponse))]
        [ProducesResponseType(statusCode: 500, type: typeof(SCServiceChannelServicesMessagingErrorResponse))]
        public abstract Task<IActionResult> ChecklistsCheckListResponse([FromForm (Name = "CheckListResponseRequest")]Object? checkListResponseRequest, IFormFile file);

        /// <summary>
        /// Get standard checklists
        /// </summary>
        /// <remarks>[Returns standard checklists](https://developer.servicechannel.com/guides/checklists/find-and-filter-checklists/) along with their parameters, configured questions, and answer options.              &lt;br /&gt;You can filter checklists by:               • **Trade**. Specify either &#x60;tradeid&#x60; or &#x60;tradeName&#x60;.               • **Category**. Enter either &#x60;categoryid&#x60; or &#x60;categoryName&#x60;.               • **Location**. Provide either &#x60;locationId&#x60; or &#x60;storeId&#x60; if the feature that allows creating checklists for specific locations is enabled for a subscriber.               • **Checklist**. Pass either &#x60;checklistid&#x60; or &#x60;checkListName&#x60; to get a specific checklist, and ignore other parameters.              &lt;br /&gt;Providers should pass &#x60;subscriberId&#x60; to retrieve checklists created by the desired subscriber.              &lt;br /&gt;Navigate to ServiceChannel University to find out [how subscribers can configure checklists](https://servicechannel.atlassian.net/wiki/spaces/SCU/pages/655425975/Configuring+Checklists).</remarks>
        /// <param name="tradeid">Trade ID. To get a list of trades with their IDs, send the [GET /odata/trades](https://developer.servicechannel.com/swagger/ui/index?version&#x3D;3#/Trades/Trades_GetTrades) request.</param>
        /// <param name="checklistid">Checklist ID.</param>
        /// <param name="categoryid">Category ID. Subscribers can retrieve category IDs using the [GET /categories](https://developer.servicechannel.com/swagger/ui/index?version&#x3D;3#/Categories/GETv3_categories_subscriberIds_0___subscriberIds_0___subscriberIds_1___subscriberIds_1__) method.</param>
        /// <param name="subscriberId">Unique ID of the subscriber who configured checklists. Should be passed by providers.</param>
        /// <param name="tradeName">Trade name. A trade is an area of work for which a service is performed, such as _Lighting_, _Refrigeration_, or _Plumbing_.</param>
        /// <param name="checkListName">Checklist name.</param>
        /// <param name="categoryName">Category name. A category is the overall classification of a work order, such as _Maintenance_, _Repair_, or _CAPEX_.</param>
        /// <param name="locationId">Unique ID of a subscriber’s location. This parameter is ignored if the feature that allows creating checklists for specific locations is disabled for a subscriber.</param>
        /// <param name="storeId">Non-unique ID of a subscriber’s location that may appear as a store number. This parameter is ignored if the feature that allows creating checklists for specific locations is disabled for a subscriber.</param>
        /// <param name="workOrderId">Work Order ID</param>
        /// <response code="200">The requested standard checklists are in the response.</response>
        /// <response code="400">The request is not accepted due to bad syntax, missing parameters, insufficient data, etc.              &lt;br/&gt;Error codes:              503 — Bad Request; Subscriber Id should be provided if the api method is called by provider              503 — A trade can be specified with only one parameter: either tradeId or tradeName              503 — A category can be specified with only one parameter: either categoryId or categoryName              503 — A checkList can be specified with only one parameter: either checkListId or checkListName              503 — A location can be specified with only one parameter: either locationId or storeId</response>
        /// <response code="401">The request is not authorized.              &lt;br/&gt;Error codes:              504 — API call rejected by security permissions</response>
        /// <response code="403">The request is not allowed.              &lt;br/&gt;Error codes:              100 — User does not have access to work order</response>
        /// <response code="500">The server was unable to complete the request due to an internal error.</response>
        [HttpGet]
        [Route("/v3/checklists/detail")]
        [ValidateModelState]
        [ProducesResponseType(statusCode: 200, type: typeof(SCServiceChannelServicesMessagingCheckListDetailsCheckListDetailExtendedResponse))]
        [ProducesResponseType(statusCode: 400, type: typeof(SCServiceChannelServicesMessagingErrorResponse))]
        [ProducesResponseType(statusCode: 401, type: typeof(SCServiceChannelServicesMessagingErrorResponse))]
        [ProducesResponseType(statusCode: 403, type: typeof(SCServiceChannelServicesMessagingErrorResponse))]
        [ProducesResponseType(statusCode: 500, type: typeof(SCServiceChannelServicesMessagingErrorResponse))]
        public abstract Task<IActionResult> ChecklistsDetailtradeidtradeidchecklistidchecklistidcategoryidcategoryidsubscriberIdsubscriberIdtradeNametradeNamecheckListNamecheckListNamecategoryNamecategoryNamelocationIdlocationIdstoreIdstoreIdworkOrderIdworkOrderId([FromQuery (Name = "tradeid")]int? tradeid, [FromQuery (Name = "checklistid")]int? checklistid, [FromQuery (Name = "categoryid")]int? categoryid, [FromQuery (Name = "subscriberId")]int? subscriberId, [FromQuery (Name = "tradeName")]string? tradeName, [FromQuery (Name = "checkListName")]string? checkListName, [FromQuery (Name = "categoryName")]string? categoryName, [FromQuery (Name = "locationId")]int? locationId, [FromQuery (Name = "storeId")]string? storeId, [FromQuery (Name = "workOrderId")]int? workOrderId);

        /// <summary>
        /// Get checklists with asset tasks
        /// </summary>
        /// <remarks>Retrieves checklists of the **Asset Task** type along with their parameters and task details. Such checklists contain asset-related tasks that a technician is prompted to complete when working on a service request.              &lt;br /&gt;You can filter checklists by:               • **Trade**. Specify either &#x60;tradeid&#x60; or &#x60;tradeName&#x60;.               • **Category**. Enter either &#x60;categoryid&#x60; or &#x60;categoryName&#x60;.               • **Location**. Provide either &#x60;locationId&#x60; or &#x60;storeId&#x60; if the feature that allows creating checklists for specific locations is enabled for a subscriber.               • **Checklist**. Pass either &#x60;checklistid&#x60; or &#x60;checkListName&#x60; to get a specific checklist, and ignore other parameters.              &lt;br /&gt;Providers should pass &#x60;subscriberId&#x60; to retrieve checklists created by the desired subscriber.              &lt;br /&gt;Navigate to ServiceChannel University to find out [how subscribers can configure checklists](https://servicechannel.atlassian.net/wiki/spaces/SCU/pages/655425975/Configuring+Checklists).</remarks>
        /// <param name="tradeid">Trade ID. To get a list of trades with their IDs, send the [GET /odata/trades](https://developer.servicechannel.com/swagger/ui/index?version&#x3D;3#/Trades/Trades_GetTrades) request.</param>
        /// <param name="checklistid">Checklist ID.</param>
        /// <param name="categoryid">Category ID. Subscribers can retrieve category IDs using the [GET /categories](https://developer.servicechannel.com/swagger/ui/index?version&#x3D;3#/Categories/GETv3_categories_subscriberIds_0___subscriberIds_0___subscriberIds_1___subscriberIds_1__) method.</param>
        /// <param name="subscriberId">Unique ID of the subscriber who configured checklists. Should be passed by providers.</param>
        /// <param name="tradeName">Trade name. A trade is an area of work for which a service is performed, such as _Lighting_, _Refrigeration_, or _Plumbing_.</param>
        /// <param name="checkListName">Checklist name.</param>
        /// <param name="categoryName">Category name. A category is the overall classification of a work order, such as _Maintenance_, _Repair_, or _CAPEX_.</param>
        /// <param name="locationId">Unique ID of a subscriber’s location. This parameter is ignored if the feature that allows creating checklists for specific locations is disabled for a subscriber.</param>
        /// <param name="storeId">Non-unique ID of a subscriber’s location that may appear as a store number. This parameter is ignored if the feature that allows creating checklists for specific locations is disabled for a subscriber.</param>
        /// <param name="providerId">The provider identifier. Required for sub-contractor request. [Required Special permissions]</param>
        /// <response code="200">The requested asset task checklists are in the response.</response>
        /// <response code="400">The request is not accepted due to bad syntax, missing parameters, insufficient data, etc.              &lt;br/&gt;Error codes:              503 — Bad Request; Subscriber Id should be provided if the api method is called by provider              503 — A trade can be specified with only one parameter: either tradeId or tradeName              503 — A category can be specified with only one parameter: either categoryId or categoryName              503 — A checkList can be specified with only one parameter: either checkListId or checkListName              503 — A location can be specified with only one parameter: either locationId or storeId</response>
        /// <response code="401">The request is not authorized.              &lt;br/&gt;Error codes:              504 — API call rejected by security permissions</response>
        /// <response code="500">The server was unable to complete the request due to an internal error.</response>
        [HttpGet]
        [Route("/v3/checklists/taskslist")]
        [ValidateModelState]
        [ProducesResponseType(statusCode: 200, type: typeof(SCServiceChannelServicesMessagingChecklistTasksCheckListWithTasksExtendedResponse))]
        [ProducesResponseType(statusCode: 400, type: typeof(SCServiceChannelServicesMessagingErrorResponse))]
        [ProducesResponseType(statusCode: 401, type: typeof(SCServiceChannelServicesMessagingErrorResponse))]
        [ProducesResponseType(statusCode: 500, type: typeof(SCServiceChannelServicesMessagingErrorResponse))]
        public abstract Task<IActionResult> ChecklistsTaskslisttradeidtradeidchecklistidchecklistidcategoryidcategoryidsubscriberIdsubscriberIdtradeNametradeNamecheckListNamecheckListNamecategoryNamecategoryNamelocationIdlocationIdstoreIdstoreIdproviderIdproviderId([FromQuery (Name = "tradeid")]int? tradeid, [FromQuery (Name = "checklistid")]int? checklistid, [FromQuery (Name = "categoryid")]int? categoryid, [FromQuery (Name = "subscriberId")]int? subscriberId, [FromQuery (Name = "tradeName")]string? tradeName, [FromQuery (Name = "checkListName")]string? checkListName, [FromQuery (Name = "categoryName")]string? categoryName, [FromQuery (Name = "locationId")]int? locationId, [FromQuery (Name = "storeId")]string? storeId, [FromQuery (Name = "providerId")]int? providerId);

        /// <summary>
        /// Retrieve checklist types
        /// </summary>
        /// <remarks>Returns the ID and type of checklists.              &lt;br /&gt;Subscribers can create two types of checklists:               • **Standard checklist** with questions that a technician is prompted to answer when working on a service request. Send the [GET /checklists/detail](https://developer.servicechannel.com/swagger/ui/index?version&#x3D;3#/CheckLists/GETv3_checklists_detail_tradeid__tradeid__checklistid__checklistid__categoryid__categoryid__subscriberId__subscriberId__tradeName__tradeName__checkListName__checkListName__categoryName__categoryName__locationId__locationId__storeId__storeId_) request to retrieve standard checklists.               • **Asset task checklist** with asset-related tasks that a technician should complete when servicing a work order. Pass [GET /checklists/taskslist](https://developer.servicechannel.com/swagger/ui/index?version&#x3D;3#/CheckLists/GETv3_checklists_taskslist_tradeid__tradeid__checklistid__checklistid__categoryid__categoryid__subscriberId__subscriberId__tradeName__tradeName__checkListName__checkListName__categoryName__categoryName__locationId__locationId__storeId__storeId_) to get asset task checklists.              &lt;br /&gt;You can filter checklists by:               • **Trade**. Specify either &#x60;tradeid&#x60; or &#x60;tradeName&#x60;.               • **Category**. Enter either &#x60;categoryid&#x60; or &#x60;categoryName&#x60;.               • **Location**. Provide either &#x60;locationId&#x60; or &#x60;storeId&#x60; if the feature that allows creating checklists for specific locations is enabled for a subscriber.               • **Checklist**. Pass either &#x60;checklistid&#x60; or &#x60;checkListName&#x60; to get a specific checklist, and ignore other parameters.              &lt;br /&gt;Providers should pass &#x60;subscriberId&#x60; to retrieve checklists created by the desired subscriber.</remarks>
        /// <param name="tradeId">Trade ID. To get a list of trades with their IDs, send the [GET /odata/trades](https://developer.servicechannel.com/swagger/ui/index?version&#x3D;3#/Trades/Trades_GetTrades) request.</param>
        /// <param name="checklistId">Checklist ID.</param>
        /// <param name="categoryId">Category ID. Subscribers can retrieve category IDs using the [GET /categories](https://developer.servicechannel.com/swagger/ui/index?version&#x3D;3#/Categories/GETv3_categories_subscriberIds_0___subscriberIds_0___subscriberIds_1___subscriberIds_1__) method.</param>
        /// <param name="subscriberId">Unique ID of the subscriber who configured checklists. Should be passed by providers.</param>
        /// <param name="tradeName">Trade name. A trade is an area of work for which a service is performed, such as _Lighting_, _Refrigeration_, or _Plumbing_.</param>
        /// <param name="checklistName">Checklist name.</param>
        /// <param name="categoryName">Category name. A category is the overall classification of a work order, such as _Maintenance_, _Repair_, or _CAPEX_.</param>
        /// <param name="locationId">Unique ID of a subscriber’s location. This parameter is ignored if the feature that allows creating checklists for specific locations is disabled for a subscriber.</param>
        /// <param name="storeId">Non-unique ID of a subscriber’s location that may appear as a store number. This parameter is ignored if the feature that allows creating checklists for specific locations is disabled for a subscriber.</param>
        /// <param name="providerId">The provider identifier. Required for sub-contractor request. [Required Special permissions]</param>
        /// <response code="200">The ID and type of the requested checklists are in the response.</response>
        /// <response code="400">The request is not accepted due to bad syntax, missing parameters, insufficient data, etc.              &lt;br/&gt;Error codes:              503 — Bad Request; Subscriber Id should be provided if the api method is called by provider              503 — A trade can be specified with only one parameter: either tradeId or tradeName              503 — A category can be specified with only one parameter: either categoryId or categoryName              503 — A checkList can be specified with only one parameter: either checkListId or checkListName              503 — A location can be specified with only one parameter: either locationId or storeId</response>
        /// <response code="401">The request is not authorized.              &lt;br/&gt;Error codes:              504 — API call rejected by security permissions</response>
        /// <response code="500">The server was unable to complete the request due to an internal error.</response>
        [HttpGet]
        [Route("/v3/checklists/types")]
        [ValidateModelState]
        [ProducesResponseType(statusCode: 200, type: typeof(SCServiceChannelServicesMessagingChecklistsCheckListTypesExtendedResponse))]
        [ProducesResponseType(statusCode: 400, type: typeof(SCServiceChannelServicesMessagingErrorResponse))]
        [ProducesResponseType(statusCode: 401, type: typeof(SCServiceChannelServicesMessagingErrorResponse))]
        [ProducesResponseType(statusCode: 500, type: typeof(SCServiceChannelServicesMessagingErrorResponse))]
        public abstract Task<IActionResult> ChecklistsTypestradeIdtradeIdchecklistIdchecklistIdcategoryIdcategoryIdsubscriberIdsubscriberIdtradeNametradeNamechecklistNamechecklistNamecategoryNamecategoryNamelocationIdlocationIdstoreIdstoreIdproviderIdproviderId([FromQuery (Name = "tradeId")]int? tradeId, [FromQuery (Name = "checklistId")]int? checklistId, [FromQuery (Name = "categoryId")]int? categoryId, [FromQuery (Name = "subscriberId")]int? subscriberId, [FromQuery (Name = "tradeName")]string? tradeName, [FromQuery (Name = "checklistName")]string? checklistName, [FromQuery (Name = "categoryName")]string? categoryName, [FromQuery (Name = "locationId")]int? locationId, [FromQuery (Name = "storeId")]string? storeId, [FromQuery (Name = "providerId")]int? providerId);

        /// <summary>
        /// Update a response to a checklist question
        /// </summary>
        /// <remarks>[Updates the specified response](https://developer.servicechannel.com/guides/checklists/update-a-checklist-response/) to a checklist question.</remarks>
        /// <param name="checkListResponseId">ID of the response to a checklist question to update.              Pass the [GET /workorders/{workOrderId}/checklists-responses](https://developer.servicechannel.com/swagger/ui/index?version&#x3D;3#/WorkOrders/GETv3_workorders__workOrderId__checklists_responses) request to retrieve the response ID.</param>
        /// <param name="checkListResponsePictureId">ID of the file attached to the checklist response to update.              Send the [GET /workorders/{workOrderId}/checklists-responses](https://developer.servicechannel.com/swagger/ui/index?version&#x3D;3#/WorkOrders/GETv3_workorders__workOrderId__checklists_responses) request, and look for the required file &#x60;Id&#x60; within &#x60;Pictures&#x60; in the response.</param>
        /// <param name="checkListResponseRequest">Request to update a response to a checklist question.              &lt;br /&gt;Pass the following parameters in the request:               • **CheckListQuestionId** *(Required)*: ID of the checklist question to update a response for.               • **CheckListQuestionOptionId**: ID of the answer option configured for a checklist question of the **Selector** type.               • **ProviderId** *(Required)*: ID of the provider on whose behalf you are updating a response.               • **TechnicianID** *(Required)*: ID of the technician on whose behalf you are updating a response.               • **Answer**: Answer to a checklist question of the following types:                ◦ **Acknowledgement**. Valid values: &#x60;on&#x60;, &#x60;off&#x60;, &#x60;1&#x60;, &#x60;0&#x60;, &#x60;true&#x60;, &#x60;false&#x60;, &#x60;yes&#x60;, &#x60;no&#x60;.                ◦ **Text Entry**. Enter a text answer. The maximum length is 500 characters.                ◦ **Numeric Input**. Submit a number.               • **FreeTextAnswer**: Comment to an answer option with the &#x60;IsConditionalFollowUp&#x60; attribute. Answer options are configured for questions of the **Selector** type.               • **EntityId** *(Required)*: Unique ID of the work order for which you are updating a response to a checklist question.               • **Attempt** *(Required)*: Order of a technician’s on-site visit to update a checklist response for.              &lt;br /&gt;**Example Object for the Acknowledgement Question**                                {                    \\\&quot;CheckListQuestionID\\\&quot;: 3834,                    \\\&quot;ProviderID\\\&quot;: 2000090505,                    \\\&quot;TechnicianID\\\&quot;: 270592,                    \\\&quot;Answer\\\&quot;: \\\&quot;off\\\&quot;,                    \\\&quot;EntityID\\\&quot;: 179826000,                    \\\&quot;Attempt\\\&quot;: 1                  }</param>
        /// <param name="file">File to attach to the response to a checklist question. Required for questions with the &#x60;PictureFlag&#x60; parameter set to 2.</param>
        /// <response code="200">The specified response to a checklist question is updated. A checklist response object and an attachment object are returned.</response>
        /// <response code="400">The request is not accepted due to bad syntax, missing parameters, insufficient data, etc.              &lt;br/&gt;Error codes:              502 — Work order is not found              503 — Bad request              503 — Not all required parameters were specified              503 — The FreeTextAnswer is required              503 — The picture is required              503 — Checkbox responses only support next values: on, off, 1, 0, true, false, yes, no              503 — CheckListResponsePictureId (#) is not valid for CheckListResponse</response>
        /// <response code="401">The request is not authorized.              &lt;br/&gt;Error codes:              504 — API call rejected by security permissions</response>
        /// <response code="500">The server was unable to complete the request due to an internal error.</response>
        [HttpPut]
        [Route("/v3/checklists/{checkListResponseId}/CheckListResponse")]
        [Consumes("multipart/form-data")]
        [ValidateModelState]
        [ProducesResponseType(statusCode: 200, type: typeof(SCServiceChannelServicesMessagingCheckListDetailsCheckListResponsesResponsePicture))]
        [ProducesResponseType(statusCode: 400, type: typeof(SCServiceChannelServicesMessagingErrorResponse))]
        [ProducesResponseType(statusCode: 401, type: typeof(SCServiceChannelServicesMessagingErrorResponse))]
        [ProducesResponseType(statusCode: 500, type: typeof(SCServiceChannelServicesMessagingErrorResponse))]
        public abstract Task<IActionResult> ChecklistscheckListResponseIdCheckListResponse([FromRoute (Name = "checkListResponseId")][Required]int checkListResponseId, [FromForm (Name = "CheckListResponsePictureId")]Object? checkListResponsePictureId, [FromForm (Name = "CheckListResponseRequest")]Object? checkListResponseRequest, IFormFile file);
    }
}
