/*
 * ServiceChannel API - v.3
 *
 * The ServiceChannel API is a RESTful and stateless API. It accepts standard HTTP verbs and supports OAuth 2.0 for authorizing requests.      Our API returns common HTTP status codes as well as JSON encapsulated data.      See [API Overview](https://developer.servicechannel.com/basics/introduction/overview/) for the intro to ServiceChannel API.<br>      <h3>Authentication and Authorization</h3>You should have a ServiceChannel account, register your application, and obtain `access_token` to integrate with our API.      See [Authentication and Authorization](https://developer.servicechannel.com/basics/general/authentication/) for more information.      To use this API playground, click **Authorize** and sign in to ServiceChannel.<br>      <h3>Environment</h3> All calls in this API Reference point to the **SB2 environment**.      See [Environments](https://developer.servicechannel.com/basics/general/environments/) for more information.<br>      <h3>API Version</h3>The current stable version of the ServiceChannel API is `v3`. In the request URL, `v3` is a version prefix that should be present.      When you omit the version prefix, calls point to the minimum supported version of the API.      We recommend you to always specify the API version to avoid possible errors.
 *
 * The version of the OpenAPI document: 3
 * 
 * Generated by: https://openapi-generator.tech
 */

using System;
using System.Collections.Generic;
using System.ComponentModel.DataAnnotations;
using System.Threading;
using System.Threading.Tasks;
using Microsoft.AspNetCore.Authorization;
using Microsoft.AspNetCore.Mvc;
using Microsoft.AspNetCore.Http;
using ServiceChannel.OpenAPIGenerated.Api.Attributes;
using ServiceChannel.OpenAPIGenerated.Api.Models;

namespace ServiceChannel.OpenAPIGenerated.Api.Controllers
{ 
    /// <summary>
    /// 
    /// </summary>
    [ApiController]
    public abstract class FeedbackApiController : ControllerBase
    { 
        /// <summary>
        /// 
        /// </summary>
        /// <param name="workOrdersIds"></param>
        /// <param name="subscriberId"></param>
        /// <response code="200">Indicates that the request succeeded.</response>
        /// <response code="400">Bad Request - the request could not be understood or was missing required parameters.</response>
        /// <response code="401">Indicates that the requested resource requires authentication.&lt;br&gt;Error codes:&lt;br&gt; 504 - API call rejected by security permissions;</response>
        [HttpGet]
        [Route("/v3/feedbacks/byWorkorders")]
        [ValidateModelState]
        [ProducesResponseType(statusCode: 200, type: typeof(SCServiceChannelServicesMessagingFeedbackFeedbackReviewsForWorkOrdersResponse))]
        [ProducesResponseType(statusCode: 400, type: typeof(SCServiceChannelServicesMessagingErrorResponse))]
        [ProducesResponseType(statusCode: 401, type: typeof(SCServiceChannelServicesMessagingErrorResponse))]
        public abstract Task<IActionResult> FeedbacksByWorkordersworkOrdersIds0workOrdersIds0workOrdersIds1workOrdersIds1subscriberIdsubscriberId([FromQuery (Name = "workOrdersIds")][Required()]List<int> workOrdersIds, [FromQuery (Name = "subscriberId")]int? subscriberId);

        /// <summary>
        /// 
        /// </summary>
        /// <param name="request"></param>
        /// <response code="200">Indicates that the request succeeded and that the provider review created or updated.</response>
        /// <response code="401">Indicates that the requested resource requires authentication.&lt;br&gt;Error codes:&lt;br&gt; 504 - API call rejected by security permissions;</response>
        /// <response code="403">Indicates that the requested resource requires provider rateable feature</response>
        [HttpPost]
        [Route("/v3/feedbacks/reviews")]
        [Consumes("application/json", "text/json", "application/xml", "text/xml", "application/x-www-form-urlencoded")]
        [ValidateModelState]
        [ProducesResponseType(statusCode: 200, type: typeof(SCServiceChannelServicesMessagingFeedbackReviewProviderRequest))]
        [ProducesResponseType(statusCode: 401, type: typeof(SCServiceChannelServicesMessagingErrorResponse))]
        public abstract Task<IActionResult> FeedbacksReviews([FromBody]SCServiceChannelServicesMessagingFeedbackReviewProviderRequest request);

        /// <summary>
        /// 
        /// </summary>
        /// <param name="providerId"></param>
        /// <param name="subscriberId"></param>
        /// <response code="200">Return info model about provider ratings</response>
        [HttpGet]
        [Route("/v3/feedbacks/reviews/info")]
        [ValidateModelState]
        [ProducesResponseType(statusCode: 200, type: typeof(Object))]
        public abstract Task<IActionResult> FeedbacksReviewsInfoProviderIdProviderIdSubscriberIdSubscriberId([FromQuery (Name = "providerId")]int? providerId, [FromQuery (Name = "subscriberId")]int? subscriberId);

        /// <summary>
        /// 
        /// </summary>
        /// <param name="providerId">Provider Id</param>
        /// <param name="searchWithin">Search within reviews comment</param>
        /// <param name="pageSize">Response page size (default 10)</param>
        /// <param name="pageOffset">Response page offset (default 0)</param>
        /// <param name="sortBy">Sort by field (default by Recent)</param>
        /// <param name="subscriberId">Subscriber Id</param>
        /// <response code="200">Return feedback reviews.</response>
        [HttpGet]
        [Route("/v3/feedbacks/reviews")]
        [ValidateModelState]
        [ProducesResponseType(statusCode: 200, type: typeof(SCServiceChannelServicesMessagingFeedbackFeedbackReviewsForProviderResponse))]
        public abstract Task<IActionResult> FeedbacksReviewsProviderIdProviderIdSearchWithinSearchWithinPageSizePageSizePageOffsetPageOffsetSortBySortBySubscriberIdSubscriberId([FromQuery (Name = "providerId")]int? providerId, [FromQuery (Name = "searchWithin")]string? searchWithin, [FromQuery (Name = "pageSize")]int? pageSize, [FromQuery (Name = "pageOffset")]int? pageOffset, [FromQuery (Name = "sortBy")]string? sortBy, [FromQuery (Name = "subscriberId")]int? subscriberId);

        /// <summary>
        /// 
        /// </summary>
        /// <param name="locationId"></param>
        /// <param name="subscriberId"></param>
        /// <response code="200">Return count of work orders ready for feedback.</response>
        /// <response code="401">Indicates that the requested resource requires authentication.&lt;br&gt;Error codes:&lt;br&gt; 504 - API call rejected by security permissions;</response>
        [HttpGet]
        [Route("/v3/feedbacks/workorders/count")]
        [ValidateModelState]
        [ProducesResponseType(statusCode: 200, type: typeof(int))]
        [ProducesResponseType(statusCode: 401, type: typeof(SCServiceChannelServicesMessagingErrorResponse))]
        public abstract Task<IActionResult> FeedbacksWorkordersCountlocationIdlocationIdsubscriberIdsubscriberId([FromQuery (Name = "locationId")]int? locationId, [FromQuery (Name = "subscriberId")]int? subscriberId);

        /// <summary>
        /// 
        /// </summary>
        /// <param name="locationId">LocationId</param>
        /// <param name="setupId">Dashboard setupId (optional)</param>
        /// <param name="orderByField">Order by field</param>
        /// <param name="orderDirection">Order direction</param>
        /// <param name="showMyWorkOrders">Activates filter by current user id</param>
        /// <param name="subscriberId">Subscriber Id</param>
        /// <response code="200">Return work orders ready for feedback.</response>
        /// <response code="401">Indicates that the requested resource requires authentication.&lt;br&gt;Error codes:&lt;br&gt; 504 - API call rejected by security permissions;</response>
        [HttpGet]
        [Route("/v3/feedbacks/workorders")]
        [ValidateModelState]
        [ProducesResponseType(statusCode: 200, type: typeof(List<SCServiceChannelServicesMessagingFeedbackWorkorderFeedback>))]
        [ProducesResponseType(statusCode: 401, type: typeof(SCServiceChannelServicesMessagingErrorResponse))]
        public abstract Task<IActionResult> FeedbacksWorkordersLocationIdLocationIdSetupIdSetupIdOrderByFieldOrderByFieldOrderDirectionOrderDirectionShowMyWorkOrdersShowMyWorkOrdersSubscriberIdSubscriberId([FromQuery (Name = "locationId")]int? locationId, [FromQuery (Name = "setupId")]int? setupId, [FromQuery (Name = "orderByField")]string? orderByField, [FromQuery (Name = "orderDirection")]string? orderDirection, [FromQuery (Name = "showMyWorkOrders")]bool? showMyWorkOrders, [FromQuery (Name = "subscriberId")]int? subscriberId);

        /// <summary>
        /// 
        /// </summary>
        /// <param name="workorderId"></param>
        /// <param name="request"></param>
        /// <response code="201">Indicates that the request succeeded and that the feedback created.</response>
        /// <response code="400">Bad Request - the request could not be understood or was missing required parameters.              &lt;br&gt;Error codes:              &lt;br&gt; 503 - Request is empty or null;              &lt;br&gt; 904 - Invalid work order status;              &lt;br&gt; 2601 - Invalid feedback answer;              &lt;br&gt; 2602 - Invalid work order number;              &lt;br&gt; 2602 - Invalid subscriber;              &lt;br&gt; 2603 - Invalid subscriber number;              &lt;br&gt; 2604 - Invalid feedback score;              &lt;br&gt; 2605 - Unsatisfactory answer required a comment              &lt;br&gt; 2606 - Invalid LocationId or SetupId provided</response>
        /// <response code="401">Indicates that the requested resource requires authentication.&lt;br&gt;Error codes:&lt;br&gt; 504 - API call rejected by security permissions;</response>
        [HttpPost]
        [Route("/v3/feedbacks/workorders/{workorderId}")]
        [Consumes("application/json", "text/json", "application/xml", "text/xml", "application/x-www-form-urlencoded")]
        [ValidateModelState]
        [ProducesResponseType(statusCode: 400, type: typeof(SCServiceChannelServicesMessagingErrorResponse))]
        [ProducesResponseType(statusCode: 401, type: typeof(SCServiceChannelServicesMessagingErrorResponse))]
        public abstract Task<IActionResult> FeedbacksWorkordersworkorderId([FromRoute (Name = "workorderId")][Required]int workorderId, [FromBody]SCServiceChannelServicesMessagingFeedbackFeedbackRequest request);
    }
}
