/*
 * ServiceChannel API - v.3
 *
 * The ServiceChannel API is a RESTful and stateless API. It accepts standard HTTP verbs and supports OAuth 2.0 for authorizing requests.      Our API returns common HTTP status codes as well as JSON encapsulated data.      See [API Overview](https://developer.servicechannel.com/basics/introduction/overview/) for the intro to ServiceChannel API.<br>      <h3>Authentication and Authorization</h3>You should have a ServiceChannel account, register your application, and obtain `access_token` to integrate with our API.      See [Authentication and Authorization](https://developer.servicechannel.com/basics/general/authentication/) for more information.      To use this API playground, click **Authorize** and sign in to ServiceChannel.<br>      <h3>Environment</h3> All calls in this API Reference point to the **SB2 environment**.      See [Environments](https://developer.servicechannel.com/basics/general/environments/) for more information.<br>      <h3>API Version</h3>The current stable version of the ServiceChannel API is `v3`. In the request URL, `v3` is a version prefix that should be present.      When you omit the version prefix, calls point to the minimum supported version of the API.      We recommend you to always specify the API version to avoid possible errors.
 *
 * The version of the OpenAPI document: 3
 * 
 * Generated by: https://openapi-generator.tech
 */

using System;
using System.Collections.Generic;
using System.ComponentModel.DataAnnotations;
using System.Threading;
using System.Threading.Tasks;
using Microsoft.AspNetCore.Authorization;
using Microsoft.AspNetCore.Mvc;
using Microsoft.AspNetCore.Http;
using ServiceChannel.OpenAPIGenerated.Api.Attributes;
using ServiceChannel.OpenAPIGenerated.Api.Models;

namespace ServiceChannel.OpenAPIGenerated.Api.Controllers
{ 
    /// <summary>
    /// 
    /// </summary>
    [ApiController]
    public abstract class LocationsApiController : ControllerBase
    { 
        /// <summary>
        /// Retrieve Locations by location ids
        /// </summary>
        /// <remarks>Returns a list of locations.</remarks>
        /// <param name="locationFilter">Request parameters to filter the response.</param>
        /// <response code="200">The requested locations are in the response.</response>
        /// <response code="400">Bad Request - the request could not be understood or was missing required parameters.              &lt;br/&gt;Error codes:              655 — Location Ids List is empty or null.</response>
        [HttpPost]
        [Route("/v3/filter")]
        [Consumes("application/json", "text/json", "application/xml", "text/xml", "application/x-www-form-urlencoded")]
        [ValidateModelState]
        [ProducesResponseType(statusCode: 200, type: typeof(SCServiceChannelServicesMessagingLocationGetApiLocationResponse))]
        [ProducesResponseType(statusCode: 400, type: typeof(SCServiceChannelServicesMessagingErrorResponse))]
        public abstract Task<IActionResult> Filter([FromBody]SCServiceChannelServicesMessagingLocationGetLocationsByFilterRequest locationFilter);

        /// <summary>
        /// Get locations by filters
        /// </summary>
        /// <remarks>Returns locations based on the filters applied.</remarks>
        /// <param name="request">Request parameters to filter the response. Parameters can be used separately, as a combination of several parameters, or all at once. For the &#x60;LocationIds&#x60; and &#x60;StateIds&#x60; parameters, several values can be entered separated with a comma.              &lt;br /&gt;**Example Request**                                POST /GetFilteredLocations                  {                   \&quot;ProviderId\&quot;: 2000069665,                   \&quot;LocationIds\&quot;: [                     2005862796, 2005901195                   ],                   \&quot;StateIds\&quot;: [                     30, 32                   ]                  }</param>
        /// <response code="200">The filtered locations are in the response.</response>
        /// <response code="400">The request is not accepted due to bad syntax, missing parameters, insufficient data, etc.              &lt;br/&gt;Error codes:               502 — Subscriber not found</response>
        /// <response code="401">The request is not authorized.              &lt;br/&gt;Error codes:              504 — API call rejected by security permissions</response>
        /// <response code="403">You are not authorized to request this resource, or the resource is unavailable for some reason.              &lt;br/&gt;Error codes:              100 — User has no rights to perform this action</response>
        /// <response code="500">The server was unable to complete the request due to an internal error.              &lt;br/&gt;Error codes:              501 — Object reference not set to an instance of an object</response>
        [HttpPost]
        [Route("/v3/GetFilteredLocations")]
        [Consumes("application/json", "text/json", "application/xml", "text/xml", "application/x-www-form-urlencoded")]
        [ValidateModelState]
        [ProducesResponseType(statusCode: 200, type: typeof(List<SCServiceChannelServicesMessagingLocationLocationShortModel>))]
        [ProducesResponseType(statusCode: 400, type: typeof(SCServiceChannelServicesMessagingErrorResponse))]
        [ProducesResponseType(statusCode: 401, type: typeof(SCServiceChannelServicesMessagingErrorResponse))]
        [ProducesResponseType(statusCode: 403, type: typeof(SCServiceChannelServicesMessagingErrorResponse))]
        [ProducesResponseType(statusCode: 500, type: typeof(SCServiceChannelServicesMessagingErrorResponse))]
        public abstract Task<IActionResult> GetFilteredLocations([FromBody]SCServiceChannelServicesMessagingLocationGetFilteredLocationsRequest request);

        /// <summary>
        /// Get location districts
        /// </summary>
        /// <param name="page">Number of the current page</param>
        /// <param name="pageSize">Limit to return items</param>
        /// <param name="searchExpression">User input text</param>
        /// <response code="200">The requested districts are in the response.</response>
        /// <response code="401">The request is not authorized.              &lt;br/&gt;Error codes:              401 — User has no permissions to perform this action</response>
        /// <response code="500">The server was unable to complete the request due to an internal error.               &lt;br/&gt;Error codes:              501 — Value of pageSize or page is less than 1</response>
        [HttpGet]
        [Route("/v3/GetLocationDistricts")]
        [ValidateModelState]
        [ProducesResponseType(statusCode: 200, type: typeof(SCServiceChannelServicesMessagingLocationGetLocationDistrictsResponse))]
        [ProducesResponseType(statusCode: 401, type: typeof(SCServiceChannelServicesMessagingErrorResponse))]
        [ProducesResponseType(statusCode: 500, type: typeof(SCServiceChannelServicesMessagingErrorResponse))]
        public abstract Task<IActionResult> GetLocationDistrictspagepagepageSizepageSizesearchExpressionsearchExpression([FromQuery (Name = "page")][Required()]int page, [FromQuery (Name = "pageSize")][Required()]int pageSize, [FromQuery (Name = "searchExpression")]string? searchExpression);

        /// <summary>
        /// Retrieve locations
        /// </summary>
        /// <remarks>Returns a list of locations. You can use filter parameters to make your request more specific.              &lt;br /&gt; You can also get a list of locations by using one of the following methods: [GET /stores](https://developer.servicechannel.com/swagger/ui/index?version&#x3D;3#/Locations/GETv3_stores_Id__Id__storeIdentifier__storeIdentifier__Name__Name__Sort__Sort__Page__Page__PageSize__PageSize_), [GET /locations](https://developer.servicechannel.com/swagger/ui/index?version&#x3D;3#/Locations/GETv3_locations_Id__Id__storeIdentifier__storeIdentifier__Name__Name__Sort__Sort__Page__Page__PageSize__PageSize_).</remarks>
        /// <param name="expand">Expand a navigation property.</param>
        /// <param name="select">Select a set of properties to return.</param>
        /// <param name="filter">Filter a collection of resources addressed by a request URL.</param>
        /// <param name="orderby">Order resources by the specified property in the response.</param>
        /// <param name="top">Return the specified number of items in the response.</param>
        /// <param name="skip">Skip the specified number of items in the response.</param>
        /// <param name="count">Include the count of the matching resources in the response.</param>
        /// <response code="200">The list of locations is in the response.</response>
        [HttpGet]
        [Route("/v3/odata/locations")]
        [ValidateModelState]
        [ProducesResponseType(statusCode: 200, type: typeof(List<SCServiceChannelServicesMessagingLocationLocation>))]
        public abstract Task<IActionResult> GetLocations([FromQuery (Name = "$expand")]string? expand, [FromQuery (Name = "$select")]string? select, [FromQuery (Name = "$filter")]string? filter, [FromQuery (Name = "$orderby")]string? orderby, [FromQuery (Name = "$top")]int? top, [FromQuery (Name = "$skip")]int? skip, [FromQuery (Name = "$count")]bool? count);

        /// <summary>
        /// Get Locations
        /// </summary>
        /// <param name="page">Number of the current page</param>
        /// <param name="pageSize">Limit to return items</param>
        /// <param name="latitude">The latitude of the user location</param>
        /// <param name="longitude">The longitude of the user location</param>
        /// <param name="searchExpression">User input text</param>
        /// <param name="onlyOpened">Include only open locations</param>
        /// <response code="200">The requested locations are in the response.</response>
        /// <response code="401">The request is not authorized.              &lt;br/&gt;Error codes:              401 — User has no permissions to perform this action</response>
        /// <response code="500">The server was unable to complete the request due to an internal error.               &lt;br/&gt;Error codes:              501 — Value of pageSize or page is less than 1</response>
        [HttpGet]
        [Route("/v3/GetLocationsMobile")]
        [ValidateModelState]
        [ProducesResponseType(statusCode: 200, type: typeof(SCServiceChannelServicesMessagingLocationGetLocationsMobileResponse))]
        [ProducesResponseType(statusCode: 401, type: typeof(SCServiceChannelServicesMessagingErrorResponse))]
        [ProducesResponseType(statusCode: 500, type: typeof(SCServiceChannelServicesMessagingErrorResponse))]
        public abstract Task<IActionResult> GetLocationsMobilepagepagepageSizepageSizelatitudelatitudelongitudelongitudesearchExpressionsearchExpressiononlyOpenedonlyOpened([FromQuery (Name = "page")][Required()]int page, [FromQuery (Name = "pageSize")][Required()]int pageSize, [FromQuery (Name = "latitude")]double? latitude, [FromQuery (Name = "longitude")]double? longitude, [FromQuery (Name = "searchExpression")]string? searchExpression, [FromQuery (Name = "onlyOpened")]bool? onlyOpened);

        /// <summary>
        /// Get locations by geographic coordinates
        /// </summary>
        /// <remarks>Returns locations that are near the longitude and latitude specified in the request. Use the filter parameters to make the request more specific.</remarks>
        /// <param name="longitude">Location’s global position. Longitude.</param>
        /// <param name="latitude">Location’s global position. Latitude.</param>
        /// <param name="expand">Expand a navigation property.</param>
        /// <param name="select">Select a set of properties to return.</param>
        /// <param name="filter">Filter a collection of resources addressed by a request URL.</param>
        /// <param name="orderby">Order resources by the specified property in the response.</param>
        /// <param name="top">Return the specified number of items in the response.</param>
        /// <param name="skip">Skip the specified number of items in the response.</param>
        /// <param name="count">Include the count of the matching resources in the response.</param>
        /// <response code="200">The requested locations are in the response.</response>
        [HttpGet]
        [Route("/v3/odata/locations/Service.NearBy(latitude={latitude},longitude={longitude})")]
        [ValidateModelState]
        [ProducesResponseType(statusCode: 200, type: typeof(List<SCServiceChannelServicesMessagingLocationLocation>))]
        public abstract Task<IActionResult> GetLocationsNearMe([FromRoute (Name = "longitude")][Required]double longitude, [FromRoute (Name = "latitude")][Required]double latitude, [FromQuery (Name = "$expand")]string? expand, [FromQuery (Name = "$select")]string? select, [FromQuery (Name = "$filter")]string? filter, [FromQuery (Name = "$orderby")]string? orderby, [FromQuery (Name = "$top")]int? top, [FromQuery (Name = "$skip")]int? skip, [FromQuery (Name = "$count")]bool? count);

        /// <summary>
        /// Retrieve locations
        /// </summary>
        /// <remarks>Returns a list of locations of a service request. You can use filter parameters to make the request more specific.</remarks>
        /// <param name="expand">Expand a navigation property.</param>
        /// <param name="select">Select a set of properties to return.</param>
        /// <param name="filter">Filter a collection of resources addressed by a request URL.</param>
        /// <param name="orderby">Order resources by the specified property in the response.</param>
        /// <param name="top">Return the specified number of items in the response.</param>
        /// <param name="skip">Skip the specified number of items in the response.</param>
        /// <param name="count">Include the count of the matching resources in the response.</param>
        /// <response code="200">The requested locations are in the response.</response>
        [HttpGet]
        [Route("/v3/odata/locations/Service.ForServiceRequest()")]
        [ValidateModelState]
        [ProducesResponseType(statusCode: 200, type: typeof(List<SCServiceChannelServicesMessagingLocationLocation>))]
        public abstract Task<IActionResult> GetServiceRequestLocations([FromQuery (Name = "$expand")]string? expand, [FromQuery (Name = "$select")]string? select, [FromQuery (Name = "$filter")]string? filter, [FromQuery (Name = "$orderby")]string? orderby, [FromQuery (Name = "$top")]int? top, [FromQuery (Name = "$skip")]int? skip, [FromQuery (Name = "$count")]bool? count);

        /// <summary>
        /// Update Landlord Responsibility
        /// </summary>
        /// <param name="apiRequest"></param>
        /// <response code="201">The Landlord Responsibility are updated.</response>
        /// <response code="400">Bad Request - the request could not be understood or was missing required parameters.                  &lt;br/&gt;Error codes:                  1301 — Request is empty or null                  503 — Failed to create landlord responsibility                  655 — Landlord responsibility is not found                  656 — The combination of Location Trade and Category must be unique                  659 — Invalid Trade name                  660 — Invalid Category name                  661 — Invalid Override Category name                  662 — Invalid Override Priority name                  663 — Lease Note can not exceed 200 characters                  664 — Invalid override provider rank                  665 — Invalid override NTE</response>
        /// <response code="403">User is not assigned to Location                   &lt;br/&gt;Error codes:                  804 — User is not assigned to Location.</response>
        /// <response code="404">Invalid Store Id                  &lt;br/&gt;Error codes:                  606 — Invalid Store Id.</response>
        [HttpPut]
        [Route("/v3/landlord-responsibilities")]
        [Consumes("application/json", "text/json", "application/xml", "text/xml", "application/x-www-form-urlencoded")]
        [ValidateModelState]
        [ProducesResponseType(statusCode: 400, type: typeof(SCServiceChannelServicesMessagingErrorResponse))]
        [ProducesResponseType(statusCode: 403, type: typeof(SCServiceChannelServicesMessagingErrorResponse))]
        [ProducesResponseType(statusCode: 404, type: typeof(SCServiceChannelServicesMessagingErrorResponse))]
        public abstract Task<IActionResult> LandlordResponsibilities([FromBody]SCServiceChannelServicesMessagingLocationUpdateLandlordResponsibilityApiRequest apiRequest);

        /// <summary>
        /// Create landlord responsibility
        /// </summary>
        /// <param name="apiRequest"></param>
        /// <response code="201">The Landlord Responsibility are created.</response>
        /// <response code="400">Bad Request - the request could not be understood or was missing required parameters.                  &lt;br/&gt;Error codes:                  1301 — Request is empty or null                  503 — Failed to create landlord responsibility                  656 — The combination of Location Trade and Category must be unique                  659 — Invalid Trade Id                  660 — Invalid Category Id                  661 — Invalid Override Category Id                  662 — Invalid Override PriorityId                  663 — Lease Note can not exceed 200 characters                  664 — Invalid override provider rank                  665 — Invalid override NTE</response>
        /// <response code="403">User is not assigned to Location                   &lt;br/&gt;Error codes:                  804 — User is not assigned to Location.</response>
        /// <response code="404">Invalid Store Id                  &lt;br/&gt;Error codes:                  606 — Invalid Store Id.</response>
        [HttpPost]
        [Route("/v3/landlord-responsibilities")]
        [Consumes("application/json", "text/json", "application/xml", "text/xml", "application/x-www-form-urlencoded")]
        [ValidateModelState]
        [ProducesResponseType(statusCode: 201, type: typeof(SCServiceChannelServicesMessagingLocationLandlordResponsibilityModel))]
        [ProducesResponseType(statusCode: 400, type: typeof(SCServiceChannelServicesMessagingErrorResponse))]
        [ProducesResponseType(statusCode: 403, type: typeof(SCServiceChannelServicesMessagingErrorResponse))]
        [ProducesResponseType(statusCode: 404, type: typeof(SCServiceChannelServicesMessagingErrorResponse))]
        public abstract Task<IActionResult> LandlordResponsibilities_0([FromBody]SCServiceChannelServicesMessagingLocationCreateLandlordResponsibilityApiRequest apiRequest);

        /// <summary>
        /// Delete Landlord Responsibility
        /// </summary>
        /// <param name="responsibilityId"></param>
        /// <response code="200">The landlord responsibility is deleted.</response>
        /// <response code="400">Bad Request - the request could not be understood or was missing required parameters.                  &lt;br/&gt;Error codes:                  655 — Landlord responsibility is not found</response>
        /// <response code="401">Indicates that the requested resource requires authentication.</response>
        /// <response code="403">User is not assigned to Location                   &lt;br/&gt;Error codes:                  804 — User is not assigned to Location.</response>
        [HttpDelete]
        [Route("/v3/landlord-responsibilities/{responsibilityId}")]
        [ValidateModelState]
        [ProducesResponseType(statusCode: 400, type: typeof(SCServiceChannelServicesMessagingErrorResponse))]
        [ProducesResponseType(statusCode: 401, type: typeof(SCServiceChannelServicesMessagingErrorResponse))]
        [ProducesResponseType(statusCode: 403, type: typeof(SCServiceChannelServicesMessagingErrorResponse))]
        public abstract Task<IActionResult> LandlordResponsibilitiesresponsibilityId([FromRoute (Name = "responsibilityId")][Required]int responsibilityId);

        /// <summary>
        /// Get landlord responsibilities
        /// </summary>
        /// <param name="storeId"></param>
        /// <response code="200">The requested locations are in the response.</response>
        /// <response code="403">User is not assigned to Location                   &lt;br/&gt;Error codes:                  100 — User has no permissions to perform this action.</response>
        /// <response code="404">Location is not found                  &lt;br/&gt;Error codes:                  651 — Location is not found.</response>
        [HttpGet]
        [Route("/v3/landlord-responsibilities")]
        [ValidateModelState]
        [ProducesResponseType(statusCode: 200, type: typeof(SCServiceChannelServicesMessagingLocationGetLandlordResponsibilityResponse))]
        [ProducesResponseType(statusCode: 403, type: typeof(SCServiceChannelServicesMessagingErrorResponse))]
        [ProducesResponseType(statusCode: 404, type: typeof(SCServiceChannelServicesMessagingErrorResponse))]
        public abstract Task<IActionResult> LandlordResponsibilitiesstoreIdstoreId([FromQuery (Name = "storeId")]string? storeId);

        /// <summary>
        /// Add a location
        /// </summary>
        /// <remarks>Creates a location for the authorized subscriber.              &lt;br /&gt;**Note:** Method is available for users with the *Super Admin* or *Admin User* permissions, or the *SC Admin* role.              &lt;br /&gt;Learn [how subscribers can create inventory locations](https://servicechannel.atlassian.net/wiki/spaces/SCU/pages/1209106525/Creating+Inventory+Locations) in ServiceChannel University.              &lt;br /&gt;**Example request**                                PUT / locations/{locationId}                  {                   \&quot;StoreId\&quot;:\&quot;34\&quot;,                   \&quot;Name\&quot;: \&quot;CSR Flagship\&quot;,                   \&quot;Latitude\&quot;: 40.736601,                   \&quot;Longitude\&quot;: -73.991795,                   \&quot;Distance\&quot;: null,                   \&quot;Address1\&quot;: \&quot;3rd Floor, Innovation Center\&quot;,                   \&quot;Address2\&quot;: \&quot;18 E. 16th Street\&quot;,                   \&quot;City\&quot;: \&quot;New York\&quot;,                   \&quot;State\&quot;: \&quot;NY\&quot;,                   \&quot;StateId\&quot;: 1,                   \&quot;Region\&quot;: \&quot;Northeast\&quot;,                   \&quot;District\&quot;: \&quot;NYC/LI\&quot;,                   \&quot;Zip\&quot;: \&quot;10003\&quot;,                   \&quot;Country\&quot;: \&quot;US\&quot;,                   \&quot;CountryId\&quot;: 1,                   \&quot;ClosedDate\&quot;: \&quot;\&quot;,                   \&quot;OpenDate\&quot;: \&quot;2021-07-03T00:10:00.308Z\&quot;,                   \&quot;Email\&quot;: \&quot;csrflagship@gmail.com\&quot;,                   \&quot;Phone\&quot;: \&quot;212-555-1212\&quot;,                   \&quot;Contact\&quot;: \&quot;\&quot;,                   \&quot;FaxNumber\&quot;: \&quot;\&quot;,                   \&quot;LocationTypeId\&quot;: null,                   \&quot;SquareValue\&quot;: 20.21                   \&quot;SquareMeasure\&quot;: \&quot;ft or foot\&quot; or \&quot;m or metre\&quot;                  }</remarks>
        /// <param name="request">Request to add a new location.</param>
        /// <response code="201">A new location is created. The location ID is in the response.</response>
        /// <response code="400">The request is not accepted due to bad syntax, missing parameters, insufficient data, etc.              &lt;br/&gt;Error codes:              503 — Request is empty              503 — Request is empty or null              605 — Location with Store Id already exists              606 — The &#x60;StoreId&#x60; value cannot be empty. The maximum length is 50 characters.              631 — The &#x60;City&#x60; value cannot be empty. The maximum length is 50 characters.              632 — The &#x60;Zip&#x60; value cannot be empty. The maximum length is 12 characters.              633 — Latitude value should be between &#39;-90&#39; and &#39;90&#39;.              634 — Longitude value should be between &#39;-180&#39; and &#39;180&#39;.              635 — Invalid Email.              636 — The &#x60;Name&#x60; value cannot be empty. The maximum length is 100 characters.              637 — Invalid &#x60;State&#x60; format. The maximum length is 2 characters.              638 — Invalid &#x60;Address1&#x60; format. The maximum length is 500 characters.              639 — Invalid &#x60;Address2&#x60; format. The maximum length is 500 characters.              640 — The &#x60;Country&#x60; value cannot be empty. The maximum length is 20 characters.              641 — Invalid &#x60;Region&#x60; format. The maximum length is 50 characters.              642 — Invalid &#x60;District&#x60; format. The maximum length is 50 characters.              643 — Invalid &#x60;Phone&#x60; format. The maximum length is 22 characters.              644 — Invalid &#x60;Contact&#x60; format. The maximum length is 50 characters.              645 — Invalid &#x60;FaxNumber&#x60; format. The maximum length is 22 characters.              647 — Location &#39;state&#39; not found.              651 — Location &#39;stateId&#39; not found.              652 — Incorrect combination of &#39;State&#39; and &#39;StateId&#39;              1254 — Invalid square measure</response>
        /// <response code="401">The request is not authorized.              &lt;br/&gt;Error codes:              504 — API call rejected by security permissions</response>
        /// <response code="500">The server was unable to complete the request due to an internal error.              &lt;br/&gt;Error codes:              501 — Object reference not set to an instance of an object</response>
        [HttpPost]
        [Route("/v3/locations")]
        [Consumes("application/json", "text/json", "application/xml", "text/xml", "application/x-www-form-urlencoded")]
        [ValidateModelState]
        [ProducesResponseType(statusCode: 400, type: typeof(SCServiceChannelServicesMessagingErrorResponse))]
        [ProducesResponseType(statusCode: 401, type: typeof(SCServiceChannelServicesMessagingErrorResponse))]
        [ProducesResponseType(statusCode: 500, type: typeof(SCServiceChannelServicesMessagingErrorResponse))]
        public abstract Task<IActionResult> Locations([FromBody]SCServiceChannelServicesMessagingLocationCreateLocationRequest request);

        /// <summary>
        /// Retrieve address format pattern per list of country ISO codes or per list of address types Ids
        /// </summary>
        /// <remarks>Returns a list of address types (Id, Pattern).</remarks>
        /// <param name="c"></param>
        /// <param name="id"></param>
        /// <response code="200">The requested address types with patterns are in the response.</response>
        [HttpGet]
        [Route("/v3/locations/addressformats")]
        [ValidateModelState]
        [ProducesResponseType(statusCode: 200, type: typeof(List<SCServiceChannelServicesMessagingLocationAddressType>))]
        public abstract Task<IActionResult> LocationsAddressformatsc0c0c1c1id0id0id1id1([FromQuery (Name = "c")][Required()]List<string> c, [FromQuery (Name = "id")][Required()]List<int> id);

        /// <summary>
        /// Check whether the location is open or closed.
        /// </summary>
        /// <remarks>Returns information on the specified location if it is open or closed now. If the &#x60;checkTime&#x60; parameter is not provided, the location is checked at the current time.              &lt;br /&gt; Learn about [managing business hours](https://servicechannel.atlassian.net/wiki/spaces/SCU/pages/683507788/Managing+Business+Hours) in ServiceChannel University.</remarks>
        /// <param name="locationId">Unique location identifier</param>
        /// <param name="checkTime">Date and time to check if the location is open</param>
        /// <response code="200">The location opening status is in the response.</response>
        [HttpGet]
        [Route("/v3/locations/CheckIfLocationIsOpen")]
        [ValidateModelState]
        [ProducesResponseType(statusCode: 200, type: typeof(SCServiceChannelServicesMessagingAfterHoursCheckIfLocationIsOpenResponse))]
        public abstract Task<IActionResult> LocationsCheckIfLocationIsOpenlocationIdlocationIdcheckTimecheckTime([FromQuery (Name = "locationId")][Required()]int locationId, [FromQuery (Name = "checkTime")]DateTime? checkTime);

        /// <summary>
        /// Retrieve locations by filters
        /// </summary>
        /// <remarks>Performs search of locations based on the filters specified in the request and returns a list of locations with all details for the specified subscriber.              &lt;br /&gt; ***Note***: This method is available to *Provider Directory (aka Fixxbook)* users only.</remarks>
        /// <param name="locationFilterColumns">Request parameters to filter the response. The &#x60;SubscriberId&#x60; parameter is required. For the rest of the parameters, except for &#x60;Page&#x60;, &#x60;CountPerPage&#x60;, several values can be added separated with a comma.</param>
        /// <response code="200">The requested locations are in the response.</response>
        /// <response code="400">The request is not accepted due to bad syntax, missing parameters, insufficient data, etc.              &lt;br/&gt;Error codes:              100 — User has no rights to perform this action              502 — The server, while acting as a gateway or proxy, received an invalid response from the upstream server</response>
        /// <response code="401">Indicates that the requested resource requires authentication.              &lt;br/&gt;Error codes:              504 - API call rejected by security permissions</response>
        [HttpPost]
        [Route("/v3/locations/GetLocationsByFilterColumns")]
        [Consumes("application/json", "text/json", "application/xml", "text/xml", "application/x-www-form-urlencoded")]
        [ValidateModelState]
        [ProducesResponseType(statusCode: 400, type: typeof(SCServiceChannelServicesMessagingErrorResponse))]
        [ProducesResponseType(statusCode: 401, type: typeof(SCServiceChannelServicesMessagingErrorResponse))]
        public abstract Task<IActionResult> LocationsGetLocationsByFilterColumns([FromBody]SCServiceChannelApiModelLocationsLocationFilterColumns locationFilterColumns);

        /// <summary>
        /// Retrieve stores
        /// </summary>
        /// <remarks>Returns a list of all Locations, also called Stores, if neither of the filters is used. You can get the details for a certain store by specifying any of the following parameters: &#x60;Id&#x60;, &#x60;storeIdentifier&#x60;, &#x60;name&#x60;.              &lt;br /&gt; You can use either of these methods to get a list of the subscriber’s locations: [GET /locations](https://developer.servicechannel.com/swagger/ui/index?version&#x3D;3#/Locations/GETv3_locations_Id__Id__storeIdentifier__storeIdentifier__Name__Name__Sort__Sort__Page__Page__PageSize__PageSize_), [GET /stores](https://developer.servicechannel.com/swagger/ui/index?version&#x3D;3#/Locations/GETv3_stores_Id__Id__storeIdentifier__storeIdentifier__Name__Name__Sort__Sort__Page__Page__PageSize__PageSize_).              &lt;br /&gt; Visit ServiceChannel University to find out more about [locations and provider assignments](https://servicechannel.atlassian.net/wiki/spaces/SCU/pages/556105830/Locations+Provider+Assignments).</remarks>
        /// <param name="id">Unique location identifier.</param>
        /// <param name="storeIdentifier">Alphanumeric location identifier in the client’s system. Assigned by and unique per subscriber.</param>
        /// <param name="name">Location name.</param>
        /// <param name="sort">Sort resources by the specified property in the response.</param>
        /// <param name="page">Results page number.</param>
        /// <param name="pageSize">Number of objects on the results page. The default and maximum per page is 50.</param>
        /// <response code="200">The requested locations are in the response.</response>
        /// <response code="400">The request is not accepted due to bad syntax, missing parameters, insufficient data, etc              &lt;br/&gt;Error codes:               502 — Subscriber not found</response>
        /// <response code="401">The request is not authorized.              &lt;br/&gt;Error codes:              504 - API call rejected by security permissions              100 — User has no permissions to perform this action</response>
        /// <response code="500">The server was unable to complete the request due to an internal error.               &lt;br/&gt;Error codes:              501 — “Location ID” is not a valid value for Int32              </response>
        [HttpGet]
        [Route("/v3/locations")]
        [ValidateModelState]
        [ProducesResponseType(statusCode: 200, type: typeof(SCServiceChannelServicesMessagingLocationGetLocationsWithTotalResponse))]
        [ProducesResponseType(statusCode: 400, type: typeof(SCServiceChannelServicesMessagingErrorResponse))]
        [ProducesResponseType(statusCode: 401, type: typeof(SCServiceChannelServicesMessagingErrorResponse))]
        [ProducesResponseType(statusCode: 500, type: typeof(SCServiceChannelServicesMessagingErrorResponse))]
        public abstract Task<IActionResult> LocationsIdIdstoreIdentifierstoreIdentifierNameNameSortSortPagePagePageSizePageSize([FromQuery (Name = "id")]int? id, [FromQuery (Name = "storeIdentifier")]string? storeIdentifier, [FromQuery (Name = "name")]string? name, [FromQuery (Name = "sort")]string? sort, [FromQuery (Name = "page")]int? page, [FromQuery (Name = "pageSize")]int? pageSize);

        /// <summary>
        /// Create a location with location notes
        /// </summary>
        /// <remarks>Create or update a location along with location notes.              &lt;br /&gt;**Note:** Method takes a dynamic list of parameters as input.              &lt;br /&gt;**Example request**                                POST /locations/LocationWithNotes                  {                   \&quot;StoreId\&quot;:\&quot;TestStore\&quot;,                   \&quot;Name\&quot;: \&quot;CSR Flagship\&quot;,                   \&quot;MainAddress\&quot;: \&quot;18 E. 16th Street\&quot;,                   \&quot;AddlAddress\&quot;: \&quot;3rd Floor, Innovation Center\&quot;,                   \&quot;Latitude\&quot;: 40.736601,                   \&quot;Longitude\&quot;: -73.991795,                   \&quot;City\&quot;: \&quot;New York\&quot;,                   \&quot;State\&quot;: \&quot;NY\&quot;,                   \&quot;Region\&quot;: \&quot;Northeast\&quot;,                   \&quot;District\&quot;: \&quot;NYC/LI\&quot;,                   \&quot;Zip\&quot;: \&quot;10003\&quot;,                   \&quot;Country\&quot;: \&quot;US\&quot;,                   \&quot;OpenDate\&quot;: \&quot;2021-07-03T00:10:00.308Z\&quot;,                   \&quot;ClosedDate\&quot;: \&quot;\&quot;,                   \&quot;Email\&quot;: \&quot;csrflagship@gmail.com\&quot;,                   \&quot;Phone\&quot;: \&quot;212-555-1212\&quot;,                   \&quot;Contact\&quot;: \&quot;\&quot;,                   \&quot;FaxNumber\&quot;: \&quot;\&quot;,                   \&quot;YourLocationNoteHeader1\&quot;: \&quot;Value1\&quot;,                   \&quot;YourLocationNoteHeader2\&quot;: \&quot;Value2\&quot;,                   \&quot;YourLocationNoteHeaderN\&quot;: \&quot;ValueN\&quot;                  }</remarks>
        /// <param name="locationWithNotes">Request to create or update a location with location notes.</param>
        /// <response code="200">A new location is created or an existing one is updated. The location ID is in the response.</response>
        /// <response code="400">The request is not accepted due to bad syntax, missing parameters, insufficient data, etc.              &lt;br/&gt;Error codes:              606 — The &#x60;StoreId&#x60; value cannot be empty. The maximum length is 50 characters.              611 — The location note header does not exist on the subscriber instance.              612 — The user does not have access to update a protected location note header.              630 — Incorrect format of the &#39;ParameterName&#39;.              631 — The &#x60;City&#x60; value cannot be empty. The maximum length is 50 characters.              632 — The &#x60;Zip&#x60; value cannot be empty. The maximum length is 12 characters.              633 — Latitude value should be between &#39;-90&#39; and &#39;90&#39;.              634 — Longitude value should be between &#39;-180&#39; and &#39;180&#39;.              635 — Invalid Email.              636 — The &#x60;Name&#x60; value cannot be empty. The maximum length is 100 characters.              637 — Invalid &#x60;State&#x60; format. The maximum length is 2 characters.              638 — Invalid &#x60;AddlAddress&#x60; format. The maximum length is 500 characters.              639 — Invalid &#x60;MainAddress&#x60; format. The maximum length is 500 characters.              640 — The &#x60;Country&#x60; value cannot be empty. The maximum length is 20 characters.              641 — Invalid &#x60;Region&#x60; format. The maximum length is 50 characters.              642 — Invalid &#x60;District&#x60; format. The maximum length is 50 characters.              643 — Invalid &#x60;Phone&#x60; format. The maximum length is 22 characters.              644 — Invalid &#x60;Contact&#x60; format. The maximum length is 50 characters.              645 — Invalid &#x60;FaxNumber&#x60; format. The maximum length is 22 characters.              646 — The country doesn&#39;t exist.              647 — The state doesn&#39;t exist in the country.              648 — The city doesn&#39;t exist in the country.              650 — Invalid &#x60;Email&#x60; format. The maximum length is 200 characters.              1301 — Request is empty or null.</response>
        /// <response code="401">The request is not authorized.              &lt;br/&gt;Error codes:              504 — API call rejected by security permissions</response>
        /// <response code="500">The server was unable to complete the request due to an internal error.</response>
        [HttpPost]
        [Route("/v3/locations/LocationWithNotes")]
        [Consumes("application/json", "text/json", "application/xml", "text/xml", "application/x-www-form-urlencoded")]
        [ValidateModelState]
        [ProducesResponseType(statusCode: 200, type: typeof(SCServiceChannelServicesMessagingLocationAddUpdateLocationResponse))]
        [ProducesResponseType(statusCode: 400, type: typeof(SCServiceChannelServicesMessagingErrorResponse))]
        [ProducesResponseType(statusCode: 401, type: typeof(SCServiceChannelServicesMessagingErrorResponse))]
        [ProducesResponseType(statusCode: 500, type: typeof(SCServiceChannelServicesMessagingErrorResponse))]
        public abstract Task<IActionResult> LocationsLocationWithNotes([FromBody]Dictionary<string, Object> locationWithNotes);

        /// <summary>
        /// Get unassigned contracts
        /// </summary>
        /// <remarks>Returns subscriber’s locations with open trades that have unassigned providers.              &lt;br /&gt; ***Note***: Method could be outdated causing faulty results.</remarks>
        /// <response code="200">The requested locations are in the response.</response>
        /// <response code="400">The request is not accepted due to bad syntax, missing parameters, insufficient data, etc.</response>
        /// <response code="401">The request is not authorized.              &lt;br/&gt;Error codes:              504 — API call rejected by security permissions</response>
        /// <response code="404">The requested resource does not exist on the server.</response>
        [HttpGet]
        [Route("/v3/locations/UnassignedContracts")]
        [ValidateModelState]
        [ProducesResponseType(statusCode: 200, type: typeof(SCServiceChannelServicesMessagingLocationGetProviderAssignmentExtendedLocationsResponse))]
        [ProducesResponseType(statusCode: 400, type: typeof(SCServiceChannelServicesMessagingErrorResponse))]
        [ProducesResponseType(statusCode: 401, type: typeof(SCServiceChannelServicesMessagingErrorResponse))]
        public abstract Task<IActionResult> LocationsUnassignedContracts();

        /// <summary>
        /// Retrieve a location
        /// </summary>
        /// <remarks>Returns the details for the specified location.              &lt;br /&gt; To receive details of several locations, use one of these methods: [GET /stores](https://developer.servicechannel.com/swagger/ui/index?version&#x3D;3#/Locations/GETv3_stores_Id__Id__storeIdentifier__storeIdentifier__Name__Name__Sort__Sort__Page__Page__PageSize__PageSize_), [GET /locations](https://developer.servicechannel.com/swagger/ui/index?version&#x3D;3#/Locations/GETv3_locations_Id__Id__storeIdentifier__storeIdentifier__Name__Name__Sort__Sort__Page__Page__PageSize__PageSize_), [GET /odata/locations](https://developer.servicechannel.com/swagger/ui/index?version&#x3D;3#/Locations/Locations_GetLocations).</remarks>
        /// <param name="locationId">Unique numeric identifier of the location to return the details for.</param>
        /// <response code="200">The specified location details are in the response.</response>
        /// <response code="400">The request is not accepted due to bad syntax, missing parameters, insufficient data, etc.              &lt;br/&gt;Error codes:              601 — Location is not found</response>
        /// <response code="401">The request is not authorized.              &lt;br/&gt;Error codes:              504 — API call rejected by security permissions</response>
        /// <response code="500">The server was unable to complete the request due to an internal error.</response>
        [HttpGet]
        [Route("/v3/locations/{locationId}")]
        [ValidateModelState]
        [ProducesResponseType(statusCode: 200, type: typeof(SCServiceChannelServicesMessagingLocationLocationWithTimezoneName))]
        [ProducesResponseType(statusCode: 400, type: typeof(SCServiceChannelServicesMessagingErrorResponse))]
        [ProducesResponseType(statusCode: 401, type: typeof(SCServiceChannelServicesMessagingErrorResponse))]
        [ProducesResponseType(statusCode: 500, type: typeof(SCServiceChannelServicesMessagingErrorResponse))]
        public abstract Task<IActionResult> LocationslocationId([FromRoute (Name = "locationId")][Required]int locationId);

        /// <summary>
        /// Get an evacuation plan map of a location
        /// </summary>
        /// <remarks>Returns evacuation plan map attachments details for the specified location.              &lt;br /&gt; Visit ServiceChannel University to learn about [Location Emergency Evacuation Plan Map(s)](https://servicechannel.atlassian.net/wiki/spaces/SCU/pages/710312376/Location+Emergency+Evacuation+Plan+Map+s).</remarks>
        /// <param name="locationId">Unique numeric identifier of the location to return the details for.</param>
        /// <response code="200">Location evacuation plan maps are in the response.</response>
        /// <response code="401">The request is not authorized.              &lt;br/&gt;Error codes:              504 — API call rejected by security permissions</response>
        /// <response code="500">The server was unable to complete the request due to an internal error.</response>
        [HttpGet]
        [Route("/v3/locations/{locationId}/evacuationmaps")]
        [ValidateModelState]
        [ProducesResponseType(statusCode: 200, type: typeof(SCServiceChannelServicesMessagingLocationGetLocationAttachmentsResponse))]
        [ProducesResponseType(statusCode: 401, type: typeof(SCServiceChannelServicesMessagingErrorResponse))]
        [ProducesResponseType(statusCode: 500, type: typeof(SCServiceChannelServicesMessagingErrorResponse))]
        public abstract Task<IActionResult> LocationslocationIdEvacuationmaps([FromRoute (Name = "locationId")][Required]int locationId);

        /// <summary>
        /// Add a location note
        /// </summary>
        /// <remarks>Adds a location note for the specified location. If a note is already added, you can change it by sending the request, or leave the &#x60;Value&#x60; parameter empty to delete the note.              &lt;br /&gt; To retrieve location IDs along with the location notes, send either of these requests: [GET/stores](https://developer.servicechannel.com/swagger/ui/index?version&#x3D;3#/Locations/GETv3_stores_Id__Id__storeIdentifier__storeIdentifier__Name__Name__Sort__Sort__Page__Page__PageSize__PageSize_), [GET/locations](https://developer.servicechannel.com/swagger/ui/index?version&#x3D;3#/Locations/GETv3_locations_Id__Id__storeIdentifier__storeIdentifier__Name__Name__Sort__Sort__Page__Page__PageSize__PageSize_).              Get location notes separately for the specified location by sending the [GET/locations/{locationId}/notes](https://developer.servicechannel.com/swagger/ui/index?version&#x3D;3#/Locations/GETv3_locations__locationId__notes) request.              &lt;br /&gt;***Note***: Method is available for users with the *Super Admin* or *Admin* roles, or the *Location Admin* permission.              &lt;br /&gt; **Example request**                                POST /locations/{locationId}/notes                  {                    \&quot;Header\&quot;: \&quot;Location Manager\&quot;,                    \&quot;Value\&quot;: \&quot;John Smith\&quot;                  }</remarks>
        /// <param name="locationId">Unique ID of the location you want to update a note for.</param>
        /// <param name="locNoteHeader">Request to add, update or delete a location note header for a location.</param>
        /// <response code="200">The note is added to the specified location.</response>
        /// <response code="400">The request is not accepted due to bad syntax, missing parameters, insufficient data, etc.              &lt;br/&gt;Error codes:              601 — Location is not found              1301 — Request is empty or null</response>
        /// <response code="401">The request is not authorized.              &lt;br/&gt;Error codes:              504 — API call rejected by security permissions</response>
        /// <response code="403">You are not authorized to request this resource, or the resource is unavailable for some reason.              &lt;br/&gt;Error codes:              100 — User has no rights to perform this action              612 — The user does not have access to update a protected location note header</response>
        /// <response code="404">The requested resource does not exist on the server.              &lt;br/&gt;Error codes:              611 — The location note header does not exist on the subscriber instance</response>
        /// <response code="500">The server was unable to complete the request due to an internal error.              &lt;br/&gt;Error codes:              501 — Object reference not set to an instance of an object</response>
        [HttpPost]
        [Route("/v3/locations/{locationId}/notes")]
        [Consumes("application/json", "text/json", "application/xml", "text/xml", "application/x-www-form-urlencoded")]
        [ValidateModelState]
        [ProducesResponseType(statusCode: 400, type: typeof(SCServiceChannelServicesMessagingErrorResponse))]
        [ProducesResponseType(statusCode: 401, type: typeof(SCServiceChannelServicesMessagingErrorResponse))]
        [ProducesResponseType(statusCode: 403, type: typeof(SCServiceChannelServicesMessagingErrorResponse))]
        [ProducesResponseType(statusCode: 404, type: typeof(SCServiceChannelServicesMessagingErrorResponse))]
        [ProducesResponseType(statusCode: 500, type: typeof(SCServiceChannelServicesMessagingErrorResponse))]
        public abstract Task<IActionResult> LocationslocationIdNotes([FromRoute (Name = "locationId")][Required]int locationId, [FromBody]SCServiceChannelServicesMessagingLocationNoteUpdateLocationNoteHeaderApiModelRequest locNoteHeader);

        /// <summary>
        /// Retrieve location notes
        /// </summary>
        /// <remarks>Returns the location notes for the specified location.</remarks>
        /// <param name="locationId">Unique ID of the location you want to receive notes for.</param>
        /// <param name="privateNotes">Should privateNotes be included. Settings from dashboardSetup by default</param>
        /// <response code="200">Location notes are in the response.</response>
        /// <response code="400">The request is not accepted due to bad syntax, missing parameters, insufficient data, etc.              &lt;br/&gt;Error codes:              601 — Location not found</response>
        /// <response code="401">The request is not authorized.              &lt;br/&gt;Error codes:              504 - API call rejected by security permissions</response>
        /// <response code="500">The server was unable to complete the request due to an internal error.</response>
        [HttpGet]
        [Route("/v3/locations/{locationId}/notes")]
        [ValidateModelState]
        [ProducesResponseType(statusCode: 200, type: typeof(SCServiceChannelServicesMessagingLocationNoteLocationNote))]
        [ProducesResponseType(statusCode: 400, type: typeof(SCServiceChannelServicesMessagingErrorResponse))]
        [ProducesResponseType(statusCode: 401, type: typeof(SCServiceChannelServicesMessagingErrorResponse))]
        [ProducesResponseType(statusCode: 500, type: typeof(SCServiceChannelServicesMessagingErrorResponse))]
        public abstract Task<IActionResult> LocationslocationIdNotesprivateNotesprivateNotes([FromRoute (Name = "locationId")][Required]int locationId, [FromQuery (Name = "privateNotes")]bool? privateNotes);

        /// <summary>
        /// Update a location
        /// </summary>
        /// <remarks>Modifies information of the existing location.You can use either of the following methods to retrieve location details: [GET/stores](https://developer.servicechannel.com/swagger/ui/index?version&#x3D;3#/Locations/GETv3_stores_Id__Id__storeIdentifier__storeIdentifier__Name__Name__Sort__Sort__Page__Page__PageSize__PageSize_), [GET/locations](https://developer.servicechannel.com/swagger/ui/index?version&#x3D;3#/Locations/GETv3_locations_Id__Id__storeIdentifier__storeIdentifier__Name__Name__Sort__Sort__Page__Page__PageSize__PageSize_).              &lt;br /&gt;***Note:*** Method is available for subscribers with the *Super Admin* permission or *SC Admin* role.              &lt;br /&gt;Visit ServiceChannel University to find out [how subscribers can update location details](https://servicechannel.atlassian.net/wiki/spaces/SCU/pages/708936009/Updating+Location+Details).              &lt;br /&gt;**Example request**                                PUT / locations/{locationId}                  {                   \&quot;StoreId\&quot;: \&quot;34\&quot;,                   \&quot;Name\&quot;: \&quot;CSR Flagship\&quot;,                   \&quot;Latitude\&quot;: 40.736601,                   \&quot;Longitude\&quot;: -73.991795,                   \&quot;Distance\&quot;: null,                   \&quot;Address1\&quot;: \&quot;3rd Floor, Innovation Center\&quot;,                   \&quot;Address2\&quot;: \&quot;18 E. 16th Street\&quot;,                   \&quot;City\&quot;: \&quot;New York\&quot;,                   \&quot;State\&quot;: \&quot;NY\&quot;,                   \&quot;StateId\&quot;: 1,                   \&quot;Region\&quot;: \&quot;Northeast\&quot;,                   \&quot;District\&quot;: \&quot;NYC/LI\&quot;,                   \&quot;Zip\&quot;: \&quot;10003\&quot;,                   \&quot;Country\&quot;: \&quot;US\&quot;,                   \&quot;CountryId\&quot;: 1,                   \&quot;ClosedDate\&quot;: \&quot;null\&quot;,                   \&quot;OpenDate\&quot;: \&quot;2021-07-05T07:05:04.991Z\&quot;,                   \&quot;Email\&quot;: \&quot;flagship@gmail.com\&quot;,                   \&quot;Phone\&quot;: \&quot;212-555-1212\&quot;,                   \&quot;Contact\&quot;: \&quot;\&quot;,                   \&quot;FaxNumber\&quot;: \&quot;\&quot;,                   \&quot;LocationTypeId\&quot;: null,                   \&quot;SquareValue\&quot;: 20.21                   \&quot;SquareMeasure\&quot;: \&quot;ft or foot\&quot; or \&quot;m or metre\&quot;                  }</remarks>
        /// <param name="locationId">Unique identifier of the subscriber’s location which information you want to update.</param>
        /// <param name="request">Request to change the location details. Leaving a parameter empty or excluding it from the request model erases the already existing data.</param>
        /// <response code="200">The location details are updated.</response>
        /// <response code="400">The request is not accepted due to bad syntax, missing parameters, insufficient data, etc.              &lt;br/&gt;Error codes:              601 — Location not found              1254 — Invalid square measure</response>
        /// <response code="401">The request is not authorized.              &lt;br/&gt;Error codes:              504 — API call rejected by security permissions</response>
        /// <response code="500">The server was unable to complete the request due to an internal error.</response>
        [HttpPut]
        [Route("/v3/locations/{locationId}")]
        [Consumes("application/json", "text/json", "application/xml", "text/xml", "application/x-www-form-urlencoded")]
        [ValidateModelState]
        [ProducesResponseType(statusCode: 400, type: typeof(SCServiceChannelServicesMessagingErrorResponse))]
        [ProducesResponseType(statusCode: 401, type: typeof(SCServiceChannelServicesMessagingErrorResponse))]
        [ProducesResponseType(statusCode: 500, type: typeof(SCServiceChannelServicesMessagingErrorResponse))]
        public abstract Task<IActionResult> LocationslocationId_0([FromRoute (Name = "locationId")][Required]int locationId, [FromBody]SCServiceChannelServicesMessagingLocationUpdateLocationExRequest request);

        /// <summary>
        /// Delete a location
        /// </summary>
        /// <remarks>Permanently removes a location.              &lt;br /&gt;***Note***: Method is available for users with the *Super Admin* or *Admin User* permissions, or the *SC Admin* role.</remarks>
        /// <param name="locationId">Unique identifier of the subscriber’s location to delete.</param>
        /// <response code="204">The location is deleted, and the response is intentionally blank.</response>
        /// <response code="400">The request is not accepted due to bad syntax, missing parameters, insufficient data, etc.              &lt;br/&gt;Error codes:               502 — Data not found</response>
        /// <response code="401">The request is not authorized.              &lt;br/&gt;Error codes:              504 — API call rejected by security permissions              804 — User has no permissions to perform this action</response>
        /// <response code="500">The server was unable to complete the request due to an internal error.</response>
        [HttpDelete]
        [Route("/v3/locations/{locationId}")]
        [ValidateModelState]
        [ProducesResponseType(statusCode: 400, type: typeof(SCServiceChannelServicesMessagingErrorResponse))]
        [ProducesResponseType(statusCode: 401, type: typeof(SCServiceChannelServicesMessagingErrorResponse))]
        [ProducesResponseType(statusCode: 500, type: typeof(SCServiceChannelServicesMessagingErrorResponse))]
        public abstract Task<IActionResult> LocationslocationId_1([FromRoute (Name = "locationId")][Required]int locationId);

        /// <summary>
        /// Get a Location’s Attachments
        /// </summary>
        /// <remarks>Returns a list of attachments.</remarks>
        /// <param name="storeId"></param>
        /// <response code="200">The requested attachments are in the response.</response>
        /// <response code="400">Bad Request - the request could not be understood or was missing required parameters</response>
        /// <response code="401">Indicates that the requested resource requires authentication.</response>
        /// <response code="403">User is not assigned to Location                   &lt;br/&gt;Error codes:                  804 — User is not assigned to Location.</response>
        /// <response code="404">Invalid StoreID                  &lt;br/&gt;Error codes:                  606 — Invalid StoreID.</response>
        [HttpGet]
        [Route("/v3/locations/{storeId}/attachments")]
        [ValidateModelState]
        [ProducesResponseType(statusCode: 200, type: typeof(List<SCServiceChannelServicesMessagingLocationLocationAttachment>))]
        [ProducesResponseType(statusCode: 400, type: typeof(SCServiceChannelServicesMessagingErrorResponse))]
        [ProducesResponseType(statusCode: 401, type: typeof(SCServiceChannelServicesMessagingErrorResponse))]
        [ProducesResponseType(statusCode: 403, type: typeof(SCServiceChannelServicesMessagingErrorResponse))]
        [ProducesResponseType(statusCode: 404, type: typeof(SCServiceChannelServicesMessagingErrorResponse))]
        public abstract Task<IActionResult> LocationsstoreIdAttachments([FromRoute (Name = "storeId")][Required]string storeId);

        /// <summary>
        /// Delete a Location Attachment
        /// </summary>
        /// <param name="storeId"></param>
        /// <param name="attachmentId"></param>
        /// <response code="200">The attachment is deleted.</response>
        /// <response code="400">Bad Request - the request could not be understood or was missing required parameters</response>
        /// <response code="401">Indicates that the requested resource requires authentication.</response>
        /// <response code="403">User is not assigned to Location                   &lt;br/&gt;Error codes:                  804 — User is not assigned to Location.</response>
        /// <response code="404">Invalid StoreID                  &lt;br/&gt;Error codes:                  606 — Invalid StoreID.</response>
        [HttpDelete]
        [Route("/v3/locations/{storeId}/attachments/{attachmentId}")]
        [ValidateModelState]
        [ProducesResponseType(statusCode: 400, type: typeof(SCServiceChannelServicesMessagingErrorResponse))]
        [ProducesResponseType(statusCode: 401, type: typeof(SCServiceChannelServicesMessagingErrorResponse))]
        [ProducesResponseType(statusCode: 403, type: typeof(SCServiceChannelServicesMessagingErrorResponse))]
        [ProducesResponseType(statusCode: 404, type: typeof(SCServiceChannelServicesMessagingErrorResponse))]
        public abstract Task<IActionResult> LocationsstoreIdAttachmentsattachmentId([FromRoute (Name = "storeId")][Required]string storeId, [FromRoute (Name = "attachmentId")][Required]int attachmentId);

        /// <summary>
        /// Create a Location Attachment
        /// </summary>
        /// <param name="storeId"></param>
        /// <param name="file">File to attach to the location.</param>
        /// <param name="fileDescription"></param>
        /// <param name="isEvacuationPlan"></param>
        /// <response code="201">Created indicates that the attachment created before the response was sent.</response>
        /// <response code="400">Bad Request - the request could not be understood or was missing required parameters.</response>
        /// <response code="401">Indicates that the requested resource requires authentication.              &lt;br/&gt;Error codes:              &lt;br/&gt; 504 - API call rejected by security permissions;</response>
        /// <response code="403">User is not assigned to Location                   &lt;br/&gt;Error codes:                  804 — User is not assigned to Location.</response>
        /// <response code="404">Invalid StoreID                  &lt;br/&gt;Error codes:                  606 — Invalid StoreID.</response>
        /// <response code="500">Indicates that a generic error has occurred on the server.</response>
        [HttpPost]
        [Route("/v3/locations/{storeId}/attachments")]
        [Consumes("multipart/form-data")]
        [ValidateModelState]
        [ProducesResponseType(statusCode: 201, type: typeof(SCServiceChannelServicesMessagingLocationLocationAttachment))]
        [ProducesResponseType(statusCode: 400, type: typeof(SCServiceChannelServicesMessagingErrorResponse))]
        [ProducesResponseType(statusCode: 401, type: typeof(SCServiceChannelServicesMessagingErrorResponse))]
        [ProducesResponseType(statusCode: 403, type: typeof(SCServiceChannelServicesMessagingErrorResponse))]
        [ProducesResponseType(statusCode: 404, type: typeof(SCServiceChannelServicesMessagingErrorResponse))]
        [ProducesResponseType(statusCode: 500, type: typeof(SCServiceChannelServicesMessagingErrorResponse))]
        public abstract Task<IActionResult> LocationsstoreIdAttachmentsfileDescriptionfileDescriptionisEvacuationPlanisEvacuationPlan([FromRoute (Name = "storeId")][Required]string storeId, [Required()]IFormFile file, [FromQuery (Name = "fileDescription")]string? fileDescription, [FromQuery (Name = "isEvacuationPlan")]bool? isEvacuationPlan);

        /// <summary>
        /// Add location notes
        /// </summary>
        /// <remarks>Add location notes for the specified location. If a note is already added, you can change it by sending the request, or leave the &#x60;Value&#x60; parameter empty to delete the note.              &lt;br /&gt; ***Note***: To retrieve store IDs along with the location notes, send either of these requests: [GET/stores](https://developer.servicechannel.com/swagger/ui/index?version&#x3D;3#/Locations/GETv3_stores_Id__Id__storeIdentifier__storeIdentifier__Name__Name__Sort__Sort__Page__Page__PageSize__PageSize_), [GET/locations](https://developer.servicechannel.com/swagger/ui/index?version&#x3D;3#/Locations/GETv3_locations_Id__Id__storeIdentifier__storeIdentifier__Name__Name__Sort__Sort__Page__Page__PageSize__PageSize_).              Get location notes separately for the specified location by sending the [GET/locations/{locationId}/notes](https://developer.servicechannel.com/swagger/ui/index?version&#x3D;3#/Locations/GETv3_locations__locationId__notes) request.              &lt;br /&gt; **Example request**                                POST /locations/{storeId}/updateNotes                  {                     \&quot;Notes\&quot;: [                         {                             \&quot;Header\&quot;: \&quot;Note1\&quot;,                             \&quot;Value\&quot;: \&quot;1\&quot;                         },                         {                             \&quot;Header\&quot;: \&quot;Note2\&quot;,                             \&quot;Value\&quot;: \&quot;2\&quot;                         }                     ]                  }</remarks>
        /// <param name="storeId">Unique storeId of the location you want to update a note for.</param>
        /// <param name="locNoteHeaders">Request to add, update or delete a location note headers for a location.</param>
        /// <response code="200">The note is added to the specified location.</response>
        /// <response code="400">The request is not accepted due to bad syntax, missing parameters, insufficient data, etc.              &lt;br/&gt;Error codes:              601 — Location is not found              1301 — Request is empty or null</response>
        /// <response code="401">The request is not authorized.              &lt;br/&gt;Error codes:              504 — API call rejected by security permissions</response>
        /// <response code="403">You are not authorized to request this resource, or the resource is unavailable for some reason.              &lt;br/&gt;Error codes:              100 — User has no rights to perform this action              612 — The user does not have access to update a protected location note header</response>
        /// <response code="404">The requested resource does not exist on the server.              &lt;br/&gt;Error codes:              611 — The location note header does not exist on the subscriber instance</response>
        /// <response code="500">The server was unable to complete the request due to an internal error.              &lt;br/&gt;Error codes:              501 — Object reference not set to an instance of an object</response>
        [HttpPost]
        [Route("/v3/locations/{storeId}/updateNotes")]
        [Consumes("application/json", "text/json", "application/xml", "text/xml", "application/x-www-form-urlencoded")]
        [ValidateModelState]
        [ProducesResponseType(statusCode: 400, type: typeof(SCServiceChannelServicesMessagingErrorResponse))]
        [ProducesResponseType(statusCode: 401, type: typeof(SCServiceChannelServicesMessagingErrorResponse))]
        [ProducesResponseType(statusCode: 403, type: typeof(SCServiceChannelServicesMessagingErrorResponse))]
        [ProducesResponseType(statusCode: 404, type: typeof(SCServiceChannelServicesMessagingErrorResponse))]
        [ProducesResponseType(statusCode: 500, type: typeof(SCServiceChannelServicesMessagingErrorResponse))]
        public abstract Task<IActionResult> LocationsstoreIdUpdateNotes([FromRoute (Name = "storeId")][Required]string storeId, [FromBody]SCServiceChannelServicesMessagingLocationNoteUpdateLocationNoteHeadersApiModelRequest locNoteHeaders);

        /// <summary>
        /// Get provider primary location assignments by Provider Ids
        /// </summary>
        /// <param name="providerIds">An array of Provider Ids.</param>
        /// <param name="dateFrom">The start date of the time period for which you want to retrieve location assignments. The format is &#x60;YYYY-MM-DDThh:mm:ss.ssZ&#x60;.</param>
        /// <param name="dateTo">The end date of the time period for which you want to retrieve location assignments. The format is &#x60;YYYY-MM-DDThh:mm:ss.ssZ&#x60;</param>
        /// <response code="200">The providers location assignments are in the response.</response>
        /// <response code="400">The request is not accepted due to bad syntax, missing parameters, insufficient data, etc.</response>
        /// <response code="401">The request is not authorized.              &lt;br/&gt;Error codes:              504 — API call rejected by security permissions</response>
        [HttpGet]
        [Route("/v3/providers/GetPrimaryLocationAssignmentsForProviderIds")]
        [ValidateModelState]
        [ProducesResponseType(statusCode: 400, type: typeof(SCServiceChannelServicesMessagingErrorResponse))]
        [ProducesResponseType(statusCode: 401, type: typeof(SCServiceChannelServicesMessagingErrorResponse))]
        public abstract Task<IActionResult> ProvidersGetPrimaryLocationAssignmentsForProviderIdsproviderIds0providerIds0providerIds1providerIds1dateFromdateFromdateTodateTo([FromQuery (Name = "providerIds")][Required()]List<int> providerIds, [FromQuery (Name = "dateFrom")][Required()]DateTime dateFrom, [FromQuery (Name = "dateTo")][Required()]DateTime dateTo);

        /// <summary>
        /// Retrieve Provider Assignments by locations and trades
        /// </summary>
        /// <remarks>Returns a list of provider assignments.              &lt;br /&gt;The method is available to subscribers only.</remarks>
        /// <param name="assignmentsFilter">Request parameters to filter the response (maximum number of locations: 200, maximum number of trades: 30).</param>
        /// <response code="200">The requested locations are in the response.</response>
        /// <response code="400">Bad Request - the request could not be understood or was missing required parameters.              &lt;br/&gt;Error codes:              1301 — Request is empty or null.              1302 — Too many parameters.              1303 — The list of location ids or the list of trade names is empty.</response>
        [HttpPost]
        [Route("/v3/providers/GetProviderAssignmentsForLocationsAndTrades")]
        [Consumes("application/json", "text/json", "application/xml", "text/xml", "application/x-www-form-urlencoded")]
        [ValidateModelState]
        [ProducesResponseType(statusCode: 200, type: typeof(List<SCServiceChannelServicesMessagingLocationLocationProviderAssignmentsResponse>))]
        [ProducesResponseType(statusCode: 400, type: typeof(SCServiceChannelServicesMessagingErrorResponse))]
        public abstract Task<IActionResult> ProvidersGetProviderAssignmentsForLocationsAndTrades([FromBody]SCServiceChannelApiModelLocationsLocationProviderAssignmentsFilter assignmentsFilter);

        /// <summary>
        /// Get provider location assignments
        /// </summary>
        /// <remarks>Returns a list of stores with the LocationIDs and StoreIds, along with the first contract (assignment) created date and whether the location is primary or not.              &lt;br /&gt;The method is available to providers only.</remarks>
        /// <response code="200">The provider location assignments are in the response.</response>
        /// <response code="400">The request is not accepted due to bad syntax, missing parameters, insufficient data, etc.</response>
        /// <response code="401">The request is not authorized.              &lt;br/&gt;Error codes:              504 — API call rejected by security permissions</response>
        [HttpGet]
        [Route("/v3/providers/GetProviderLocationAssignments")]
        [ValidateModelState]
        [ProducesResponseType(statusCode: 400, type: typeof(SCServiceChannelServicesMessagingErrorResponse))]
        [ProducesResponseType(statusCode: 401, type: typeof(SCServiceChannelServicesMessagingErrorResponse))]
        public abstract Task<IActionResult> ProvidersGetProviderLocationAssignments();

        /// <summary>
        /// Retrieve stores
        /// </summary>
        /// <remarks>Returns a list of all Locations, also called Stores, if neither of the filters is used. You can get the details for a certain store by specifying any of the following parameters: &#x60;Id&#x60;, &#x60;storeIdentifier&#x60;, &#x60;name&#x60;.              &lt;br /&gt; You can use either of these methods to get a list of the subscriber’s locations: [GET /locations](https://developer.servicechannel.com/swagger/ui/index?version&#x3D;3#/Locations/GETv3_locations_Id__Id__storeIdentifier__storeIdentifier__Name__Name__Sort__Sort__Page__Page__PageSize__PageSize_), [GET /stores](https://developer.servicechannel.com/swagger/ui/index?version&#x3D;3#/Locations/GETv3_stores_Id__Id__storeIdentifier__storeIdentifier__Name__Name__Sort__Sort__Page__Page__PageSize__PageSize_).              &lt;br /&gt; Visit ServiceChannel University to find out more about [locations and provider assignments](https://servicechannel.atlassian.net/wiki/spaces/SCU/pages/556105830/Locations+Provider+Assignments).</remarks>
        /// <param name="id">Unique location identifier.</param>
        /// <param name="storeIdentifier">Alphanumeric location identifier in the client’s system. Assigned by and unique per subscriber.</param>
        /// <param name="name">Location name.</param>
        /// <param name="sort">Sort resources by the specified property in the response.</param>
        /// <param name="page">Results page number.</param>
        /// <param name="pageSize">Number of objects on the results page. The default and maximum per page is 50.</param>
        /// <response code="200">The requested locations are in the response.</response>
        /// <response code="400">The request is not accepted due to bad syntax, missing parameters, insufficient data, etc              &lt;br/&gt;Error codes:               502 — Subscriber not found</response>
        /// <response code="401">The request is not authorized.              &lt;br/&gt;Error codes:              504 - API call rejected by security permissions              100 — User has no permissions to perform this action</response>
        /// <response code="500">The server was unable to complete the request due to an internal error.               &lt;br/&gt;Error codes:              501 — “Location ID” is not a valid value for Int32              </response>
        [HttpGet]
        [Route("/v3/stores")]
        [ValidateModelState]
        [ProducesResponseType(statusCode: 200, type: typeof(SCServiceChannelServicesMessagingLocationGetLocationsWithTotalResponse))]
        [ProducesResponseType(statusCode: 400, type: typeof(SCServiceChannelServicesMessagingErrorResponse))]
        [ProducesResponseType(statusCode: 401, type: typeof(SCServiceChannelServicesMessagingErrorResponse))]
        [ProducesResponseType(statusCode: 500, type: typeof(SCServiceChannelServicesMessagingErrorResponse))]
        public abstract Task<IActionResult> StoresIdIdstoreIdentifierstoreIdentifierNameNameSortSortPagePagePageSizePageSize([FromQuery (Name = "id")]int? id, [FromQuery (Name = "storeIdentifier")]string? storeIdentifier, [FromQuery (Name = "name")]string? name, [FromQuery (Name = "sort")]string? sort, [FromQuery (Name = "page")]int? page, [FromQuery (Name = "pageSize")]int? pageSize);

        /// <summary>
        /// Get stores
        /// </summary>
        /// <remarks>Returns a list of stores with the LocationIDs and subscriber IDs, along with the location address details. The method is available to subscribers only.              &lt;br /&gt; To get more detailed information, use one of these methods: [GET /stores](https://developer.servicechannel.com/swagger/ui/index?version&#x3D;3#/Locations/GETv3_stores_Id__Id__storeIdentifier__storeIdentifier__Name__Name__Sort__Sort__Page__Page__PageSize__PageSize_), [GET /locations](https://developer.servicechannel.com/swagger/ui/index?version&#x3D;3#/Locations/GETv3_locations_Id__Id__storeIdentifier__storeIdentifier__Name__Name__Sort__Sort__Page__Page__PageSize__PageSize_), [GET /odata/locations](https://developer.servicechannel.com/swagger/ui/index?version&#x3D;3#/Locations/Locations_GetLocations).              &lt;br /&gt; Learn about updating [location details](https://servicechannel.atlassian.net/wiki/spaces/SCU/pages/708936009/Updating+Location+Details) in ServiceChannel University.</remarks>
        /// <response code="200">OK</response>
        [HttpGet]
        [Route("/v3/subscribers/current/users/current/stores")]
        [ValidateModelState]
        [ProducesResponseType(statusCode: 200, type: typeof(Object))]
        public abstract Task<IActionResult> SubscribersCurrentUsersCurrentStores();

        /// <summary>
        /// Retrieve location information
        /// </summary>
        /// <remarks>Performs search of locations based on the specified filters and returns a list of locations with all details for the specified subscriber.               &lt;br /&gt; ***Note***: This method is available to *Provider Directory (aka Fixxbook)* users only.</remarks>
        /// <param name="subscriberId">Unique subscriber identifier.</param>
        /// <param name="filterType">Filters a collection of resources by their type.</param>
        /// <param name="searchString">Returns resources based on the provided query string.</param>
        /// <response code="200">The location details are in the response.</response>
        /// <response code="400">The request is not accepted due to bad syntax, missing parameters, insufficient data, etc.</response>
        /// <response code="401">The request is not authorized.              &lt;br/&gt;Error codes:              504 — API call rejected by security permissions</response>
        [HttpGet]
        [Route("/v3/subscribers/{subscriberId}/locationsinfo")]
        [ValidateModelState]
        [ProducesResponseType(statusCode: 400, type: typeof(SCServiceChannelServicesMessagingErrorResponse))]
        [ProducesResponseType(statusCode: 401, type: typeof(SCServiceChannelServicesMessagingErrorResponse))]
        public abstract Task<IActionResult> SubscriberssubscriberIdLocationsinfofilterTypefilterTypesearchStringsearchString([FromRoute (Name = "subscriberId")][Required]int subscriberId, [FromQuery (Name = "filterType")]string? filterType, [FromQuery (Name = "searchString")]string? searchString);
    }
}
