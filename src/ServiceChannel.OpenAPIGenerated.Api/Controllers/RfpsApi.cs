/*
 * ServiceChannel API - v.3
 *
 * The ServiceChannel API is a RESTful and stateless API. It accepts standard HTTP verbs and supports OAuth 2.0 for authorizing requests.      Our API returns common HTTP status codes as well as JSON encapsulated data.      See [API Overview](https://developer.servicechannel.com/basics/introduction/overview/) for the intro to ServiceChannel API.<br>      <h3>Authentication and Authorization</h3>You should have a ServiceChannel account, register your application, and obtain `access_token` to integrate with our API.      See [Authentication and Authorization](https://developer.servicechannel.com/basics/general/authentication/) for more information.      To use this API playground, click **Authorize** and sign in to ServiceChannel.<br>      <h3>Environment</h3> All calls in this API Reference point to the **SB2 environment**.      See [Environments](https://developer.servicechannel.com/basics/general/environments/) for more information.<br>      <h3>API Version</h3>The current stable version of the ServiceChannel API is `v3`. In the request URL, `v3` is a version prefix that should be present.      When you omit the version prefix, calls point to the minimum supported version of the API.      We recommend you to always specify the API version to avoid possible errors.
 *
 * The version of the OpenAPI document: 3
 * 
 * Generated by: https://openapi-generator.tech
 */

using System;
using System.Collections.Generic;
using System.ComponentModel.DataAnnotations;
using System.Threading;
using System.Threading.Tasks;
using Microsoft.AspNetCore.Authorization;
using Microsoft.AspNetCore.Mvc;
using Microsoft.AspNetCore.Http;
using ServiceChannel.OpenAPIGenerated.Api.Attributes;
using ServiceChannel.OpenAPIGenerated.Api.Models;

namespace ServiceChannel.OpenAPIGenerated.Api.Controllers
{ 
    /// <summary>
    /// 
    /// </summary>
    [ApiController]
    public abstract class RfpsApiController : ControllerBase
    { 
        /// <summary>
        /// Retrieve Rfp
        /// </summary>
        /// <remarks>Retrieve Rfp</remarks>
        /// <param name="rfpId"></param>
        /// <param name="expand">Expand a navigation property.</param>
        /// <param name="select">Select a set of properties to return.</param>
        /// <param name="filter">Filter a collection of resources addressed by a request URL.</param>
        /// <param name="orderby">Order resources by the specified property in the response.</param>
        /// <param name="top">Return the specified number of items in the response.</param>
        /// <param name="skip">Skip the specified number of items in the response.</param>
        /// <param name="count">Include the count of the matching resources in the response.</param>
        /// <response code="200">Indicates that the request succeeded and that the requested information is in the response.</response>
        [HttpGet]
        [Route("/v3/odata/rfps({rfpId})")]
        [ValidateModelState]
        [ProducesResponseType(statusCode: 200, type: typeof(List<SCServiceChannelServicesMessagingRfpRfp>))]
        public abstract Task<IActionResult> GetRfp([FromRoute (Name = "rfpId")][Required]int rfpId, [FromQuery (Name = "$expand")]string? expand, [FromQuery (Name = "$select")]string? select, [FromQuery (Name = "$filter")]string? filter, [FromQuery (Name = "$orderby")]string? orderby, [FromQuery (Name = "$top")]int? top, [FromQuery (Name = "$skip")]int? skip, [FromQuery (Name = "$count")]bool? count);

        /// <summary>
        /// Retrieve Rfps
        /// </summary>
        /// <remarks>Retrieve Rfps              &lt;br /&gt; Dates without &#39;Dto&#39; endings return UTC date format.              &lt;br /&gt; Dates without &#39;Dto&#39; endings are not recommended for using.</remarks>
        /// <param name="expand">Expand a navigation property.</param>
        /// <param name="select">Select a set of properties to return.</param>
        /// <param name="filter">Filter a collection of resources addressed by a request URL.</param>
        /// <param name="orderby">Order resources by the specified property in the response.</param>
        /// <param name="top">Return the specified number of items in the response.</param>
        /// <param name="skip">Skip the specified number of items in the response.</param>
        /// <param name="count">Include the count of the matching resources in the response.</param>
        /// <response code="200">Indicates that the request succeeded and that the requested information is in the response.</response>
        [HttpGet]
        [Route("/v3/odata/rfps")]
        [ValidateModelState]
        [ProducesResponseType(statusCode: 200, type: typeof(List<SCServiceChannelServicesMessagingRfpRfp>))]
        public abstract Task<IActionResult> GetRfps([FromQuery (Name = "$expand")]string? expand, [FromQuery (Name = "$select")]string? select, [FromQuery (Name = "$filter")]string? filter, [FromQuery (Name = "$orderby")]string? orderby, [FromQuery (Name = "$top")]int? top, [FromQuery (Name = "$skip")]int? skip, [FromQuery (Name = "$count")]bool? count);

        /// <summary>
        /// Create an RFP
        /// </summary>
        /// <remarks>Creates a request for proposal (RFP). Returns a unique RFP ID for a successful request.              &lt;br /&gt;***Note:*** Subscribers can create RFPs [using the API](https://developer.servicechannel.com/guides/proposals/create-and-manage-RFPs/#create-an-rfp) or via [Service Automation](https://servicechannel.atlassian.net/wiki/spaces/SCU/pages/560300086/Creating+an+RFP).              &lt;br /&gt;**Example Request**                                POST /rfps                  {                     \&quot;Number\&quot;: \&quot;\&quot;,                     \&quot;PONumber\&quot;: \&quot;\&quot;,                     \&quot;WONumber\&quot;: \&quot;\&quot;,                     \&quot;TradeId\&quot;: 90480,                     \&quot;Description\&quot;: \&quot;New doors for the office\&quot;,                     \&quot;Date\&quot;: \&quot;\&quot;,                     \&quot;DueHrs\&quot;: 48,                     \&quot;DueDate\&quot;: \&quot;\&quot;,                     \&quot;Location\&quot;: {                        \&quot;Id\&quot;: 2006071467,                        \&quot;StoreId\&quot;: \&quot;\&quot;                     },                     \&quot;ProviderId\&quot;: 2000090505,                     \&quot;ResponseDate\&quot;: \&quot;\&quot;,                     \&quot;ProposalNotificationEmail\&quot;: \&quot;LFAlways1776@gmail.com\&quot;,                     \&quot;ProviderEmail\&quot;: \&quot;\&quot;,                     \&quot;ProposalTemplateId\&quot;: 0,                     \&quot;WorkOrderId\&quot;: 0,                     \&quot;ProjectId\&quot;: 0                  }</remarks>
        /// <param name="request">The request to create an RFP.</param>
        /// <response code="201">The RFP is created, and a unique RFP ID is returned in the response.</response>
        /// <response code="400">The request is not accepted due to bad syntax, missing parameters, insufficient data, etc.              &lt;br/&gt;Error codes:              503 — Request is empty or null              503 — Provider is not valid              503 — Empty E-Mail address (&#39;ProposalNotificationEmail&#39;)              503 — TradeId is not valid              503 — Empty Description              503 — Empty Location or Store ID              503 — Invalid location Id for current user              503 — Active contract for current trade, provider, locationId not found              503 — Empty Provider E-Mail address (&#39;ProviderEmail&#39;)</response>
        /// <response code="401">The request is not authorized.              &lt;br/&gt;Error codes:              504 — API call rejected by security permissions              504 — User does not have Location or Trade access to perform this operation</response>
        /// <response code="500">The server was unable to complete the request due to an internal error.</response>
        [HttpPost]
        [Route("/v3/rfps")]
        [Consumes("application/json", "text/json", "application/xml", "text/xml", "application/x-www-form-urlencoded")]
        [ValidateModelState]
        [ProducesResponseType(statusCode: 400, type: typeof(SCServiceChannelServicesMessagingErrorResponse))]
        [ProducesResponseType(statusCode: 401, type: typeof(SCServiceChannelServicesMessagingErrorResponse))]
        [ProducesResponseType(statusCode: 500, type: typeof(SCServiceChannelServicesMessagingErrorResponse))]
        public abstract Task<IActionResult> Rfps([FromBody]SCServiceChannelServicesMessagingRfpCreateRfpRequest request);

        /// <summary>
        /// Delete an RFP by ID
        /// </summary>
        /// <remarks>Permanently deletes the specified RFP by its ID. It cannot be undone. Find out more about [deleting RFPs via the API](https://developer.servicechannel.com/guides/proposals/create-and-manage-RFPs/#delete-an-rfp).</remarks>
        /// <param name="id">The unique numeric identifier of the RFP to delete.</param>
        /// <response code="204">The RFP is deleted, and the response is intentionally blank.</response>
        /// <response code="400">The request is not accepted due to bad syntax, missing parameters, insufficient data, etc.              &lt;br/&gt;Error codes:              502 — RFP not found              503 — RFP can only be deleted, if none of the proposals are approved</response>
        /// <response code="401">The request is not authorized.              &lt;br/&gt;Error codes:              504 — API call rejected by security permissions</response>
        /// <response code="404">The requested resource does not exist on the server.</response>
        [HttpDelete]
        [Route("/v3/rfps/{id}")]
        [ValidateModelState]
        [ProducesResponseType(statusCode: 400, type: typeof(SCServiceChannelServicesMessagingErrorResponse))]
        [ProducesResponseType(statusCode: 401, type: typeof(SCServiceChannelServicesMessagingErrorResponse))]
        public abstract Task<IActionResult> Rfpsid([FromRoute (Name = "id")][Required]int id);

        /// <summary>
        /// Delete an RFP by the RFP number and location ID
        /// </summary>
        /// <remarks>Permanently deletes the RFP by the specified RFP number and location ID. It cannot be undone.              &lt;br /&gt;***Note:*** The RFP number is not unique. If multiple RFPs with the same number were created for a location, all of them are deleted when you pass the request.              &lt;br /&gt;Learn more about [deleting RFPs via the API](https://developer.servicechannel.com/guides/proposals/create-and-manage-RFPs/#delete-an-rfp).</remarks>
        /// <param name="number">The non-unique identifier of the RFP to delete.</param>
        /// <param name="locationId">The unique numeric identifier of the location for which the RFP was created.</param>
        /// <response code="204">The RFP is deleted, and the response is intentionally blank.</response>
        /// <response code="400">The request is not accepted due to bad syntax, missing parameters, insufficient data, etc.              &lt;br/&gt;Error codes:              502 — RFP not found              503 — RFP can only be deleted, if none of the proposals are approved</response>
        /// <response code="401">The request is not authorized.              &lt;br/&gt;Error codes:              504 — API call rejected by security permissions</response>
        /// <response code="404">The requested resource does not exist on the server.</response>
        [HttpDelete]
        [Route("/v3/rfps/{number}/locations/{locationId}")]
        [ValidateModelState]
        [ProducesResponseType(statusCode: 400, type: typeof(SCServiceChannelServicesMessagingErrorResponse))]
        [ProducesResponseType(statusCode: 401, type: typeof(SCServiceChannelServicesMessagingErrorResponse))]
        public abstract Task<IActionResult> RfpsnumberLocationslocationId([FromRoute (Name = "number")][Required]string number, [FromRoute (Name = "locationId")][Required]int locationId);

        /// <summary>
        /// Assign an RFP to another provider
        /// </summary>
        /// <remarks>Assigns the RFP to the specified provider. Returns a unique RFP ID for a successful request.              &lt;br /&gt;***Note:*** The provider you want to assign the RFP to should have access to the location and trade for which the RFP was created.              &lt;br /&gt;Learn more about [assigning an RFP to another provider](https://developer.servicechannel.com/guides/proposals/create-and-manage-RFPs/#assign-an-rfp-to-another-provider).              &lt;br /&gt;**Example Request**                                PUT /rfps/{rfpId}/assign                  {                     \&quot;ProviderId\&quot;: 2000090505,                     \&quot;ProviderEmail\&quot;: \&quot;\&quot;                  }</remarks>
        /// <param name="rfpId">The unique numeric identifier of the RFP to assign to the specified provider.</param>
        /// <param name="request">The request to assign the RFP to another provider.</param>
        /// <response code="200">The RFP is assigned to the specified provider, and a unique RFP ID is returned in the response.</response>
        /// <response code="400">The request is not accepted due to bad syntax, missing parameters, insufficient data, etc.              &lt;br/&gt;Error codes:              502 — RFP not found              503 — Request is empty or null              503 — Provider is not valid              503 — Empty Provider E-Mail address (&#39;ProviderEmail&#39;)</response>
        /// <response code="401">The request is not authorized.              &lt;br/&gt;Error codes:              504 — API call rejected by security permissions</response>
        /// <response code="500">The server was unable to complete the request due to an internal error.</response>
        [HttpPut]
        [Route("/v3/rfps/{rfpId}/assign")]
        [Consumes("application/json", "text/json", "application/xml", "text/xml", "application/x-www-form-urlencoded")]
        [ValidateModelState]
        [ProducesResponseType(statusCode: 400, type: typeof(SCServiceChannelServicesMessagingErrorResponse))]
        [ProducesResponseType(statusCode: 401, type: typeof(SCServiceChannelServicesMessagingErrorResponse))]
        [ProducesResponseType(statusCode: 500, type: typeof(SCServiceChannelServicesMessagingErrorResponse))]
        public abstract Task<IActionResult> RfpsrfpIdAssign([FromRoute (Name = "rfpId")][Required]int rfpId, [FromBody]SCServiceChannelServicesMessagingRfpAssignRfpRequest request);
    }
}
