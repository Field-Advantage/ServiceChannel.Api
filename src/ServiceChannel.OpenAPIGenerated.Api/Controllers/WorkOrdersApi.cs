/*
 * ServiceChannel API - v.3
 *
 * The ServiceChannel API is a RESTful and stateless API. It accepts standard HTTP verbs and supports OAuth 2.0 for authorizing requests.      Our API returns common HTTP status codes as well as JSON encapsulated data.      See [API Overview](https://developer.servicechannel.com/basics/introduction/overview/) for the intro to ServiceChannel API.<br>      <h3>Authentication and Authorization</h3>You should have a ServiceChannel account, register your application, and obtain `access_token` to integrate with our API.      See [Authentication and Authorization](https://developer.servicechannel.com/basics/general/authentication/) for more information.      To use this API playground, click **Authorize** and sign in to ServiceChannel.<br>      <h3>Environment</h3> All calls in this API Reference point to the **SB2 environment**.      See [Environments](https://developer.servicechannel.com/basics/general/environments/) for more information.<br>      <h3>API Version</h3>The current stable version of the ServiceChannel API is `v3`. In the request URL, `v3` is a version prefix that should be present.      When you omit the version prefix, calls point to the minimum supported version of the API.      We recommend you to always specify the API version to avoid possible errors.
 *
 * The version of the OpenAPI document: 3
 * 
 * Generated by: https://openapi-generator.tech
 */

using System;
using System.Collections.Generic;
using System.ComponentModel.DataAnnotations;
using System.Threading;
using System.Threading.Tasks;
using Microsoft.AspNetCore.Authorization;
using Microsoft.AspNetCore.Mvc;
using Microsoft.AspNetCore.Http;
using ServiceChannel.OpenAPIGenerated.Api.Attributes;
using ServiceChannel.OpenAPIGenerated.Api.Models;

namespace ServiceChannel.OpenAPIGenerated.Api.Controllers
{ 
    /// <summary>
    /// 
    /// </summary>
    [ApiController]
    public abstract class WorkOrdersApiController : ControllerBase
    { 
        /// <summary>
        /// Retrieve a Work Order CheckIn Activity
        /// </summary>
        /// <remarks>Retrieve a Work Order CheckIn Activity</remarks>
        /// <param name="workorderId"></param>
        /// <param name="expand">Expand a navigation property.</param>
        /// <param name="select">Select a set of properties to return.</param>
        /// <param name="filter">Filter a collection of resources addressed by a request URL.</param>
        /// <param name="orderby">Order resources by the specified property in the response.</param>
        /// <param name="top">Return the specified number of items in the response.</param>
        /// <param name="skip">Skip the specified number of items in the response.</param>
        /// <param name="count">Include the count of the matching resources in the response.</param>
        /// <response code="200">Indicates that the request succeeded and that the requested information is in the response.</response>
        [HttpGet]
        [Route("/v3/odata/workorders({workorderId})/Service.CheckInActivity()")]
        [ValidateModelState]
        [ProducesResponseType(statusCode: 200, type: typeof(List<SCServiceChannelServicesMessagingWorkordersCheckInIActivity>))]
        public abstract Task<IActionResult> CheckInActivity([FromRoute (Name = "workorderId")][Required]int workorderId, [FromQuery (Name = "$expand")]string? expand, [FromQuery (Name = "$select")]string? select, [FromQuery (Name = "$filter")]string? filter, [FromQuery (Name = "$orderby")]string? orderby, [FromQuery (Name = "$top")]int? top, [FromQuery (Name = "$skip")]int? skip, [FromQuery (Name = "$count")]bool? count);

        /// <summary>
        /// Retrieve a Work Orders
        /// </summary>
        /// <remarks>Retrieve a Work Orders</remarks>
        /// <param name="workorderId"></param>
        /// <param name="expand">Expand a navigation property.</param>
        /// <param name="select">Select a set of properties to return.</param>
        /// <param name="filter">Filter a collection of resources addressed by a request URL.</param>
        /// <param name="orderby">Order resources by the specified property in the response.</param>
        /// <param name="top">Return the specified number of items in the response.</param>
        /// <param name="skip">Skip the specified number of items in the response.</param>
        /// <param name="count">Include the count of the matching resources in the response.</param>
        /// <response code="200">Indicates that the request succeeded and that the requested information is in the response.</response>
        [HttpGet]
        [Route("/v3/odata/workorders({workorderId})")]
        [ValidateModelState]
        [ProducesResponseType(statusCode: 200, type: typeof(SCServiceChannelServicesMessagingWorkordersWorkOrder))]
        public abstract Task<IActionResult> Get([FromRoute (Name = "workorderId")][Required]int workorderId, [FromQuery (Name = "$expand")]string? expand, [FromQuery (Name = "$select")]string? select, [FromQuery (Name = "$filter")]string? filter, [FromQuery (Name = "$orderby")]string? orderby, [FromQuery (Name = "$top")]int? top, [FromQuery (Name = "$skip")]int? skip, [FromQuery (Name = "$count")]bool? count);

        /// <summary>
        /// Retrieve a Duplicate Work Orders
        /// </summary>
        /// <remarks>Retrieve a Duplicate Work Orders              &lt;br /&gt;One page contains 50 items by default. To get next 50 items use the \&quot;$skip\&quot; parameter (for example $skip&#x3D;50 and so on).</remarks>
        /// <param name="locationId">Location identifier</param>
        /// <param name="expand">Expand a navigation property.</param>
        /// <param name="select">Select a set of properties to return.</param>
        /// <param name="filter">Filter a collection of resources addressed by a request URL.</param>
        /// <param name="orderby">Order resources by the specified property in the response.</param>
        /// <param name="top">Return the specified number of items in the response.</param>
        /// <param name="skip">Skip the specified number of items in the response.</param>
        /// <param name="count">Include the count of the matching resources in the response.</param>
        /// <response code="200">Indicates that the request succeeded and that the requested information is in the response.</response>
        [HttpGet]
        [Route("/v3/odata/locations({locationId})/workorders/Service.GetDuplicates()")]
        [ValidateModelState]
        [ProducesResponseType(statusCode: 200, type: typeof(List<SCServiceChannelServicesMessagingWorkordersWorkOrder>))]
        public abstract Task<IActionResult> GetDuplicateWorkOrders([FromRoute (Name = "locationId")][Required]int locationId, [FromQuery (Name = "$expand")]string? expand, [FromQuery (Name = "$select")]string? select, [FromQuery (Name = "$filter")]string? filter, [FromQuery (Name = "$orderby")]string? orderby, [FromQuery (Name = "$top")]int? top, [FromQuery (Name = "$skip")]int? skip, [FromQuery (Name = "$count")]bool? count);

        /// <summary>
        /// Retrieve Work Order Recalls
        /// </summary>
        /// <remarks>Retrieve Work Order Recalls              &lt;br /&gt;One page contains 50 items by default. To get next 50 items use the \&quot;$skip\&quot; parameter (for example $skip&#x3D;50 and so on).</remarks>
        /// <param name="locationId">Location identifier</param>
        /// <param name="expand">Expand a navigation property.</param>
        /// <param name="select">Select a set of properties to return.</param>
        /// <param name="filter">Filter a collection of resources addressed by a request URL.</param>
        /// <param name="orderby">Order resources by the specified property in the response.</param>
        /// <param name="top">Return the specified number of items in the response.</param>
        /// <param name="skip">Skip the specified number of items in the response.</param>
        /// <param name="count">Include the count of the matching resources in the response.</param>
        /// <response code="200">Indicates that the request succeeded and that the requested information is in the response.</response>
        [HttpGet]
        [Route("/v3/odata/locations({locationId})/workorders/Service.GetRecalls()")]
        [ValidateModelState]
        [ProducesResponseType(statusCode: 200, type: typeof(List<SCServiceChannelServicesMessagingWorkordersWorkOrder>))]
        public abstract Task<IActionResult> GetRecallWorkOrders([FromRoute (Name = "locationId")][Required]int locationId, [FromQuery (Name = "$expand")]string? expand, [FromQuery (Name = "$select")]string? select, [FromQuery (Name = "$filter")]string? filter, [FromQuery (Name = "$orderby")]string? orderby, [FromQuery (Name = "$top")]int? top, [FromQuery (Name = "$skip")]int? skip, [FromQuery (Name = "$count")]bool? count);

        /// <summary>
        /// Retrieve work orders
        /// </summary>
        /// <remarks>Returns a list of work orders created within the last 90 days if not specified otherwise in &#x60;$filter&#x60;. The maximum date range between the work order &#x60;CallDate&#x60; and the current date is 365 days.               &lt;br /&gt;The default number of work orders in the response is 50. To retrieve more work orders, use the &#x60;$skip&#x60; parameter.              &lt;br /&gt;***Note***: You can also get a list of work orders by using one of the following methods: [GET /workorders](https://developer.servicechannel.com/swagger/ui/index?version&#x3D;3#/WorkOrders/GETv3_workorders_locationId__locationId__storeId__storeId_), [POST /odata/workorders/filter](https://developer.servicechannel.com/swagger/ui/index?version&#x3D;3#/WorkOrders/POSTv3_odata_workorders_filter).</remarks>
        /// <param name="expand">Expand a navigation property.</param>
        /// <param name="select">Select a set of properties to return.</param>
        /// <param name="filter">Filter a collection of resources addressed by a request URL.</param>
        /// <param name="orderby">Order resources by the specified property in the response.</param>
        /// <param name="top">Return the specified number of items in the response.</param>
        /// <param name="skip">Skip the specified number of items in the response.</param>
        /// <param name="count">Include the count of the matching resources in the response.</param>
        /// <response code="200">The list of work orders is in the response.</response>
        /// <response code="400">The request is not accepted due to bad syntax, missing parameters, insufficient data, etc.&lt;br/&gt;&lt;br/&gt;The query specified in the URI is not valid.</response>
        /// <response code="401">The request is not authorized.&lt;br/&gt;&lt;br/&gt;Error codes:&lt;br/&gt;504 � API call rejected by security permissions</response>
        /// <response code="502">The server, while acting as a gateway or proxy, received an invalid response from the upstream server.</response>
        [HttpGet]
        [Route("/v3/odata/workorders")]
        [ValidateModelState]
        [ProducesResponseType(statusCode: 200, type: typeof(List<SCServiceChannelServicesMessagingWorkordersWorkOrder>))]
        [ProducesResponseType(statusCode: 400, type: typeof(SCServiceChannelServicesMessagingErrorResponse))]
        [ProducesResponseType(statusCode: 401, type: typeof(SCServiceChannelServicesMessagingErrorResponse))]
        [ProducesResponseType(statusCode: 502, type: typeof(SCServiceChannelServicesMessagingErrorResponse))]
        public abstract Task<IActionResult> GetWorkOrders([FromQuery (Name = "$expand")]string? expand, [FromQuery (Name = "$select")]string? select, [FromQuery (Name = "$filter")]string? filter, [FromQuery (Name = "$orderby")]string? orderby, [FromQuery (Name = "$top")]int? top, [FromQuery (Name = "$skip")]int? skip, [FromQuery (Name = "$count")]bool? count);

        /// <summary>
        /// Retrieve a Work Orders
        /// </summary>
        /// <remarks>Retrieve a Work Orders.              &lt;br /&gt;One page contains 50 items by default. To get next 50 items use the \&quot;$skip\&quot; parameter (for example $skip&#x3D;50 and so on).              &lt;br /&gt;The filter expressions by defaul is \&quot;$filter CallDate ge (Now+90 days)\&quot;.               &lt;br /&gt;The maximum CallDate value is 365 days even if provided.</remarks>
        /// <param name="locationId"></param>
        /// <param name="expand">Expand a navigation property.</param>
        /// <param name="select">Select a set of properties to return.</param>
        /// <param name="filter">Filter a collection of resources addressed by a request URL.</param>
        /// <param name="orderby">Order resources by the specified property in the response.</param>
        /// <param name="top">Return the specified number of items in the response.</param>
        /// <param name="skip">Skip the specified number of items in the response.</param>
        /// <param name="count">Include the count of the matching resources in the response.</param>
        /// <response code="200">Indicates that the request succeeded and that the requested information is in the response.</response>
        [HttpGet]
        [Route("/v3/odata/locations({locationId})/workorders")]
        [ValidateModelState]
        [ProducesResponseType(statusCode: 200, type: typeof(List<SCServiceChannelServicesMessagingWorkordersWorkOrder>))]
        public abstract Task<IActionResult> GetWorkOrdersForLocation([FromRoute (Name = "locationId")][Required]int locationId, [FromQuery (Name = "$expand")]string? expand, [FromQuery (Name = "$select")]string? select, [FromQuery (Name = "$filter")]string? filter, [FromQuery (Name = "$orderby")]string? orderby, [FromQuery (Name = "$top")]int? top, [FromQuery (Name = "$skip")]int? skip, [FromQuery (Name = "$count")]bool? count);

        /// <summary>
        /// Retrieve a Work Orders near by a site.
        /// </summary>
        /// <remarks>Retrieve a Work Orders near by a site orderred by Location distance (by default).               &lt;br /&gt;One page contains 50 items by default. To get next 50 items use the \&quot;$skip\&quot; parameter (for example $skip&#x3D;50 and so on).              &lt;br /&gt;The filter expressions by defaul is \&quot;$filter CallDate ge (Now+90 days)\&quot;.               &lt;br /&gt;The maximum CallDate value is 365 days even if provided.</remarks>
        /// <param name="longitude">Longitude of a site</param>
        /// <param name="latitude">Latitude of a site</param>
        /// <param name="expand">Expand a navigation property.</param>
        /// <param name="select">Select a set of properties to return.</param>
        /// <param name="filter">Filter a collection of resources addressed by a request URL.</param>
        /// <param name="orderby">Order resources by the specified property in the response.</param>
        /// <param name="top">Return the specified number of items in the response.</param>
        /// <param name="skip">Skip the specified number of items in the response.</param>
        /// <param name="count">Include the count of the matching resources in the response.</param>
        /// <response code="200">Indicates that the request succeeded and that the requested information is in the response.</response>
        [HttpGet]
        [Route("/v3/odata/workorders/Service.NearBy(latitude={latitude},longitude={longitude})")]
        [ValidateModelState]
        [ProducesResponseType(statusCode: 200, type: typeof(List<SCServiceChannelServicesMessagingWorkordersWorkOrder>))]
        public abstract Task<IActionResult> GetWorkOrdersNearBy([FromRoute (Name = "longitude")][Required]double longitude, [FromRoute (Name = "latitude")][Required]double latitude, [FromQuery (Name = "$expand")]string? expand, [FromQuery (Name = "$select")]string? select, [FromQuery (Name = "$filter")]string? filter, [FromQuery (Name = "$orderby")]string? orderby, [FromQuery (Name = "$top")]int? top, [FromQuery (Name = "$skip")]int? skip, [FromQuery (Name = "$count")]bool? count);

        /// <summary>
        /// Retrieve a Warning Work Orders for Location
        /// </summary>
        /// <remarks>Retrieve a Warning Work Orders for Location              &lt;br /&gt;One page contains 50 items by default (\&quot;pageSize\&quot;&#x3D;50). To get next 50 items use the \&quot;page\&quot; parameter (for example page&#x3D;2 and so on).</remarks>
        /// <param name="locationId"></param>
        /// <param name="locationId2"></param>
        /// <param name="problemCode"></param>
        /// <param name="equipment"></param>
        /// <param name="problemType"></param>
        /// <param name="trade"></param>
        /// <param name="completed"></param>
        /// <param name="subscriberId"></param>
        /// <response code="200">OK</response>
        [HttpGet]
        [Route("/v3/locations/{LocationId}/warningworkorders")]
        [ValidateModelState]
        [ProducesResponseType(statusCode: 200, type: typeof(List<SCServiceChannelServicesMessagingWorkordersWorkOrder>))]
        public abstract Task<IActionResult> LocationsLocationIdWarningworkordersProblemCodeProblemCodeEquipmentEquipmentProblemTypeProblemTypeTradeTradeCompletedCompletedSubscriberIdSubscriberId([FromQuery (Name = "locationId")][Required()]string locationId, [FromQuery (Name = "locationId")]int? locationId2, [FromQuery (Name = "problemCode")]string? problemCode, [FromQuery (Name = "equipment")]string? equipment, [FromQuery (Name = "problemType")]string? problemType, [FromQuery (Name = "trade")]string? trade, [FromQuery (Name = "completed")]bool? completed, [FromQuery (Name = "subscriberId")]int? subscriberId);

        /// <summary>
        /// 
        /// </summary>
        /// <param name="locationId"></param>
        /// <response code="200">Indicates that the request succeeded and that the requested information is in the response.</response>
        /// <response code="400">Bad Request - the request could not be understood or was missing required parameters.</response>
        /// <response code="401">Indicates that the requested resource requires authentication.              &lt;br/&gt;Error codes:              &lt;br/&gt; 502 - Location not found;              &lt;br/&gt; 504 - API call rejected by security permissions;</response>
        [HttpGet]
        [Route("/v3/locations/{locationId}/workorders/priorities")]
        [ValidateModelState]
        [ProducesResponseType(statusCode: 200, type: typeof(List<SCServiceChannelServicesMessagingPrioritiesPriorityResponse>))]
        [ProducesResponseType(statusCode: 400, type: typeof(SCServiceChannelServicesMessagingErrorResponse))]
        [ProducesResponseType(statusCode: 401, type: typeof(SCServiceChannelServicesMessagingErrorResponse))]
        public abstract Task<IActionResult> LocationslocationIdWorkordersPriorities([FromRoute (Name = "locationId")][Required]int locationId);

        /// <summary>
        /// Search Work Orders for specified location
        /// </summary>
        /// <remarks>Performs search of workorders by specified filter expression and returns list of work orders with all details.              &lt;br /&gt;One page contains 50 items by default (\&quot;pageSize\&quot;&#x3D;50). To get next 50 items use the \&quot;page\&quot; parameter (for example page&#x3D;2 and so on).</remarks>
        /// <param name="locationId">UID of location.</param>
        /// <param name="storeId">StoreId of location. Used to find location for which search will be performed.</param>
        /// <param name="id">UID of work order, exact search by default</param>
        /// <param name="category">Category of work order, exact search by default</param>
        /// <param name="status">Status of work order, exact search by default</param>
        /// <param name="extendedStatus">Extended status of work order, exact search by default</param>
        /// <param name="number">Work order number, &#39;starts with&#39; search criteria by default</param>
        /// <param name="serviceId">&#39;starts with&#39; search criteria by default</param>
        /// <param name="priority">Priority of work order, exact search by default</param>
        /// <param name="purchaseNumber">Purchase number of work order, &#39;starts with&#39; search criteria by default</param>
        /// <param name="trade">Trade, &#39;starts with&#39; search criteria by default</param>
        /// <param name="scheduledDate">Scheduled date</param>
        /// <param name="expirationDate">Expiration date</param>
        /// <param name="callDate">Call date</param>
        /// <param name="sort">Sort resources by the specified property in the response.</param>
        /// <param name="page">Results page number.</param>
        /// <param name="pageSize">Number of objects on the results page. The default and maximum per page is 50.</param>
        /// <response code="200">Request succeeded and the requested information is in the response.</response>
        /// <response code="400">Bad Request - the request could not be understood or was missing required parameters.              &lt;br/&gt;Error codes:              &lt;br/&gt; 403 - Account has not been activated for GPS use;              &lt;br/&gt; 503 - Validation fails. Request is empty or null;              &lt;br/&gt; 601 - Location Id is invalid;              &lt;br/&gt; 606 - Cannot find location by StoreId;              &lt;br/&gt; 1000 - Invalid Setup Id;</response>
        /// <response code="401">Requested resource requires authentication.              &lt;br/&gt;Error codes:              &lt;br/&gt; 504 - API call rejected by security permissions; </response>
        /// <response code="500">Indicates that a generic error has occurred on the server.              &lt;br/&gt;Error codes:              &lt;br/&gt; 501 - Timeout expired. The timeout period elapsed prior to completion of the operation or the server is not responding.</response>
        [HttpGet]
        [Route("/v3/locations/{locationId}/workorders")]
        [ValidateModelState]
        [ProducesResponseType(statusCode: 200, type: typeof(List<SCServiceChannelServicesMessagingWorkordersWorkOrder>))]
        [ProducesResponseType(statusCode: 400, type: typeof(SCServiceChannelServicesMessagingErrorResponse))]
        [ProducesResponseType(statusCode: 401, type: typeof(SCServiceChannelServicesMessagingErrorResponse))]
        [ProducesResponseType(statusCode: 500, type: typeof(SCServiceChannelServicesMessagingErrorResponse))]
        public abstract Task<IActionResult> LocationslocationIdWorkordersstoreIdstoreId([FromRoute (Name = "locationId")][Required]int locationId, [FromQuery (Name = "storeId")]string? storeId, [FromQuery (Name = "id")]List<Object>? id, [FromQuery (Name = "category")]List<Object>? category, [FromQuery (Name = "status")]List<Object>? status, [FromQuery (Name = "extendedStatus")]List<Object>? extendedStatus, [FromQuery (Name = "number")]List<Object>? number, [FromQuery (Name = "serviceId")]List<Object>? serviceId, [FromQuery (Name = "priority")]List<Object>? priority, [FromQuery (Name = "purchaseNumber")]List<Object>? purchaseNumber, [FromQuery (Name = "trade")]List<Object>? trade, [FromQuery (Name = "scheduledDate")]List<Object>? scheduledDate, [FromQuery (Name = "expirationDate")]List<Object>? expirationDate, [FromQuery (Name = "callDate")]List<Object>? callDate, [FromQuery (Name = "sort")]string? sort, [FromQuery (Name = "page")]int? page, [FromQuery (Name = "pageSize")]int? pageSize);

        /// <summary>
        /// Retrieve work orders
        /// </summary>
        /// <remarks>Returns a list of work orders created within the last 90 days if not specified otherwise in &#x60;$filter&#x60;. The maximum date range between the work order &#x60;CallDate&#x60; and the current date is 365 days.              &lt;br /&gt;The default number of work orders in the response is 50. To retrieve more work orders, use the &#x60;$skip&#x60; parameter.              &lt;br /&gt;***Note***: You can also get a list of work orders by using one of the following methods: [GET /odata/workorders](https://developer.servicechannel.com/swagger/ui/index?version&#x3D;3#/WorkOrders/WorkOrders_GetWorkOrders), [GET /workorders](https://developer.servicechannel.com/swagger/ui/index?version&#x3D;3#/WorkOrders/GETv3_workorders_locationId__locationId__storeId__storeId_).              &lt;param name&#x3D;\&quot;request\&quot;&gt;&lt;/param&gt;</remarks>
        /// <param name="request"></param>
        /// <response code="200">The list of work orders is in the response.</response>
        /// <response code="401">The request is not authorized.              &lt;br/&gt;Error codes:              504 — API call rejected by security permissions</response>
        /// <response code="406">The request is already processed.</response>
        /// <response code="500">The server was unable to complete the request due to an internal error.              &lt;br/&gt;Error codes:              501 — Object reference is not set to an instance of an object</response>
        [HttpPost]
        [Route("/v3/odata/workorders/filter")]
        [Consumes("application/json", "text/json", "application/xml", "text/xml", "application/x-www-form-urlencoded")]
        [ValidateModelState]
        [ProducesResponseType(statusCode: 200, type: typeof(List<SCServiceChannelServicesMessagingWorkordersWorkOrder>))]
        [ProducesResponseType(statusCode: 401, type: typeof(SCServiceChannelServicesMessagingErrorResponse))]
        [ProducesResponseType(statusCode: 406, type: typeof(SCServiceChannelServicesMessagingErrorResponse))]
        [ProducesResponseType(statusCode: 500, type: typeof(SCServiceChannelServicesMessagingErrorResponse))]
        public abstract Task<IActionResult> OdataWorkordersFilter([FromBody]SCServiceChannelServicesMessagingODataRequest request);

        /// <summary>
        /// 
        /// </summary>
        /// <param name="subscriberId"></param>
        /// <param name="workorderId"></param>
        /// <response code="200">OK</response>
        /// <response code="404">Indicates that the requested resource does not exist on the server.</response>
        [HttpPut]
        [Route("/v3/subscribers/{subscriberId}/workorders/{workorderId}/reassign")]
        [ValidateModelState]
        [ProducesResponseType(statusCode: 200, type: typeof(Object))]
        public abstract Task<IActionResult> SubscriberssubscriberIdWorkordersworkorderIdReassign([FromRoute (Name = "subscriberId")][Required]int subscriberId, [FromRoute (Name = "workorderId")][Required]int workorderId);

        /// <summary>
        /// Create a Work order
        /// </summary>
        /// <remarks>Creates a new Work order. Returns Work order Id for successful request.              &lt;br /&gt;Available for provider and subscriber usage.              &lt;br /&gt;Additional info:              &lt;br /&gt;Updates GL code based on passed Category param according to settings in Admin module {go to Admin &#x3D;&amp;gt; Accounting &#x3D;&amp;gt; GlCodes to see user GL codes}.              Similar logic is used when you create Work order through next path: Dashboard &#x3D;&amp;gt; Request Service.</remarks>
        /// <param name="request">A new Work order</param>
        /// <response code="201">Created indicates that the request resulted in a new resource created before the response was sent.</response>
        /// <response code="400">Bad Request - the request could not be understood or was missing required parameters.              &lt;br/&gt;Error codes:              &lt;br/&gt; 100 - No provider was found for specified location and trade;              &lt;br/&gt; 300 - Missed contract data;              &lt;br/&gt; 301 - Contract not found for specified subscribers location, provider and trade;              &lt;br/&gt; 400 - Invalid Subscriber Id specified;              &lt;br/&gt; 503 - Work order cannot be created, provider could not be determined (missing providerID or IssueRequestInfo);              &lt;br/&gt; 600 - Invalid Location Id specified;              &lt;br/&gt; 603 - Subscriber has no specified Location;              &lt;br/&gt; 700 - Invalid Trade Name specified;              &lt;br/&gt; 702 - Subscriber has no specified Trade;              &lt;br/&gt; 800 - Missed required argument &#39;UserId&#39;;              &lt;br/&gt; 801 - Missed required argument &#39;CreatedBy&#39;;              &lt;br/&gt; 900 - Missed problem description options;              &lt;br/&gt; 901 - Missed required argument &#39;ProblemSource&#39;;              &lt;br/&gt; 902 - Missed required argument &#39;Description&#39;;              &lt;br/&gt; 903 - Missed required argument &#39;ProblemCode&#39;;              &lt;br/&gt; 904 - Invalid WorkOrder status;              &lt;br/&gt; 905 - Invalid &#39;Nte&#39; value;              &lt;br/&gt; 906 - Invalid &#39;CallerName&#39; value;              &lt;br/&gt; 907 - Invalid &#39;CallDate&#39; value;              &lt;br/&gt; 908 - Invalid &#39;ScheduledDate&#39; value;              &lt;br/&gt; 909 - Invalid &#39;ScheduledDate&#39;, greater than max allowed by subscriber;              &lt;br/&gt; 910 - Missed required argument &#39;Category&#39;;              &lt;br/&gt; 911 - Invalid &#39;Category&#39;;              &lt;br/&gt; 912 - Missed required argument &#39;Priority&#39;;              &lt;br/&gt; 913 - Invalid &#39;Priority&#39;;              &lt;br/&gt; 914 - Invalid &#39;Currency&#39; value;              &lt;br/&gt; 915 - Invalid Setup Id;              &lt;br/&gt; 916 - At least one attachment required to create this WorkOrder;              &lt;br/&gt; 918 - Assets required to create this WorkOrder;</response>
        /// <response code="401">Indicates that the requested resource requires authentication.              &lt;br/&gt;Error codes:              &lt;br/&gt; 504 - API call rejected by security permissions;</response>
        /// <response code="500">Indicates that a generic error has occurred on the server.              &lt;br/&gt;Error codes:              &lt;br/&gt; 501 - Sequence contains no elements</response>
        [HttpPost]
        [Route("/v3/workorders")]
        [Consumes("application/json", "text/json", "application/xml", "text/xml", "application/x-www-form-urlencoded")]
        [ValidateModelState]
        [ProducesResponseType(statusCode: 400, type: typeof(SCServiceChannelServicesMessagingErrorResponse))]
        [ProducesResponseType(statusCode: 401, type: typeof(SCServiceChannelServicesMessagingErrorResponse))]
        [ProducesResponseType(statusCode: 500, type: typeof(SCServiceChannelServicesMessagingErrorResponse))]
        public abstract Task<IActionResult> Workorders([FromBody]SCServiceChannelServicesMessagingWorkordersCreateWoRequest request);

        /// <summary>
        /// Categories Collection
        /// </summary>
        /// <remarks>Retrieves list of all Work order categories.</remarks>
        /// <param name="subscriberId">This parameter is required only for provider.</param>
        /// <param name="sortExpr">Gets or sets sort expression.</param>
        /// <response code="200">Indicates that the request succeeded and that the requested information is in the response.</response>
        /// <response code="400">Bad Request - the request could not be understood or was missing required parameters.              &lt;br/&gt;Error codes:              &lt;br/&gt; 503 - Request data is empty;              &lt;br/&gt;SubscriberId is incorrect;</response>
        /// <response code="401">Indicates that the requested resource requires authentication.              &lt;br/&gt;Error codes:              &lt;br/&gt; 504 - API call rejected by security permissions;</response>
        [HttpGet]
        [Route("/v3/workorders/categories")]
        [ValidateModelState]
        [ProducesResponseType(statusCode: 200, type: typeof(List<SCServiceChannelServicesMessagingCategoryCategoryResponse>))]
        [ProducesResponseType(statusCode: 400, type: typeof(SCServiceChannelServicesMessagingErrorResponse))]
        [ProducesResponseType(statusCode: 401, type: typeof(SCServiceChannelServicesMessagingErrorResponse))]
        public abstract Task<IActionResult> WorkordersCategoriesSubscriberIdSubscriberIdSortExprSortExpr([FromQuery (Name = "subscriberId")]int? subscriberId, [FromQuery (Name = "sortExpr")]string? sortExpr);

        /// <summary>
        /// Get work orders feedbacks
        /// </summary>
        /// <param name="workOrdersIds"></param>
        /// <response code="200">Indicates that the request succeeded.</response>
        /// <response code="400">Bad Request - the request could not be understood or was missing required parameters.</response>
        /// <response code="401">Indicates that the requested resource requires authentication.&lt;br&gt;Error codes:&lt;br&gt; 504 - API call rejected by security permissions;</response>
        [HttpGet]
        [Route("/v3/workorders/feedback/list")]
        [ValidateModelState]
        [ProducesResponseType(statusCode: 400, type: typeof(SCServiceChannelServicesMessagingErrorResponse))]
        [ProducesResponseType(statusCode: 401, type: typeof(SCServiceChannelServicesMessagingErrorResponse))]
        public abstract Task<IActionResult> WorkordersFeedbackListworkOrdersIds0workOrdersIds0workOrdersIds1workOrdersIds1([FromQuery (Name = "workOrdersIds")][Required()]List<int> workOrdersIds);

        /// <summary>
        /// Add Empty Survey for Work Order Completion
        /// </summary>
        /// <param name="request">The request model to perform action with.</param>
        /// <response code="201">Indicates that the request succeeded.</response>
        [HttpPost]
        [Route("/v3/workorders/handlewocompletionforsurvey")]
        [Consumes("application/json", "text/json", "application/xml", "text/xml", "application/x-www-form-urlencoded")]
        [ValidateModelState]
        public abstract Task<IActionResult> WorkordersHandlewocompletionforsurvey([FromBody]SCServiceChannelServicesMessagingWorkordersWorkorderNotificationObject request);

        /// <summary>
        /// Verify if refrigerant certificat is associated with WOs
        /// </summary>
        /// <param name="certificateId">Numeric Id of the technician certificatite</param>
        /// <response code="200">Refrigerant certification is verified.</response>
        /// <response code="400">Bad Request - the request could not be understood or was missing required parameters.</response>
        /// <response code="401">The request is not authorized.              &lt;br/&gt;Error codes:              504 — API call rejected by security permissions</response>
        /// <response code="500">Something went wrong, and the server was unable to complete your request.              &lt;br/&gt;Error codes:              501 — Internal Error</response>
        [HttpGet]
        [Route("/v3/workorders/isTechnicianCertificateUsedOnWorkOrders")]
        [ValidateModelState]
        [ProducesResponseType(statusCode: 200, type: typeof(bool))]
        [ProducesResponseType(statusCode: 400, type: typeof(SCServiceChannelServicesMessagingErrorResponse))]
        [ProducesResponseType(statusCode: 401, type: typeof(SCServiceChannelServicesMessagingErrorResponse))]
        [ProducesResponseType(statusCode: 500, type: typeof(SCServiceChannelServicesMessagingErrorResponse))]
        public abstract Task<IActionResult> WorkordersIsTechnicianCertificateUsedOnWorkOrderscertificateIdcertificateId([FromQuery (Name = "certificateId")][Required()]int certificateId);

        /// <summary>
        /// Get work orders labels.
        /// </summary>
        /// <param name="keyword">Keyword contained in labels to perform the search by.</param>
        /// <param name="page">Results page number. Page number for pagination is 1-based.</param>
        /// <param name="pageSize">Number of labels on the results page.</param>
        /// <response code="200">Indicates that the request succeeded and that the requested information is in the response.</response>
        /// <response code="400">Bad Request - the request could not be understood or was missing required parameters.</response>
        /// <response code="401">Indicates that the requested resource requires authentication.              &lt;br/&gt;Error codes:              &lt;br/&gt; 504 - API call rejected by security permissions;</response>
        [HttpGet]
        [Route("/v3/workorders/label")]
        [ValidateModelState]
        [ProducesResponseType(statusCode: 200, type: typeof(List<SCServiceChannelServicesMessagingWorkordersGetWorkOrderLabelResponse>))]
        [ProducesResponseType(statusCode: 400, type: typeof(SCServiceChannelServicesMessagingErrorResponse))]
        [ProducesResponseType(statusCode: 401, type: typeof(SCServiceChannelServicesMessagingErrorResponse))]
        public abstract Task<IActionResult> WorkordersLabelkeywordkeywordpagepagepageSizepageSize([FromQuery (Name = "keyword")]string? keyword, [FromQuery (Name = "page")]int? page, [FromQuery (Name = "pageSize")]int? pageSize);

        /// <summary>
        /// Create Priority
        /// </summary>
        /// <remarks>Creates Priority.</remarks>
        /// <param name="request">The request model to perform action with.</param>
        /// <response code="201">Indicates that the request succeeded.</response>
        /// <response code="400">Bad Request - the request could not be understood or was missing required parameters.</response>
        /// <response code="401">Indicates that the requested resource requires authentication.              &lt;br/&gt;Error codes:              &lt;br/&gt; 504 - API call rejected by security permissions;</response>
        [HttpPost]
        [Route("/v3/workorders/priorities")]
        [Consumes("application/json", "text/json", "application/xml", "text/xml", "application/x-www-form-urlencoded")]
        [ValidateModelState]
        [ProducesResponseType(statusCode: 201, type: typeof(List<SCServiceChannelServicesMessagingPrioritiesAddPriorityResponse>))]
        [ProducesResponseType(statusCode: 400, type: typeof(SCServiceChannelServicesMessagingErrorResponse))]
        [ProducesResponseType(statusCode: 401, type: typeof(SCServiceChannelServicesMessagingErrorResponse))]
        public abstract Task<IActionResult> WorkordersPriorities([FromBody]SCServiceChannelServicesMessagingPrioritiesAddPriorityRequest request);

        /// <summary>
        /// Priorities Collection
        /// </summary>
        /// <remarks>Retrieves list of all Work order priorities in user settings.</remarks>
        /// <param name="subscriberId">This parameter is required only for provider.</param>
        /// <response code="200">Indicates that the request succeeded and that the requested information is in the response.</response>
        /// <response code="400">Bad Request - the request could not be understood or was missing required parameters.</response>
        /// <response code="401">Indicates that the requested resource requires authentication.              &lt;br/&gt;Error codes:              &lt;br/&gt; 504 - API call rejected by security permissions;</response>
        [HttpGet]
        [Route("/v3/workorders/priorities")]
        [ValidateModelState]
        [ProducesResponseType(statusCode: 200, type: typeof(List<SCServiceChannelServicesMessagingPrioritiesPriorityResponse>))]
        [ProducesResponseType(statusCode: 400, type: typeof(SCServiceChannelServicesMessagingErrorResponse))]
        [ProducesResponseType(statusCode: 401, type: typeof(SCServiceChannelServicesMessagingErrorResponse))]
        public abstract Task<IActionResult> WorkordersPrioritiessubscriberIdsubscriberId([FromQuery (Name = "subscriberId")]int? subscriberId);

        /// <summary>
        /// Retrieve a Provider
        /// </summary>
        /// <remarks>A single Provider object with all its details.</remarks>
        /// <param name="workorderId">Numeric Id of the Work order to perform action with.</param>
        /// <param name="providerId">Numeric Id of the previously assigned Provider.</param>
        /// <param name="locationId">Numeric Id of the Location.</param>
        /// <param name="trade">Trade.</param>
        /// <response code="204">Indicates that the request has been successfully processed and that the response is intentionally blank.</response>
        /// <response code="400">Bad Request - the request could not be understood or was missing required parameters.              &lt;br/&gt;Error codes:              &lt;br/&gt; 503 - Request data is empty;</response>
        /// <response code="401">Indicates that the requested resource requires authentication.              &lt;br/&gt;Error codes:              &lt;br/&gt; 504 - API call rejected by security permissions;</response>
        [HttpGet]
        [Route("/v3/workorders/providerforreassignment")]
        [ValidateModelState]
        [ProducesResponseType(statusCode: 400, type: typeof(SCServiceChannelServicesMessagingErrorResponse))]
        [ProducesResponseType(statusCode: 401, type: typeof(SCServiceChannelServicesMessagingErrorResponse))]
        public abstract Task<IActionResult> WorkordersProviderforreassignmentworkorderIdworkorderIdproviderIdproviderIdlocationIdlocationIdtradetrade([FromQuery (Name = "workorderId")][Required()]int workorderId, [FromQuery (Name = "providerId")][Required()]int providerId, [FromQuery (Name = "locationId")][Required()]int locationId, [FromQuery (Name = "trade")][Required()]string trade);

        /// <summary>
        /// Work order reassignment reasons
        /// </summary>
        /// <remarks>List Work order reassignment reasons.              &lt;br /&gt;&lt;br /&gt;Available for provider and subscriber usage.              &lt;br /&gt;&lt;br /&gt;SubscriberId is used to determine provider access to the action (&#39;WorkOrderReassign&#39; EffectiveProviderPermissions, calculated flag. Calculated by ProviderAuthorizationHandler)</remarks>
        /// <param name="subscriberId">This parameter is required only for provider.</param>
        /// <response code="200">Indicates that the request succeeded and that the requested information is in the response.</response>
        /// <response code="400">Bad Request - the request could not be understood or was missing required parameters.</response>
        /// <response code="401">Indicates that the requested resource requires authentication.              &lt;br/&gt;Error codes:              &lt;br/&gt; 504 - API call rejected by security permissions;</response>
        /// <response code="403">Indicates that the server refuses to fulfill the request.              &lt;br/&gt; Error codes:              &lt;br/&gt; 804 - API call rejected by lack of provider permissions;</response>
        [HttpGet]
        [Route("/v3/workorders/reassign/reasons")]
        [ValidateModelState]
        [ProducesResponseType(statusCode: 200, type: typeof(List<SCServiceChannelServicesMessagingWorkordersWorkOrderReassignmentReason>))]
        [ProducesResponseType(statusCode: 400, type: typeof(SCServiceChannelServicesMessagingErrorResponse))]
        [ProducesResponseType(statusCode: 401, type: typeof(SCServiceChannelServicesMessagingErrorResponse))]
        [ProducesResponseType(statusCode: 403, type: typeof(SCServiceChannelServicesMessagingErrorResponse))]
        public abstract Task<IActionResult> WorkordersReassignReasonssubscriberIdsubscriberId([FromQuery (Name = "subscriberId")]int? subscriberId);

        /// <summary>
        /// Submit solved issue during troubleshooting
        /// </summary>
        /// <param name="model"></param>
        /// <response code="201">Indicates that the request has succeeded and has led to the creation of a resource.</response>
        /// <response code="400">Bad Request - the request could not be understood or was missing required parameters.              &lt;br/&gt;Error codes:              &lt;br/&gt; 503 - Request data is empty;</response>
        /// <response code="401">Indicates that the requested resource requires authentication.              &lt;br/&gt;Error codes:              &lt;br/&gt; 504 - API call rejected by security permissions;</response>
        /// <response code="404">Indicates that the requested resource does not exist on the server.</response>
        [HttpPost]
        [Route("/v3/workorders/solvedissue")]
        [Consumes("application/json", "text/json", "application/xml", "text/xml", "application/x-www-form-urlencoded")]
        [ValidateModelState]
        [ProducesResponseType(statusCode: 400, type: typeof(SCServiceChannelServicesMessagingErrorResponse))]
        [ProducesResponseType(statusCode: 401, type: typeof(SCServiceChannelServicesMessagingErrorResponse))]
        public abstract Task<IActionResult> WorkordersSolvedissue([FromBody]SCServiceChannelServicesMessagingWorkordersDashboardRequestsSubmitSolvedIssueModel model);

        /// <summary>
        /// Starred Work Order Ids Collection
        /// </summary>
        /// <remarks>Retrieves list of work order ids starred by the current user.</remarks>
        /// <response code="200">Indicates that the request succeeded and that the requested information is in the response.</response>
        /// <response code="400">Bad Request - the request could not be understood or was missing required parameters.</response>
        /// <response code="401">Indicates that the requested resource requires authentication.               &lt;br/&gt;Error codes:               &lt;br/&gt; 504 - API call rejected by security permissions;</response>
        [HttpGet]
        [Route("/v3/workorders/starred")]
        [ValidateModelState]
        [ProducesResponseType(statusCode: 200, type: typeof(List<int>))]
        [ProducesResponseType(statusCode: 400, type: typeof(SCServiceChannelServicesMessagingErrorResponse))]
        [ProducesResponseType(statusCode: 401, type: typeof(SCServiceChannelServicesMessagingErrorResponse))]
        public abstract Task<IActionResult> WorkordersStarred();

        /// <summary>
        /// Statistics Collection
        /// </summary>
        /// <remarks>Retrieves list of all Work order Statistics. Only for providers usage.</remarks>
        /// <param name="daysPeriod">Days Period to perform action with (30 by default).</param>
        /// <response code="200">Indicates that the request succeeded and that the requested information is in the response.</response>
        /// <response code="400">Bad Request - the request could not be understood or was missing required parameters.              &lt;br/&gt;Error codes:              &lt;br/&gt; 503 - Only for providers usage;&lt;br&gt;Request data is empty;</response>
        /// <response code="401">Indicates that the requested resource requires authentication.              &lt;br/&gt;Error codes:              &lt;br/&gt; 504 - API call rejected by security permissions;</response>
        [HttpGet]
        [Route("/v3/workorders/statistics")]
        [ValidateModelState]
        [ProducesResponseType(statusCode: 200, type: typeof(SCServiceChannelServicesMessagingWorkordersWorkOrderStatisticsResponse))]
        [ProducesResponseType(statusCode: 400, type: typeof(SCServiceChannelServicesMessagingErrorResponse))]
        [ProducesResponseType(statusCode: 401, type: typeof(SCServiceChannelServicesMessagingErrorResponse))]
        public abstract Task<IActionResult> WorkordersStatisticsdaysPerioddaysPeriod([FromQuery (Name = "daysPeriod")]int? daysPeriod);

        /// <summary>
        /// Statuses Collection
        /// </summary>
        /// <remarks>Retrieves list of available Work order statuses. Id value can be used instead of primary status name in Update Status method.</remarks>
        /// <param name="subscriberId">This parameter is required only for provider.</param>
        /// <param name="tradeId">Optional, if LimitStatusesByTrade FF is on</param>
        /// <response code="200">Indicates that the request succeeded and that the requested information is in the response.</response>
        /// <response code="400">Bad Request - the request could not be understood or was missing required parameters.</response>
        /// <response code="401">Indicates that the requested resource requires authentication.              &lt;br/&gt;Error codes:              &lt;br/&gt; 504 - API call rejected by security permissions;</response>
        [HttpGet]
        [Route("/v3/workorders/statuses")]
        [ValidateModelState]
        [ProducesResponseType(statusCode: 200, type: typeof(List<SCServiceChannelServicesMessagingWorkordersGetStatusResponse>))]
        [ProducesResponseType(statusCode: 400, type: typeof(SCServiceChannelServicesMessagingErrorResponse))]
        [ProducesResponseType(statusCode: 401, type: typeof(SCServiceChannelServicesMessagingErrorResponse))]
        public abstract Task<IActionResult> WorkordersStatusessubscriberIdsubscriberIdtradeIdtradeId([FromQuery (Name = "subscriberId")]int? subscriberId, [FromQuery (Name = "tradeId")]int? tradeId);

        /// <summary>
        /// Search Work Orders
        /// </summary>
        /// <remarks>Performs search of workorders by specified filter expression and returns list of work orders with all details.              &lt;br /&gt;One page contains 50 items by default (\&quot;pageSize\&quot;&#x3D;50). To get next 50 items use the \&quot;page\&quot; parameter (for example page&#x3D;2 and so on).</remarks>
        /// <param name="locationId">UID of location.</param>
        /// <param name="storeId">StoreId of location. Used to find location for which search will be performed.</param>
        /// <param name="otherLocationId">UID of location, exact search by default</param>
        /// <param name="id">UID of work order, exact search by default</param>
        /// <param name="category">Category of work order, exact search by default</param>
        /// <param name="status">Status of work order, exact search by default</param>
        /// <param name="extendedStatus">Extended status of work order, exact search by default</param>
        /// <param name="number">Work order number, &#39;starts with&#39; search criteria by default</param>
        /// <param name="serviceId">&#39;starts with&#39; search criteria by default</param>
        /// <param name="priority">Priority of work order, exact search by default</param>
        /// <param name="purchaseNumber">Purchase number of work order, &#39;starts with&#39; search criteria by default</param>
        /// <param name="trade">Trade, &#39;starts with&#39; search criteria by default</param>
        /// <param name="scheduledDate">Scheduled date</param>
        /// <param name="expirationDate">Expiration date</param>
        /// <param name="callDate">Call date</param>
        /// <param name="sort">Sort resources by the specified property in the response.</param>
        /// <param name="page">Results page number.</param>
        /// <param name="pageSize">Number of objects on the results page. The default and maximum per page is 50.</param>
        /// <response code="200">Request succeeded and the requested information is in the response.</response>
        /// <response code="400">Bad Request - the request could not be understood or was missing required parameters.              &lt;br/&gt;Error codes:              &lt;br/&gt; 403 - Account has not been activated for GPS use;              &lt;br/&gt; 503 - Validation fails. Request is empty or null;              &lt;br/&gt; 601 - Location Id is invalid;              &lt;br/&gt; 606 - Cannot find location by StoreId;              &lt;br/&gt; 1000 - Invalid Setup Id;</response>
        /// <response code="401">Requested resource requires authentication.              &lt;br/&gt;Error codes:              &lt;br/&gt; 504 - API call rejected by security permissions; </response>
        /// <response code="500">Indicates that a generic error has occurred on the server.              &lt;br/&gt;Error codes:              &lt;br/&gt; 501 - Timeout expired. The timeout period elapsed prior to completion of the operation or the server is not responding.</response>
        [HttpGet]
        [Route("/v3/workorders")]
        [ValidateModelState]
        [ProducesResponseType(statusCode: 200, type: typeof(List<SCServiceChannelServicesMessagingWorkordersWorkOrder>))]
        [ProducesResponseType(statusCode: 400, type: typeof(SCServiceChannelServicesMessagingErrorResponse))]
        [ProducesResponseType(statusCode: 401, type: typeof(SCServiceChannelServicesMessagingErrorResponse))]
        [ProducesResponseType(statusCode: 500, type: typeof(SCServiceChannelServicesMessagingErrorResponse))]
        public abstract Task<IActionResult> WorkorderslocationIdlocationIdstoreIdstoreId([FromQuery (Name = "locationId")]int? locationId, [FromQuery (Name = "storeId")]string? storeId, [FromQuery (Name = "otherLocationId")]List<Object>? otherLocationId, [FromQuery (Name = "id")]List<Object>? id, [FromQuery (Name = "category")]List<Object>? category, [FromQuery (Name = "status")]List<Object>? status, [FromQuery (Name = "extendedStatus")]List<Object>? extendedStatus, [FromQuery (Name = "number")]List<Object>? number, [FromQuery (Name = "serviceId")]List<Object>? serviceId, [FromQuery (Name = "priority")]List<Object>? priority, [FromQuery (Name = "purchaseNumber")]List<Object>? purchaseNumber, [FromQuery (Name = "trade")]List<Object>? trade, [FromQuery (Name = "scheduledDate")]List<Object>? scheduledDate, [FromQuery (Name = "expirationDate")]List<Object>? expirationDate, [FromQuery (Name = "callDate")]List<Object>? callDate, [FromQuery (Name = "sort")]string? sort, [FromQuery (Name = "page")]int? page, [FromQuery (Name = "pageSize")]int? pageSize);

        /// <summary>
        /// Accept a work order
        /// </summary>
        /// <remarks>Allows a provider to accept a work order with an optional note.              &lt;br /&gt;When a work order is successfully accepted, it changes its status from *Open* to *In Progress / Dispatch Confirmed*.               &lt;br /&gt;***Note***: Providers only can use this method.</remarks>
        /// <param name="workOrderId">Unique numeric identifier of the work order.</param>
        /// <param name="request">Request to add a note to the work order while accepting it.</param>
        /// <response code="200">Work order is successfully accepted.</response>
        /// <response code="400">The request was not accepted due to bad syntax, missing parameters, insufficient data, etc.                &lt;br/&gt;Error codes:              502 &amp;mdash; Work order is not found              804 &amp;mdash; User has no permission to perform this action               904 &amp;mdash; Work order is in status that does not allow to perform this action               5202 &amp;mdash; This work order was already accepted              5203 &amp;mdash; Acceptance of the work order failed</response>
        /// <response code="401">The requested resource requires authentication.              &lt;br/&gt;Error codes:              504 &amp;mdash; API call rejected by security permissions</response>
        /// <response code="404">Invalid work order ID.</response>
        /// <response code="500">Something went wrong, and the server was unable to complete your request. </response>
        [HttpPut]
        [Route("/v3/workorders/{workOrderId}/accept")]
        [Consumes("application/json", "text/json", "application/xml", "text/xml", "application/x-www-form-urlencoded")]
        [ValidateModelState]
        [ProducesResponseType(statusCode: 400, type: typeof(SCServiceChannelServicesMessagingErrorResponse))]
        [ProducesResponseType(statusCode: 401, type: typeof(SCServiceChannelServicesMessagingErrorResponse))]
        [ProducesResponseType(statusCode: 404, type: typeof(SCServiceChannelServicesMessagingErrorResponse))]
        [ProducesResponseType(statusCode: 500, type: typeof(SCServiceChannelServicesMessagingErrorResponse))]
        public abstract Task<IActionResult> WorkordersworkOrderIdAccept([FromRoute (Name = "workOrderId")][Required]int workOrderId, [FromBody]SCServiceChannelServicesMessagingWorkordersAcceptWorkOrderRequest request);

        /// <summary>
        /// Get analytics on a work order
        /// </summary>
        /// <remarks>Retrieves analytics on the specified work order.               &lt;br /&gt;Analytics are based on the following flags:                • **IVR**. Tracks the proper Check-In/Out process and indicates whether the work order has both Check-In and Check-Out records and completes with a Check-Out.                • **SLA**. Tracks estimated time of arrival (ETA) and indicates whether the work order met the original ETA.                • **FirstTimeCompletionFlag**. Indicates whether the work order was completed on the first visit (the work order has only one Check-In and one Check-Out records within 24 hours).               &lt;br /&gt;***Note***: You can get analytics from any work order. However, the analytics are mostly relevant for the work orders in the **Completed** status, as these flags rest on the Check-In/Out information.</remarks>
        /// <param name="workOrderId">Unique numeric identifier of the work order to get analytics from.</param>
        /// <response code="200">Analytics on the specified work order are in the response.</response>
        /// <response code="401">The request is not authorized.              &lt;br/&gt;Error codes:              504 — API call rejected by security permissions</response>
        /// <response code="404">The request URI is incorrect, or the resource does not exist.              &lt;br/&gt;Error codes:               502 — Data not found              The resource you are looking for has been removed, had its name changed, or is temporarily unavailable</response>
        /// <response code="500">Something went wrong, and the server was unable to complete your request.              &lt;br/&gt;Error codes:              501 — Internal Error</response>
        [HttpGet]
        [Route("/v3/workorders/{workOrderId}/analytics")]
        [ValidateModelState]
        [ProducesResponseType(statusCode: 200, type: typeof(SCServiceChannelServicesMessagingWorkordersWorkOrderAnalyticsResponse))]
        [ProducesResponseType(statusCode: 401, type: typeof(SCServiceChannelServicesMessagingErrorResponse))]
        [ProducesResponseType(statusCode: 500, type: typeof(SCServiceChannelServicesMessagingErrorResponse))]
        public abstract Task<IActionResult> WorkordersworkOrderIdAnalytics([FromRoute (Name = "workOrderId")][Required]int workOrderId);

        /// <summary>
        /// Get checklist responses for a work order
        /// </summary>
        /// <remarks>[Returns checklist responses](https://developer.servicechannel.com/guides/checklists/get-checklist-responses-for-a-wo/) submitted for the specified work order.</remarks>
        /// <param name="workOrderId">Unique identifier of the work order to return checklist responses for.</param>
        /// <param name="getAll">Flag to get responses from all completed checklists.</param>
        /// <response code="200">Checklist responses for the specified work order are returned.</response>
        /// <response code="400">The request is not accepted due to bad syntax, missing parameters, insufficient data, etc.              &lt;br/&gt;Error codes:              502 — Work order is not found</response>
        /// <response code="401">The request is not authorized.              &lt;br/&gt;Error codes:              504 — API call rejected by security permissions</response>
        /// <response code="500">The server was unable to complete the request due to an internal error.</response>
        [HttpGet]
        [Route("/v3/workorders/{workOrderId}/checklists-responses")]
        [ValidateModelState]
        [ProducesResponseType(statusCode: 200, type: typeof(SCServiceChannelServicesMessagingCheckListDetailsGetResponsesByWorkOrderResponse))]
        [ProducesResponseType(statusCode: 400, type: typeof(SCServiceChannelServicesMessagingErrorResponse))]
        [ProducesResponseType(statusCode: 401, type: typeof(SCServiceChannelServicesMessagingErrorResponse))]
        [ProducesResponseType(statusCode: 500, type: typeof(SCServiceChannelServicesMessagingErrorResponse))]
        public abstract Task<IActionResult> WorkordersworkOrderIdChecklistsResponsesgetAllgetAll([FromRoute (Name = "workOrderId")][Required]int workOrderId, [FromQuery (Name = "getAll")]bool? getAll);

        /// <summary>
        /// Decline a work order
        /// </summary>
        /// <remarks>Allows a provider to decline a work order with a note.               &lt;br /&gt;When a provider declines a work order, the order changes its status from *Open* to *Open / Declined* or becomes automatically reassigned to another provider if the *WOMultipleAutoReassign* feature flag is turned on for the subscriber.               &lt;br /&gt;***Note***: Providers only can use this method.</remarks>
        /// <param name="workOrderId">Unique numeric identifier of the work order.</param>
        /// <param name="request">Request to add information about the work order decline.               &lt;br /&gt;Required parameters:                • &#x60;DeclineReasonId&#x60; (if the *DeclineHistoryWO* feature flag is on)               • &#x60;CustomDeclineReason&#x60; (if the decline reason has &#x60;AskCustomReason&#x60;&#x3D;true)</param>
        /// <response code="200">Work order is declined.</response>
        /// <response code="400">The request was not accepted due to bad syntax, missing parameters, insufficient data, etc.              &lt;br/&gt;Error codes:              502 &amp;mdash; Work order is not found              804 &amp;mdash; User has no permission to perform this action              904 &amp;mdash; Work order is in status that does not allow to perform this action              5201 &amp;mdash; Work order decline failed              9002 &amp;mdash; This decline reason does not allow custom text              9003 &amp;mdash; Invalid decline reason ID</response>
        /// <response code="401">The requested resource requires authentication.               &lt;br/&gt;Error codes:              504 &amp;mdash; API call rejected by security permissions</response>
        /// <response code="500">Something went wrong, and the server was unable to complete your request.</response>
        [HttpPut]
        [Route("/v3/workorders/{workOrderId}/decline")]
        [Consumes("application/json", "text/json", "application/xml", "text/xml", "application/x-www-form-urlencoded")]
        [ValidateModelState]
        [ProducesResponseType(statusCode: 400, type: typeof(SCServiceChannelServicesMessagingErrorResponse))]
        [ProducesResponseType(statusCode: 401, type: typeof(SCServiceChannelServicesMessagingErrorResponse))]
        [ProducesResponseType(statusCode: 500, type: typeof(SCServiceChannelServicesMessagingErrorResponse))]
        public abstract Task<IActionResult> WorkordersworkOrderIdDecline([FromRoute (Name = "workOrderId")][Required]int workOrderId, [FromBody]SCServiceChannelServicesMessagingWorkordersDeclineWorkOrderRequest request);

        /// <summary>
        /// Retrieve the leak detection result in a Work Order
        /// </summary>
        /// <remarks>Return the answer to the question did you find a leak on the specified work order:               • &#x60;null&#x60;: There is no information about the detected leak.               • &#x60;true&#x60;: The answer to the question did you find a leak is Yes.               • &#x60;false&#x60;: The answer to the question did you find a leak is No.</remarks>
        /// <param name="workOrderId">The unique numeric identifier of the work order.</param>
        /// <response code="200">Indicates that the request succeeded and that the requested information is in the response.</response>
        /// <response code="401">The request is not authorized.&lt;br/&gt;&lt;br/&gt;Error codes:&lt;br/&gt;504 — API call rejected by security permissions</response>
        /// <response code="404">The requested resource does not exist on the server.</response>
        [HttpGet]
        [Route("/v3/workorders/{workOrderId}/leakWasDetected")]
        [ValidateModelState]
        [ProducesResponseType(statusCode: 200, type: typeof(bool))]
        [ProducesResponseType(statusCode: 401, type: typeof(SCServiceChannelServicesMessagingErrorResponse))]
        public abstract Task<IActionResult> WorkordersworkOrderIdLeakWasDetected([FromRoute (Name = "workOrderId")][Required]int workOrderId);

        /// <summary>
        /// Update Work orders NTE project approval
        /// </summary>
        /// <remarks>Update Work orders NTE project approval. Returns successfully updated id.              &lt;br /&gt;&lt;br /&gt;This method can only be used for users with &#39;WorkOrderFullEdit&#39; permissions.</remarks>
        /// <param name="workOrderId">Numeric Id of the Work order to perform action with.</param>
        /// <param name="updateRequest">The update request. Work orders NTE/Link project approval.</param>
        /// <response code="200">Indicates that the request succeeded and that the requested information is in the response.</response>
        /// <response code="400">Bad Request - the request could not be understood or was missing required parameters.           &lt;br/&gt;Error codes:           &lt;br/&gt; 100 - You don&#39;t have location access to perform this operation;           &lt;br/&gt; 502 - Data not found. Returned if target Work order is not found database;           &lt;br/&gt; 503 - Request data is empty;</response>
        /// <response code="401">Indicates that the requested resource requires authentication.              &lt;br/&gt;Error codes:              &lt;br/&gt; 504 - API call rejected by security permissions;</response>
        /// <response code="500">Indicates that a generic error has occurred on the server.</response>
        [HttpPut]
        [Route("/v3/workorders/{workOrderId}/projectApproval")]
        [Consumes("application/json", "text/json", "application/xml", "text/xml", "application/x-www-form-urlencoded")]
        [ValidateModelState]
        [ProducesResponseType(statusCode: 200, type: typeof(SCServiceChannelServicesMessagingWorkordersChangeWorkOrderResponse))]
        [ProducesResponseType(statusCode: 400, type: typeof(SCServiceChannelServicesMessagingErrorResponse))]
        [ProducesResponseType(statusCode: 401, type: typeof(SCServiceChannelServicesMessagingErrorResponse))]
        [ProducesResponseType(statusCode: 500, type: typeof(SCServiceChannelServicesMessagingErrorResponse))]
        public abstract Task<IActionResult> WorkordersworkOrderIdProjectApproval([FromRoute (Name = "workOrderId")][Required]int workOrderId, [FromBody]SCServiceChannelServicesMessagingWorkordersUpdateWorkOrdersProjectApprovalRequest updateRequest);

        /// <summary>
        /// Create Work orders project approval
        /// </summary>
        /// <remarks>Create Work orders project approval. Returns successfully updated id.              &lt;br /&gt;&lt;br /&gt;This method can only be used for users with &#39;WorkOrderFullEdit&#39; permissions.</remarks>
        /// <param name="workOrderId">Numeric Id of the Work order to perform action with.</param>
        /// <param name="createRequest">The create request. Work orders project approval.</param>
        /// <response code="200">Indicates that the request succeeded and that the requested information is in the response.</response>
        /// <response code="400">Bad Request - the request could not be understood or was missing required parameters.           &lt;br/&gt;Error codes:           &lt;br/&gt; 100 - You don&#39;t have location access to perform this operation;           &lt;br/&gt; 502 - Data not found. Returned if target Work order is not found database;           &lt;br/&gt; 503 - Request data is empty;</response>
        /// <response code="401">Indicates that the requested resource requires authentication.              &lt;br/&gt;Error codes:              &lt;br/&gt; 504 - API call rejected by security permissions;</response>
        /// <response code="500">Indicates that a generic error has occurred on the server.</response>
        [HttpPost]
        [Route("/v3/workorders/{workOrderId}/projectApproval")]
        [Consumes("application/json", "text/json", "application/xml", "text/xml", "application/x-www-form-urlencoded")]
        [ValidateModelState]
        [ProducesResponseType(statusCode: 200, type: typeof(SCServiceChannelServicesMessagingWorkordersChangeWorkOrderResponse))]
        [ProducesResponseType(statusCode: 400, type: typeof(SCServiceChannelServicesMessagingErrorResponse))]
        [ProducesResponseType(statusCode: 401, type: typeof(SCServiceChannelServicesMessagingErrorResponse))]
        [ProducesResponseType(statusCode: 500, type: typeof(SCServiceChannelServicesMessagingErrorResponse))]
        public abstract Task<IActionResult> WorkordersworkOrderIdProjectApproval_0([FromRoute (Name = "workOrderId")][Required]int workOrderId, [FromBody]SCServiceChannelServicesMessagingWorkordersCreateWorkOrdersProjectApprovalRequest createRequest);

        /// <summary>
        /// Assign technician certificate to the WO
        /// </summary>
        /// <param name="workOrderId">Numeric Id of the Work order to perform action with.</param>
        /// <param name="request">The request to perform action with</param>
        /// <response code="200">Certificatite was sucsesfully assigned.</response>
        /// <response code="400">Bad Request - the request could not be understood or was missing required parameters.              &lt;br/&gt;Error codes:              &lt;br/&gt; 502 - Work order is not found;              &lt;br/&gt; 601 - Invalid Location Id;              &lt;br/&gt; 701 - Invalid trade;              &lt;br/&gt; 1301 - Request data is empty;              &lt;br/&gt; 3901 - Invalid Certificate Id;</response>
        /// <response code="401">Indicates that the requested resource requires authentication.              &lt;br/&gt;Error codes:              &lt;br/&gt; 504 - API call rejected by security permissions;</response>
        /// <response code="500">Indicates that a generic error has occurred on the server.</response>
        [HttpPut]
        [Route("/v3/workorders/{workOrderId}/technicianCertificate")]
        [Consumes("application/json", "text/json", "application/xml", "text/xml", "application/x-www-form-urlencoded")]
        [ValidateModelState]
        [ProducesResponseType(statusCode: 400, type: typeof(SCServiceChannelServicesMessagingErrorResponse))]
        [ProducesResponseType(statusCode: 401, type: typeof(SCServiceChannelServicesMessagingErrorResponse))]
        [ProducesResponseType(statusCode: 500, type: typeof(SCServiceChannelServicesMessagingErrorResponse))]
        public abstract Task<IActionResult> WorkordersworkOrderIdTechnicianCertificate([FromRoute (Name = "workOrderId")][Required]int workOrderId, [FromBody]SCServiceChannelServicesMessagingWorkordersChangeWoTechnicianCertificateRequest request);

        /// <summary>
        /// Update the leak inspection info on a work order
        /// </summary>
        /// <remarks>RTMultiLeakFlow FF must be enabled for this operation</remarks>
        /// <param name="workOrderId">The unique numeric identifier of the work order to update the status of refrigerant use for.</param>
        /// <param name="refrigerantWasUsed">Defines if refrigerant was used on the work order.</param>
        /// <param name="leakWasDetected">Defines if leak was detected on the work order.</param>
        /// <response code="204">The leak inspection info on the specified work order is updated.</response>
        /// <response code="400">The request is not accepted due to bad syntax, missing parameters, insufficient data, etc.              &lt;br/&gt;Error codes:              &lt;br/&gt;701 - Invalid trade</response>
        /// <response code="401">The request is not authorized.              &lt;br/&gt;Error codes:              &lt;br/&gt;504 — API call rejected by security permissions</response>
        /// <response code="404">The requested resource does not exist on the server.</response>
        [HttpPut]
        [Route("/v3/workorders/{workOrderId}/UpdateWorkOrderLeakInspectionInfo")]
        [ValidateModelState]
        [ProducesResponseType(statusCode: 400, type: typeof(SCServiceChannelServicesMessagingErrorResponse))]
        [ProducesResponseType(statusCode: 401, type: typeof(SCServiceChannelServicesMessagingErrorResponse))]
        public abstract Task<IActionResult> WorkordersworkOrderIdUpdateWorkOrderLeakInspectionInforefrigerantWasUsedrefrigerantWasUsedleakWasDetectedleakWasDetected([FromRoute (Name = "workOrderId")][Required]int workOrderId, [FromQuery (Name = "refrigerantWasUsed")][Required()]bool refrigerantWasUsed, [FromQuery (Name = "leakWasDetected")][Required()]bool leakWasDetected);

        /// <summary>
        /// Get the Weather Event associated to a work order (if set)
        /// </summary>
        /// <remarks>Retrieves the set Weather Event related to a work order.</remarks>
        /// <param name="workOrderId">The Id of the work order.</param>
        /// <param name="subscriberId">This parameter is required only for provider.</param>
        /// <response code="200">Indicates that the request succeeded and that the requested information is in the response.</response>
        /// <response code="400">Bad Request - the request could not be understood or was missing required parameters.</response>
        /// <response code="401">Indicates that the requested resource requires authentication.              &lt;br/&gt;Error codes:              &lt;br/&gt; 504 - API call rejected by security permissions;</response>
        [HttpGet]
        [Route("/v3/workorders/{workOrderId}/weatherEvent")]
        [ValidateModelState]
        [ProducesResponseType(statusCode: 200, type: typeof(SCServiceChannelApiModelWorkordersWeatherEventType))]
        [ProducesResponseType(statusCode: 400, type: typeof(SCServiceChannelServicesMessagingErrorResponse))]
        [ProducesResponseType(statusCode: 401, type: typeof(SCServiceChannelServicesMessagingErrorResponse))]
        public abstract Task<IActionResult> WorkordersworkOrderIdWeatherEventsubscriberIdsubscriberId([FromRoute (Name = "workOrderId")][Required]int workOrderId, [FromQuery (Name = "subscriberId")]int? subscriberId);

        /// <summary>
        /// Retrieve a Work order
        /// </summary>
        /// <remarks>A single Work order object with all its details.</remarks>
        /// <param name="workorderId">Numeric Id of the Work order to perform action with.</param>
        /// <response code="200">Indicates that the request succeeded and that the requested information is in the response.</response>
        /// <response code="400">Bad Request - the request could not be understood or was missing required parameters.              &lt;br/&gt;Error codes:              &lt;br/&gt; 503 - Request data is empty;</response>
        /// <response code="401">Indicates that the requested resource requires authentication.              &lt;br/&gt;Error codes:              &lt;br/&gt; 504 - API call rejected by security permissions;</response>
        /// <response code="404">Indicates that the requested resource does not exist on the server.</response>
        [HttpGet]
        [Route("/v3/workorders/{workorderId}")]
        [ValidateModelState]
        [ProducesResponseType(statusCode: 200, type: typeof(SCServiceChannelServicesMessagingWorkordersWorkOrder))]
        [ProducesResponseType(statusCode: 400, type: typeof(SCServiceChannelServicesMessagingErrorResponse))]
        [ProducesResponseType(statusCode: 401, type: typeof(SCServiceChannelServicesMessagingErrorResponse))]
        public abstract Task<IActionResult> WorkordersworkorderId([FromRoute (Name = "workorderId")][Required]int workorderId);

        /// <summary>
        /// Create Stripe charge
        /// </summary>
        /// <remarks>&lt;para&gt;Creates charge through Stripe with provider stripe account as destination.&lt;/para&gt;  &lt;para&gt;Also increases NTE by charge amount.&lt;/para&gt;</remarks>
        /// <param name="workorderId">Work order id</param>
        /// <param name="request">request</param>
        /// <response code="200">Indicates that the request succeeded.</response>
        /// <response code="400">Bad Request - the request could not be understood or was missing required parameters.&lt;br&gt;Error codes:&lt;br&gt;502 - WorkOrder not found;&lt;br&gt;503 - Request data is empty;WO don&#39;t have provider;WorkOrder does not belong to subscriber;Amount is not positive;&lt;br&gt;904 - WorkOrder is completed;&lt;br&gt;101 - Provider don&#39;t have Stripe account;&lt;br&gt;501 - Stripe API error</response>
        /// <response code="401">Indicates that the requested resource requires authentication.&lt;br&gt;Error codes:&lt;br/&gt; 504 - API call rejected by security permissions;</response>
        /// <response code="500">Error while processing request.</response>
        [HttpPost]
        [Route("/v3/workorders/{workorderId}/addstripecharge")]
        [Consumes("application/json", "text/json", "application/xml", "text/xml", "application/x-www-form-urlencoded")]
        [ValidateModelState]
        [ProducesResponseType(statusCode: 400, type: typeof(SCServiceChannelServicesMessagingErrorResponse))]
        [ProducesResponseType(statusCode: 401, type: typeof(SCServiceChannelServicesMessagingErrorResponse))]
        [ProducesResponseType(statusCode: 500, type: typeof(SCServiceChannelServicesMessagingErrorResponse))]
        public abstract Task<IActionResult> WorkordersworkorderIdAddstripecharge([FromRoute (Name = "workorderId")][Required]int workorderId, [FromBody]SCServiceChannelServicesMessagingWorkordersAddStripeChargeRequest request);

        /// <summary>
        /// Update Work order Caller
        /// </summary>
        /// <remarks>Updates Work order Caller. Returns Work order Id for successful request.              &lt;br /&gt;&lt;br /&gt;This method can only be used for users with &#39;WorkOrderFullEdit&#39; permissions.</remarks>
        /// <param name="workorderId">Numeric Id of the Work order to perform action with.</param>
        /// <param name="updateRequest">The update request. Work order Caller.</param>
        /// <response code="200">Indicates that the request succeeded and that the requested information is in the response.</response>
        /// <response code="400">Bad Request - the request could not be understood or was missing required parameters.              &lt;br/&gt;Error codes:              &lt;br/&gt; 100 - You don&#39;t have location access to perform this operation;              &lt;br/&gt; 502 - Data not found. Returned if target Work order is not found database;              &lt;br/&gt; 503 - Request data is empty;              &lt;br/&gt; 906 - Invalid Work order Caller Name specified. Returned if Caller Name exceeds max len (100 chars) or is empty;              &lt;br/&gt; 921 - Cannot update invoiced Work order;</response>
        /// <response code="401">Indicates that the requested resource requires authentication.              &lt;br/&gt;Error codes:              &lt;br/&gt; 504 - API call rejected by security permissions;</response>
        /// <response code="500">Indicates that a generic error has occurred on the server.</response>
        [HttpPut]
        [Route("/v3/workorders/{workorderId}/caller")]
        [Consumes("application/json", "text/json", "application/xml", "text/xml", "application/x-www-form-urlencoded")]
        [ValidateModelState]
        [ProducesResponseType(statusCode: 200, type: typeof(SCServiceChannelServicesMessagingWorkordersChangeWorkOrderResponse))]
        [ProducesResponseType(statusCode: 400, type: typeof(SCServiceChannelServicesMessagingErrorResponse))]
        [ProducesResponseType(statusCode: 401, type: typeof(SCServiceChannelServicesMessagingErrorResponse))]
        [ProducesResponseType(statusCode: 500, type: typeof(SCServiceChannelServicesMessagingErrorResponse))]
        public abstract Task<IActionResult> WorkordersworkorderIdCaller([FromRoute (Name = "workorderId")][Required]int workorderId, [FromBody]SCServiceChannelServicesMessagingWorkordersChangeWoFieldsRequest updateRequest);

        /// <summary>
        /// Update the work order category
        /// </summary>
        /// <remarks>Updates the category of the specified work order (WO) with the passed value. Note that you cannot update the category of an invoiced service request.              &lt;br /&gt;If the WO category does not have a GL code mapping with the WO trade, you will get an error message listing valid categories for this trade based on existing GL codes. You can retrieve valid categories for a specific trade by sending the [GET /categories/glcodes](https://developer.servicechannel.com/swagger/ui/index?version&#x3D;3#/Categories/GETv3_categories_glcodes_locationId__locationId__trade__trade_) request.              &lt;br /&gt;***Note:*** Only users who have permission to edit work orders can use this method.              &lt;br /&gt;**Example Request**                                PUT /workorders/{workorderId}/category                  {                     \&quot;Value\&quot;: \&quot;Repair\&quot;,                     \&quot;Actor\&quot;: \&quot;James Smith\&quot;,                     \&quot;Id\&quot;: 12345                  }</remarks>
        /// <param name="workorderId">Unique numeric identifier of the work order you want to update the category for.</param>
        /// <param name="updateRequest">Request to update the work order category.</param>
        /// <response code="200">The category of the specified work order is updated, and the unique work order ID is returned in the response.</response>
        /// <response code="400">The request is not accepted due to bad syntax, missing parameters, insufficient data, etc.              &lt;br/&gt;Error codes:              100 — User has no rights to perform this action              502 — Work order is not found              921 — Cannot update invoiced work order</response>
        /// <response code="401">The request is not authorized.              &lt;br/&gt;Error codes:              504 — API call rejected by security permissions</response>
        /// <response code="500">The server was unable to complete the request due to an internal error.</response>
        [HttpPut]
        [Route("/v3/workorders/{workorderId}/category")]
        [Consumes("application/json", "text/json", "application/xml", "text/xml", "application/x-www-form-urlencoded")]
        [ValidateModelState]
        [ProducesResponseType(statusCode: 200, type: typeof(SCServiceChannelServicesMessagingWorkordersChangeWorkOrderResponse))]
        [ProducesResponseType(statusCode: 400, type: typeof(SCServiceChannelServicesMessagingErrorResponse))]
        [ProducesResponseType(statusCode: 401, type: typeof(SCServiceChannelServicesMessagingErrorResponse))]
        [ProducesResponseType(statusCode: 500, type: typeof(SCServiceChannelServicesMessagingErrorResponse))]
        public abstract Task<IActionResult> WorkordersworkorderIdCategory([FromRoute (Name = "workorderId")][Required]int workorderId, [FromBody]SCServiceChannelServicesMessagingWorkordersChangeWoCategoryRequest updateRequest);

        /// <summary>
        /// Update Work order Description
        /// </summary>
        /// <remarks>Updates Work Order Description. Returns Work order Id for successful request.              &lt;br /&gt;&lt;br /&gt;This method can only be used for users with &#39;WorkOrderFullEdit&#39; permissions.</remarks>
        /// <param name="workorderId">Numeric Id of the Work order to perform action with.</param>
        /// <param name="updateRequest">The update request. Work order Description.</param>
        /// <response code="200">Indicates that the request succeeded and that the requested information is in the response.</response>
        /// <response code="400">Bad Request - the request could not be understood or was missing required parameters.              &lt;br/&gt;Error codes:              &lt;br/&gt; 100 - You don&#39;t have location access to perform this operation;              &lt;br/&gt; 502 - Data not found. Returned if target Work order is not found database;              &lt;br/&gt; 503 - Request data is empty;              &lt;br/&gt; 902 - Invalid Work order Problem Description specified. Returned if description exceeds max len (8000 chars) or is empty;              &lt;br/&gt; 921 - Cannot update invoiced Work order;</response>
        /// <response code="401">Indicates that the requested resource requires authentication.              &lt;br/&gt;Error codes:              &lt;br/&gt; 504 - API call rejected by security permissions;</response>
        /// <response code="500">Indicates that a generic error has occurred on the server.</response>
        [HttpPut]
        [Route("/v3/workorders/{workorderId}/description")]
        [Consumes("application/json", "text/json", "application/xml", "text/xml", "application/x-www-form-urlencoded")]
        [ValidateModelState]
        [ProducesResponseType(statusCode: 200, type: typeof(SCServiceChannelServicesMessagingWorkordersChangeWorkOrderResponse))]
        [ProducesResponseType(statusCode: 400, type: typeof(SCServiceChannelServicesMessagingErrorResponse))]
        [ProducesResponseType(statusCode: 401, type: typeof(SCServiceChannelServicesMessagingErrorResponse))]
        [ProducesResponseType(statusCode: 500, type: typeof(SCServiceChannelServicesMessagingErrorResponse))]
        public abstract Task<IActionResult> WorkordersworkorderIdDescription([FromRoute (Name = "workorderId")][Required]int workorderId, [FromBody]SCServiceChannelServicesMessagingWorkordersChangeWoFieldsRequest updateRequest);

        /// <summary>
        /// Checks features of Work order subscriber
        /// </summary>
        /// <param name="workorderId">Numeric Id of the Work order to perform action with.</param>
        /// <param name="features">Features to check</param>
        /// <response code="200">Indicates that the request succeeded and that the requested information is in the response.</response>
        /// <response code="400">Bad Request - the request could not be understood or was missing required parameters.              &lt;br/&gt;Error codes:              &lt;br/&gt; 503 - Request data is empty;</response>
        /// <response code="401">Indicates that the requested resource requires authentication.              &lt;br/&gt;Error codes:              &lt;br/&gt; 504 - API call rejected by security permissions;</response>
        /// <response code="502">Indicates that the requested resource was not found on the server.</response>
        [HttpGet]
        [Route("/v3/workorders/{workorderId}/features")]
        [ValidateModelState]
        [ProducesResponseType(statusCode: 200, type: typeof(SCServiceChannelServicesMessagingApplicationAccessFeatureResponse))]
        [ProducesResponseType(statusCode: 400, type: typeof(SCServiceChannelServicesMessagingErrorResponse))]
        [ProducesResponseType(statusCode: 401, type: typeof(SCServiceChannelServicesMessagingErrorResponse))]
        public abstract Task<IActionResult> WorkordersworkorderIdFeaturesfeatures0features0features1features1([FromRoute (Name = "workorderId")][Required]int workorderId, [FromQuery (Name = "features")][Required()]List<string> features);

        /// <summary>
        /// Leave feedback for a work order
        /// </summary>
        /// <param name="workorderId"></param>
        /// <param name="leaveFeedbackRequest"></param>
        /// <response code="200">Indicates that the request succeeded.</response>
        /// <response code="400">Bad Request - the request could not be understood or was missing required parameters.&lt;br/&gt;Error codes:&lt;br/&gt;           935 - Invalid Star Score;&lt;br&gt;           936 - Work Order was rated another user</response>
        /// <response code="401">Indicates that the requested resource requires authentication.&lt;br&gt;Error codes:&lt;br&gt; 504 - API call rejected by security permissions;</response>
        [HttpPost]
        [Route("/v3/workorders/{workorderId}/feedback")]
        [Consumes("application/json", "text/json", "application/xml", "text/xml", "application/x-www-form-urlencoded")]
        [ValidateModelState]
        [ProducesResponseType(statusCode: 400, type: typeof(SCServiceChannelServicesMessagingErrorResponse))]
        [ProducesResponseType(statusCode: 401, type: typeof(SCServiceChannelServicesMessagingErrorResponse))]
        public abstract Task<IActionResult> WorkordersworkorderIdFeedback([FromRoute (Name = "workorderId")][Required]int workorderId, [FromBody]SCServiceChannelServicesMessagingWorkordersLeaveFeedbackRequest leaveFeedbackRequest);

        /// <summary>
        /// Add Followers to Work order
        /// </summary>
        /// <remarks>Add Followers to Work order.</remarks>
        /// <param name="workorderId">Numeric Id of the Work order to perform action with.</param>
        /// <param name="request">The request model to perform action with.</param>
        /// <response code="201">Created indicates that the request resulted in a new resource created before the response was sent.</response>
        /// <response code="400">Bad Request - the request could not be understood or was missing required parameters.              &lt;br/&gt;Error codes:              &lt;br/&gt;503 - Request data is empty;              &lt;br/&gt;There is no followers in request;              &lt;br/&gt;Empty tracking number (workorder Id);</response>
        /// <response code="404">Indicates that the requested resource does not exist on the server.</response>
        [HttpPost]
        [Route("/v3/workorders/{workorderId}/followers")]
        [Consumes("application/json", "text/json", "application/xml", "text/xml", "application/x-www-form-urlencoded")]
        [ValidateModelState]
        [ProducesResponseType(statusCode: 400, type: typeof(SCServiceChannelServicesMessagingErrorResponse))]
        public abstract Task<IActionResult> WorkordersworkorderIdFollowers([FromRoute (Name = "workorderId")][Required]int workorderId, [FromBody]SCServiceChannelServicesMessagingWorkordersAddFollowersRequest request);

        /// <summary>
        /// Remove Follower from Work order
        /// </summary>
        /// <remarks>Remove Follower from Work order.</remarks>
        /// <param name="workorderId">Numeric Id of the Work order to perform action with.</param>
        /// <param name="email">The follower email address.</param>
        /// <response code="200">Indicates that the request succeeded and that the requested information is in the response.</response>
        /// <response code="400">Bad Request - the request could not be understood or was missing required parameters.              &lt;br/&gt;Error codes:              &lt;br/&gt;503 - Request data is empty;              &lt;br/&gt;There is no followers in request;&lt;br/&gt;Empty tracking number (workorder Id);</response>
        /// <response code="404">Indicates that the requested resource does not exist on the server.</response>
        [HttpDelete]
        [Route("/v3/workorders/{workorderId}/followers")]
        [ValidateModelState]
        [ProducesResponseType(statusCode: 400, type: typeof(SCServiceChannelServicesMessagingErrorResponse))]
        public abstract Task<IActionResult> WorkordersworkorderIdFollowersemailemail([FromRoute (Name = "workorderId")][Required]int workorderId, [FromQuery (Name = "email")][Required()]string email);

        /// <summary>
        /// Get GPS Radius for a WO
        /// </summary>
        /// <remarks>Get GPS Radius for a WO</remarks>
        /// <param name="workorderId">Numeric Id of the Work order to perform action with.</param>
        /// <response code="200">Indicates that the request succeeded and that the requested information is in the response.</response>
        /// <response code="400">Bad Request - the request could not be understood or was missing required parameters.              &lt;br/&gt;Error codes:              &lt;br/&gt; 502 - WorkOrder not found;                          &lt;br/&gt; 917 - Invalid Tracking Number;</response>
        /// <response code="401">Indicates that the requested resource requires authentication.              &lt;br/&gt;Error codes:              &lt;br/&gt; 504 - API call rejected by security permissions;</response>
        [HttpGet]
        [Route("/v3/workorders/{workorderId}/GPSRadius")]
        [ValidateModelState]
        [ProducesResponseType(statusCode: 200, type: typeof(SCServiceChannelServicesMessagingWorkordersGetGPSRadiusResponse))]
        [ProducesResponseType(statusCode: 400, type: typeof(SCServiceChannelServicesMessagingErrorResponse))]
        [ProducesResponseType(statusCode: 401, type: typeof(SCServiceChannelServicesMessagingErrorResponse))]
        public abstract Task<IActionResult> WorkordersworkorderIdGPSRadius([FromRoute (Name = "workorderId")][Required]int workorderId);

        /// <summary>
        /// Update issue choice on WO
        /// </summary>
        /// <param name="workorderId">Numeric Id of the Work order to perform action with.</param>
        /// <param name="subscriberId">The subscriber Id to use (if logged in as a provider).</param>
        /// <param name="issueChoice">The request to perform action with.</param>
        /// <param name="locationId">UID of location</param>
        /// <response code="200">Indicates that the request succeeded.</response>
        /// <response code="400">Bad Request - the request could not be understood or was missing required parameters.&lt;br/&gt;Error codes:&lt;br/&gt;           503 - Validation fails;&lt;br&gt;           1000 - Invalid setupId(dashboard) for current user;</response>
        /// <response code="500">Indicates that a generic error has occurred on the server.</response>
        [HttpPut]
        [Route("/v3/workorders/{workorderId}/issueChoice")]
        [Consumes("application/json", "text/json", "application/xml", "text/xml", "application/x-www-form-urlencoded")]
        [ValidateModelState]
        [ProducesResponseType(statusCode: 400, type: typeof(SCServiceChannelServicesMessagingErrorResponse))]
        [ProducesResponseType(statusCode: 500, type: typeof(SCServiceChannelServicesMessagingErrorResponse))]
        public abstract Task<IActionResult> WorkordersworkorderIdIssueChoicesubscriberIdsubscriberIdlocationIdlocationId([FromRoute (Name = "workorderId")][Required]int workorderId, [FromQuery (Name = "subscriberId")][Required()]int subscriberId, [FromBody]SCServiceChannelServicesMessagingWorkordersIssueChoiceRequest issueChoice, [FromQuery (Name = "locationId")]int? locationId);

        /// <summary>
        /// Update work order label
        /// </summary>
        /// <remarks>Update work order label.</remarks>
        /// <param name="workorderId">Work order id</param>
        /// <param name="workOrderLabelRequest">Model for add/update label to work order</param>
        /// <response code="200">Indicates that the request succeeded and that the requested information is in the response.</response>
        /// <response code="400">Bad Request - the request could not be understood or was missing required parameters.</response>
        /// <response code="401">Indicates that the requested resource requires authentication.              &lt;br/&gt;Error codes:              &lt;br/&gt; 504 - API call rejected by security permissions;</response>
        [HttpPut]
        [Route("/v3/workorders/{workorderId}/label")]
        [Consumes("application/json", "text/json", "application/xml", "text/xml", "application/x-www-form-urlencoded")]
        [ValidateModelState]
        [ProducesResponseType(statusCode: 200, type: typeof(List<SCServiceChannelServicesMessagingWorkordersGetStatusResponse>))]
        [ProducesResponseType(statusCode: 400, type: typeof(SCServiceChannelServicesMessagingErrorResponse))]
        [ProducesResponseType(statusCode: 401, type: typeof(SCServiceChannelServicesMessagingErrorResponse))]
        public abstract Task<IActionResult> WorkordersworkorderIdLabel([FromRoute (Name = "workorderId")][Required]int workorderId, [FromBody]SCServiceChannelServicesMessagingWorkordersWorkOrderLabelRequest workOrderLabelRequest);

        /// <summary>
        /// Delete work order label
        /// </summary>
        /// <remarks>Delete work order label.</remarks>
        /// <param name="workorderId">Work order id</param>
        /// <param name="workOrderLabelRequest">Model for delete label from work order</param>
        /// <response code="200">Indicates that the request succeeded and that the requested information is in the response.</response>
        /// <response code="400">Bad Request - the request could not be understood or was missing required parameters.</response>
        /// <response code="401">Indicates that the requested resource requires authentication.              &lt;br/&gt;Error codes:              &lt;br/&gt; 504 - API call rejected by security permissions;</response>
        [HttpDelete]
        [Route("/v3/workorders/{workorderId}/label")]
        [Consumes("application/json", "text/json", "application/xml", "text/xml", "application/x-www-form-urlencoded")]
        [ValidateModelState]
        [ProducesResponseType(statusCode: 200, type: typeof(List<SCServiceChannelServicesMessagingWorkordersGetStatusResponse>))]
        [ProducesResponseType(statusCode: 400, type: typeof(SCServiceChannelServicesMessagingErrorResponse))]
        [ProducesResponseType(statusCode: 401, type: typeof(SCServiceChannelServicesMessagingErrorResponse))]
        public abstract Task<IActionResult> WorkordersworkorderIdLabel_0([FromRoute (Name = "workorderId")][Required]int workorderId, [FromBody]SCServiceChannelServicesMessagingWorkordersWorkOrderLabelRequest workOrderLabelRequest);

        /// <summary>
        /// Creates link between two Work Orders
        /// </summary>
        /// <remarks>&lt;para&gt;Current Work Order marked as a parent, linking Work Order marked as follow Up.&lt;/para&gt;  &lt;para&gt;If you set &#39;workorderIdToLink&#39; parameter then &#39;WorkorderIds&#39; parameter of requested body will be ignored.&lt;/para&gt;  &lt;br /&gt;  &lt;br /&gt;Available for provider and subscriber usage.</remarks>
        /// <param name="workorderId">Parent Work Order id</param>
        /// <param name="request">Link Workorders Request</param>
        /// <param name="workorderIdToLink">Work Order Id that links to parent. Optional.</param>
        /// <response code="204">Indicates that the request succeeded</response>
        /// <response code="400">Bad Request - the request could not be understood or was missing required parameters.&lt;br/&gt;Error codes:&lt;br/&gt;           917 - Wrong Parent Work Order Id;&lt;br&gt;           932 - Wrong Linked Work Order Id;&lt;br&gt;          601 - Location doesn&#39;t match</response>
        /// <response code="401">Indicates that the requested resource requires authentication.&lt;br&gt;Error codes:&lt;br&gt; 504 - API call rejected by security permissions;</response>
        [HttpPut]
        [Route("/v3/workorders/{workorderId}/link")]
        [Consumes("application/json", "text/json", "application/xml", "text/xml", "application/x-www-form-urlencoded")]
        [ValidateModelState]
        [ProducesResponseType(statusCode: 400, type: typeof(SCServiceChannelServicesMessagingErrorResponse))]
        [ProducesResponseType(statusCode: 401, type: typeof(SCServiceChannelServicesMessagingErrorResponse))]
        public abstract Task<IActionResult> WorkordersworkorderIdLinkworkorderIdToLinkworkorderIdToLink([FromRoute (Name = "workorderId")][Required]int workorderId, [FromBody]SCServiceChannelServicesMessagingWorkordersLinkWorkordersRequest request, [FromQuery (Name = "workorderIdToLink")]int? workorderIdToLink);

        /// <summary>
        /// Update the status of refrigerant use on a work order
        /// </summary>
        /// <remarks>Updates the status of refrigerant use on the specified work order.              &lt;br /&gt;Set the &#x60;refrigerantWasUsed&#x60; parameter to either &#x60;true&#x60; or &#x60;false&#x60; to mark whether refrigerant was used on the service request or not.</remarks>
        /// <param name="workorderId">The unique numeric identifier of the work order to update the status of refrigerant use for.</param>
        /// <param name="refrigerantWasUsed">Defines if refrigerant was used on the work order.</param>
        /// <param name="actor">Name of the person on whose behalf you are performing the action.</param>
        /// <response code="204">The status of refrigerant use on the specified work order is updated.</response>
        /// <response code="400">The request is not accepted due to bad syntax, missing parameters, insufficient data, etc.</response>
        /// <response code="401">The request is not authorized.&lt;br/&gt;&lt;br/&gt;Error codes:&lt;br/&gt;504 — API call rejected by security permissions</response>
        /// <response code="404">The requested resource does not exist on the server.</response>
        [HttpPut]
        [Route("/v3/workorders/{workorderId}/markRefrigerantUse")]
        [ValidateModelState]
        [ProducesResponseType(statusCode: 400, type: typeof(SCServiceChannelServicesMessagingErrorResponse))]
        [ProducesResponseType(statusCode: 401, type: typeof(SCServiceChannelServicesMessagingErrorResponse))]
        public abstract Task<IActionResult> WorkordersworkorderIdMarkRefrigerantUserefrigerantWasUsedrefrigerantWasUsedactoractor([FromRoute (Name = "workorderId")][Required]int workorderId, [FromQuery (Name = "refrigerantWasUsed")]bool? refrigerantWasUsed, [FromQuery (Name = "actor")]string? actor);

        /// <summary>
        /// Update Work order NTE
        /// </summary>
        /// <remarks>Updates Work Order NTE. Returns Work order Id for successful request.              &lt;br /&gt;&lt;br /&gt;This method can only be used for users with &#39;WorkOrderFullEdit&#39; permissions.</remarks>
        /// <param name="workorderId">Numeric Id of the Work order to perform action with.</param>
        /// <param name="updateRequest">The update request. Work order NTE.</param>
        /// <response code="200">Indicates that the request succeeded and that the requested information is in the response.</response>
        /// <response code="400">Bad Request - the request could not be understood or was missing required parameters.           &lt;br/&gt;Error codes:           &lt;br/&gt; 100 - You don&#39;t have location access to perform this operation;           &lt;br/&gt; 502 - Data not found. Returned if target Work order is not found database;           &lt;br/&gt; 503 - Request data is empty;           &lt;br/&gt; 905 - Invalid Work order NTE specified. Returned if nte exceeds user limit or its value is not a number;           &lt;br/&gt; 921 - Cannot update invoiced Work order;           &lt;br/&gt; 931 - NTE cannot be adjusted, please use subtotal and tax;</response>
        /// <response code="401">Indicates that the requested resource requires authentication.              &lt;br/&gt;Error codes:              &lt;br/&gt; 504 - API call rejected by security permissions;</response>
        /// <response code="500">Indicates that a generic error has occurred on the server.</response>
        [HttpPut]
        [Route("/v3/workorders/{workorderId}/nte")]
        [Consumes("application/json", "text/json", "application/xml", "text/xml", "application/x-www-form-urlencoded")]
        [ValidateModelState]
        [ProducesResponseType(statusCode: 200, type: typeof(SCServiceChannelServicesMessagingWorkordersChangeWorkOrderResponse))]
        [ProducesResponseType(statusCode: 400, type: typeof(SCServiceChannelServicesMessagingErrorResponse))]
        [ProducesResponseType(statusCode: 401, type: typeof(SCServiceChannelServicesMessagingErrorResponse))]
        [ProducesResponseType(statusCode: 500, type: typeof(SCServiceChannelServicesMessagingErrorResponse))]
        public abstract Task<IActionResult> WorkordersworkorderIdNte([FromRoute (Name = "workorderId")][Required]int workorderId, [FromBody]SCServiceChannelServicesMessagingWorkordersChangeWoNteRequest updateRequest);

        /// <summary>
        /// Update Work order Purchase Number
        /// </summary>
        /// <remarks>Updates Work order Purchase Number. Returns Work order Id for successful request.              &lt;br /&gt;&lt;br /&gt;This method can only be used for users with &#39;WorkOrderFullEdit&#39; permissions.</remarks>
        /// <param name="workorderId">Numeric Id of the Work order to perform action with.</param>
        /// <param name="updateRequest">The update request. Work order Purchase Number.</param>
        /// <response code="200">Indicates that the request succeeded and that the requested information is in the response.</response>
        /// <response code="400">Bad Request - the request could not be understood or was missing required parameters.              &lt;br/&gt;Error codes:              &lt;br/&gt; 100 - You don&#39;t have location access to perform this operation;              &lt;br/&gt; 502 - Data not found. Returned if target Work order is not found database;              &lt;br/&gt; 503 - Request data is empty;              &lt;br/&gt; 920 - Invalid Work order purchase number specified. Returned if duplicate PO number is found for this subscriber or if value exceeds max len (20 chars);              &lt;br/&gt; 921 - Cannot update invoiced Work order;</response>
        /// <response code="401">Indicates that the requested resource requires authentication.              &lt;br/&gt;Error codes:              &lt;br/&gt; 504 - API call rejected by security permissions;</response>
        /// <response code="500">Indicates that a generic error has occurred on the server.</response>
        [HttpPut]
        [Route("/v3/workorders/{workorderId}/ponumber")]
        [Consumes("application/json", "text/json", "application/xml", "text/xml", "application/x-www-form-urlencoded")]
        [ValidateModelState]
        [ProducesResponseType(statusCode: 200, type: typeof(SCServiceChannelServicesMessagingWorkordersChangeWorkOrderResponse))]
        [ProducesResponseType(statusCode: 400, type: typeof(SCServiceChannelServicesMessagingErrorResponse))]
        [ProducesResponseType(statusCode: 401, type: typeof(SCServiceChannelServicesMessagingErrorResponse))]
        [ProducesResponseType(statusCode: 500, type: typeof(SCServiceChannelServicesMessagingErrorResponse))]
        public abstract Task<IActionResult> WorkordersworkorderIdPonumber([FromRoute (Name = "workorderId")][Required]int workorderId, [FromBody]SCServiceChannelServicesMessagingWorkordersChangeWoFieldsRequest updateRequest);

        /// <summary>
        /// Update Work order Priority
        /// </summary>
        /// <remarks>Updates Work Order priority. Returns Work order Id for successful request.              &lt;br /&gt;&lt;br /&gt;This method can only be used for users with &#39;WorkOrderFullEdit&#39; permissions.</remarks>
        /// <param name="workorderId">Numeric Id of the Work order to perform action with.</param>
        /// <param name="updateRequest">The update request. Work order Priority.</param>
        /// <response code="200">Indicates that the request succeeded and that the requested information is in the response.</response>
        /// <response code="400">Bad Request - the request could not be understood or was missing required parameters.              &lt;br/&gt;Error codes:              &lt;br/&gt; 100 - You don&#39;t have location access to perform this operation;              &lt;br/&gt; 502 - Data not found. Returned if target Work order is not found database;              &lt;br/&gt; 503 - Request data is empty;              &lt;br/&gt; 913 - Priority isn&#39;t found in user settings;              &lt;br/&gt; Priority length cannot be longer then 100 or shorter then 1 characters;              &lt;br/&gt; 921 - Cannot update invoiced Work order;</response>
        /// <response code="401">Indicates that the requested resource requires authentication.              &lt;br/&gt;Error codes:              &lt;br/&gt; 504 - API call rejected by security permissions;</response>
        /// <response code="500">Indicates that a generic error has occurred on the server.</response>
        [HttpPut]
        [Route("/v3/workorders/{workorderId}/priority")]
        [Consumes("application/json", "text/json", "application/xml", "text/xml", "application/x-www-form-urlencoded")]
        [ValidateModelState]
        [ProducesResponseType(statusCode: 200, type: typeof(SCServiceChannelServicesMessagingWorkordersChangeWorkOrderResponse))]
        [ProducesResponseType(statusCode: 400, type: typeof(SCServiceChannelServicesMessagingErrorResponse))]
        [ProducesResponseType(statusCode: 401, type: typeof(SCServiceChannelServicesMessagingErrorResponse))]
        [ProducesResponseType(statusCode: 500, type: typeof(SCServiceChannelServicesMessagingErrorResponse))]
        public abstract Task<IActionResult> WorkordersworkorderIdPriority([FromRoute (Name = "workorderId")][Required]int workorderId, [FromBody]SCServiceChannelServicesMessagingWorkordersChangeWoFieldsRequest updateRequest);

        /// <summary>
        /// Update ProjectId
        /// </summary>
        /// <remarks>Updates ProjectId.</remarks>
        /// <param name="workorderId">Numeric Id of the Work order to perform action with.</param>
        /// <param name="updateRequest">The update request. ProjectId.</param>
        /// <response code="200">Indicates that the request succeeded and that the requested information is in the response.</response>
        /// <response code="400">Bad Request - the request could not be understood or was missing required parameters.              &lt;br/&gt;Error codes:              &lt;br/&gt; 100 - You don&#39;t have location access to perform this operation;              &lt;br/&gt; 502 - Data not found. Returned if target Work order is not found database;              &lt;br/&gt; 503 - Request data is empty;              &lt;br/&gt; 923 - Invalid Work order number specified. Returned if duplicate number is found for this provider or if value exceeds max len (20 chars);              &lt;br/&gt; 921 - Cannot update invoiced Work order;</response>
        /// <response code="401">Indicates that the requested resource requires authentication.              &lt;br/&gt;Error codes:              &lt;br/&gt; 504 - API call rejected by security permissions;</response>
        /// <response code="500">Indicates that a generic error has occurred on the server.</response>
        [HttpPut]
        [Route("/v3/workorders/{workorderId}/projectid")]
        [Consumes("application/json", "text/json", "application/xml", "text/xml", "application/x-www-form-urlencoded")]
        [ValidateModelState]
        [ProducesResponseType(statusCode: 200, type: typeof(SCServiceChannelServicesMessagingWorkordersChangeWorkOrderResponse))]
        [ProducesResponseType(statusCode: 400, type: typeof(SCServiceChannelServicesMessagingErrorResponse))]
        [ProducesResponseType(statusCode: 401, type: typeof(SCServiceChannelServicesMessagingErrorResponse))]
        [ProducesResponseType(statusCode: 500, type: typeof(SCServiceChannelServicesMessagingErrorResponse))]
        public abstract Task<IActionResult> WorkordersworkorderIdProjectid([FromRoute (Name = "workorderId")][Required]int workorderId, [FromBody]SCServiceChannelServicesMessagingWorkordersChangeWoProjectIdRequest updateRequest);

        /// <summary>
        /// Unlink ProjectId
        /// </summary>
        /// <remarks>Unlink ProjectId.</remarks>
        /// <param name="workorderId">Numeric Id of the Work order to perform action with.</param>
        /// <response code="200">Indicates that the request succeeded and that the requested information is in the response.</response>
        /// <response code="400">Bad Request - the request could not be understood or was missing required parameters.              &lt;br/&gt;Error codes:              &lt;br/&gt; 100 - You don&#39;t have location access to perform this operation;              &lt;br/&gt; 502 - Data not found. Returned if target Work order is not found database;              &lt;br/&gt; 503 - Request data is empty;              &lt;br/&gt; 923 - Invalid Work order number specified. Returned if duplicate number is found for this provider or if value exceeds max len (20 chars);              &lt;br/&gt; 921 - Cannot update invoiced Work order;</response>
        /// <response code="401">Indicates that the requested resource requires authentication.              &lt;br/&gt;Error codes:              &lt;br/&gt; 504 - API call rejected by security permissions;</response>
        /// <response code="500">Indicates that a generic error has occurred on the server.</response>
        [HttpPut]
        [Route("/v3/workorders/{workorderId}/projectid/unlink")]
        [ValidateModelState]
        [ProducesResponseType(statusCode: 200, type: typeof(SCServiceChannelServicesMessagingWorkordersChangeWorkOrderResponse))]
        [ProducesResponseType(statusCode: 400, type: typeof(SCServiceChannelServicesMessagingErrorResponse))]
        [ProducesResponseType(statusCode: 401, type: typeof(SCServiceChannelServicesMessagingErrorResponse))]
        [ProducesResponseType(statusCode: 500, type: typeof(SCServiceChannelServicesMessagingErrorResponse))]
        public abstract Task<IActionResult> WorkordersworkorderIdProjectidUnlink([FromRoute (Name = "workorderId")][Required]int workorderId);

        /// <summary>
        /// Reassign Work Order
        /// </summary>
        /// <remarks>Reassign Work Order to another provider. Returns Work order Id for successful request.              &lt;br /&gt;&lt;br /&gt;Available for provider and subscriber usage.</remarks>
        /// <param name="workorderId">Numeric Id of the Work order to perform action with.</param>
        /// <param name="request">The request to perform action with.</param>
        /// <response code="200">Indicates that the request succeeded and that the requested information is in the response.</response>
        /// <response code="400">Bad Request - the request could not be understood or was missing required parameters.              &lt;br/&gt;Error codes:              &lt;br/&gt; 1301 - Request data is empty;              &lt;br/&gt; 101 - Invalid Provider Id;              &lt;br/&gt;Provider not found for selected trade and location;              &lt;br/&gt; 503 - Invalid Work order reassignment reason;              &lt;br/&gt;Request data is empty;              &lt;br/&gt;Required provider id not found;&lt;br&gt;Work order could not be reassigned. Only &#39;OPEN&#39; and &#39;IN PROGRESS&#39; statuses allowed;              &lt;br/&gt;Provider or trade should be changed;              &lt;br/&gt; 905 - Invalid &#39;Nte&#39; value;              &lt;br/&gt;Nte value exceeds user limit;              &lt;br/&gt; 921 - Cannot update invoiced Work order;</response>
        /// <response code="401">Indicates that the requested resource requires authentication.              &lt;br/&gt;Error codes:              &lt;br/&gt; 504 - API call rejected by security permissions;</response>
        /// <response code="403">Indicates that the server refuses to fulfill the request.              &lt;br/&gt; Error codes:              &lt;br/&gt; 804 - API call rejected by lack of provider permissions;</response>
        [HttpPut]
        [Route("/v3/workorders/{workorderId}/reassign")]
        [Consumes("application/json", "text/json", "application/xml", "text/xml", "application/x-www-form-urlencoded")]
        [ValidateModelState]
        [ProducesResponseType(statusCode: 200, type: typeof(SCServiceChannelServicesMessagingWorkordersChangeWorkOrderResponse))]
        [ProducesResponseType(statusCode: 400, type: typeof(SCServiceChannelServicesMessagingErrorResponse))]
        [ProducesResponseType(statusCode: 401, type: typeof(SCServiceChannelServicesMessagingErrorResponse))]
        [ProducesResponseType(statusCode: 403, type: typeof(SCServiceChannelServicesMessagingErrorResponse))]
        public abstract Task<IActionResult> WorkordersworkorderIdReassign([FromRoute (Name = "workorderId")][Required]int workorderId, [FromBody]SCServiceChannelServicesMessagingWorkordersReassignWORequest request);

        /// <summary>
        /// Retrieve the status of refrigerant use on a work order
        /// </summary>
        /// <remarks>Returns the status of refrigerant use on the specified work order:               • &#x60;null&#x60;: There is no information on the use of refrigerant.               • &#x60;true&#x60;: Refrigerant was used upon execution of the service request.               • &#x60;false&#x60;: Refrigerant wasn&#39;t used when performing work on the service request.</remarks>
        /// <param name="workorderId">The unique numeric identifier of the work order to return the status of refrigerant use for.</param>
        /// <response code="200">The status of refrigerant use on the specified work order is in the response.</response>
        /// <response code="401">The request is not authorized.&lt;br/&gt;&lt;br/&gt;Error codes:&lt;br/&gt;504 — API call rejected by security permissions</response>
        /// <response code="404">The requested resource does not exist on the server.</response>
        [HttpGet]
        [Route("/v3/workorders/{workorderId}/refrigerantUseStatus")]
        [ValidateModelState]
        [ProducesResponseType(statusCode: 200, type: typeof(bool))]
        [ProducesResponseType(statusCode: 401, type: typeof(SCServiceChannelServicesMessagingErrorResponse))]
        public abstract Task<IActionResult> WorkordersworkorderIdRefrigerantUseStatus([FromRoute (Name = "workorderId")][Required]int workorderId);

        /// <summary>
        /// Add Work order Resolution
        /// </summary>
        /// <remarks>Adds Resolution to Work order. Returns Resolution Id for successful request.</remarks>
        /// <param name="workorderId">Numeric Id of the Work order to perform action with.</param>
        /// <param name="request">The update request. Work order Resolution.</param>
        /// <response code="200">Indicates that the request succeeded and that the requested information is in the response.</response>
        /// <response code="400">Bad Request - the request could not be understood or was missing required parameters.              &lt;br/&gt;Error codes:              &lt;br/&gt; 100 - User has no permissions to perform this action;              &lt;br/&gt; 502 - Work order is not found;              &lt;br/&gt; 503 - Request data is empty;              &lt;br/&gt; 904 - Work Order is in status that not allow to perform this action;              &lt;br/&gt; 933 - Workorder is on hold, no actions allowed;</response>
        /// <response code="401">Indicates that the requested resource requires authentication.              &lt;br/&gt;Error codes:              &lt;br/&gt; 504 - API call rejected by security permissions;</response>
        /// <response code="500">Indicates that a generic error has occurred on the server.</response>
        [HttpPost]
        [Route("/v3/workorders/{workorderId}/resolution")]
        [Consumes("application/json", "text/json", "application/xml", "text/xml", "application/x-www-form-urlencoded")]
        [ValidateModelState]
        [ProducesResponseType(statusCode: 200, type: typeof(SCServiceChannelServicesMessagingWorkordersChangeWorkOrderResponse))]
        [ProducesResponseType(statusCode: 400, type: typeof(SCServiceChannelServicesMessagingErrorResponse))]
        [ProducesResponseType(statusCode: 401, type: typeof(SCServiceChannelServicesMessagingErrorResponse))]
        [ProducesResponseType(statusCode: 500, type: typeof(SCServiceChannelServicesMessagingErrorResponse))]
        public abstract Task<IActionResult> WorkordersworkorderIdResolution([FromRoute (Name = "workorderId")][Required]int workorderId, [FromBody]SCServiceChannelServicesMessagingWorkordersWorkOrderResolutionRequest request);

        /// <summary>
        /// Update Work order Scheduled Date
        /// </summary>
        /// <remarks>Updates Work Order Scheduled Date. Returns Work order Id for successful request.              &lt;br /&gt;&lt;br /&gt;Available for provider and subscriber usage.              This method can only be used for users with &#39;WorkOrderScheduledDateChange&#39; permissions.</remarks>
        /// <param name="workorderId">Numeric Id of the Work order to perform action with.</param>
        /// <param name="updateRequest">The update request. Work order Scheduled Date.</param>
        /// <param name="rescheduleReasonCode">Numeric reschedule reason code. Optional.</param>
        /// <response code="200">Indicates that the request succeeded and that the requested information is in the response.</response>
        /// <response code="400">Bad Request - the request could not be understood or was missing required parameters.              &lt;br/&gt;Error codes:              &lt;br/&gt; 100 - You don&#39;t have location access to perform this operation;              &lt;br/&gt; 502 - Data not found. Returned if target Work order is not found database;              &lt;br/&gt; 503 - Request data is empty;              &lt;br/&gt; 908 - Invalid Work order scheduled date specified. Returned if invalid date format was specified,              scheduled date is smaller then Work order CallDate or bigger then Work order ExpirationDate;              &lt;br/&gt; 921 - Cannot update invoiced Work order;</response>
        /// <response code="401">Indicates that the requested resource requires authentication.              &lt;br/&gt;Error codes:              &lt;br/&gt; 504 - API call rejected by security permissions;</response>
        /// <response code="500">Indicates that a generic error has occurred on the server.</response>
        [HttpPut]
        [Route("/v3/workorders/{workorderId}/scheduledate")]
        [Consumes("application/json", "text/json", "application/xml", "text/xml", "application/x-www-form-urlencoded")]
        [ValidateModelState]
        [ProducesResponseType(statusCode: 200, type: typeof(SCServiceChannelServicesMessagingWorkordersChangeWorkOrderResponse))]
        [ProducesResponseType(statusCode: 400, type: typeof(SCServiceChannelServicesMessagingErrorResponse))]
        [ProducesResponseType(statusCode: 401, type: typeof(SCServiceChannelServicesMessagingErrorResponse))]
        [ProducesResponseType(statusCode: 500, type: typeof(SCServiceChannelServicesMessagingErrorResponse))]
        public abstract Task<IActionResult> WorkordersworkorderIdScheduledaterescheduleReasonCoderescheduleReasonCode([FromRoute (Name = "workorderId")][Required]int workorderId, [FromBody]SCServiceChannelServicesMessagingWorkordersChangeWoFieldsRequest updateRequest, [FromQuery (Name = "rescheduleReasonCode")]int? rescheduleReasonCode);

        /// <summary>
        /// Update work order servicenowid
        /// </summary>
        /// <remarks>Update work order servicenowid.</remarks>
        /// <param name="workorderId">Work order id</param>
        /// <param name="workOrderServiceNowIdRequest">Model for add/update label to work order</param>
        /// <response code="200">Indicates that the request succeeded and that the requested information is in the response.</response>
        /// <response code="400">Bad Request - the request could not be understood or was missing required parameters.</response>
        /// <response code="401">Indicates that the requested resource requires authentication.              &lt;br/&gt;Error codes:              &lt;br/&gt; 504 - API call rejected by security permissions;</response>
        /// <response code="403">You are not authorized to request this resource, or the resource is unavailable for some reason.              &lt;br/&gt;Error codes:               804 — User has no permissions to perform this action.</response>
        [HttpPut]
        [Route("/v3/workorders/{workorderId}/servicenowid")]
        [Consumes("application/json", "text/json", "application/xml", "text/xml", "application/x-www-form-urlencoded")]
        [ValidateModelState]
        [ProducesResponseType(statusCode: 200, type: typeof(SCServiceChannelServicesMessagingWorkordersChangeWorkOrderResponse))]
        [ProducesResponseType(statusCode: 400, type: typeof(SCServiceChannelServicesMessagingErrorResponse))]
        [ProducesResponseType(statusCode: 401, type: typeof(SCServiceChannelServicesMessagingErrorResponse))]
        [ProducesResponseType(statusCode: 403, type: typeof(SCServiceChannelServicesMessagingErrorResponse))]
        public abstract Task<IActionResult> WorkordersworkorderIdServicenowid([FromRoute (Name = "workorderId")][Required]int workorderId, [FromBody]SCServiceChannelServicesMessagingWorkordersWorkOrderServiceNowIdRequest workOrderServiceNowIdRequest);

        /// <summary>
        /// Mark if refrigerant was used
        /// </summary>
        /// <param name="workorderId">Work Order id</param>
        /// <param name="moeNumber">MOE Number</param>
        /// <response code="200">Indicates that the request succeeded</response>
        /// <response code="400">Bad Request - the request could not be understood or was missing required parameters.</response>
        /// <response code="401">Indicates that the requested resource requires authentication.&lt;br&gt;Error codes:&lt;br&gt; 504 - API call rejected by security permissions;</response>
        /// <response code="404">Indicates that the requested resource does not exist on the server.</response>
        [HttpPut]
        [Route("/v3/workorders/{workorderId}/SetMoeNumber")]
        [ValidateModelState]
        [ProducesResponseType(statusCode: 400, type: typeof(SCServiceChannelServicesMessagingErrorResponse))]
        [ProducesResponseType(statusCode: 401, type: typeof(SCServiceChannelServicesMessagingErrorResponse))]
        public abstract Task<IActionResult> WorkordersworkorderIdSetMoeNumbermoeNumbermoeNumber([FromRoute (Name = "workorderId")][Required]int workorderId, [FromQuery (Name = "moeNumber")][Required()]string moeNumber);

        /// <summary>
        /// Update a Work order Status
        /// </summary>
        /// <remarks>Updates Work Order status with optional Note. Returns Work order Id for successful request.              &lt;br /&gt;&lt;br /&gt;This method can only be used for users with &#39;WorkOrderStatusChange&#39; permissions.              Available for provider and subscriber usage.</remarks>
        /// <param name="workorderId">Numeric Id of the Work order to perform action with.</param>
        /// <param name="updateRequestExt">The update request. Work order Status.</param>
        /// <response code="200">Indicates that the request succeeded and that the requested information is in the response.</response>
        /// <response code="400">Bad Request - the request could not be understood or was missing required parameters.              &lt;br/&gt;Error codes:              &lt;br/&gt; 100 - You don&#39;t have location access to perform this operation;              &lt;br/&gt; User has no permissions to perform this action;              &lt;br/&gt; 502 - WorkOrder not found;              &lt;br/&gt; 503 - Request data is empty; User data not found;              &lt;br/&gt; 904 - Invalid WorkOrder status;              &lt;br/&gt; User has no permission to set selected status;              &lt;br/&gt; 921 - Cannot update invoiced Work order;              &lt;br/&gt; 9001 - Decline reason id is required;              &lt;br/&gt; 9002 - This decline reason doesn&#39;t allow custom text</response>
        /// <response code="401">Indicates that the requested resource requires authentication.              &lt;br/&gt;Error codes:              &lt;br/&gt; 504 - API call rejected by security permissions;</response>
        /// <response code="500">Indicates that a generic error has occurred on the server.</response>
        [HttpPut]
        [Route("/v3/workorders/{workorderId}/status")]
        [Consumes("application/json", "text/json", "application/xml", "text/xml", "application/x-www-form-urlencoded")]
        [ValidateModelState]
        [ProducesResponseType(statusCode: 200, type: typeof(SCServiceChannelServicesMessagingWorkordersChangeWorkOrderStatusResponse))]
        [ProducesResponseType(statusCode: 400, type: typeof(SCServiceChannelServicesMessagingErrorResponse))]
        [ProducesResponseType(statusCode: 401, type: typeof(SCServiceChannelServicesMessagingErrorResponse))]
        [ProducesResponseType(statusCode: 500, type: typeof(SCServiceChannelServicesMessagingErrorResponse))]
        public abstract Task<IActionResult> WorkordersworkorderIdStatus([FromRoute (Name = "workorderId")][Required]int workorderId, [FromBody]SCServiceChannelServicesMessagingWorkordersChangeWoStatusRequestExt updateRequestExt);

        /// <summary>
        /// Statuses Collection that relates to the state of work order
        /// </summary>
        /// <remarks>Retrieves list of available Work order statuses that are related to current work order state.              Id value can be used instead of primary status name in Update Status method.</remarks>
        /// <param name="workorderId">Numeric Id of the Work order to perform action with.</param>
        /// <param name="subscriberId">This parameter is required only for provider.</param>
        /// <param name="tradeId">Optional, if LimitStatusesByTrade FF is on</param>
        /// <response code="200">Indicates that the request succeeded and that the requested information is in the response.</response>
        /// <response code="400">Bad Request - the request could not be understood or was missing required parameters.</response>
        /// <response code="401">Indicates that the requested resource requires authentication.              &lt;br/&gt;Error codes:              &lt;br/&gt; 504 - API call rejected by security permissions;</response>
        [HttpGet]
        [Route("/v3/workorders/{workorderId}/statuses")]
        [ValidateModelState]
        [ProducesResponseType(statusCode: 200, type: typeof(List<SCServiceChannelServicesMessagingWorkordersGetStatusResponse>))]
        [ProducesResponseType(statusCode: 400, type: typeof(SCServiceChannelServicesMessagingErrorResponse))]
        [ProducesResponseType(statusCode: 401, type: typeof(SCServiceChannelServicesMessagingErrorResponse))]
        public abstract Task<IActionResult> WorkordersworkorderIdStatusessubscriberIdsubscriberIdtradeIdtradeId([FromRoute (Name = "workorderId")][Required]int workorderId, [FromQuery (Name = "subscriberId")]int? subscriberId, [FromQuery (Name = "tradeId")]int? tradeId);

        /// <summary>
        /// Retrieve list of technicians assigned to the specified work order
        /// </summary>
        /// <param name="workorderId"></param>
        /// <response code="200">Indicates that the request succeeded and that the requested information is in the response.</response>
        /// <response code="401">Indicates that the requested resource requires authentication.                                                       &lt;br/&gt;Error codes:                                                       &lt;br/&gt;504 - API call rejected by security permissions;</response>
        /// <response code="403">Indicates that the server refuses to fulfill the request.                                                       &lt;br/&gt;Error codes:                                                       &lt;br/&gt;504 - Work order doesn&#39;t belong to the current user</response>
        /// <response code="404">Not Found - the requested resource could not be found but may be available in the future.                                                           &lt;br/&gt;Error codes:                                                           &lt;br/&gt;502 - Work order is not found;</response>
        /// <response code="500">Indicates that a generic error has occurred on the server.           &lt;br/&gt;Error codes:           &lt;br/&gt;501 - Timeout expired. The timeout period elapsed prior to completion of the operation or the server is not responding.</response>
        [HttpGet]
        [Route("/v3/workorders/{workorderId}/techniciansAssigned")]
        [ValidateModelState]
        [ProducesResponseType(statusCode: 401, type: typeof(SCServiceChannelServicesMessagingErrorResponse))]
        [ProducesResponseType(statusCode: 403, type: typeof(SCServiceChannelServicesMessagingErrorResponse))]
        [ProducesResponseType(statusCode: 404, type: typeof(SCServiceChannelServicesMessagingErrorResponse))]
        [ProducesResponseType(statusCode: 500, type: typeof(SCServiceChannelServicesMessagingErrorResponse))]
        public abstract Task<IActionResult> WorkordersworkorderIdTechniciansAssigned([FromRoute (Name = "workorderId")][Required]int workorderId);

        /// <summary>
        /// Change Work order Trade
        /// </summary>
        /// <param name="workorderId"></param>
        /// <param name="updateRequest"></param>
        /// <response code="200">Indicates that the request succeeded and that the requested information is in the response.</response>
        /// <response code="400">Bad Request - the request could not be understood or was missing required parameters.              &lt;br/&gt;Error codes:              &lt;br/&gt; 100 - You don&#39;t have location access to perform this operation;              &lt;br/&gt; 502 - Data not found. Returned if target Work order is not found database;              &lt;br/&gt; 503 - Request data is empty;              &lt;br/&gt; 921 - Cannot update invoiced Work order;              &lt;br/&gt; 934 - Invalid Work order Trade specified. Returned if trade exceeds max len (50 chars) or is empty</response>
        /// <response code="401">Indicates that the requested resource requires authentication.              &lt;br/&gt;Error codes:              &lt;br/&gt; 504 - API call rejected by security permissions;</response>
        /// <response code="500">Indicates that a generic error has occurred on the server.</response>
        [HttpPut]
        [Route("/v3/workorders/{workorderId}/trade")]
        [Consumes("application/json", "text/json", "application/xml", "text/xml", "application/x-www-form-urlencoded")]
        [ValidateModelState]
        [ProducesResponseType(statusCode: 200, type: typeof(SCServiceChannelServicesMessagingWorkordersChangeWorkOrderResponse))]
        [ProducesResponseType(statusCode: 400, type: typeof(SCServiceChannelServicesMessagingErrorResponse))]
        [ProducesResponseType(statusCode: 401, type: typeof(SCServiceChannelServicesMessagingErrorResponse))]
        [ProducesResponseType(statusCode: 500, type: typeof(SCServiceChannelServicesMessagingErrorResponse))]
        public abstract Task<IActionResult> WorkordersworkorderIdTrade([FromRoute (Name = "workorderId")][Required]int workorderId, [FromBody]SCServiceChannelServicesMessagingWorkordersChangeWoFieldsRequest updateRequest);

        /// <summary>
        /// Perform a check-in
        /// </summary>
        /// <remarks>Creates a check-in record of the indicated work type: travel, repair, or custom. Returns &#x60;MechanicId&#x60; for a successful request.              See the [Check-In/Out guide](https://developer.servicechannel.com/guides/checkin/about-check-in-out/) for code snippets and detailed instructions.              &lt;br /&gt;***Note:*** [Special permission](https://developer.servicechannel.com/guides/checkin/before-you-start/#check-inout-permissions) is required for the Travel and Repair work types.              &lt;br /&gt;**Example Request**                                POST /workorders/{workorderId}/universalCheckIn                  {                    \&quot;WorkTypeId\&quot;: 1,                    \&quot;UserId\&quot;: 1544987,                    \&quot;TechsCount\&quot;: 2,                    \&quot;Latitude\&quot;: 40.736618,                    \&quot;Longitude\&quot;: -73.991806,                    \&quot;CheckInTime\&quot;: \&quot;2018-10-23T08:30:00Z\&quot;                  }</remarks>
        /// <param name="workorderId">The unique ID of the work order for which you want to report a check-in.</param>
        /// <param name="request">The check-in object that needs to be created.</param>
        /// <response code="200">The check-in record is created.</response>
        /// <response code="400">The request is not accepted due to bad syntax, missing parameters, insufficient data, etc.              &lt;br/&gt;Error codes:              502 - Work order not found              503 - Required data missing or incorrect              503 - Provide your location to perform check-in or check-out              503 - Work type not found              503 - Check-in or check-out premature              503 - Check-in or check-out time should be close to current location time              503 - Check-in or check-out out of date              804 - User has no permission to perform this action              917 - Invalid WO tracking number              921 - Cannot update work order in one of the completed statuses              924 - Work order has been invoiced and cannot be changed              924 - No changes can be made to this maintenance work order because it is expired or premature              924 - Cannot check in/out of work order in … status              924 - Client not participating in GPS check-in process; use IVR              924 - Store has no GPS coordinates              941 - Can’t perform check-in or check-out: out of ... mile range</response>
        /// <response code="401">The request is not authorized.              &lt;br/&gt;Error codes:              504 - Missing or incorrect authentication credentials</response>
        /// <response code="405">The method is not allowed.</response>
        [HttpPost]
        [Route("/v3/workorders/{workorderId}/universalCheckIn")]
        [Consumes("application/json", "text/json", "application/xml", "text/xml", "application/x-www-form-urlencoded")]
        [ValidateModelState]
        [ProducesResponseType(statusCode: 200, type: typeof(SCServiceChannelServicesMessagingCheckInOutCheckInOutResponse))]
        [ProducesResponseType(statusCode: 400, type: typeof(SCServiceChannelServicesMessagingErrorResponse))]
        [ProducesResponseType(statusCode: 401, type: typeof(SCServiceChannelServicesMessagingErrorResponse))]
        public abstract Task<IActionResult> WorkordersworkorderIdUniversalCheckIn([FromRoute (Name = "workorderId")][Required]int workorderId, [FromBody]SCServiceChannelServicesMessagingWorkordersCheckInRequest request);

        /// <summary>
        /// Perform a check-out
        /// </summary>
        /// <remarks>Creates a check-out record of the indicated work type: travel, repair, or custom. Returns &#x60;MechanicId&#x60; for a successful request.              See the [Check-In/Out guide](https://developer.servicechannel.com/guides/checkin/about-check-in-out/) for code snippets and detailed instructions.              &lt;br /&gt;***Note:*** [Special permission](https://developer.servicechannel.com/guides/checkin/before-you-start/#check-inout-permissions) is required for the Travel and Repair work types.              &lt;br /&gt;**Example Request**                                POST /workorders/{workorderId}/universalCheckOut                  {                    \&quot;WorkTypeId\&quot;: 1,                    \&quot;PrimaryStatus\&quot;: \&quot;InProgress\&quot;,                    \&quot;ExtendedStatus\&quot;: \&quot;string\&quot;,                    \&quot;ActionStatus\&quot;: \&quot;Complete\&quot;,                    \&quot;Resolution\&quot;: \&quot;We need more time to complete this job.\&quot;,                    \&quot;UserId\&quot;: 1544987,                    \&quot;Latitude\&quot;: 40.736618,                    \&quot;Longitude\&quot;: -73.991806,                    \&quot;CheckOutTime\&quot;: \&quot;2018-10-23T09:30:00Z\&quot;                  }</remarks>
        /// <param name="workorderId">The unique ID of the work order for which you want to report a check-out.</param>
        /// <param name="request">The check-out object that needs to be created.</param>
        /// <response code="200">The check-out record is created.</response>
        /// <response code="400">The request is not accepted due to bad syntax, missing parameters, insufficient data, etc.              &lt;br/&gt;Error codes:              502 - Work order not found              503 - Required data missing or incorrect              503 - Provide your location to perform check-in or check-out              503 - User has not checked in              503 - Work type not found              503 - Check-in or check-out premature              503 - Check-in or check-out time should be close to current location time              503 - Check-in or check-out out of date              503 - Invalid SignatureAttachmentId              503 - Invalid UnableObtainSignatureNoteId              503 - You can set either SignatureAttachmentId or UnableObtainSignatureNoteId but not both              503 - No access to electronic signatures              804 - User has no permission to perform this action              904 - User does not have … extended status that belongs to … primary status              917 - Invalid WO tracking number              921 - Cannot update work order in one of the completed statuses              925 - Work order has been invoiced and cannot be changed              925 - No changes can be made to this maintenance work order because it is expired or premature              925 - Cannot check in/out of work order in … status              925 - Client not participating in GPS check-in process; use IVR              925 - Store has no GPS coordinates              942 - Can’t perform check-in or check-out: out of ... mile range</response>
        /// <response code="401">The request is not authorized.              &lt;br/&gt;Error codes:              504 - Missing or incorrect authentication credentials</response>
        /// <response code="405">The method is not allowed.</response>
        [HttpPost]
        [Route("/v3/workorders/{workorderId}/universalCheckOut")]
        [Consumes("application/json", "text/json", "application/xml", "text/xml", "application/x-www-form-urlencoded")]
        [ValidateModelState]
        [ProducesResponseType(statusCode: 200, type: typeof(SCServiceChannelServicesMessagingCheckInOutCheckInOutResponse))]
        [ProducesResponseType(statusCode: 400, type: typeof(SCServiceChannelServicesMessagingErrorResponse))]
        [ProducesResponseType(statusCode: 401, type: typeof(SCServiceChannelServicesMessagingErrorResponse))]
        public abstract Task<IActionResult> WorkordersworkorderIdUniversalCheckOut([FromRoute (Name = "workorderId")][Required]int workorderId, [FromBody]SCServiceChannelServicesMessagingWorkordersCheckOutRequest request);

        /// <summary>
        /// Removes link between two Work Orders
        /// </summary>
        /// <remarks>&lt;para&gt;Current Work Order is parent, followUp Work Order is linked Work Order&lt;/para&gt;  &lt;para&gt;If you set &#39;linkedWorkorderId&#39; parameter then &#39;WorkorderIds&#39; parameter of requested body will be ignored.&lt;/para&gt;  &lt;br /&gt;  &lt;br /&gt;Available for provider and subscriber usage.</remarks>
        /// <param name="workorderId">Parent Work Order id</param>
        /// <param name="request">UnLink Workorders Request</param>
        /// <param name="linkedWorkorderId">Work Order Id that Unlinks from parent. Optional.</param>
        /// <response code="204">Indicates that the request succeeded</response>
        /// <response code="400">Bad Request - the request could not be understood or was missing required parameters.&lt;br/&gt;Error codes:&lt;br/&gt;           917 - Wrong Parent Work Order Id;&lt;br&gt;           932 - Wrong Linked Work Order Id</response>
        /// <response code="401">Indicates that the requested resource requires authentication.&lt;br&gt;Error codes:&lt;br&gt; 504 - API call rejected by security permissions;</response>
        [HttpPut]
        [Route("/v3/workorders/{workorderId}/unlink")]
        [Consumes("application/json", "text/json", "application/xml", "text/xml", "application/x-www-form-urlencoded")]
        [ValidateModelState]
        [ProducesResponseType(statusCode: 400, type: typeof(SCServiceChannelServicesMessagingErrorResponse))]
        [ProducesResponseType(statusCode: 401, type: typeof(SCServiceChannelServicesMessagingErrorResponse))]
        public abstract Task<IActionResult> WorkordersworkorderIdUnlinklinkedWorkorderIdlinkedWorkorderId([FromRoute (Name = "workorderId")][Required]int workorderId, [FromBody]SCServiceChannelServicesMessagingWorkordersUnlinkWorkordersRequest request, [FromQuery (Name = "linkedWorkorderId")]int? linkedWorkorderId);

        /// <summary>
        /// Validate Check-In action
        /// </summary>
        /// <remarks>Validate Check-In action</remarks>
        /// <param name="workorderId">Numeric Id of the Work order to perform action with.</param>
        /// <param name="latitude">Global position. Latitude</param>
        /// <param name="longitude">Global position. Longitude</param>
        /// <param name="workTypeId">Optional, type work Id. 1 - &#39;Repair&#39;, 2 - &#39;Travel&#39;              Default value is 1 (&#39;Repair&#39;). Supports custom types.</param>
        /// <response code="200">Indicates that the request succeeded and that the requested information is in the response.</response>
        /// <response code="400">Bad Request - the request could not be understood or was missing required parameters.              &lt;br/&gt;Error codes:              &lt;br/&gt; 502 - WorkOrder not found;              &lt;br/&gt; 503 - Request data is empty;              &lt;br/&gt;Provide your location to perform checkin/checkout;              &lt;br/&gt; 917 - Invalid Tracking Number;              &lt;br/&gt; 921 - Cannot update work order in &#39;completed&#39; status;              &lt;br/&gt;Cannot update invoiced work order;              &lt;br/&gt; 924 - Work order has been invoiced and cannot be changed;              &lt;br/&gt; 941 - Can&#39;t do check in: out of ... mile range;</response>
        /// <response code="401">Indicates that the requested resource requires authentication.              &lt;br/&gt;Error codes:              &lt;br/&gt; 504 - API call rejected by security permissions;</response>
        /// <response code="405">Indicates that the request method is not allowed on the requested resource.</response>
        [HttpGet]
        [Route("/v3/workorders/{workorderId}/validateCheckIn")]
        [ValidateModelState]
        [ProducesResponseType(statusCode: 200, type: typeof(SCServiceChannelServicesMessagingCheckInOutCheckInValidateResponse))]
        [ProducesResponseType(statusCode: 400, type: typeof(SCServiceChannelServicesMessagingErrorResponse))]
        [ProducesResponseType(statusCode: 401, type: typeof(SCServiceChannelServicesMessagingErrorResponse))]
        public abstract Task<IActionResult> WorkordersworkorderIdValidateCheckInWorkTypeIdWorkTypeIdLatitudeLatitudeLongitudeLongitude([FromRoute (Name = "workorderId")][Required]int workorderId, [FromQuery (Name = "latitude")][Required()]double latitude, [FromQuery (Name = "longitude")][Required()]double longitude, [FromQuery (Name = "workTypeId")]int? workTypeId);

        /// <summary>
        /// Validate Check-Out action
        /// </summary>
        /// <remarks>Validate Check-Out action</remarks>
        /// <param name="workorderId">Numeric Id of the Work order to perform action with.</param>
        /// <param name="latitude">Global position. Latitude</param>
        /// <param name="longitude">Global position. Longitude</param>
        /// <param name="workTypeId">Optional, type work Id. 1 - &#39;Repair&#39;, 2 - &#39;Travel&#39;              Default value is 1 (&#39;Repair&#39;). Supports custom types.</param>
        /// <response code="200">Indicates that the request succeeded and that the requested information is in the response.</response>
        /// <response code="400">Bad Request - the request could not be understood or was missing required parameters.              &lt;br/&gt;Error codes:              &lt;br/&gt; 502 - WorkOrder not found;              &lt;br/&gt; 503 - Request data is empty;              &lt;br/&gt;Provide your location to perform checkin/checkout;              &lt;br/&gt; 917 - Invalid Tracking Number;              &lt;br/&gt; 921 - Cannot update work order in &#39;completed&#39; status;              &lt;br/&gt;Cannot update invoiced work order;              &lt;br/&gt; 924 - Work order has been invoiced and cannot be changed;              &lt;br/&gt; 941 - Can&#39;t do check out: out of ... mile range;</response>
        /// <response code="401">Indicates that the requested resource requires authentication.              &lt;br/&gt;Error codes:              &lt;br/&gt; 504 - API call rejected by security permissions;</response>
        /// <response code="405">Indicates that the request method is not allowed on the requested resource.</response>
        [HttpGet]
        [Route("/v3/workorders/{workorderId}/validateCheckOut")]
        [ValidateModelState]
        [ProducesResponseType(statusCode: 200, type: typeof(SCServiceChannelServicesMessagingCheckInOutCheckInValidateResponse))]
        [ProducesResponseType(statusCode: 400, type: typeof(SCServiceChannelServicesMessagingErrorResponse))]
        [ProducesResponseType(statusCode: 401, type: typeof(SCServiceChannelServicesMessagingErrorResponse))]
        public abstract Task<IActionResult> WorkordersworkorderIdValidateCheckOutWorkTypeIdWorkTypeIdLatitudeLatitudeLongitudeLongitude([FromRoute (Name = "workorderId")][Required]int workorderId, [FromQuery (Name = "latitude")][Required()]double latitude, [FromQuery (Name = "longitude")][Required()]double longitude, [FromQuery (Name = "workTypeId")]int? workTypeId);

        /// <summary>
        /// Update weather type
        /// </summary>
        /// <remarks>Updates weather type.              &lt;br /&gt;&lt;br /&gt;This method can only be used for users with &#39;WorkOrderFullEdit&#39; permissions.</remarks>
        /// <param name="workorderId">Numeric Id of the Work order to perform action with.</param>
        /// <param name="updateRequest">The update request. WeatherTypeId (put Value as empty to remove weather type).</param>
        /// <param name="subscriberId">The subscriber Id to use (if logged in as a provider).</param>
        /// <response code="200">Indicates that the request succeeded and that the requested information is in the response.</response>
        /// <response code="400">Bad Request - the request could not be understood or was missing required parameters.              &lt;br/&gt;Error codes:              &lt;br/&gt; 100 - You don&#39;t have location access to perform this operation;              &lt;br/&gt; 502 - Data not found. Returned if target Work order is not found database;              &lt;br/&gt; 503 - Request data is empty;              &lt;br/&gt; 923 - Invalid Work order number specified. Returned if duplicate number is found for this provider or if value exceeds max len (20 chars);              &lt;br/&gt; 921 - Cannot update invoiced Work order;</response>
        /// <response code="401">Indicates that the requested resource requires authentication.              &lt;br/&gt;Error codes:              &lt;br/&gt; 504 - API call rejected by security permissions;</response>
        /// <response code="500">Indicates that a generic error has occurred on the server.</response>
        [HttpPut]
        [Route("/v3/workorders/{workorderId}/weatherTypeId")]
        [Consumes("application/json", "text/json", "application/xml", "text/xml", "application/x-www-form-urlencoded")]
        [ValidateModelState]
        [ProducesResponseType(statusCode: 200, type: typeof(SCServiceChannelServicesMessagingWorkordersChangeWorkOrderResponse))]
        [ProducesResponseType(statusCode: 400, type: typeof(SCServiceChannelServicesMessagingErrorResponse))]
        [ProducesResponseType(statusCode: 401, type: typeof(SCServiceChannelServicesMessagingErrorResponse))]
        [ProducesResponseType(statusCode: 500, type: typeof(SCServiceChannelServicesMessagingErrorResponse))]
        public abstract Task<IActionResult> WorkordersworkorderIdWeatherTypeIdsubscriberIdsubscriberId([FromRoute (Name = "workorderId")][Required]int workorderId, [FromBody]SCServiceChannelServicesMessagingWorkordersChangeWoWeatherTypeIdRequest updateRequest, [FromQuery (Name = "subscriberId")]int? subscriberId);

        /// <summary>
        /// Update Work order Number
        /// </summary>
        /// <remarks>Updates Work order Number.              &lt;br /&gt;&lt;br /&gt;This method can only be used for users with &#39;WorkOrderFullEdit&#39; permissions.</remarks>
        /// <param name="workorderId">Numeric Id of the Work order to perform action with.</param>
        /// <param name="updateRequest">The update request. Work order Number.</param>
        /// <response code="200">Indicates that the request succeeded and that the requested information is in the response.</response>
        /// <response code="400">Bad Request - the request could not be understood or was missing required parameters.              &lt;br/&gt;Error codes:              &lt;br/&gt; 100 - You don&#39;t have location access to perform this operation;              &lt;br/&gt; 502 - Data not found. Returned if target Work order is not found database;              &lt;br/&gt; 503 - Request data is empty;              &lt;br/&gt; 923 - Invalid Work order number specified. Returned if duplicate number is found for this provider or if value exceeds max len (20 chars);              &lt;br/&gt; 921 - Cannot update invoiced Work order;</response>
        /// <response code="401">Indicates that the requested resource requires authentication.              &lt;br/&gt;Error codes:              &lt;br/&gt; 504 - API call rejected by security permissions;</response>
        /// <response code="500">Indicates that a generic error has occurred on the server.</response>
        [HttpPut]
        [Route("/v3/workorders/{workorderId}/wonumber")]
        [Consumes("application/json", "text/json", "application/xml", "text/xml", "application/x-www-form-urlencoded")]
        [ValidateModelState]
        [ProducesResponseType(statusCode: 200, type: typeof(SCServiceChannelServicesMessagingWorkordersChangeWorkOrderResponse))]
        [ProducesResponseType(statusCode: 400, type: typeof(SCServiceChannelServicesMessagingErrorResponse))]
        [ProducesResponseType(statusCode: 401, type: typeof(SCServiceChannelServicesMessagingErrorResponse))]
        [ProducesResponseType(statusCode: 500, type: typeof(SCServiceChannelServicesMessagingErrorResponse))]
        public abstract Task<IActionResult> WorkordersworkorderIdWonumber([FromRoute (Name = "workorderId")][Required]int workorderId, [FromBody]SCServiceChannelServicesMessagingWorkordersChangeWoFieldsRequest updateRequest);

        /// <summary>
        /// Work types Collection
        /// </summary>
        /// <remarks>Retrieves list of Work types.</remarks>
        /// <param name="subscriberId">This parameter is required only for provider.</param>
        /// <response code="200">Indicates that the request succeeded and that the requested information is in the response.</response>
        /// <response code="400">Bad Request - the request could not be understood or was missing required parameters.</response>
        /// <response code="401">Indicates that the requested resource requires authentication.              &lt;br/&gt;Error codes:              &lt;br/&gt; 504 - API call rejected by security permissions;</response>
        [HttpGet]
        [Route("/v3/worktypes")]
        [ValidateModelState]
        [ProducesResponseType(statusCode: 200, type: typeof(List<SCServiceChannelServicesMessagingV4WorkordersWorkTypeResponse>))]
        [ProducesResponseType(statusCode: 400, type: typeof(SCServiceChannelServicesMessagingErrorResponse))]
        [ProducesResponseType(statusCode: 401, type: typeof(SCServiceChannelServicesMessagingErrorResponse))]
        public abstract Task<IActionResult> WorktypessubscriberIdsubscriberId([FromQuery (Name = "subscriberId")]int? subscriberId);
    }
}
