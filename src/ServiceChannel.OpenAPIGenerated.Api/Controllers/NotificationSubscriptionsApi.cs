/*
 * ServiceChannel API - v.3
 *
 * The ServiceChannel API is a RESTful and stateless API. It accepts standard HTTP verbs and supports OAuth 2.0 for authorizing requests.      Our API returns common HTTP status codes as well as JSON encapsulated data.      See [API Overview](https://developer.servicechannel.com/basics/introduction/overview/) for the intro to ServiceChannel API.<br>      <h3>Authentication and Authorization</h3>You should have a ServiceChannel account, register your application, and obtain `access_token` to integrate with our API.      See [Authentication and Authorization](https://developer.servicechannel.com/basics/general/authentication/) for more information.      To use this API playground, click **Authorize** and sign in to ServiceChannel.<br>      <h3>Environment</h3> All calls in this API Reference point to the **SB2 environment**.      See [Environments](https://developer.servicechannel.com/basics/general/environments/) for more information.<br>      <h3>API Version</h3>The current stable version of the ServiceChannel API is `v3`. In the request URL, `v3` is a version prefix that should be present.      When you omit the version prefix, calls point to the minimum supported version of the API.      We recommend you to always specify the API version to avoid possible errors.
 *
 * The version of the OpenAPI document: 3
 * 
 * Generated by: https://openapi-generator.tech
 */

using System;
using System.Collections.Generic;
using System.ComponentModel.DataAnnotations;
using System.Threading;
using System.Threading.Tasks;
using Microsoft.AspNetCore.Authorization;
using Microsoft.AspNetCore.Mvc;
using Microsoft.AspNetCore.Http;
using ServiceChannel.OpenAPIGenerated.Api.Attributes;
using ServiceChannel.OpenAPIGenerated.Api.Models;

namespace ServiceChannel.OpenAPIGenerated.Api.Controllers
{ 
    /// <summary>
    /// 
    /// </summary>
    [ApiController]
    public abstract class NotificationSubscriptionsApiController : ControllerBase
    { 
        /// <summary>
        /// Get providers exclusion list
        /// </summary>
        /// <remarks>List providers who opted out to not receive the notifications</remarks>
        /// <param name="emailNotificationType">1 - Declined WO; 2 - WO Assigned to User; 4 - ETA Missed; 5 - LNH Autocopy</param>
        /// <response code="200">The requested providers are in the response.</response>
        /// <response code="400">The request is not accepted due to bad syntax, missing parameters, insufficient data, etc.              &lt;br/&gt;Error codes:              401 — Invalid subsriber ID              804 — User has no permissions to perform this action</response>
        /// <response code="401">The request is not authorized.              &lt;br/&gt;Error codes:              504 — API call rejected by security permissions</response>
        /// <response code="404">The requested resource does not exist on the server.</response>
        /// <response code="500">The server was unable to complete the request due to an internal error.</response>
        [HttpGet]
        [Route("/v3/GetProvidersExclusionList")]
        [ValidateModelState]
        [ProducesResponseType(statusCode: 200, type: typeof(SCServiceChannelServicesMessagingPermissionProvidersExclusionListResponse))]
        [ProducesResponseType(statusCode: 400, type: typeof(SCServiceChannelServicesMessagingErrorResponse))]
        [ProducesResponseType(statusCode: 401, type: typeof(SCServiceChannelServicesMessagingErrorResponse))]
        [ProducesResponseType(statusCode: 404, type: typeof(SCServiceChannelServicesMessagingErrorResponse))]
        [ProducesResponseType(statusCode: 500, type: typeof(SCServiceChannelServicesMessagingErrorResponse))]
        public abstract Task<IActionResult> GetProvidersExclusionListemailNotificationTypeemailNotificationType([FromQuery (Name = "emailNotificationType")][Required()]int emailNotificationType);

        /// <summary>
        /// Subscribe to Notification
        /// </summary>
        /// <remarks>Creates a new Subscription. Returns a unique subscription ID for a successful request.              See [Event Objects](https://developer.servicechannel.com/guides/wh/event-objects/) for example notification objects and descriptions of their fields.              &lt;br /&gt;**Example Request**                                POST /NotificationSubscriptions/Subscribe                  {                    \&quot;Name\&quot;: \&quot;New Subscription\&quot;,                    \&quot;IsEnabled\&quot;: true,                    \&quot;Type\&quot;: \&quot;MSBot\&quot;,                    \&quot;Content\&quot;:                     {                      \&quot;ConversationId\&quot;:\&quot;a:1aV4BNOWtTdqJhkdgsdfhsdfhsgjdfgjdrtydjyj\&quot;,                      \&quot;TenantId\&quot;:\&quot;1111111-1111-1111-1111-111111111111\&quot;,                      \&quot;UserId\&quot;:\&quot;29:1oTNViX5ByDxfsgdfgsdhgjlnkkli\&quot;,                      \&quot;UserName\&quot;:\&quot;First Last\&quot;,                      \&quot;ServiceUrl\&quot;:\&quot;https://smba.trafficmanager.net/amer/\&quot;                    }                  }</remarks>
        /// <param name="request">The subscription object that needs to be created.</param>
        /// <response code="201">The subscription is created.</response>
        /// <response code="400">The request is not accepted due to bad syntax, missing parameters, insufficient data, etc.              &lt;br/&gt;Error codes:              2105 - Operation is not allowed.              503 - Required data missing or incorrect</response>
        /// <response code="401">The request is not authorized.              &lt;br/&gt;Error codes:              504 - Missing or incorrect authentication credentials</response>
        [HttpPost]
        [Route("/v3/NotificationSubscriptions")]
        [Consumes("application/json", "text/json", "application/xml", "text/xml", "application/x-www-form-urlencoded")]
        [ValidateModelState]
        [ProducesResponseType(statusCode: 201, type: typeof(SCServiceChannelServicesMessagingNotificationsAddNotificationSubsciptionResponse))]
        [ProducesResponseType(statusCode: 400, type: typeof(SCServiceChannelServicesMessagingErrorResponse))]
        [ProducesResponseType(statusCode: 401, type: typeof(SCServiceChannelServicesMessagingErrorResponse))]
        public abstract Task<IActionResult> NotificationSubscriptions([FromBody]SCServiceChannelServicesMessagingNotificationsNotificationSubscriptionRequest request);

        /// <summary>
        /// List existing subscriptions
        /// </summary>
        /// <remarks>Returns a list of subscriptions for the current subscriber or provider.</remarks>
        /// <response code="200">The subscriptions are in the response.</response>
        /// <response code="401">The request is not authorized.              &lt;br/&gt;Error codes:              504 - Missing or incorrect authentication credentials</response>
        [HttpGet]
        [Route("/v3/NotificationSubscriptions/Http")]
        [ValidateModelState]
        [ProducesResponseType(statusCode: 200, type: typeof(List<SCServiceChannelServicesMessagingNotificationsHttpNotificationSubscription>))]
        [ProducesResponseType(statusCode: 401, type: typeof(SCServiceChannelServicesMessagingErrorResponse))]
        public abstract Task<IActionResult> NotificationSubscriptionsHttp();

        /// <summary>
        /// Create a subscription
        /// </summary>
        /// <remarks>Creates a new subscription to the specified [event types](https://developer.servicechannel.com/guides/wh/types-of-events/). Returns a unique subscription ID for a successful request.              See [Event Objects](https://developer.servicechannel.com/guides/wh/event-objects/) for example notification objects and descriptions of their fields.              &lt;br /&gt;**Example Request**                                POST /NotificationSubscriptions/Http                  {                    \&quot;Url\&quot;: \&quot;https://your-company.com/webhook-target-URL\&quot;,                    \&quot;Enabled\&quot;: true,                    \&quot;Name\&quot;: \&quot;Subscription to new WOs\&quot;,                    \&quot;EventTypes\&quot;: [                      \&quot;WorkOrderCreated\&quot;                    ],                    \&quot;Rules\&quot;: {                      \&quot;Trades\&quot;: [                        \&quot;GLASS\&quot;                      ],                      \&quot;Categories\&quot;: [                        \&quot;MAINTENANCE\&quot;                      ]                    }                  }</remarks>
        /// <param name="req">The subscription object that needs to be created.</param>
        /// <response code="201">The subscription is created.</response>
        /// <response code="400">The request is not accepted due to bad syntax, missing parameters, insufficient data, etc.              &lt;br/&gt;Error codes:              503 - Required data missing or incorrect</response>
        /// <response code="401">The request is not authorized.              &lt;br/&gt;Error codes:              504 - Missing or incorrect authentication credentials</response>
        [HttpPost]
        [Route("/v3/NotificationSubscriptions/Http")]
        [Consumes("application/json", "text/json", "application/xml", "text/xml", "application/x-www-form-urlencoded")]
        [ValidateModelState]
        [ProducesResponseType(statusCode: 201, type: typeof(SCServiceChannelServicesMessagingNotificationsAddNotificationSubsciptionResponse))]
        [ProducesResponseType(statusCode: 400, type: typeof(SCServiceChannelServicesMessagingErrorResponse))]
        [ProducesResponseType(statusCode: 401, type: typeof(SCServiceChannelServicesMessagingErrorResponse))]
        public abstract Task<IActionResult> NotificationSubscriptionsHttp_0([FromBody]SCServiceChannelServicesMessagingNotificationsAddHttpNotificationSubscriptionRequest req);

        /// <summary>
        /// Get a subscription
        /// </summary>
        /// <remarks>Retrieves the details of the specified subscription.</remarks>
        /// <param name="id">The unique ID of the subscription to return.</param>
        /// <response code="200">The requested subscription is in the response.</response>
        /// <response code="400">The requested data are not found.              &lt;br/&gt;Error codes:              502 - Subscription not found</response>
        /// <response code="401">The request is not authorized.              &lt;br/&gt;Error codes:              504 - Missing or incorrect authentication credentials</response>
        [HttpGet]
        [Route("/v3/NotificationSubscriptions/Http/{id}")]
        [ValidateModelState]
        [ProducesResponseType(statusCode: 200, type: typeof(SCServiceChannelServicesMessagingNotificationsHttpNotificationSubscription))]
        [ProducesResponseType(statusCode: 400, type: typeof(SCServiceChannelServicesMessagingErrorResponse))]
        [ProducesResponseType(statusCode: 401, type: typeof(SCServiceChannelServicesMessagingErrorResponse))]
        public abstract Task<IActionResult> NotificationSubscriptionsHttpid([FromRoute (Name = "id")][Required]int id);

        /// <summary>
        /// Update a subscription
        /// </summary>
        /// <remarks>Updates the specified subscription by setting the values of the parameters passed.              &lt;br /&gt;**Example Request**                                PUT /NotificationSubscriptions/Http/{id}                  {                    \&quot;Id\&quot;: 1111,                    \&quot;Url\&quot;: \&quot;https://your-company.com/webhook-target-URL\&quot;,                    \&quot;Enabled\&quot;: true,                    \&quot;Name\&quot;: \&quot;Subscription to new WOs\&quot;,                    \&quot;EventTypes\&quot;: [                      \&quot;WorkOrderCreated\&quot;                    ],                    \&quot;Rules\&quot;: {                      \&quot;Trades\&quot;: [                        \&quot;GLASS\&quot;                      ],                      \&quot;Categories\&quot;: [                        \&quot;MAINTENANCE\&quot;                      ]                    }                  }</remarks>
        /// <param name="id">The unique ID of the subscription to update.</param>
        /// <param name="req">The subscription object that needs to be updated.</param>
        /// <response code="204">The subscription is updated, and the response is intentionally blank.</response>
        /// <response code="400">The request is not accepted due to bad syntax, missing parameters, insufficient data, etc.              &lt;br/&gt;Error codes:              502 - Subscription not found              503 - Required data missing or incorrect</response>
        /// <response code="401">The request is not authorized.              &lt;br/&gt;Error codes:              504 - Missing or incorrect authentication credentials</response>
        [HttpPut]
        [Route("/v3/NotificationSubscriptions/Http/{id}")]
        [Consumes("application/json", "text/json", "application/xml", "text/xml", "application/x-www-form-urlencoded")]
        [ValidateModelState]
        [ProducesResponseType(statusCode: 400, type: typeof(SCServiceChannelServicesMessagingErrorResponse))]
        [ProducesResponseType(statusCode: 401, type: typeof(SCServiceChannelServicesMessagingErrorResponse))]
        public abstract Task<IActionResult> NotificationSubscriptionsHttpid_0([FromRoute (Name = "id")][Required]int id, [FromBody]SCServiceChannelServicesMessagingNotificationsHttpNotificationSubscription req);

        /// <summary>
        /// Delete a subscription
        /// </summary>
        /// <remarks>Permanently deletes the specified subscription. It cannot be undone.</remarks>
        /// <param name="id">The unique ID of the subscription to delete.</param>
        /// <response code="204">The subscription is deleted, and the response is intentionally blank.</response>
        /// <response code="400">The requested data are not found.              &lt;br/&gt;Error codes:              502 - Subscription not found</response>
        /// <response code="401">The request is not authorized.              &lt;br/&gt;Error codes:              504 - Missing or incorrect authentication credentials</response>
        [HttpDelete]
        [Route("/v3/NotificationSubscriptions/Http/{id}")]
        [ValidateModelState]
        [ProducesResponseType(statusCode: 400, type: typeof(SCServiceChannelServicesMessagingErrorResponse))]
        [ProducesResponseType(statusCode: 401, type: typeof(SCServiceChannelServicesMessagingErrorResponse))]
        public abstract Task<IActionResult> NotificationSubscriptionsHttpid_1([FromRoute (Name = "id")][Required]int id);

        /// <summary>
        /// Get MSTeams Subscription
        /// </summary>
        /// <remarks>Retrieves the details of the specified subscription.</remarks>
        /// <param name="conversationId">Conversation Identifier.</param>
        /// <response code="200">The requested subscription is in the response.</response>
        /// <response code="400">The requested data are not found.              &lt;br/&gt;Error codes:              502 - Subscription not found</response>
        /// <response code="401">The request is not authorized.              &lt;br/&gt;Error codes:              504 - Missing or incorrect authentication credentials</response>
        [HttpGet]
        [Route("/v3/NotificationSubscriptions/msteams")]
        [ValidateModelState]
        [ProducesResponseType(statusCode: 200, type: typeof(SCServiceChannelServicesMessagingNotificationsMSBotNotificationSubscriptionResponse))]
        [ProducesResponseType(statusCode: 400, type: typeof(SCServiceChannelServicesMessagingErrorResponse))]
        [ProducesResponseType(statusCode: 401, type: typeof(SCServiceChannelServicesMessagingErrorResponse))]
        public abstract Task<IActionResult> NotificationSubscriptionsMsteamsconversationIdconversationId([FromQuery (Name = "conversationId")][Required()]string conversationId);

        /// <summary>
        /// Get a signing key
        /// </summary>
        /// <remarks>Retrieves the current subscriber&#39;s or provider&#39;s signing key.              A signing key is used to generate event signatures. Use your key to [verify that notifications are sent by SC](https://developer.servicechannel.com/guides/wh/receive-events-and-respond/#verify-an-event).</remarks>
        /// <response code="200">The signing key is in the response.</response>
        /// <response code="401">The request is not authorized.              &lt;br/&gt;Error codes:              504 - Missing or incorrect authentication credentials</response>
        [HttpGet]
        [Route("/v3/NotificationSubscriptions/SigningKey")]
        [ValidateModelState]
        [ProducesResponseType(statusCode: 200, type: typeof(SCServiceChannelServicesMessagingNotificationsSigningKeyResponse))]
        [ProducesResponseType(statusCode: 401, type: typeof(SCServiceChannelServicesMessagingErrorResponse))]
        public abstract Task<IActionResult> NotificationSubscriptionsSigningKey();

        /// <summary>
        /// Regenerate a signing key
        /// </summary>
        /// <remarks>Regenerates the current subscriber&#39;s or provider&#39;s signing key. The previous signing key becomes invalid.</remarks>
        /// <response code="200">The new signing key is in the response.</response>
        /// <response code="401">The request is not authorized.              &lt;br/&gt;Error codes:              504 - Missing or incorrect authentication credentials</response>
        [HttpPut]
        [Route("/v3/NotificationSubscriptions/SigningKey")]
        [ValidateModelState]
        [ProducesResponseType(statusCode: 200, type: typeof(SCServiceChannelServicesMessagingNotificationsSigningKeyResponse))]
        [ProducesResponseType(statusCode: 401, type: typeof(SCServiceChannelServicesMessagingErrorResponse))]
        public abstract Task<IActionResult> NotificationSubscriptionsSigningKey_0();

        /// <summary>
        /// UnSubscribe
        /// </summary>
        /// <remarks>Permanently deletes the specified subscription. It cannot be undone.</remarks>
        /// <param name="id">The unique ID of the subscription.</param>
        /// <param name="type">type of the subscription.</param>
        /// <response code="204">The subscription is deleted, and the response is intentionally blank.</response>
        /// <response code="400">The requested data are not found.              &lt;br/&gt;Error codes:              2105 - Operation is not allowed.              502 - Subscription not found</response>
        /// <response code="401">The request is not authorized.              &lt;br/&gt;Error codes:              504 - Missing or incorrect authentication credentials</response>
        [HttpDelete]
        [Route("/v3/NotificationSubscriptions/{id}")]
        [ValidateModelState]
        [ProducesResponseType(statusCode: 400, type: typeof(SCServiceChannelServicesMessagingErrorResponse))]
        [ProducesResponseType(statusCode: 401, type: typeof(SCServiceChannelServicesMessagingErrorResponse))]
        public abstract Task<IActionResult> NotificationSubscriptionsidtypetype([FromRoute (Name = "id")][Required]int id, [FromQuery (Name = "type")][Required()]string type);
    }
}
