/*
 * ServiceChannel API - v.3
 *
 * The ServiceChannel API is a RESTful and stateless API. It accepts standard HTTP verbs and supports OAuth 2.0 for authorizing requests.      Our API returns common HTTP status codes as well as JSON encapsulated data.      See [API Overview](https://developer.servicechannel.com/basics/introduction/overview/) for the intro to ServiceChannel API.<br>      <h3>Authentication and Authorization</h3>You should have a ServiceChannel account, register your application, and obtain `access_token` to integrate with our API.      See [Authentication and Authorization](https://developer.servicechannel.com/basics/general/authentication/) for more information.      To use this API playground, click **Authorize** and sign in to ServiceChannel.<br>      <h3>Environment</h3> All calls in this API Reference point to the **SB2 environment**.      See [Environments](https://developer.servicechannel.com/basics/general/environments/) for more information.<br>      <h3>API Version</h3>The current stable version of the ServiceChannel API is `v3`. In the request URL, `v3` is a version prefix that should be present.      When you omit the version prefix, calls point to the minimum supported version of the API.      We recommend you to always specify the API version to avoid possible errors.
 *
 * The version of the OpenAPI document: 3
 * 
 * Generated by: https://openapi-generator.tech
 */

using System;
using System.Linq;
using System.Text;
using System.Collections.Generic;
using System.ComponentModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using System.Text.Json;
using ServiceChannel.OpenAPIGenerated.Api.Converters;

namespace ServiceChannel.OpenAPIGenerated.Api.Models
{ 
    /// <summary>
    /// CreateWoRequest
    /// </summary>
    [DataContract]
    public class SCServiceChannelServicesMessagingWorkordersCreateWoRequest : IEquatable<SCServiceChannelServicesMessagingWorkordersCreateWoRequest>
    {
        /// <summary>
        /// Work Order Number
        /// </summary>
        /// <value>Work Order Number</value>
        [DataMember(Name="Number", EmitDefaultValue=false)]
        public string Number { get; set; }

        /// <summary>
        /// Purchase Order Number
        /// </summary>
        /// <value>Purchase Order Number</value>
        [DataMember(Name="PurchaseNumber", EmitDefaultValue=false)]
        public string PurchaseNumber { get; set; }

        /// <summary>
        /// Optional
        /// </summary>
        /// <value>Optional</value>
        [DataMember(Name="HasTruncatedDescription", EmitDefaultValue=true)]
        public bool HasTruncatedDescription { get; set; } = false;

        /// <summary>
        /// Gets or Sets ContractInfo
        /// </summary>
        [Required]
        [DataMember(Name="ContractInfo", EmitDefaultValue=false)]
        public SCServiceChannelServicesMessagingWorkordersContractInfo ContractInfo { get; set; }

        /// <summary>
        /// Optional, Gets or sets the comment. Describes comments in work order
        /// </summary>
        /// <value>Optional, Gets or sets the comment. Describes comments in work order</value>
        [DataMember(Name="Comment", EmitDefaultValue=false)]
        public string Comment { get; set; }

        /// <summary>
        /// Optional Dashboard Id, UID of dashboard from which this work order was created              must be bigger then zero and belong to existing dashboard
        /// </summary>
        /// <value>Optional Dashboard Id, UID of dashboard from which this work order was created              must be bigger then zero and belong to existing dashboard</value>
        [DataMember(Name="SetupId", EmitDefaultValue=true)]
        public int SetupId { get; set; }

        /// <summary>
        /// Optional Asset, UID of asset, that will be repaired/reinstalled              must be present and correspond to valid asset if system finds that asset exists for specified LocationId,              TradeName, IssueRequest.EquipmentType params and asset is required for issue choice specified by IssueRequest,              SubscriberId and SetupId params
        /// </summary>
        /// <value>Optional Asset, UID of asset, that will be repaired/reinstalled              must be present and correspond to valid asset if system finds that asset exists for specified LocationId,              TradeName, IssueRequest.EquipmentType params and asset is required for issue choice specified by IssueRequest,              SubscriberId and SetupId params</value>
        [DataMember(Name="AssetId", EmitDefaultValue=true)]
        public int AssetId { get; set; }

        /// <summary>
        /// Optional
        /// </summary>
        /// <value>Optional</value>
        [DataMember(Name="ReplaceAsset", EmitDefaultValue=true)]
        public bool ReplaceAsset { get; set; } = false;

        /// <summary>
        /// Optional, can be empty Caller Name. Name of the person/organization who created work order
        /// </summary>
        /// <value>Optional, can be empty Caller Name. Name of the person/organization who created work order</value>
        [DataMember(Name="CallerName", EmitDefaultValue=false)]
        public string CallerName { get; set; }

        /// <summary>
        /// Required, not empty Category must be valid category for specified subscriber. Describes what type of work will be performed.              This definition is broader then TradeName.              For example if TradeName is \&quot;FLOOR MAINTENANCE\&quot; then Category will be \&quot;Maintenance\&quot;
        /// </summary>
        /// <value>Required, not empty Category must be valid category for specified subscriber. Describes what type of work will be performed.              This definition is broader then TradeName.              For example if TradeName is \&quot;FLOOR MAINTENANCE\&quot; then Category will be \&quot;Maintenance\&quot;</value>
        [Required]
        [DataMember(Name="Category", EmitDefaultValue=false)]
        public string Category { get; set; }

        /// <summary>
        /// Gets or Sets CategoryId
        /// </summary>
        [DataMember(Name="CategoryId", EmitDefaultValue=true)]
        public int CategoryId { get; set; }

        /// <summary>
        /// Required, not empty Priority must be valid priority for specified subscriber. Describes work order priority.              For example \&quot;Normal\&quot;, \&quot;Emergency\&quot;
        /// </summary>
        /// <value>Required, not empty Priority must be valid priority for specified subscriber. Describes work order priority.              For example \&quot;Normal\&quot;, \&quot;Emergency\&quot;</value>
        [Required]
        [DataMember(Name="Priority", EmitDefaultValue=false)]
        public string Priority { get; set; }

        /// <summary>
        /// Required Nte value; optional only for users that have no access to change NTE. (decimal number (e.g. 1.00)) - describes maximum amount of money to be spent on work order.              Must not exceed max amount defined by Subscriber.              If you specify ExtendedInfo.Tax, ExtendedInfo.Tax2 and ExtendedInfo.Price then Nte must be equal to sum of those three params
        /// </summary>
        /// <value>Required Nte value; optional only for users that have no access to change NTE. (decimal number (e.g. 1.00)) - describes maximum amount of money to be spent on work order.              Must not exceed max amount defined by Subscriber.              If you specify ExtendedInfo.Tax, ExtendedInfo.Tax2 and ExtendedInfo.Price then Nte must be equal to sum of those three params</value>
        [DataMember(Name="Nte", EmitDefaultValue=true)]
        public double Nte { get; set; }

        /// <summary>
        /// Required, date when work order was created.
        /// </summary>
        /// <value>Required, date when work order was created.</value>
        [Required]
        [DataMember(Name="CallDate", EmitDefaultValue=false)]
        public string CallDate { get; set; }

        /// <summary>
        /// Optional, calculated based on CallDate and Priority by default. Date when provider will come to perform work order.              Must be an actual date (i.e. not 1/1/1900 or 1/1/3001) + must be bigger then CallDate and smaller then ExpirationDate
        /// </summary>
        /// <value>Optional, calculated based on CallDate and Priority by default. Date when provider will come to perform work order.              Must be an actual date (i.e. not 1/1/1900 or 1/1/3001) + must be bigger then CallDate and smaller then ExpirationDate</value>
        [DataMember(Name="ScheduledDate", EmitDefaultValue=false)]
        public string ScheduledDate { get; set; }

        /// <summary>
        /// Optional, WorkDate when its not completed status.
        /// </summary>
        /// <value>Optional, WorkDate when its not completed status.</value>
        [DataMember(Name="CompletedDate", EmitDefaultValue=false)]
        public string CompletedDate { get; set; }

        /// <summary>
        /// Optional, source from which the problem came from
        /// </summary>
        /// <value>Optional, source from which the problem came from</value>
        [DataMember(Name="ProblemSource", EmitDefaultValue=false)]
        public string ProblemSource { get; set; }

        /// <summary>
        /// Required problem description, Must not be empty. Overall description of a problem (e.g. \&quot;Coffee machines are broken all over the place - please help!\&quot;)
        /// </summary>
        /// <value>Required problem description, Must not be empty. Overall description of a problem (e.g. \&quot;Coffee machines are broken all over the place - please help!\&quot;)</value>
        [Required]
        [DataMember(Name="Description", EmitDefaultValue=false)]
        public string Description { get; set; }

        /// <summary>
        /// Required, describes problem similar to Description attribute, but its value is predefined in subscriber&#39;s [IssueList].
        /// </summary>
        /// <value>Required, describes problem similar to Description attribute, but its value is predefined in subscriber&#39;s [IssueList].</value>
        [Required]
        [DataMember(Name="ProblemCode", EmitDefaultValue=false)]
        public string ProblemCode { get; set; }

        /// <summary>
        /// Optional,  UID of recalled work order. Work order is set as &#39;recalled&#39; when subscriber isn&#39;t satisfied with work that was done by provider
        /// </summary>
        /// <value>Optional,  UID of recalled work order. Work order is set as &#39;recalled&#39; when subscriber isn&#39;t satisfied with work that was done by provider</value>
        [DataMember(Name="RecallWorkOrder", EmitDefaultValue=true)]
        public int RecallWorkOrder { get; set; }

        /// <summary>
        /// Optional, Service Now Id
        /// </summary>
        /// <value>Optional, Service Now Id</value>
        [DataMember(Name="ServiceNowId", EmitDefaultValue=false)]
        public string ServiceNowId { get; set; }

        /// <summary>
        /// Optional, UID of currency used to pay for work order. Defaul value is &#39;1&#39; which corresponds to USD.              Must be bigger then 0 and correspond to valid currency in dashboard which is found by SetupId param
        /// </summary>
        /// <value>Optional, UID of currency used to pay for work order. Defaul value is &#39;1&#39; which corresponds to USD.              Must be bigger then 0 and correspond to valid currency in dashboard which is found by SetupId param</value>
        [DataMember(Name="CurrencyId", EmitDefaultValue=true)]
        public int CurrencyId { get; set; }

        /// <summary>
        /// Optional, UID of work order that is created if problem cannot be fully solved in terms of original work order
        /// </summary>
        /// <value>Optional, UID of work order that is created if problem cannot be fully solved in terms of original work order</value>
        [DataMember(Name="FollowupWorkOrder", EmitDefaultValue=true)]
        public int FollowupWorkOrder { get; set; }

        /// <summary>
        /// Optional
        /// </summary>
        /// <value>Optional</value>
        [DataMember(Name="ApprovalCode", EmitDefaultValue=false)]
        public string ApprovalCode { get; set; }

        /// <summary>
        /// Gets or Sets IssueRequestInfo
        /// </summary>
        [DataMember(Name="IssueRequestInfo", EmitDefaultValue=false)]
        public SCServiceChannelServicesMessagingWorkordersCreateWoRequestIssueRequest IssueRequestInfo { get; set; }

        /// <summary>
        /// Gets or Sets DispatchSettingsInfo
        /// </summary>
        [DataMember(Name="DispatchSettingsInfo", EmitDefaultValue=false)]
        public SCServiceChannelServicesMessagingWorkordersCreateWoRequestDispatchSettings DispatchSettingsInfo { get; set; }

        /// <summary>
        /// Gets or Sets Status
        /// </summary>
        [DataMember(Name="Status", EmitDefaultValue=false)]
        public SCServiceChannelServicesMessagingWorkordersWorkorderStatus Status { get; set; }

        /// <summary>
        /// Gets or Sets ExtendedInfo
        /// </summary>
        [DataMember(Name="ExtendedInfo", EmitDefaultValue=false)]
        public SCServiceChannelServicesMessagingWorkordersCreateWoRequestExtendedRequestInfo ExtendedInfo { get; set; }

        /// <summary>
        /// Optional, at least one attachement must be present in list if system finds that attachments are required for issue choice specified by IssueRequest,              SubscriberId and SetupId params
        /// </summary>
        /// <value>Optional, at least one attachement must be present in list if system finds that attachments are required for issue choice specified by IssueRequest,              SubscriberId and SetupId params</value>
        [DataMember(Name="Attachments", EmitDefaultValue=false)]
        public List<SCServiceChannelServicesMessagingAttachmentsAddAttachmentRequest> Attachments { get; set; }

        /// <summary>
        /// Gets or Sets IgnoreAttachmentsRequiredFlag
        /// </summary>
        [DataMember(Name="IgnoreAttachmentsRequiredFlag", EmitDefaultValue=true)]
        public bool IgnoreAttachmentsRequiredFlag { get; set; } = false;

        /// <summary>
        /// Gets or Sets ApiRequest
        /// </summary>
        [DataMember(Name="ApiRequest", EmitDefaultValue=true)]
        public bool ApiRequest { get; set; } = false;

        /// <summary>
        /// Optional
        /// </summary>
        /// <value>Optional</value>
        [DataMember(Name="Materials", EmitDefaultValue=false)]
        public List<SCServiceChannelServicesMessagingWorkordersCreateWoRequestMaterial> Materials { get; set; }

        /// <summary>
        /// Optional
        /// </summary>
        /// <value>Optional</value>
        [DataMember(Name="MaterialsUsed", EmitDefaultValue=false)]
        public List<SCServiceChannelServicesMessagingRefrigerantTrackingAddWorkOrderPartRefrigerantItem> MaterialsUsed { get; set; }

        /// <summary>
        /// Interactive troubleshooting additional fileds
        /// </summary>
        /// <value>Interactive troubleshooting additional fileds</value>
        [DataMember(Name="AdditionalFields", EmitDefaultValue=false)]
        public List<SCServiceChannelServicesMessagingWorkordersCreateWoRequestAdditionalField> AdditionalFields { get; set; }

        /// <summary>
        /// Optional. Id in dash_IssueListHeader table
        /// </summary>
        /// <value>Optional. Id in dash_IssueListHeader table</value>
        [DataMember(Name="IssueListHeaderId", EmitDefaultValue=true)]
        public int IssueListHeaderId { get; set; }

        /// <summary>
        /// Optional
        /// </summary>
        /// <value>Optional</value>
        [DataMember(Name="ProposedNte", EmitDefaultValue=true)]
        public double ProposedNte { get; set; }

        /// <summary>
        /// Optional
        /// </summary>
        /// <value>Optional</value>
        [DataMember(Name="NotifyProvider", EmitDefaultValue=true)]
        public bool NotifyProvider { get; set; } = false;

        /// <summary>
        /// Optional
        /// </summary>
        /// <value>Optional</value>
        [DataMember(Name="IsDashboardRequest", EmitDefaultValue=true)]
        public bool IsDashboardRequest { get; set; } = false;

        /// <summary>
        /// Optional
        /// </summary>
        /// <value>Optional</value>
        [DataMember(Name="FloorPlansImagePath", EmitDefaultValue=false)]
        public string FloorPlansImagePath { get; set; }

        /// <summary>
        /// Optional. Project Id from Project Tracker
        /// </summary>
        /// <value>Optional. Project Id from Project Tracker</value>
        [DataMember(Name="ProjectId", EmitDefaultValue=true)]
        public int ProjectId { get; set; }

        /// <summary>
        /// Optional. Associate with a specific weather type
        /// </summary>
        /// <value>Optional. Associate with a specific weather type</value>
        [DataMember(Name="WeatherTypeId", EmitDefaultValue=true)]
        public int WeatherTypeId { get; set; }

        /// <summary>
        /// Optional, Label Id
        /// </summary>
        /// <value>Optional, Label Id</value>
        [DataMember(Name="LabelId", EmitDefaultValue=true)]
        public int LabelId { get; set; }

        /// <summary>
        /// Additional Approval Codes
        /// </summary>
        /// <value>Additional Approval Codes</value>
        [DataMember(Name="AdditionalApprovalCodes", EmitDefaultValue=false)]
        public Dictionary<string, string> AdditionalApprovalCodes { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class SCServiceChannelServicesMessagingWorkordersCreateWoRequest {\n");
            sb.Append("  Number: ").Append(Number).Append("\n");
            sb.Append("  PurchaseNumber: ").Append(PurchaseNumber).Append("\n");
            sb.Append("  HasTruncatedDescription: ").Append(HasTruncatedDescription).Append("\n");
            sb.Append("  ContractInfo: ").Append(ContractInfo).Append("\n");
            sb.Append("  Comment: ").Append(Comment).Append("\n");
            sb.Append("  SetupId: ").Append(SetupId).Append("\n");
            sb.Append("  AssetId: ").Append(AssetId).Append("\n");
            sb.Append("  ReplaceAsset: ").Append(ReplaceAsset).Append("\n");
            sb.Append("  CallerName: ").Append(CallerName).Append("\n");
            sb.Append("  Category: ").Append(Category).Append("\n");
            sb.Append("  CategoryId: ").Append(CategoryId).Append("\n");
            sb.Append("  Priority: ").Append(Priority).Append("\n");
            sb.Append("  Nte: ").Append(Nte).Append("\n");
            sb.Append("  CallDate: ").Append(CallDate).Append("\n");
            sb.Append("  ScheduledDate: ").Append(ScheduledDate).Append("\n");
            sb.Append("  CompletedDate: ").Append(CompletedDate).Append("\n");
            sb.Append("  ProblemSource: ").Append(ProblemSource).Append("\n");
            sb.Append("  Description: ").Append(Description).Append("\n");
            sb.Append("  ProblemCode: ").Append(ProblemCode).Append("\n");
            sb.Append("  RecallWorkOrder: ").Append(RecallWorkOrder).Append("\n");
            sb.Append("  ServiceNowId: ").Append(ServiceNowId).Append("\n");
            sb.Append("  CurrencyId: ").Append(CurrencyId).Append("\n");
            sb.Append("  FollowupWorkOrder: ").Append(FollowupWorkOrder).Append("\n");
            sb.Append("  ApprovalCode: ").Append(ApprovalCode).Append("\n");
            sb.Append("  IssueRequestInfo: ").Append(IssueRequestInfo).Append("\n");
            sb.Append("  DispatchSettingsInfo: ").Append(DispatchSettingsInfo).Append("\n");
            sb.Append("  Status: ").Append(Status).Append("\n");
            sb.Append("  ExtendedInfo: ").Append(ExtendedInfo).Append("\n");
            sb.Append("  Attachments: ").Append(Attachments).Append("\n");
            sb.Append("  IgnoreAttachmentsRequiredFlag: ").Append(IgnoreAttachmentsRequiredFlag).Append("\n");
            sb.Append("  ApiRequest: ").Append(ApiRequest).Append("\n");
            sb.Append("  Materials: ").Append(Materials).Append("\n");
            sb.Append("  MaterialsUsed: ").Append(MaterialsUsed).Append("\n");
            sb.Append("  AdditionalFields: ").Append(AdditionalFields).Append("\n");
            sb.Append("  IssueListHeaderId: ").Append(IssueListHeaderId).Append("\n");
            sb.Append("  ProposedNte: ").Append(ProposedNte).Append("\n");
            sb.Append("  NotifyProvider: ").Append(NotifyProvider).Append("\n");
            sb.Append("  IsDashboardRequest: ").Append(IsDashboardRequest).Append("\n");
            sb.Append("  FloorPlansImagePath: ").Append(FloorPlansImagePath).Append("\n");
            sb.Append("  ProjectId: ").Append(ProjectId).Append("\n");
            sb.Append("  WeatherTypeId: ").Append(WeatherTypeId).Append("\n");
            sb.Append("  LabelId: ").Append(LabelId).Append("\n");
            sb.Append("  AdditionalApprovalCodes: ").Append(AdditionalApprovalCodes).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            var options = new JsonSerializerOptions
            {
                WriteIndented = true
            };

            return JsonSerializer.Serialize(this, options);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (obj is null) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((SCServiceChannelServicesMessagingWorkordersCreateWoRequest)obj);
        }

        /// <summary>
        /// Returns true if SCServiceChannelServicesMessagingWorkordersCreateWoRequest instances are equal
        /// </summary>
        /// <param name="other">Instance of SCServiceChannelServicesMessagingWorkordersCreateWoRequest to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(SCServiceChannelServicesMessagingWorkordersCreateWoRequest other)
        {
            if (other is null) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    Number == other.Number ||
                    Number != null &&
                    Number.Equals(other.Number)
                ) && 
                (
                    PurchaseNumber == other.PurchaseNumber ||
                    PurchaseNumber != null &&
                    PurchaseNumber.Equals(other.PurchaseNumber)
                ) && 
                (
                    HasTruncatedDescription == other.HasTruncatedDescription ||
                    
                    HasTruncatedDescription.Equals(other.HasTruncatedDescription)
                ) && 
                (
                    ContractInfo == other.ContractInfo ||
                    ContractInfo != null &&
                    ContractInfo.Equals(other.ContractInfo)
                ) && 
                (
                    Comment == other.Comment ||
                    Comment != null &&
                    Comment.Equals(other.Comment)
                ) && 
                (
                    SetupId == other.SetupId ||
                    
                    SetupId.Equals(other.SetupId)
                ) && 
                (
                    AssetId == other.AssetId ||
                    
                    AssetId.Equals(other.AssetId)
                ) && 
                (
                    ReplaceAsset == other.ReplaceAsset ||
                    
                    ReplaceAsset.Equals(other.ReplaceAsset)
                ) && 
                (
                    CallerName == other.CallerName ||
                    CallerName != null &&
                    CallerName.Equals(other.CallerName)
                ) && 
                (
                    Category == other.Category ||
                    Category != null &&
                    Category.Equals(other.Category)
                ) && 
                (
                    CategoryId == other.CategoryId ||
                    
                    CategoryId.Equals(other.CategoryId)
                ) && 
                (
                    Priority == other.Priority ||
                    Priority != null &&
                    Priority.Equals(other.Priority)
                ) && 
                (
                    Nte == other.Nte ||
                    
                    Nte.Equals(other.Nte)
                ) && 
                (
                    CallDate == other.CallDate ||
                    CallDate != null &&
                    CallDate.Equals(other.CallDate)
                ) && 
                (
                    ScheduledDate == other.ScheduledDate ||
                    ScheduledDate != null &&
                    ScheduledDate.Equals(other.ScheduledDate)
                ) && 
                (
                    CompletedDate == other.CompletedDate ||
                    CompletedDate != null &&
                    CompletedDate.Equals(other.CompletedDate)
                ) && 
                (
                    ProblemSource == other.ProblemSource ||
                    ProblemSource != null &&
                    ProblemSource.Equals(other.ProblemSource)
                ) && 
                (
                    Description == other.Description ||
                    Description != null &&
                    Description.Equals(other.Description)
                ) && 
                (
                    ProblemCode == other.ProblemCode ||
                    ProblemCode != null &&
                    ProblemCode.Equals(other.ProblemCode)
                ) && 
                (
                    RecallWorkOrder == other.RecallWorkOrder ||
                    
                    RecallWorkOrder.Equals(other.RecallWorkOrder)
                ) && 
                (
                    ServiceNowId == other.ServiceNowId ||
                    ServiceNowId != null &&
                    ServiceNowId.Equals(other.ServiceNowId)
                ) && 
                (
                    CurrencyId == other.CurrencyId ||
                    
                    CurrencyId.Equals(other.CurrencyId)
                ) && 
                (
                    FollowupWorkOrder == other.FollowupWorkOrder ||
                    
                    FollowupWorkOrder.Equals(other.FollowupWorkOrder)
                ) && 
                (
                    ApprovalCode == other.ApprovalCode ||
                    ApprovalCode != null &&
                    ApprovalCode.Equals(other.ApprovalCode)
                ) && 
                (
                    IssueRequestInfo == other.IssueRequestInfo ||
                    IssueRequestInfo != null &&
                    IssueRequestInfo.Equals(other.IssueRequestInfo)
                ) && 
                (
                    DispatchSettingsInfo == other.DispatchSettingsInfo ||
                    DispatchSettingsInfo != null &&
                    DispatchSettingsInfo.Equals(other.DispatchSettingsInfo)
                ) && 
                (
                    Status == other.Status ||
                    Status != null &&
                    Status.Equals(other.Status)
                ) && 
                (
                    ExtendedInfo == other.ExtendedInfo ||
                    ExtendedInfo != null &&
                    ExtendedInfo.Equals(other.ExtendedInfo)
                ) && 
                (
                    Attachments == other.Attachments ||
                    Attachments != null &&
                    other.Attachments != null &&
                    Attachments.SequenceEqual(other.Attachments)
                ) && 
                (
                    IgnoreAttachmentsRequiredFlag == other.IgnoreAttachmentsRequiredFlag ||
                    
                    IgnoreAttachmentsRequiredFlag.Equals(other.IgnoreAttachmentsRequiredFlag)
                ) && 
                (
                    ApiRequest == other.ApiRequest ||
                    
                    ApiRequest.Equals(other.ApiRequest)
                ) && 
                (
                    Materials == other.Materials ||
                    Materials != null &&
                    other.Materials != null &&
                    Materials.SequenceEqual(other.Materials)
                ) && 
                (
                    MaterialsUsed == other.MaterialsUsed ||
                    MaterialsUsed != null &&
                    other.MaterialsUsed != null &&
                    MaterialsUsed.SequenceEqual(other.MaterialsUsed)
                ) && 
                (
                    AdditionalFields == other.AdditionalFields ||
                    AdditionalFields != null &&
                    other.AdditionalFields != null &&
                    AdditionalFields.SequenceEqual(other.AdditionalFields)
                ) && 
                (
                    IssueListHeaderId == other.IssueListHeaderId ||
                    
                    IssueListHeaderId.Equals(other.IssueListHeaderId)
                ) && 
                (
                    ProposedNte == other.ProposedNte ||
                    
                    ProposedNte.Equals(other.ProposedNte)
                ) && 
                (
                    NotifyProvider == other.NotifyProvider ||
                    
                    NotifyProvider.Equals(other.NotifyProvider)
                ) && 
                (
                    IsDashboardRequest == other.IsDashboardRequest ||
                    
                    IsDashboardRequest.Equals(other.IsDashboardRequest)
                ) && 
                (
                    FloorPlansImagePath == other.FloorPlansImagePath ||
                    FloorPlansImagePath != null &&
                    FloorPlansImagePath.Equals(other.FloorPlansImagePath)
                ) && 
                (
                    ProjectId == other.ProjectId ||
                    
                    ProjectId.Equals(other.ProjectId)
                ) && 
                (
                    WeatherTypeId == other.WeatherTypeId ||
                    
                    WeatherTypeId.Equals(other.WeatherTypeId)
                ) && 
                (
                    LabelId == other.LabelId ||
                    
                    LabelId.Equals(other.LabelId)
                ) && 
                (
                    AdditionalApprovalCodes == other.AdditionalApprovalCodes ||
                    AdditionalApprovalCodes != null &&
                    other.AdditionalApprovalCodes != null &&
                    AdditionalApprovalCodes.SequenceEqual(other.AdditionalApprovalCodes)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    if (Number != null)
                    hashCode = hashCode * 59 + Number.GetHashCode();
                    if (PurchaseNumber != null)
                    hashCode = hashCode * 59 + PurchaseNumber.GetHashCode();
                    
                    hashCode = hashCode * 59 + HasTruncatedDescription.GetHashCode();
                    if (ContractInfo != null)
                    hashCode = hashCode * 59 + ContractInfo.GetHashCode();
                    if (Comment != null)
                    hashCode = hashCode * 59 + Comment.GetHashCode();
                    
                    hashCode = hashCode * 59 + SetupId.GetHashCode();
                    
                    hashCode = hashCode * 59 + AssetId.GetHashCode();
                    
                    hashCode = hashCode * 59 + ReplaceAsset.GetHashCode();
                    if (CallerName != null)
                    hashCode = hashCode * 59 + CallerName.GetHashCode();
                    if (Category != null)
                    hashCode = hashCode * 59 + Category.GetHashCode();
                    
                    hashCode = hashCode * 59 + CategoryId.GetHashCode();
                    if (Priority != null)
                    hashCode = hashCode * 59 + Priority.GetHashCode();
                    
                    hashCode = hashCode * 59 + Nte.GetHashCode();
                    if (CallDate != null)
                    hashCode = hashCode * 59 + CallDate.GetHashCode();
                    if (ScheduledDate != null)
                    hashCode = hashCode * 59 + ScheduledDate.GetHashCode();
                    if (CompletedDate != null)
                    hashCode = hashCode * 59 + CompletedDate.GetHashCode();
                    if (ProblemSource != null)
                    hashCode = hashCode * 59 + ProblemSource.GetHashCode();
                    if (Description != null)
                    hashCode = hashCode * 59 + Description.GetHashCode();
                    if (ProblemCode != null)
                    hashCode = hashCode * 59 + ProblemCode.GetHashCode();
                    
                    hashCode = hashCode * 59 + RecallWorkOrder.GetHashCode();
                    if (ServiceNowId != null)
                    hashCode = hashCode * 59 + ServiceNowId.GetHashCode();
                    
                    hashCode = hashCode * 59 + CurrencyId.GetHashCode();
                    
                    hashCode = hashCode * 59 + FollowupWorkOrder.GetHashCode();
                    if (ApprovalCode != null)
                    hashCode = hashCode * 59 + ApprovalCode.GetHashCode();
                    if (IssueRequestInfo != null)
                    hashCode = hashCode * 59 + IssueRequestInfo.GetHashCode();
                    if (DispatchSettingsInfo != null)
                    hashCode = hashCode * 59 + DispatchSettingsInfo.GetHashCode();
                    if (Status != null)
                    hashCode = hashCode * 59 + Status.GetHashCode();
                    if (ExtendedInfo != null)
                    hashCode = hashCode * 59 + ExtendedInfo.GetHashCode();
                    if (Attachments != null)
                    hashCode = hashCode * 59 + Attachments.GetHashCode();
                    
                    hashCode = hashCode * 59 + IgnoreAttachmentsRequiredFlag.GetHashCode();
                    
                    hashCode = hashCode * 59 + ApiRequest.GetHashCode();
                    if (Materials != null)
                    hashCode = hashCode * 59 + Materials.GetHashCode();
                    if (MaterialsUsed != null)
                    hashCode = hashCode * 59 + MaterialsUsed.GetHashCode();
                    if (AdditionalFields != null)
                    hashCode = hashCode * 59 + AdditionalFields.GetHashCode();
                    
                    hashCode = hashCode * 59 + IssueListHeaderId.GetHashCode();
                    
                    hashCode = hashCode * 59 + ProposedNte.GetHashCode();
                    
                    hashCode = hashCode * 59 + NotifyProvider.GetHashCode();
                    
                    hashCode = hashCode * 59 + IsDashboardRequest.GetHashCode();
                    if (FloorPlansImagePath != null)
                    hashCode = hashCode * 59 + FloorPlansImagePath.GetHashCode();
                    
                    hashCode = hashCode * 59 + ProjectId.GetHashCode();
                    
                    hashCode = hashCode * 59 + WeatherTypeId.GetHashCode();
                    
                    hashCode = hashCode * 59 + LabelId.GetHashCode();
                    if (AdditionalApprovalCodes != null)
                    hashCode = hashCode * 59 + AdditionalApprovalCodes.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(SCServiceChannelServicesMessagingWorkordersCreateWoRequest left, SCServiceChannelServicesMessagingWorkordersCreateWoRequest right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(SCServiceChannelServicesMessagingWorkordersCreateWoRequest left, SCServiceChannelServicesMessagingWorkordersCreateWoRequest right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}
