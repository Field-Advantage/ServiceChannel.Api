/*
 * ServiceChannel API - v.3
 *
 * The ServiceChannel API is a RESTful and stateless API. It accepts standard HTTP verbs and supports OAuth 2.0 for authorizing requests.      Our API returns common HTTP status codes as well as JSON encapsulated data.      See [API Overview](https://developer.servicechannel.com/basics/introduction/overview/) for the intro to ServiceChannel API.<br>      <h3>Authentication and Authorization</h3>You should have a ServiceChannel account, register your application, and obtain `access_token` to integrate with our API.      See [Authentication and Authorization](https://developer.servicechannel.com/basics/general/authentication/) for more information.      To use this API playground, click **Authorize** and sign in to ServiceChannel.<br>      <h3>Environment</h3> All calls in this API Reference point to the **SB2 environment**.      See [Environments](https://developer.servicechannel.com/basics/general/environments/) for more information.<br>      <h3>API Version</h3>The current stable version of the ServiceChannel API is `v3`. In the request URL, `v3` is a version prefix that should be present.      When you omit the version prefix, calls point to the minimum supported version of the API.      We recommend you to always specify the API version to avoid possible errors.
 *
 * The version of the OpenAPI document: 3
 * 
 * Generated by: https://openapi-generator.tech
 */

using System;
using System.Linq;
using System.Text;
using System.Collections.Generic;
using System.ComponentModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using System.Text.Json;
using ServiceChannel.OpenAPIGenerated.Api.Converters;

namespace ServiceChannel.OpenAPIGenerated.Api.Models
{ 
    /// <summary>
    /// 
    /// </summary>
    [DataContract]
    public class SCServiceChannelServicesMessagingInvoicesInvoice : IEquatable<SCServiceChannelServicesMessagingInvoicesInvoice>
    {
        /// <summary>
        /// Gets or Sets Provider
        /// </summary>
        [DataMember(Name="Provider", EmitDefaultValue=false)]
        public SCServiceChannelServicesMessagingProvidersProvider Provider { get; set; }

        /// <summary>
        /// Gets or Sets Subscriber
        /// </summary>
        [DataMember(Name="Subscriber", EmitDefaultValue=false)]
        public SCServiceChannelServicesMessagingSubscribersSubscriber Subscriber { get; set; }

        /// <summary>
        /// Gets or Sets Location
        /// </summary>
        [DataMember(Name="Location", EmitDefaultValue=false)]
        public SCServiceChannelServicesMessagingLocationLocation Location { get; set; }

        /// <summary>
        /// Gets or Sets Id
        /// </summary>
        [DataMember(Name="Id", EmitDefaultValue=true)]
        public int Id { get; set; }

        /// <summary>
        /// Gets or sets invoice number.
        /// </summary>
        /// <value>Gets or sets invoice number.</value>
        [DataMember(Name="Number", EmitDefaultValue=false)]
        public string Number { get; set; }

        /// <summary>
        /// Gets or sets Batch number.
        /// </summary>
        /// <value>Gets or sets Batch number.</value>
        [DataMember(Name="BatchNumber", EmitDefaultValue=false)]
        public string BatchNumber { get; set; }

        /// <summary>
        /// Gets or Sets InvoiceTax
        /// </summary>
        [DataMember(Name="InvoiceTax", EmitDefaultValue=true)]
        public double InvoiceTax { get; set; }

        /// <summary>
        /// Gets or Sets PostedTaxRate
        /// </summary>
        [DataMember(Name="PostedTaxRate", EmitDefaultValue=true)]
        public float PostedTaxRate { get; set; }

        /// <summary>
        /// Gets or Sets PostedTax2Rate
        /// </summary>
        [DataMember(Name="PostedTax2Rate", EmitDefaultValue=true)]
        public float PostedTax2Rate { get; set; }

        /// <summary>
        /// Gets or Sets VendorPayeeId
        /// </summary>
        [DataMember(Name="VendorPayeeId", EmitDefaultValue=true)]
        public int VendorPayeeId { get; set; }

        /// <summary>
        /// Gets or sets total with tax amounts.
        /// </summary>
        /// <value>Gets or sets total with tax amounts.</value>
        [DataMember(Name="InvoiceTotal", EmitDefaultValue=true)]
        public double InvoiceTotal { get; set; }

        /// <summary>
        /// Gets or Sets InvoiceBalance
        /// </summary>
        [DataMember(Name="InvoiceBalance", EmitDefaultValue=true)]
        public double InvoiceBalance { get; set; }

        /// <summary>
        /// Gets or Sets Currency
        /// </summary>
        [DataMember(Name="Currency", EmitDefaultValue=false)]
        public SCServiceChannelServicesMessagingCurrenciesCurrency Currency { get; set; }

        /// <summary>
        /// Gets or Sets ApprovedDate
        /// </summary>
        [DataMember(Name="ApprovedDate", EmitDefaultValue=false)]
        public DateTime ApprovedDate { get; set; }

        /// <summary>
        /// Gets or Sets ApprovalCode
        /// </summary>
        [DataMember(Name="ApprovalCode", EmitDefaultValue=false)]
        public string ApprovalCode { get; set; }

        /// <summary>
        /// Gets or Sets EditableAdditionalApprovalCode
        /// </summary>
        [DataMember(Name="EditableAdditionalApprovalCode", EmitDefaultValue=false)]
        public SCServiceChannelServicesMessagingApprovalCodesEditableAdditionalApprovalCode EditableAdditionalApprovalCode { get; set; }

        /// <summary>
        /// Gets or Sets PostedDate
        /// </summary>
        [DataMember(Name="PostedDate", EmitDefaultValue=false)]
        public DateTime PostedDate { get; set; }

        /// <summary>
        /// Gets or Sets PostedBy
        /// </summary>
        [DataMember(Name="PostedBy", EmitDefaultValue=false)]
        public string PostedBy { get; set; }

        /// <summary>
        /// Gets or Sets Subtotal
        /// </summary>
        [DataMember(Name="Subtotal", EmitDefaultValue=true)]
        public double Subtotal { get; set; }

        /// <summary>
        /// Gets or Sets Status
        /// </summary>
        [DataMember(Name="Status", EmitDefaultValue=false)]
        public string Status { get; set; }

        /// <summary>
        /// Gets or Sets Trade
        /// </summary>
        [DataMember(Name="Trade", EmitDefaultValue=false)]
        public string Trade { get; set; }

        /// <summary>
        /// Gets or Sets InvoiceAmountsDetails
        /// </summary>
        [DataMember(Name="InvoiceAmountsDetails", EmitDefaultValue=false)]
        public SCServiceChannelServicesMessagingInvoicesInvoiceAmountsDetails InvoiceAmountsDetails { get; set; }

        /// <summary>
        /// Gets or Sets InvoiceTaxesDetails
        /// </summary>
        [DataMember(Name="InvoiceTaxesDetails", EmitDefaultValue=false)]
        public SCServiceChannelServicesMessagingInvoicesInvoiceTaxesDetails InvoiceTaxesDetails { get; set; }

        /// <summary>
        /// Gets or Sets Tax2Details
        /// </summary>
        [DataMember(Name="Tax2Details", EmitDefaultValue=false)]
        public SCServiceChannelServicesMessagingInvoicesTax2Details Tax2Details { get; set; }

        /// <summary>
        /// Gets or Sets Labors
        /// </summary>
        [DataMember(Name="Labors", EmitDefaultValue=false)]
        public List<SCServiceChannelServicesMessagingInvoicesInvoiceLabor> Labors { get; set; }

        /// <summary>
        /// Gets or Sets Materials
        /// </summary>
        [DataMember(Name="Materials", EmitDefaultValue=false)]
        public List<SCServiceChannelServicesMessagingInvoicesInvoiceMaterial> Materials { get; set; }

        /// <summary>
        /// Gets or Sets Travels
        /// </summary>
        [DataMember(Name="Travels", EmitDefaultValue=false)]
        public List<SCServiceChannelServicesMessagingInvoicesInvoiceTravel> Travels { get; set; }

        /// <summary>
        /// Gets or Sets Others
        /// </summary>
        [DataMember(Name="Others", EmitDefaultValue=false)]
        public List<SCServiceChannelServicesMessagingInvoicesInvoiceOther> Others { get; set; }

        /// <summary>
        /// Gets or Sets TaxApprovalCodeGroups
        /// </summary>
        [DataMember(Name="TaxApprovalCodeGroups", EmitDefaultValue=false)]
        public List<SCServiceChannelServicesMessagingInvoicesInvoiceApprovalCodeGroup> TaxApprovalCodeGroups { get; set; }

        /// <summary>
        /// Gets or Sets Tax2ApprovalCodeGroups
        /// </summary>
        [DataMember(Name="Tax2ApprovalCodeGroups", EmitDefaultValue=false)]
        public List<SCServiceChannelServicesMessagingInvoicesInvoiceApprovalCodeGroup> Tax2ApprovalCodeGroups { get; set; }

        /// <summary>
        /// Gets or Sets FreightApprovalCodeGroups
        /// </summary>
        [DataMember(Name="FreightApprovalCodeGroups", EmitDefaultValue=false)]
        public List<SCServiceChannelServicesMessagingInvoicesInvoiceApprovalCodeGroup> FreightApprovalCodeGroups { get; set; }

        /// <summary>
        /// Gets or Sets WithMismatchedRates
        /// </summary>
        [DataMember(Name="WithMismatchedRates", EmitDefaultValue=true)]
        public bool WithMismatchedRates { get; set; } = false;

        /// <summary>
        /// Gets or Sets IsOutsourced
        /// </summary>
        [DataMember(Name="IsOutsourced", EmitDefaultValue=true)]
        public bool IsOutsourced { get; set; } = false;

        /// <summary>
        /// Gets or Sets StarredBy
        /// </summary>
        [DataMember(Name="StarredBy", EmitDefaultValue=false)]
        public string StarredBy { get; set; }

        /// <summary>
        /// Gets or Sets IsStarred
        /// </summary>
        [DataMember(Name="IsStarred", EmitDefaultValue=true)]
        public bool IsStarred { get; set; } = false;

        /// <summary>
        /// Gets or Sets IsTransferred
        /// </summary>
        [DataMember(Name="IsTransferred", EmitDefaultValue=true)]
        public bool IsTransferred { get; set; } = false;

        /// <summary>
        /// Gets or Sets StarredDate
        /// </summary>
        [DataMember(Name="StarredDate", EmitDefaultValue=false)]
        public DateTime StarredDate { get; set; }

        /// <summary>
        /// Gets or Sets Description
        /// </summary>
        [DataMember(Name="Description", EmitDefaultValue=false)]
        public string Description { get; set; }

        /// <summary>
        /// Gets or Sets InvoiceDate
        /// </summary>
        [DataMember(Name="InvoiceDate", EmitDefaultValue=false)]
        public DateTime InvoiceDate { get; set; }

        /// <summary>
        /// Gets or Sets LaborTaxIncluded
        /// </summary>
        [DataMember(Name="LaborTaxIncluded", EmitDefaultValue=true)]
        public bool LaborTaxIncluded { get; set; } = false;

        /// <summary>
        /// Gets or Sets TravelTaxIncluded
        /// </summary>
        [DataMember(Name="TravelTaxIncluded", EmitDefaultValue=true)]
        public bool TravelTaxIncluded { get; set; } = false;

        /// <summary>
        /// Gets or Sets MaterialsTaxIncluded
        /// </summary>
        [DataMember(Name="MaterialsTaxIncluded", EmitDefaultValue=true)]
        public bool MaterialsTaxIncluded { get; set; } = false;

        /// <summary>
        /// Gets or Sets FreightTaxIncluded
        /// </summary>
        [DataMember(Name="FreightTaxIncluded", EmitDefaultValue=true)]
        public bool FreightTaxIncluded { get; set; } = false;

        /// <summary>
        /// Gets or Sets OtherTaxIncluded
        /// </summary>
        [DataMember(Name="OtherTaxIncluded", EmitDefaultValue=true)]
        public bool OtherTaxIncluded { get; set; } = false;

        /// <summary>
        /// Gets or Sets NonTaxableLabor
        /// </summary>
        [DataMember(Name="NonTaxableLabor", EmitDefaultValue=true)]
        public int NonTaxableLabor { get; set; }

        /// <summary>
        /// Gets or Sets NonTaxableTravel
        /// </summary>
        [DataMember(Name="NonTaxableTravel", EmitDefaultValue=true)]
        public int NonTaxableTravel { get; set; }

        /// <summary>
        /// Gets or Sets NonTaxableMaterial
        /// </summary>
        [DataMember(Name="NonTaxableMaterial", EmitDefaultValue=true)]
        public int NonTaxableMaterial { get; set; }

        /// <summary>
        /// Gets or Sets NonTaxableFreight
        /// </summary>
        [DataMember(Name="NonTaxableFreight", EmitDefaultValue=true)]
        public int NonTaxableFreight { get; set; }

        /// <summary>
        /// Gets or Sets NonTaxableOther
        /// </summary>
        [DataMember(Name="NonTaxableOther", EmitDefaultValue=true)]
        public int NonTaxableOther { get; set; }

        /// <summary>
        /// Gets or Sets IsExists
        /// </summary>
        [DataMember(Name="IsExists", EmitDefaultValue=true)]
        public bool IsExists { get; set; } = false;

        /// <summary>
        /// Gets or Sets StatusChangeDate
        /// </summary>
        [DataMember(Name="StatusChangeDate", EmitDefaultValue=false)]
        public DateTime StatusChangeDate { get; set; }

        /// <summary>
        /// Gets or Sets StatusChangeUser
        /// </summary>
        [DataMember(Name="StatusChangeUser", EmitDefaultValue=false)]
        public string StatusChangeUser { get; set; }

        /// <summary>
        /// Gets or Sets StatusChangeUserid
        /// </summary>
        [DataMember(Name="StatusChangeUserid", EmitDefaultValue=false)]
        public string StatusChangeUserid { get; set; }

        /// <summary>
        /// Gets or Sets IsDuplicate
        /// </summary>
        [DataMember(Name="IsDuplicate", EmitDefaultValue=true)]
        public bool IsDuplicate { get; set; } = false;

        /// <summary>
        /// Gets or sets work order tracking number.
        /// </summary>
        /// <value>Gets or sets work order tracking number.</value>
        [DataMember(Name="WoTrackingNumber", EmitDefaultValue=true)]
        public int WoTrackingNumber { get; set; }

        /// <summary>
        /// terms
        /// </summary>
        /// <value>terms</value>
        [DataMember(Name="Terms", EmitDefaultValue=false)]
        public string Terms { get; set; }

        /// <summary>
        /// Gets or Sets Comments
        /// </summary>
        [DataMember(Name="Comments", EmitDefaultValue=false)]
        public string Comments { get; set; }

        /// <summary>
        /// Gets or Sets PaidDate
        /// </summary>
        [DataMember(Name="PaidDate", EmitDefaultValue=false)]
        public DateTime PaidDate { get; set; }

        /// <summary>
        /// Gets or Sets TransferredDate
        /// </summary>
        [DataMember(Name="TransferredDate", EmitDefaultValue=false)]
        public DateTime TransferredDate { get; set; }

        /// <summary>
        /// Gets or Sets LastActionDate
        /// </summary>
        [DataMember(Name="LastActionDate", EmitDefaultValue=false)]
        public DateTime LastActionDate { get; set; }

        /// <summary>
        /// Updated Date
        /// </summary>
        /// <value>Updated Date</value>
        [DataMember(Name="UpdatedDate", EmitDefaultValue=false)]
        public DateTime UpdatedDate { get; set; }

        /// <summary>
        /// Gets or Sets StatusHistoryShort
        /// </summary>
        [DataMember(Name="StatusHistoryShort", EmitDefaultValue=false)]
        public List<SCServiceChannelServicesMessagingInvoicesStatusHistoryShort> StatusHistoryShort { get; set; }

        /// <summary>
        /// Gets or sets WO Assignee
        /// </summary>
        /// <value>Gets or sets WO Assignee</value>
        [DataMember(Name="WoAssignedTo", EmitDefaultValue=false)]
        public string WoAssignedTo { get; set; }

        /// <summary>
        /// Gets or Sets ApprovalCodes
        /// </summary>
        [DataMember(Name="ApprovalCodes", EmitDefaultValue=false)]
        public List<SCServiceChannelServicesMessagingInvoicesInvoiceApprovalCode> ApprovalCodes { get; set; }

        /// <summary>
        /// Gets or Sets IsChargesApprovalCodesDefault
        /// </summary>
        [DataMember(Name="IsChargesApprovalCodesDefault", EmitDefaultValue=true)]
        public bool IsChargesApprovalCodesDefault { get; set; } = false;

        /// <summary>
        /// Gets or Sets Payments
        /// </summary>
        [DataMember(Name="Payments", EmitDefaultValue=false)]
        public List<SCServiceChannelServicesMessagingInvoicesInvoicePaymentResponse> Payments { get; set; }

        /// <summary>
        /// Gets or Sets StoredFeatures
        /// </summary>
        [DataMember(Name="StoredFeatures", EmitDefaultValue=false)]
        public List<string> StoredFeatures { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class SCServiceChannelServicesMessagingInvoicesInvoice {\n");
            sb.Append("  Provider: ").Append(Provider).Append("\n");
            sb.Append("  Subscriber: ").Append(Subscriber).Append("\n");
            sb.Append("  Location: ").Append(Location).Append("\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  Number: ").Append(Number).Append("\n");
            sb.Append("  BatchNumber: ").Append(BatchNumber).Append("\n");
            sb.Append("  InvoiceTax: ").Append(InvoiceTax).Append("\n");
            sb.Append("  PostedTaxRate: ").Append(PostedTaxRate).Append("\n");
            sb.Append("  PostedTax2Rate: ").Append(PostedTax2Rate).Append("\n");
            sb.Append("  VendorPayeeId: ").Append(VendorPayeeId).Append("\n");
            sb.Append("  InvoiceTotal: ").Append(InvoiceTotal).Append("\n");
            sb.Append("  InvoiceBalance: ").Append(InvoiceBalance).Append("\n");
            sb.Append("  Currency: ").Append(Currency).Append("\n");
            sb.Append("  ApprovedDate: ").Append(ApprovedDate).Append("\n");
            sb.Append("  ApprovalCode: ").Append(ApprovalCode).Append("\n");
            sb.Append("  EditableAdditionalApprovalCode: ").Append(EditableAdditionalApprovalCode).Append("\n");
            sb.Append("  PostedDate: ").Append(PostedDate).Append("\n");
            sb.Append("  PostedBy: ").Append(PostedBy).Append("\n");
            sb.Append("  Subtotal: ").Append(Subtotal).Append("\n");
            sb.Append("  Status: ").Append(Status).Append("\n");
            sb.Append("  Trade: ").Append(Trade).Append("\n");
            sb.Append("  InvoiceAmountsDetails: ").Append(InvoiceAmountsDetails).Append("\n");
            sb.Append("  InvoiceTaxesDetails: ").Append(InvoiceTaxesDetails).Append("\n");
            sb.Append("  Tax2Details: ").Append(Tax2Details).Append("\n");
            sb.Append("  Labors: ").Append(Labors).Append("\n");
            sb.Append("  Materials: ").Append(Materials).Append("\n");
            sb.Append("  Travels: ").Append(Travels).Append("\n");
            sb.Append("  Others: ").Append(Others).Append("\n");
            sb.Append("  TaxApprovalCodeGroups: ").Append(TaxApprovalCodeGroups).Append("\n");
            sb.Append("  Tax2ApprovalCodeGroups: ").Append(Tax2ApprovalCodeGroups).Append("\n");
            sb.Append("  FreightApprovalCodeGroups: ").Append(FreightApprovalCodeGroups).Append("\n");
            sb.Append("  WithMismatchedRates: ").Append(WithMismatchedRates).Append("\n");
            sb.Append("  IsOutsourced: ").Append(IsOutsourced).Append("\n");
            sb.Append("  StarredBy: ").Append(StarredBy).Append("\n");
            sb.Append("  IsStarred: ").Append(IsStarred).Append("\n");
            sb.Append("  IsTransferred: ").Append(IsTransferred).Append("\n");
            sb.Append("  StarredDate: ").Append(StarredDate).Append("\n");
            sb.Append("  Description: ").Append(Description).Append("\n");
            sb.Append("  InvoiceDate: ").Append(InvoiceDate).Append("\n");
            sb.Append("  LaborTaxIncluded: ").Append(LaborTaxIncluded).Append("\n");
            sb.Append("  TravelTaxIncluded: ").Append(TravelTaxIncluded).Append("\n");
            sb.Append("  MaterialsTaxIncluded: ").Append(MaterialsTaxIncluded).Append("\n");
            sb.Append("  FreightTaxIncluded: ").Append(FreightTaxIncluded).Append("\n");
            sb.Append("  OtherTaxIncluded: ").Append(OtherTaxIncluded).Append("\n");
            sb.Append("  NonTaxableLabor: ").Append(NonTaxableLabor).Append("\n");
            sb.Append("  NonTaxableTravel: ").Append(NonTaxableTravel).Append("\n");
            sb.Append("  NonTaxableMaterial: ").Append(NonTaxableMaterial).Append("\n");
            sb.Append("  NonTaxableFreight: ").Append(NonTaxableFreight).Append("\n");
            sb.Append("  NonTaxableOther: ").Append(NonTaxableOther).Append("\n");
            sb.Append("  IsExists: ").Append(IsExists).Append("\n");
            sb.Append("  StatusChangeDate: ").Append(StatusChangeDate).Append("\n");
            sb.Append("  StatusChangeUser: ").Append(StatusChangeUser).Append("\n");
            sb.Append("  StatusChangeUserid: ").Append(StatusChangeUserid).Append("\n");
            sb.Append("  IsDuplicate: ").Append(IsDuplicate).Append("\n");
            sb.Append("  WoTrackingNumber: ").Append(WoTrackingNumber).Append("\n");
            sb.Append("  Terms: ").Append(Terms).Append("\n");
            sb.Append("  Comments: ").Append(Comments).Append("\n");
            sb.Append("  PaidDate: ").Append(PaidDate).Append("\n");
            sb.Append("  TransferredDate: ").Append(TransferredDate).Append("\n");
            sb.Append("  LastActionDate: ").Append(LastActionDate).Append("\n");
            sb.Append("  UpdatedDate: ").Append(UpdatedDate).Append("\n");
            sb.Append("  StatusHistoryShort: ").Append(StatusHistoryShort).Append("\n");
            sb.Append("  WoAssignedTo: ").Append(WoAssignedTo).Append("\n");
            sb.Append("  ApprovalCodes: ").Append(ApprovalCodes).Append("\n");
            sb.Append("  IsChargesApprovalCodesDefault: ").Append(IsChargesApprovalCodesDefault).Append("\n");
            sb.Append("  Payments: ").Append(Payments).Append("\n");
            sb.Append("  StoredFeatures: ").Append(StoredFeatures).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            var options = new JsonSerializerOptions
            {
                WriteIndented = true
            };

            return JsonSerializer.Serialize(this, options);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (obj is null) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((SCServiceChannelServicesMessagingInvoicesInvoice)obj);
        }

        /// <summary>
        /// Returns true if SCServiceChannelServicesMessagingInvoicesInvoice instances are equal
        /// </summary>
        /// <param name="other">Instance of SCServiceChannelServicesMessagingInvoicesInvoice to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(SCServiceChannelServicesMessagingInvoicesInvoice other)
        {
            if (other is null) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    Provider == other.Provider ||
                    Provider != null &&
                    Provider.Equals(other.Provider)
                ) && 
                (
                    Subscriber == other.Subscriber ||
                    Subscriber != null &&
                    Subscriber.Equals(other.Subscriber)
                ) && 
                (
                    Location == other.Location ||
                    Location != null &&
                    Location.Equals(other.Location)
                ) && 
                (
                    Id == other.Id ||
                    
                    Id.Equals(other.Id)
                ) && 
                (
                    Number == other.Number ||
                    Number != null &&
                    Number.Equals(other.Number)
                ) && 
                (
                    BatchNumber == other.BatchNumber ||
                    BatchNumber != null &&
                    BatchNumber.Equals(other.BatchNumber)
                ) && 
                (
                    InvoiceTax == other.InvoiceTax ||
                    
                    InvoiceTax.Equals(other.InvoiceTax)
                ) && 
                (
                    PostedTaxRate == other.PostedTaxRate ||
                    
                    PostedTaxRate.Equals(other.PostedTaxRate)
                ) && 
                (
                    PostedTax2Rate == other.PostedTax2Rate ||
                    
                    PostedTax2Rate.Equals(other.PostedTax2Rate)
                ) && 
                (
                    VendorPayeeId == other.VendorPayeeId ||
                    
                    VendorPayeeId.Equals(other.VendorPayeeId)
                ) && 
                (
                    InvoiceTotal == other.InvoiceTotal ||
                    
                    InvoiceTotal.Equals(other.InvoiceTotal)
                ) && 
                (
                    InvoiceBalance == other.InvoiceBalance ||
                    
                    InvoiceBalance.Equals(other.InvoiceBalance)
                ) && 
                (
                    Currency == other.Currency ||
                    Currency != null &&
                    Currency.Equals(other.Currency)
                ) && 
                (
                    ApprovedDate == other.ApprovedDate ||
                    ApprovedDate != null &&
                    ApprovedDate.Equals(other.ApprovedDate)
                ) && 
                (
                    ApprovalCode == other.ApprovalCode ||
                    ApprovalCode != null &&
                    ApprovalCode.Equals(other.ApprovalCode)
                ) && 
                (
                    EditableAdditionalApprovalCode == other.EditableAdditionalApprovalCode ||
                    EditableAdditionalApprovalCode != null &&
                    EditableAdditionalApprovalCode.Equals(other.EditableAdditionalApprovalCode)
                ) && 
                (
                    PostedDate == other.PostedDate ||
                    PostedDate != null &&
                    PostedDate.Equals(other.PostedDate)
                ) && 
                (
                    PostedBy == other.PostedBy ||
                    PostedBy != null &&
                    PostedBy.Equals(other.PostedBy)
                ) && 
                (
                    Subtotal == other.Subtotal ||
                    
                    Subtotal.Equals(other.Subtotal)
                ) && 
                (
                    Status == other.Status ||
                    Status != null &&
                    Status.Equals(other.Status)
                ) && 
                (
                    Trade == other.Trade ||
                    Trade != null &&
                    Trade.Equals(other.Trade)
                ) && 
                (
                    InvoiceAmountsDetails == other.InvoiceAmountsDetails ||
                    InvoiceAmountsDetails != null &&
                    InvoiceAmountsDetails.Equals(other.InvoiceAmountsDetails)
                ) && 
                (
                    InvoiceTaxesDetails == other.InvoiceTaxesDetails ||
                    InvoiceTaxesDetails != null &&
                    InvoiceTaxesDetails.Equals(other.InvoiceTaxesDetails)
                ) && 
                (
                    Tax2Details == other.Tax2Details ||
                    Tax2Details != null &&
                    Tax2Details.Equals(other.Tax2Details)
                ) && 
                (
                    Labors == other.Labors ||
                    Labors != null &&
                    other.Labors != null &&
                    Labors.SequenceEqual(other.Labors)
                ) && 
                (
                    Materials == other.Materials ||
                    Materials != null &&
                    other.Materials != null &&
                    Materials.SequenceEqual(other.Materials)
                ) && 
                (
                    Travels == other.Travels ||
                    Travels != null &&
                    other.Travels != null &&
                    Travels.SequenceEqual(other.Travels)
                ) && 
                (
                    Others == other.Others ||
                    Others != null &&
                    other.Others != null &&
                    Others.SequenceEqual(other.Others)
                ) && 
                (
                    TaxApprovalCodeGroups == other.TaxApprovalCodeGroups ||
                    TaxApprovalCodeGroups != null &&
                    other.TaxApprovalCodeGroups != null &&
                    TaxApprovalCodeGroups.SequenceEqual(other.TaxApprovalCodeGroups)
                ) && 
                (
                    Tax2ApprovalCodeGroups == other.Tax2ApprovalCodeGroups ||
                    Tax2ApprovalCodeGroups != null &&
                    other.Tax2ApprovalCodeGroups != null &&
                    Tax2ApprovalCodeGroups.SequenceEqual(other.Tax2ApprovalCodeGroups)
                ) && 
                (
                    FreightApprovalCodeGroups == other.FreightApprovalCodeGroups ||
                    FreightApprovalCodeGroups != null &&
                    other.FreightApprovalCodeGroups != null &&
                    FreightApprovalCodeGroups.SequenceEqual(other.FreightApprovalCodeGroups)
                ) && 
                (
                    WithMismatchedRates == other.WithMismatchedRates ||
                    
                    WithMismatchedRates.Equals(other.WithMismatchedRates)
                ) && 
                (
                    IsOutsourced == other.IsOutsourced ||
                    
                    IsOutsourced.Equals(other.IsOutsourced)
                ) && 
                (
                    StarredBy == other.StarredBy ||
                    StarredBy != null &&
                    StarredBy.Equals(other.StarredBy)
                ) && 
                (
                    IsStarred == other.IsStarred ||
                    
                    IsStarred.Equals(other.IsStarred)
                ) && 
                (
                    IsTransferred == other.IsTransferred ||
                    
                    IsTransferred.Equals(other.IsTransferred)
                ) && 
                (
                    StarredDate == other.StarredDate ||
                    StarredDate != null &&
                    StarredDate.Equals(other.StarredDate)
                ) && 
                (
                    Description == other.Description ||
                    Description != null &&
                    Description.Equals(other.Description)
                ) && 
                (
                    InvoiceDate == other.InvoiceDate ||
                    InvoiceDate != null &&
                    InvoiceDate.Equals(other.InvoiceDate)
                ) && 
                (
                    LaborTaxIncluded == other.LaborTaxIncluded ||
                    
                    LaborTaxIncluded.Equals(other.LaborTaxIncluded)
                ) && 
                (
                    TravelTaxIncluded == other.TravelTaxIncluded ||
                    
                    TravelTaxIncluded.Equals(other.TravelTaxIncluded)
                ) && 
                (
                    MaterialsTaxIncluded == other.MaterialsTaxIncluded ||
                    
                    MaterialsTaxIncluded.Equals(other.MaterialsTaxIncluded)
                ) && 
                (
                    FreightTaxIncluded == other.FreightTaxIncluded ||
                    
                    FreightTaxIncluded.Equals(other.FreightTaxIncluded)
                ) && 
                (
                    OtherTaxIncluded == other.OtherTaxIncluded ||
                    
                    OtherTaxIncluded.Equals(other.OtherTaxIncluded)
                ) && 
                (
                    NonTaxableLabor == other.NonTaxableLabor ||
                    
                    NonTaxableLabor.Equals(other.NonTaxableLabor)
                ) && 
                (
                    NonTaxableTravel == other.NonTaxableTravel ||
                    
                    NonTaxableTravel.Equals(other.NonTaxableTravel)
                ) && 
                (
                    NonTaxableMaterial == other.NonTaxableMaterial ||
                    
                    NonTaxableMaterial.Equals(other.NonTaxableMaterial)
                ) && 
                (
                    NonTaxableFreight == other.NonTaxableFreight ||
                    
                    NonTaxableFreight.Equals(other.NonTaxableFreight)
                ) && 
                (
                    NonTaxableOther == other.NonTaxableOther ||
                    
                    NonTaxableOther.Equals(other.NonTaxableOther)
                ) && 
                (
                    IsExists == other.IsExists ||
                    
                    IsExists.Equals(other.IsExists)
                ) && 
                (
                    StatusChangeDate == other.StatusChangeDate ||
                    StatusChangeDate != null &&
                    StatusChangeDate.Equals(other.StatusChangeDate)
                ) && 
                (
                    StatusChangeUser == other.StatusChangeUser ||
                    StatusChangeUser != null &&
                    StatusChangeUser.Equals(other.StatusChangeUser)
                ) && 
                (
                    StatusChangeUserid == other.StatusChangeUserid ||
                    StatusChangeUserid != null &&
                    StatusChangeUserid.Equals(other.StatusChangeUserid)
                ) && 
                (
                    IsDuplicate == other.IsDuplicate ||
                    
                    IsDuplicate.Equals(other.IsDuplicate)
                ) && 
                (
                    WoTrackingNumber == other.WoTrackingNumber ||
                    
                    WoTrackingNumber.Equals(other.WoTrackingNumber)
                ) && 
                (
                    Terms == other.Terms ||
                    Terms != null &&
                    Terms.Equals(other.Terms)
                ) && 
                (
                    Comments == other.Comments ||
                    Comments != null &&
                    Comments.Equals(other.Comments)
                ) && 
                (
                    PaidDate == other.PaidDate ||
                    PaidDate != null &&
                    PaidDate.Equals(other.PaidDate)
                ) && 
                (
                    TransferredDate == other.TransferredDate ||
                    TransferredDate != null &&
                    TransferredDate.Equals(other.TransferredDate)
                ) && 
                (
                    LastActionDate == other.LastActionDate ||
                    LastActionDate != null &&
                    LastActionDate.Equals(other.LastActionDate)
                ) && 
                (
                    UpdatedDate == other.UpdatedDate ||
                    UpdatedDate != null &&
                    UpdatedDate.Equals(other.UpdatedDate)
                ) && 
                (
                    StatusHistoryShort == other.StatusHistoryShort ||
                    StatusHistoryShort != null &&
                    other.StatusHistoryShort != null &&
                    StatusHistoryShort.SequenceEqual(other.StatusHistoryShort)
                ) && 
                (
                    WoAssignedTo == other.WoAssignedTo ||
                    WoAssignedTo != null &&
                    WoAssignedTo.Equals(other.WoAssignedTo)
                ) && 
                (
                    ApprovalCodes == other.ApprovalCodes ||
                    ApprovalCodes != null &&
                    other.ApprovalCodes != null &&
                    ApprovalCodes.SequenceEqual(other.ApprovalCodes)
                ) && 
                (
                    IsChargesApprovalCodesDefault == other.IsChargesApprovalCodesDefault ||
                    
                    IsChargesApprovalCodesDefault.Equals(other.IsChargesApprovalCodesDefault)
                ) && 
                (
                    Payments == other.Payments ||
                    Payments != null &&
                    other.Payments != null &&
                    Payments.SequenceEqual(other.Payments)
                ) && 
                (
                    StoredFeatures == other.StoredFeatures ||
                    StoredFeatures != null &&
                    other.StoredFeatures != null &&
                    StoredFeatures.SequenceEqual(other.StoredFeatures)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    if (Provider != null)
                    hashCode = hashCode * 59 + Provider.GetHashCode();
                    if (Subscriber != null)
                    hashCode = hashCode * 59 + Subscriber.GetHashCode();
                    if (Location != null)
                    hashCode = hashCode * 59 + Location.GetHashCode();
                    
                    hashCode = hashCode * 59 + Id.GetHashCode();
                    if (Number != null)
                    hashCode = hashCode * 59 + Number.GetHashCode();
                    if (BatchNumber != null)
                    hashCode = hashCode * 59 + BatchNumber.GetHashCode();
                    
                    hashCode = hashCode * 59 + InvoiceTax.GetHashCode();
                    
                    hashCode = hashCode * 59 + PostedTaxRate.GetHashCode();
                    
                    hashCode = hashCode * 59 + PostedTax2Rate.GetHashCode();
                    
                    hashCode = hashCode * 59 + VendorPayeeId.GetHashCode();
                    
                    hashCode = hashCode * 59 + InvoiceTotal.GetHashCode();
                    
                    hashCode = hashCode * 59 + InvoiceBalance.GetHashCode();
                    if (Currency != null)
                    hashCode = hashCode * 59 + Currency.GetHashCode();
                    if (ApprovedDate != null)
                    hashCode = hashCode * 59 + ApprovedDate.GetHashCode();
                    if (ApprovalCode != null)
                    hashCode = hashCode * 59 + ApprovalCode.GetHashCode();
                    if (EditableAdditionalApprovalCode != null)
                    hashCode = hashCode * 59 + EditableAdditionalApprovalCode.GetHashCode();
                    if (PostedDate != null)
                    hashCode = hashCode * 59 + PostedDate.GetHashCode();
                    if (PostedBy != null)
                    hashCode = hashCode * 59 + PostedBy.GetHashCode();
                    
                    hashCode = hashCode * 59 + Subtotal.GetHashCode();
                    if (Status != null)
                    hashCode = hashCode * 59 + Status.GetHashCode();
                    if (Trade != null)
                    hashCode = hashCode * 59 + Trade.GetHashCode();
                    if (InvoiceAmountsDetails != null)
                    hashCode = hashCode * 59 + InvoiceAmountsDetails.GetHashCode();
                    if (InvoiceTaxesDetails != null)
                    hashCode = hashCode * 59 + InvoiceTaxesDetails.GetHashCode();
                    if (Tax2Details != null)
                    hashCode = hashCode * 59 + Tax2Details.GetHashCode();
                    if (Labors != null)
                    hashCode = hashCode * 59 + Labors.GetHashCode();
                    if (Materials != null)
                    hashCode = hashCode * 59 + Materials.GetHashCode();
                    if (Travels != null)
                    hashCode = hashCode * 59 + Travels.GetHashCode();
                    if (Others != null)
                    hashCode = hashCode * 59 + Others.GetHashCode();
                    if (TaxApprovalCodeGroups != null)
                    hashCode = hashCode * 59 + TaxApprovalCodeGroups.GetHashCode();
                    if (Tax2ApprovalCodeGroups != null)
                    hashCode = hashCode * 59 + Tax2ApprovalCodeGroups.GetHashCode();
                    if (FreightApprovalCodeGroups != null)
                    hashCode = hashCode * 59 + FreightApprovalCodeGroups.GetHashCode();
                    
                    hashCode = hashCode * 59 + WithMismatchedRates.GetHashCode();
                    
                    hashCode = hashCode * 59 + IsOutsourced.GetHashCode();
                    if (StarredBy != null)
                    hashCode = hashCode * 59 + StarredBy.GetHashCode();
                    
                    hashCode = hashCode * 59 + IsStarred.GetHashCode();
                    
                    hashCode = hashCode * 59 + IsTransferred.GetHashCode();
                    if (StarredDate != null)
                    hashCode = hashCode * 59 + StarredDate.GetHashCode();
                    if (Description != null)
                    hashCode = hashCode * 59 + Description.GetHashCode();
                    if (InvoiceDate != null)
                    hashCode = hashCode * 59 + InvoiceDate.GetHashCode();
                    
                    hashCode = hashCode * 59 + LaborTaxIncluded.GetHashCode();
                    
                    hashCode = hashCode * 59 + TravelTaxIncluded.GetHashCode();
                    
                    hashCode = hashCode * 59 + MaterialsTaxIncluded.GetHashCode();
                    
                    hashCode = hashCode * 59 + FreightTaxIncluded.GetHashCode();
                    
                    hashCode = hashCode * 59 + OtherTaxIncluded.GetHashCode();
                    
                    hashCode = hashCode * 59 + NonTaxableLabor.GetHashCode();
                    
                    hashCode = hashCode * 59 + NonTaxableTravel.GetHashCode();
                    
                    hashCode = hashCode * 59 + NonTaxableMaterial.GetHashCode();
                    
                    hashCode = hashCode * 59 + NonTaxableFreight.GetHashCode();
                    
                    hashCode = hashCode * 59 + NonTaxableOther.GetHashCode();
                    
                    hashCode = hashCode * 59 + IsExists.GetHashCode();
                    if (StatusChangeDate != null)
                    hashCode = hashCode * 59 + StatusChangeDate.GetHashCode();
                    if (StatusChangeUser != null)
                    hashCode = hashCode * 59 + StatusChangeUser.GetHashCode();
                    if (StatusChangeUserid != null)
                    hashCode = hashCode * 59 + StatusChangeUserid.GetHashCode();
                    
                    hashCode = hashCode * 59 + IsDuplicate.GetHashCode();
                    
                    hashCode = hashCode * 59 + WoTrackingNumber.GetHashCode();
                    if (Terms != null)
                    hashCode = hashCode * 59 + Terms.GetHashCode();
                    if (Comments != null)
                    hashCode = hashCode * 59 + Comments.GetHashCode();
                    if (PaidDate != null)
                    hashCode = hashCode * 59 + PaidDate.GetHashCode();
                    if (TransferredDate != null)
                    hashCode = hashCode * 59 + TransferredDate.GetHashCode();
                    if (LastActionDate != null)
                    hashCode = hashCode * 59 + LastActionDate.GetHashCode();
                    if (UpdatedDate != null)
                    hashCode = hashCode * 59 + UpdatedDate.GetHashCode();
                    if (StatusHistoryShort != null)
                    hashCode = hashCode * 59 + StatusHistoryShort.GetHashCode();
                    if (WoAssignedTo != null)
                    hashCode = hashCode * 59 + WoAssignedTo.GetHashCode();
                    if (ApprovalCodes != null)
                    hashCode = hashCode * 59 + ApprovalCodes.GetHashCode();
                    
                    hashCode = hashCode * 59 + IsChargesApprovalCodesDefault.GetHashCode();
                    if (Payments != null)
                    hashCode = hashCode * 59 + Payments.GetHashCode();
                    if (StoredFeatures != null)
                    hashCode = hashCode * 59 + StoredFeatures.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(SCServiceChannelServicesMessagingInvoicesInvoice left, SCServiceChannelServicesMessagingInvoicesInvoice right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(SCServiceChannelServicesMessagingInvoicesInvoice left, SCServiceChannelServicesMessagingInvoicesInvoice right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}
