/*
 * ServiceChannel API - v.3
 *
 * The ServiceChannel API is a RESTful and stateless API. It accepts standard HTTP verbs and supports OAuth 2.0 for authorizing requests.      Our API returns common HTTP status codes as well as JSON encapsulated data.      See [API Overview](https://developer.servicechannel.com/basics/introduction/overview/) for the intro to ServiceChannel API.<br>      <h3>Authentication and Authorization</h3>You should have a ServiceChannel account, register your application, and obtain `access_token` to integrate with our API.      See [Authentication and Authorization](https://developer.servicechannel.com/basics/general/authentication/) for more information.      To use this API playground, click **Authorize** and sign in to ServiceChannel.<br>      <h3>Environment</h3> All calls in this API Reference point to the **SB2 environment**.      See [Environments](https://developer.servicechannel.com/basics/general/environments/) for more information.<br>      <h3>API Version</h3>The current stable version of the ServiceChannel API is `v3`. In the request URL, `v3` is a version prefix that should be present.      When you omit the version prefix, calls point to the minimum supported version of the API.      We recommend you to always specify the API version to avoid possible errors.
 *
 * The version of the OpenAPI document: 3
 * 
 * Generated by: https://openapi-generator.tech
 */

using System;
using System.Linq;
using System.Text;
using System.Collections.Generic;
using System.ComponentModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using System.Text.Json;
using ServiceChannel.OpenAPIGenerated.Api.Converters;

namespace ServiceChannel.OpenAPIGenerated.Api.Models
{ 
    /// <summary>
    /// 
    /// </summary>
    [DataContract]
    public class SCServiceChannelApiModelDashboardSettingsSetupRequest : IEquatable<SCServiceChannelApiModelDashboardSettingsSetupRequest>
    {
        /// <summary>
        /// Gets or Sets SetupId
        /// </summary>
        [DataMember(Name="SetupId", EmitDefaultValue=true)]
        public int SetupId { get; set; }

        /// <summary>
        /// Gets or Sets EnableRequestWizard
        /// </summary>
        [DataMember(Name="EnableRequestWizard", EmitDefaultValue=true)]
        public bool EnableRequestWizard { get; set; } = false;

        /// <summary>
        /// Gets or Sets ShowPrivateStoreNotes
        /// </summary>
        [DataMember(Name="ShowPrivateStoreNotes", EmitDefaultValue=true)]
        public bool ShowPrivateStoreNotes { get; set; } = false;

        /// <summary>
        /// Gets or Sets ShowProviderPhoneNumber
        /// </summary>
        [DataMember(Name="ShowProviderPhoneNumber", EmitDefaultValue=true)]
        public bool ShowProviderPhoneNumber { get; set; } = false;

        /// <summary>
        /// Gets or Sets ShowLastServiceCall
        /// </summary>
        [DataMember(Name="ShowLastServiceCall", EmitDefaultValue=true)]
        public bool ShowLastServiceCall { get; set; } = false;

        /// <summary>
        /// Gets or Sets SetOriginalVendorForRecalls
        /// </summary>
        [DataMember(Name="SetOriginalVendorForRecalls", EmitDefaultValue=true)]
        public bool SetOriginalVendorForRecalls { get; set; } = false;

        /// <summary>
        /// Gets or Sets NteToZeroForRecalls
        /// </summary>
        [DataMember(Name="NteToZeroForRecalls", EmitDefaultValue=true)]
        public bool NteToZeroForRecalls { get; set; } = false;

        /// <summary>
        /// Gets or Sets SendAlertToFM
        /// </summary>
        [DataMember(Name="SendAlertToFM", EmitDefaultValue=true)]
        public bool SendAlertToFM { get; set; } = false;

        /// <summary>
        /// Gets or Sets TurnOffDescription
        /// </summary>
        [DataMember(Name="TurnOffDescription", EmitDefaultValue=true)]
        public bool TurnOffDescription { get; set; } = false;

        /// <summary>
        /// Gets or Sets DaysOfHistoryToDisplay
        /// </summary>
        [DataMember(Name="DaysOfHistoryToDisplay", EmitDefaultValue=true)]
        public int DaysOfHistoryToDisplay { get; set; }

        /// <summary>
        /// Gets or Sets ShowStoreWarrantyStr
        /// </summary>
        [DataMember(Name="ShowStoreWarrantyStr", EmitDefaultValue=false)]
        public string ShowStoreWarrantyStr { get; set; }


        /// <summary>
        /// Gets or Sets ShowStoreWarranty
        /// </summary>
        
        public enum ShowStoreWarrantyEnum
        {
            
            /// <summary>
            /// Enum NoneEnum for None
            /// </summary>
            [EnumMember(Value = "None")]
            NoneEnum = 1,
            
            /// <summary>
            /// Enum ShowEnum for Show
            /// </summary>
            [EnumMember(Value = "Show")]
            ShowEnum = 2,
            
            /// <summary>
            /// Enum StopEnum for Stop
            /// </summary>
            [EnumMember(Value = "Stop")]
            StopEnum = 3
        }

        /// <summary>
        /// Gets or Sets ShowStoreWarranty
        /// </summary>
        [DataMember(Name="ShowStoreWarranty", EmitDefaultValue=true)]
        public ShowStoreWarrantyEnum ShowStoreWarranty { get; set; }

        /// <summary>
        /// Gets or Sets StoreWarrantyMessage
        /// </summary>
        [DataMember(Name="StoreWarrantyMessage", EmitDefaultValue=false)]
        public string StoreWarrantyMessage { get; set; }

        /// <summary>
        /// Gets or Sets ConfirmationMessage
        /// </summary>
        [DataMember(Name="ConfirmationMessage", EmitDefaultValue=false)]
        public string ConfirmationMessage { get; set; }

        /// <summary>
        /// Gets or Sets ProviderNotFoundMessage
        /// </summary>
        [DataMember(Name="ProviderNotFoundMessage", EmitDefaultValue=false)]
        public string ProviderNotFoundMessage { get; set; }

        /// <summary>
        /// Gets or Sets EnableEquipment
        /// </summary>
        [DataMember(Name="EnableEquipment", EmitDefaultValue=true)]
        public bool EnableEquipment { get; set; } = false;

        /// <summary>
        /// Gets or Sets DuplicateFilters
        /// </summary>
        [DataMember(Name="DuplicateFilters", EmitDefaultValue=false)]
        public List<string> DuplicateFilters { get; set; }

        /// <summary>
        /// Gets or Sets ExcludedCategoriesOpenDup
        /// </summary>
        [DataMember(Name="ExcludedCategoriesOpenDup", EmitDefaultValue=false)]
        public List<string> ExcludedCategoriesOpenDup { get; set; }

        /// <summary>
        /// Gets or Sets ExcludedCategoriesClosedDup
        /// </summary>
        [DataMember(Name="ExcludedCategoriesClosedDup", EmitDefaultValue=false)]
        public List<string> ExcludedCategoriesClosedDup { get; set; }

        /// <summary>
        /// Gets or Sets ExcludedTradesOpenDup
        /// </summary>
        [DataMember(Name="ExcludedTradesOpenDup", EmitDefaultValue=false)]
        public List<string> ExcludedTradesOpenDup { get; set; }

        /// <summary>
        /// Gets or Sets EnableEquipmentReplacementFlag
        /// </summary>
        [DataMember(Name="EnableEquipmentReplacementFlag", EmitDefaultValue=true)]
        public bool EnableEquipmentReplacementFlag { get; set; } = false;

        /// <summary>
        /// Gets or Sets EnableRequestWizardMobile
        /// </summary>
        [DataMember(Name="EnableRequestWizardMobile", EmitDefaultValue=true)]
        public bool EnableRequestWizardMobile { get; set; } = false;

        /// <summary>
        /// Gets or Sets EnableLocationNotes
        /// </summary>
        [DataMember(Name="EnableLocationNotes", EmitDefaultValue=true)]
        public bool EnableLocationNotes { get; set; } = false;

        /// <summary>
        /// Gets or Sets AlwaysShowLocationNotes
        /// </summary>
        [DataMember(Name="AlwaysShowLocationNotes", EmitDefaultValue=true)]
        public bool AlwaysShowLocationNotes { get; set; } = false;

        /// <summary>
        /// Gets or Sets SkipTroubleshootingStep
        /// </summary>
        [DataMember(Name="SkipTroubleshootingStep", EmitDefaultValue=true)]
        public bool SkipTroubleshootingStep { get; set; } = false;

        /// <summary>
        /// Gets or Sets HidePriority
        /// </summary>
        [DataMember(Name="HidePriority", EmitDefaultValue=true)]
        public bool HidePriority { get; set; } = false;

        /// <summary>
        /// Gets or Sets EnableIssueListKeywordSearch
        /// </summary>
        [DataMember(Name="EnableIssueListKeywordSearch", EmitDefaultValue=true)]
        public bool EnableIssueListKeywordSearch { get; set; } = false;

        /// <summary>
        /// Gets or Sets AssetFirstWorkOrderCreation
        /// </summary>
        [DataMember(Name="AssetFirstWorkOrderCreation", EmitDefaultValue=true)]
        public bool AssetFirstWorkOrderCreation { get; set; } = false;

        /// <summary>
        /// Gets or Sets HideGPSRadius
        /// </summary>
        [DataMember(Name="HideGPSRadius", EmitDefaultValue=true)]
        public bool HideGPSRadius { get; set; } = false;

        /// <summary>
        /// Gets or Sets DuplicateMessage
        /// </summary>
        [DataMember(Name="DuplicateMessage", EmitDefaultValue=false)]
        public string DuplicateMessage { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class SCServiceChannelApiModelDashboardSettingsSetupRequest {\n");
            sb.Append("  SetupId: ").Append(SetupId).Append("\n");
            sb.Append("  EnableRequestWizard: ").Append(EnableRequestWizard).Append("\n");
            sb.Append("  ShowPrivateStoreNotes: ").Append(ShowPrivateStoreNotes).Append("\n");
            sb.Append("  ShowProviderPhoneNumber: ").Append(ShowProviderPhoneNumber).Append("\n");
            sb.Append("  ShowLastServiceCall: ").Append(ShowLastServiceCall).Append("\n");
            sb.Append("  SetOriginalVendorForRecalls: ").Append(SetOriginalVendorForRecalls).Append("\n");
            sb.Append("  NteToZeroForRecalls: ").Append(NteToZeroForRecalls).Append("\n");
            sb.Append("  SendAlertToFM: ").Append(SendAlertToFM).Append("\n");
            sb.Append("  TurnOffDescription: ").Append(TurnOffDescription).Append("\n");
            sb.Append("  DaysOfHistoryToDisplay: ").Append(DaysOfHistoryToDisplay).Append("\n");
            sb.Append("  ShowStoreWarrantyStr: ").Append(ShowStoreWarrantyStr).Append("\n");
            sb.Append("  ShowStoreWarranty: ").Append(ShowStoreWarranty).Append("\n");
            sb.Append("  StoreWarrantyMessage: ").Append(StoreWarrantyMessage).Append("\n");
            sb.Append("  ConfirmationMessage: ").Append(ConfirmationMessage).Append("\n");
            sb.Append("  ProviderNotFoundMessage: ").Append(ProviderNotFoundMessage).Append("\n");
            sb.Append("  EnableEquipment: ").Append(EnableEquipment).Append("\n");
            sb.Append("  DuplicateFilters: ").Append(DuplicateFilters).Append("\n");
            sb.Append("  ExcludedCategoriesOpenDup: ").Append(ExcludedCategoriesOpenDup).Append("\n");
            sb.Append("  ExcludedCategoriesClosedDup: ").Append(ExcludedCategoriesClosedDup).Append("\n");
            sb.Append("  ExcludedTradesOpenDup: ").Append(ExcludedTradesOpenDup).Append("\n");
            sb.Append("  EnableEquipmentReplacementFlag: ").Append(EnableEquipmentReplacementFlag).Append("\n");
            sb.Append("  EnableRequestWizardMobile: ").Append(EnableRequestWizardMobile).Append("\n");
            sb.Append("  EnableLocationNotes: ").Append(EnableLocationNotes).Append("\n");
            sb.Append("  AlwaysShowLocationNotes: ").Append(AlwaysShowLocationNotes).Append("\n");
            sb.Append("  SkipTroubleshootingStep: ").Append(SkipTroubleshootingStep).Append("\n");
            sb.Append("  HidePriority: ").Append(HidePriority).Append("\n");
            sb.Append("  EnableIssueListKeywordSearch: ").Append(EnableIssueListKeywordSearch).Append("\n");
            sb.Append("  AssetFirstWorkOrderCreation: ").Append(AssetFirstWorkOrderCreation).Append("\n");
            sb.Append("  HideGPSRadius: ").Append(HideGPSRadius).Append("\n");
            sb.Append("  DuplicateMessage: ").Append(DuplicateMessage).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            var options = new JsonSerializerOptions
            {
                WriteIndented = true
            };

            return JsonSerializer.Serialize(this, options);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (obj is null) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((SCServiceChannelApiModelDashboardSettingsSetupRequest)obj);
        }

        /// <summary>
        /// Returns true if SCServiceChannelApiModelDashboardSettingsSetupRequest instances are equal
        /// </summary>
        /// <param name="other">Instance of SCServiceChannelApiModelDashboardSettingsSetupRequest to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(SCServiceChannelApiModelDashboardSettingsSetupRequest other)
        {
            if (other is null) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    SetupId == other.SetupId ||
                    
                    SetupId.Equals(other.SetupId)
                ) && 
                (
                    EnableRequestWizard == other.EnableRequestWizard ||
                    
                    EnableRequestWizard.Equals(other.EnableRequestWizard)
                ) && 
                (
                    ShowPrivateStoreNotes == other.ShowPrivateStoreNotes ||
                    
                    ShowPrivateStoreNotes.Equals(other.ShowPrivateStoreNotes)
                ) && 
                (
                    ShowProviderPhoneNumber == other.ShowProviderPhoneNumber ||
                    
                    ShowProviderPhoneNumber.Equals(other.ShowProviderPhoneNumber)
                ) && 
                (
                    ShowLastServiceCall == other.ShowLastServiceCall ||
                    
                    ShowLastServiceCall.Equals(other.ShowLastServiceCall)
                ) && 
                (
                    SetOriginalVendorForRecalls == other.SetOriginalVendorForRecalls ||
                    
                    SetOriginalVendorForRecalls.Equals(other.SetOriginalVendorForRecalls)
                ) && 
                (
                    NteToZeroForRecalls == other.NteToZeroForRecalls ||
                    
                    NteToZeroForRecalls.Equals(other.NteToZeroForRecalls)
                ) && 
                (
                    SendAlertToFM == other.SendAlertToFM ||
                    
                    SendAlertToFM.Equals(other.SendAlertToFM)
                ) && 
                (
                    TurnOffDescription == other.TurnOffDescription ||
                    
                    TurnOffDescription.Equals(other.TurnOffDescription)
                ) && 
                (
                    DaysOfHistoryToDisplay == other.DaysOfHistoryToDisplay ||
                    
                    DaysOfHistoryToDisplay.Equals(other.DaysOfHistoryToDisplay)
                ) && 
                (
                    ShowStoreWarrantyStr == other.ShowStoreWarrantyStr ||
                    ShowStoreWarrantyStr != null &&
                    ShowStoreWarrantyStr.Equals(other.ShowStoreWarrantyStr)
                ) && 
                (
                    ShowStoreWarranty == other.ShowStoreWarranty ||
                    
                    ShowStoreWarranty.Equals(other.ShowStoreWarranty)
                ) && 
                (
                    StoreWarrantyMessage == other.StoreWarrantyMessage ||
                    StoreWarrantyMessage != null &&
                    StoreWarrantyMessage.Equals(other.StoreWarrantyMessage)
                ) && 
                (
                    ConfirmationMessage == other.ConfirmationMessage ||
                    ConfirmationMessage != null &&
                    ConfirmationMessage.Equals(other.ConfirmationMessage)
                ) && 
                (
                    ProviderNotFoundMessage == other.ProviderNotFoundMessage ||
                    ProviderNotFoundMessage != null &&
                    ProviderNotFoundMessage.Equals(other.ProviderNotFoundMessage)
                ) && 
                (
                    EnableEquipment == other.EnableEquipment ||
                    
                    EnableEquipment.Equals(other.EnableEquipment)
                ) && 
                (
                    DuplicateFilters == other.DuplicateFilters ||
                    DuplicateFilters != null &&
                    other.DuplicateFilters != null &&
                    DuplicateFilters.SequenceEqual(other.DuplicateFilters)
                ) && 
                (
                    ExcludedCategoriesOpenDup == other.ExcludedCategoriesOpenDup ||
                    ExcludedCategoriesOpenDup != null &&
                    other.ExcludedCategoriesOpenDup != null &&
                    ExcludedCategoriesOpenDup.SequenceEqual(other.ExcludedCategoriesOpenDup)
                ) && 
                (
                    ExcludedCategoriesClosedDup == other.ExcludedCategoriesClosedDup ||
                    ExcludedCategoriesClosedDup != null &&
                    other.ExcludedCategoriesClosedDup != null &&
                    ExcludedCategoriesClosedDup.SequenceEqual(other.ExcludedCategoriesClosedDup)
                ) && 
                (
                    ExcludedTradesOpenDup == other.ExcludedTradesOpenDup ||
                    ExcludedTradesOpenDup != null &&
                    other.ExcludedTradesOpenDup != null &&
                    ExcludedTradesOpenDup.SequenceEqual(other.ExcludedTradesOpenDup)
                ) && 
                (
                    EnableEquipmentReplacementFlag == other.EnableEquipmentReplacementFlag ||
                    
                    EnableEquipmentReplacementFlag.Equals(other.EnableEquipmentReplacementFlag)
                ) && 
                (
                    EnableRequestWizardMobile == other.EnableRequestWizardMobile ||
                    
                    EnableRequestWizardMobile.Equals(other.EnableRequestWizardMobile)
                ) && 
                (
                    EnableLocationNotes == other.EnableLocationNotes ||
                    
                    EnableLocationNotes.Equals(other.EnableLocationNotes)
                ) && 
                (
                    AlwaysShowLocationNotes == other.AlwaysShowLocationNotes ||
                    
                    AlwaysShowLocationNotes.Equals(other.AlwaysShowLocationNotes)
                ) && 
                (
                    SkipTroubleshootingStep == other.SkipTroubleshootingStep ||
                    
                    SkipTroubleshootingStep.Equals(other.SkipTroubleshootingStep)
                ) && 
                (
                    HidePriority == other.HidePriority ||
                    
                    HidePriority.Equals(other.HidePriority)
                ) && 
                (
                    EnableIssueListKeywordSearch == other.EnableIssueListKeywordSearch ||
                    
                    EnableIssueListKeywordSearch.Equals(other.EnableIssueListKeywordSearch)
                ) && 
                (
                    AssetFirstWorkOrderCreation == other.AssetFirstWorkOrderCreation ||
                    
                    AssetFirstWorkOrderCreation.Equals(other.AssetFirstWorkOrderCreation)
                ) && 
                (
                    HideGPSRadius == other.HideGPSRadius ||
                    
                    HideGPSRadius.Equals(other.HideGPSRadius)
                ) && 
                (
                    DuplicateMessage == other.DuplicateMessage ||
                    DuplicateMessage != null &&
                    DuplicateMessage.Equals(other.DuplicateMessage)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    
                    hashCode = hashCode * 59 + SetupId.GetHashCode();
                    
                    hashCode = hashCode * 59 + EnableRequestWizard.GetHashCode();
                    
                    hashCode = hashCode * 59 + ShowPrivateStoreNotes.GetHashCode();
                    
                    hashCode = hashCode * 59 + ShowProviderPhoneNumber.GetHashCode();
                    
                    hashCode = hashCode * 59 + ShowLastServiceCall.GetHashCode();
                    
                    hashCode = hashCode * 59 + SetOriginalVendorForRecalls.GetHashCode();
                    
                    hashCode = hashCode * 59 + NteToZeroForRecalls.GetHashCode();
                    
                    hashCode = hashCode * 59 + SendAlertToFM.GetHashCode();
                    
                    hashCode = hashCode * 59 + TurnOffDescription.GetHashCode();
                    
                    hashCode = hashCode * 59 + DaysOfHistoryToDisplay.GetHashCode();
                    if (ShowStoreWarrantyStr != null)
                    hashCode = hashCode * 59 + ShowStoreWarrantyStr.GetHashCode();
                    
                    hashCode = hashCode * 59 + ShowStoreWarranty.GetHashCode();
                    if (StoreWarrantyMessage != null)
                    hashCode = hashCode * 59 + StoreWarrantyMessage.GetHashCode();
                    if (ConfirmationMessage != null)
                    hashCode = hashCode * 59 + ConfirmationMessage.GetHashCode();
                    if (ProviderNotFoundMessage != null)
                    hashCode = hashCode * 59 + ProviderNotFoundMessage.GetHashCode();
                    
                    hashCode = hashCode * 59 + EnableEquipment.GetHashCode();
                    if (DuplicateFilters != null)
                    hashCode = hashCode * 59 + DuplicateFilters.GetHashCode();
                    if (ExcludedCategoriesOpenDup != null)
                    hashCode = hashCode * 59 + ExcludedCategoriesOpenDup.GetHashCode();
                    if (ExcludedCategoriesClosedDup != null)
                    hashCode = hashCode * 59 + ExcludedCategoriesClosedDup.GetHashCode();
                    if (ExcludedTradesOpenDup != null)
                    hashCode = hashCode * 59 + ExcludedTradesOpenDup.GetHashCode();
                    
                    hashCode = hashCode * 59 + EnableEquipmentReplacementFlag.GetHashCode();
                    
                    hashCode = hashCode * 59 + EnableRequestWizardMobile.GetHashCode();
                    
                    hashCode = hashCode * 59 + EnableLocationNotes.GetHashCode();
                    
                    hashCode = hashCode * 59 + AlwaysShowLocationNotes.GetHashCode();
                    
                    hashCode = hashCode * 59 + SkipTroubleshootingStep.GetHashCode();
                    
                    hashCode = hashCode * 59 + HidePriority.GetHashCode();
                    
                    hashCode = hashCode * 59 + EnableIssueListKeywordSearch.GetHashCode();
                    
                    hashCode = hashCode * 59 + AssetFirstWorkOrderCreation.GetHashCode();
                    
                    hashCode = hashCode * 59 + HideGPSRadius.GetHashCode();
                    if (DuplicateMessage != null)
                    hashCode = hashCode * 59 + DuplicateMessage.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(SCServiceChannelApiModelDashboardSettingsSetupRequest left, SCServiceChannelApiModelDashboardSettingsSetupRequest right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(SCServiceChannelApiModelDashboardSettingsSetupRequest left, SCServiceChannelApiModelDashboardSettingsSetupRequest right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}
