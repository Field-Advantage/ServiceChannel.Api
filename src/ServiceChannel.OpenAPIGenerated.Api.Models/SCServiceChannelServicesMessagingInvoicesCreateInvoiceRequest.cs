/*
 * ServiceChannel API - v.3
 *
 * The ServiceChannel API is a RESTful and stateless API. It accepts standard HTTP verbs and supports OAuth 2.0 for authorizing requests.      Our API returns common HTTP status codes as well as JSON encapsulated data.      See [API Overview](https://developer.servicechannel.com/basics/introduction/overview/) for the intro to ServiceChannel API.<br>      <h3>Authentication and Authorization</h3>You should have a ServiceChannel account, register your application, and obtain `access_token` to integrate with our API.      See [Authentication and Authorization](https://developer.servicechannel.com/basics/general/authentication/) for more information.      To use this API playground, click **Authorize** and sign in to ServiceChannel.<br>      <h3>Environment</h3> All calls in this API Reference point to the **SB2 environment**.      See [Environments](https://developer.servicechannel.com/basics/general/environments/) for more information.<br>      <h3>API Version</h3>The current stable version of the ServiceChannel API is `v3`. In the request URL, `v3` is a version prefix that should be present.      When you omit the version prefix, calls point to the minimum supported version of the API.      We recommend you to always specify the API version to avoid possible errors.
 *
 * The version of the OpenAPI document: 3
 * 
 * Generated by: https://openapi-generator.tech
 */

using System;
using System.Linq;
using System.Text;
using System.Collections.Generic;
using System.ComponentModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using System.Text.Json;
using ServiceChannel.OpenAPIGenerated.Api.Converters;

namespace ServiceChannel.OpenAPIGenerated.Api.Models
{ 
    /// <summary>
    /// 
    /// </summary>
    [DataContract]
    public class SCServiceChannelServicesMessagingInvoicesCreateInvoiceRequest : IEquatable<SCServiceChannelServicesMessagingInvoicesCreateInvoiceRequest>
    {
        /// <summary>
        /// Invoice identifier. Must be unique for each invoice.
        /// </summary>
        /// <value>Invoice identifier. Must be unique for each invoice.</value>
        [Required]
        [DataMember(Name="InvoiceNumber", EmitDefaultValue=false)]
        public string InvoiceNumber { get; set; }

        /// <summary>
        /// Date and time when the invoice was issued.
        /// </summary>
        /// <value>Date and time when the invoice was issued.</value>
        [DataMember(Name="InvoiceDate", EmitDefaultValue=false)]
        public DateTime InvoiceDate { get; set; }

        /// <summary>
        /// Date and time when the invoice was issued. Indicated with the UTC offset.
        /// </summary>
        /// <value>Date and time when the invoice was issued. Indicated with the UTC offset.</value>
        [DataMember(Name="InvoiceDateDTO", EmitDefaultValue=false)]
        public DateTime InvoiceDateDTO { get; set; }

        /// <summary>
        /// Gets or Sets WoIdentifier
        /// </summary>
        [Required]
        [DataMember(Name="WoIdentifier", EmitDefaultValue=false)]
        public string WoIdentifier { get; set; }

        /// <summary>
        /// The amount of the tax.
        /// </summary>
        /// <value>The amount of the tax.</value>
        [DataMember(Name="InvoiceTax", EmitDefaultValue=true)]
        public double InvoiceTax { get; set; }

        /// <summary>
        /// Gets or Sets PostedTaxRate
        /// </summary>
        [DataMember(Name="PostedTaxRate", EmitDefaultValue=true)]
        public float PostedTaxRate { get; set; }

        /// <summary>
        /// Gets or Sets NonTaxableLabor
        /// </summary>
        [DataMember(Name="NonTaxableLabor", EmitDefaultValue=true)]
        public int NonTaxableLabor { get; set; }

        /// <summary>
        /// Gets or Sets NonTaxableTravel
        /// </summary>
        [DataMember(Name="NonTaxableTravel", EmitDefaultValue=true)]
        public int NonTaxableTravel { get; set; }

        /// <summary>
        /// Gets or Sets NonTaxableMaterial
        /// </summary>
        [DataMember(Name="NonTaxableMaterial", EmitDefaultValue=true)]
        public int NonTaxableMaterial { get; set; }

        /// <summary>
        /// Gets or Sets NonTaxableFreight
        /// </summary>
        [DataMember(Name="NonTaxableFreight", EmitDefaultValue=true)]
        public int NonTaxableFreight { get; set; }

        /// <summary>
        /// Gets or Sets NonTaxableOther
        /// </summary>
        [DataMember(Name="NonTaxableOther", EmitDefaultValue=true)]
        public int NonTaxableOther { get; set; }

        /// <summary>
        /// Gets or Sets WithMismatchedRates
        /// </summary>
        [DataMember(Name="WithMismatchedRates", EmitDefaultValue=true)]
        public bool WithMismatchedRates { get; set; } = false;

        /// <summary>
        /// Gets or Sets InvoiceTotal
        /// </summary>
        [DataMember(Name="InvoiceTotal", EmitDefaultValue=true)]
        public double InvoiceTotal { get; set; }

        /// <summary>
        /// Detailed description of the work completed. Subscriber can change this field to &#x60;required&#x60;.
        /// </summary>
        /// <value>Detailed description of the work completed. Subscriber can change this field to &#x60;required&#x60;.</value>
        [DataMember(Name="InvoiceText", EmitDefaultValue=false)]
        public string InvoiceText { get; set; }

        /// <summary>
        /// Gets or Sets InvoiceAmountsDetails
        /// </summary>
        [DataMember(Name="InvoiceAmountsDetails", EmitDefaultValue=false)]
        public SCServiceChannelServicesMessagingInvoicesInvoiceAmountsDetails InvoiceAmountsDetails { get; set; }

        /// <summary>
        /// Gets or Sets InvoiceTaxesDetails
        /// </summary>
        [DataMember(Name="InvoiceTaxesDetails", EmitDefaultValue=false)]
        public SCServiceChannelServicesMessagingInvoicesInvoiceTaxesDetails InvoiceTaxesDetails { get; set; }

        /// <summary>
        /// Gets or Sets Tax2Details
        /// </summary>
        [DataMember(Name="Tax2Details", EmitDefaultValue=false)]
        public SCServiceChannelServicesMessagingInvoicesTax2Details Tax2Details { get; set; }

        /// <summary>
        /// Gets or Sets TaxIncluded
        /// </summary>
        [DataMember(Name="TaxIncluded", EmitDefaultValue=false)]
        public SCServiceChannelServicesMessagingInvoicesCreatingInvoiceTaxIncludedRequest TaxIncluded { get; set; }

        /// <summary>
        /// Get or set the labors description (Subscriber can change this field to required).
        /// </summary>
        /// <value>Get or set the labors description (Subscriber can change this field to required).</value>
        [DataMember(Name="Labors", EmitDefaultValue=false)]
        public List<SCServiceChannelServicesMessagingInvoicesInvoiceLabor> Labors { get; set; }

        /// <summary>
        /// Get or set the materials description (Subscriber can change this field to required).
        /// </summary>
        /// <value>Get or set the materials description (Subscriber can change this field to required).</value>
        [DataMember(Name="Materials", EmitDefaultValue=false)]
        public List<SCServiceChannelServicesMessagingInvoicesInvoiceMaterial> Materials { get; set; }

        /// <summary>
        /// Get or set the materials description (Subscriber can change this field to required).
        /// </summary>
        /// <value>Get or set the materials description (Subscriber can change this field to required).</value>
        [DataMember(Name="Travels", EmitDefaultValue=false)]
        public List<SCServiceChannelServicesMessagingInvoicesInvoiceTravel> Travels { get; set; }

        /// <summary>
        /// Get or set the others description (Subscriber can change this field to required).
        /// </summary>
        /// <value>Get or set the others description (Subscriber can change this field to required).</value>
        [DataMember(Name="Others", EmitDefaultValue=false)]
        public List<SCServiceChannelServicesMessagingInvoicesInvoiceOther> Others { get; set; }

        /// <summary>
        /// Gets or sets the explain dispute.
        /// </summary>
        /// <value>Gets or sets the explain dispute.</value>
        [DataMember(Name="ExplainDispute", EmitDefaultValue=false)]
        public string ExplainDispute { get; set; }

        /// <summary>
        /// Gets or Sets SubmitDisputed
        /// </summary>
        [DataMember(Name="SubmitDisputed", EmitDefaultValue=true)]
        public bool SubmitDisputed { get; set; } = false;

        /// <summary>
        /// Gets or sets vendor payee identifier.
        /// </summary>
        /// <value>Gets or sets vendor payee identifier.</value>
        [DataMember(Name="VendorId", EmitDefaultValue=true)]
        public int VendorId { get; set; }

        /// <summary>
        /// Invoice Terms
        /// </summary>
        /// <value>Invoice Terms</value>
        [DataMember(Name="Terms", EmitDefaultValue=false)]
        public string Terms { get; set; }

        /// <summary>
        /// Optional
        /// </summary>
        /// <value>Optional</value>
        [DataMember(Name="Attachments", EmitDefaultValue=false)]
        public List<SCAddInvoiceAttachmentRequest> Attachments { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class SCServiceChannelServicesMessagingInvoicesCreateInvoiceRequest {\n");
            sb.Append("  InvoiceNumber: ").Append(InvoiceNumber).Append("\n");
            sb.Append("  InvoiceDate: ").Append(InvoiceDate).Append("\n");
            sb.Append("  InvoiceDateDTO: ").Append(InvoiceDateDTO).Append("\n");
            sb.Append("  WoIdentifier: ").Append(WoIdentifier).Append("\n");
            sb.Append("  InvoiceTax: ").Append(InvoiceTax).Append("\n");
            sb.Append("  PostedTaxRate: ").Append(PostedTaxRate).Append("\n");
            sb.Append("  NonTaxableLabor: ").Append(NonTaxableLabor).Append("\n");
            sb.Append("  NonTaxableTravel: ").Append(NonTaxableTravel).Append("\n");
            sb.Append("  NonTaxableMaterial: ").Append(NonTaxableMaterial).Append("\n");
            sb.Append("  NonTaxableFreight: ").Append(NonTaxableFreight).Append("\n");
            sb.Append("  NonTaxableOther: ").Append(NonTaxableOther).Append("\n");
            sb.Append("  WithMismatchedRates: ").Append(WithMismatchedRates).Append("\n");
            sb.Append("  InvoiceTotal: ").Append(InvoiceTotal).Append("\n");
            sb.Append("  InvoiceText: ").Append(InvoiceText).Append("\n");
            sb.Append("  InvoiceAmountsDetails: ").Append(InvoiceAmountsDetails).Append("\n");
            sb.Append("  InvoiceTaxesDetails: ").Append(InvoiceTaxesDetails).Append("\n");
            sb.Append("  Tax2Details: ").Append(Tax2Details).Append("\n");
            sb.Append("  TaxIncluded: ").Append(TaxIncluded).Append("\n");
            sb.Append("  Labors: ").Append(Labors).Append("\n");
            sb.Append("  Materials: ").Append(Materials).Append("\n");
            sb.Append("  Travels: ").Append(Travels).Append("\n");
            sb.Append("  Others: ").Append(Others).Append("\n");
            sb.Append("  ExplainDispute: ").Append(ExplainDispute).Append("\n");
            sb.Append("  SubmitDisputed: ").Append(SubmitDisputed).Append("\n");
            sb.Append("  VendorId: ").Append(VendorId).Append("\n");
            sb.Append("  Terms: ").Append(Terms).Append("\n");
            sb.Append("  Attachments: ").Append(Attachments).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            var options = new JsonSerializerOptions
            {
                WriteIndented = true
            };

            return JsonSerializer.Serialize(this, options);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (obj is null) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((SCServiceChannelServicesMessagingInvoicesCreateInvoiceRequest)obj);
        }

        /// <summary>
        /// Returns true if SCServiceChannelServicesMessagingInvoicesCreateInvoiceRequest instances are equal
        /// </summary>
        /// <param name="other">Instance of SCServiceChannelServicesMessagingInvoicesCreateInvoiceRequest to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(SCServiceChannelServicesMessagingInvoicesCreateInvoiceRequest other)
        {
            if (other is null) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    InvoiceNumber == other.InvoiceNumber ||
                    InvoiceNumber != null &&
                    InvoiceNumber.Equals(other.InvoiceNumber)
                ) && 
                (
                    InvoiceDate == other.InvoiceDate ||
                    InvoiceDate != null &&
                    InvoiceDate.Equals(other.InvoiceDate)
                ) && 
                (
                    InvoiceDateDTO == other.InvoiceDateDTO ||
                    InvoiceDateDTO != null &&
                    InvoiceDateDTO.Equals(other.InvoiceDateDTO)
                ) && 
                (
                    WoIdentifier == other.WoIdentifier ||
                    WoIdentifier != null &&
                    WoIdentifier.Equals(other.WoIdentifier)
                ) && 
                (
                    InvoiceTax == other.InvoiceTax ||
                    
                    InvoiceTax.Equals(other.InvoiceTax)
                ) && 
                (
                    PostedTaxRate == other.PostedTaxRate ||
                    
                    PostedTaxRate.Equals(other.PostedTaxRate)
                ) && 
                (
                    NonTaxableLabor == other.NonTaxableLabor ||
                    
                    NonTaxableLabor.Equals(other.NonTaxableLabor)
                ) && 
                (
                    NonTaxableTravel == other.NonTaxableTravel ||
                    
                    NonTaxableTravel.Equals(other.NonTaxableTravel)
                ) && 
                (
                    NonTaxableMaterial == other.NonTaxableMaterial ||
                    
                    NonTaxableMaterial.Equals(other.NonTaxableMaterial)
                ) && 
                (
                    NonTaxableFreight == other.NonTaxableFreight ||
                    
                    NonTaxableFreight.Equals(other.NonTaxableFreight)
                ) && 
                (
                    NonTaxableOther == other.NonTaxableOther ||
                    
                    NonTaxableOther.Equals(other.NonTaxableOther)
                ) && 
                (
                    WithMismatchedRates == other.WithMismatchedRates ||
                    
                    WithMismatchedRates.Equals(other.WithMismatchedRates)
                ) && 
                (
                    InvoiceTotal == other.InvoiceTotal ||
                    
                    InvoiceTotal.Equals(other.InvoiceTotal)
                ) && 
                (
                    InvoiceText == other.InvoiceText ||
                    InvoiceText != null &&
                    InvoiceText.Equals(other.InvoiceText)
                ) && 
                (
                    InvoiceAmountsDetails == other.InvoiceAmountsDetails ||
                    InvoiceAmountsDetails != null &&
                    InvoiceAmountsDetails.Equals(other.InvoiceAmountsDetails)
                ) && 
                (
                    InvoiceTaxesDetails == other.InvoiceTaxesDetails ||
                    InvoiceTaxesDetails != null &&
                    InvoiceTaxesDetails.Equals(other.InvoiceTaxesDetails)
                ) && 
                (
                    Tax2Details == other.Tax2Details ||
                    Tax2Details != null &&
                    Tax2Details.Equals(other.Tax2Details)
                ) && 
                (
                    TaxIncluded == other.TaxIncluded ||
                    TaxIncluded != null &&
                    TaxIncluded.Equals(other.TaxIncluded)
                ) && 
                (
                    Labors == other.Labors ||
                    Labors != null &&
                    other.Labors != null &&
                    Labors.SequenceEqual(other.Labors)
                ) && 
                (
                    Materials == other.Materials ||
                    Materials != null &&
                    other.Materials != null &&
                    Materials.SequenceEqual(other.Materials)
                ) && 
                (
                    Travels == other.Travels ||
                    Travels != null &&
                    other.Travels != null &&
                    Travels.SequenceEqual(other.Travels)
                ) && 
                (
                    Others == other.Others ||
                    Others != null &&
                    other.Others != null &&
                    Others.SequenceEqual(other.Others)
                ) && 
                (
                    ExplainDispute == other.ExplainDispute ||
                    ExplainDispute != null &&
                    ExplainDispute.Equals(other.ExplainDispute)
                ) && 
                (
                    SubmitDisputed == other.SubmitDisputed ||
                    
                    SubmitDisputed.Equals(other.SubmitDisputed)
                ) && 
                (
                    VendorId == other.VendorId ||
                    
                    VendorId.Equals(other.VendorId)
                ) && 
                (
                    Terms == other.Terms ||
                    Terms != null &&
                    Terms.Equals(other.Terms)
                ) && 
                (
                    Attachments == other.Attachments ||
                    Attachments != null &&
                    other.Attachments != null &&
                    Attachments.SequenceEqual(other.Attachments)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    if (InvoiceNumber != null)
                    hashCode = hashCode * 59 + InvoiceNumber.GetHashCode();
                    if (InvoiceDate != null)
                    hashCode = hashCode * 59 + InvoiceDate.GetHashCode();
                    if (InvoiceDateDTO != null)
                    hashCode = hashCode * 59 + InvoiceDateDTO.GetHashCode();
                    if (WoIdentifier != null)
                    hashCode = hashCode * 59 + WoIdentifier.GetHashCode();
                    
                    hashCode = hashCode * 59 + InvoiceTax.GetHashCode();
                    
                    hashCode = hashCode * 59 + PostedTaxRate.GetHashCode();
                    
                    hashCode = hashCode * 59 + NonTaxableLabor.GetHashCode();
                    
                    hashCode = hashCode * 59 + NonTaxableTravel.GetHashCode();
                    
                    hashCode = hashCode * 59 + NonTaxableMaterial.GetHashCode();
                    
                    hashCode = hashCode * 59 + NonTaxableFreight.GetHashCode();
                    
                    hashCode = hashCode * 59 + NonTaxableOther.GetHashCode();
                    
                    hashCode = hashCode * 59 + WithMismatchedRates.GetHashCode();
                    
                    hashCode = hashCode * 59 + InvoiceTotal.GetHashCode();
                    if (InvoiceText != null)
                    hashCode = hashCode * 59 + InvoiceText.GetHashCode();
                    if (InvoiceAmountsDetails != null)
                    hashCode = hashCode * 59 + InvoiceAmountsDetails.GetHashCode();
                    if (InvoiceTaxesDetails != null)
                    hashCode = hashCode * 59 + InvoiceTaxesDetails.GetHashCode();
                    if (Tax2Details != null)
                    hashCode = hashCode * 59 + Tax2Details.GetHashCode();
                    if (TaxIncluded != null)
                    hashCode = hashCode * 59 + TaxIncluded.GetHashCode();
                    if (Labors != null)
                    hashCode = hashCode * 59 + Labors.GetHashCode();
                    if (Materials != null)
                    hashCode = hashCode * 59 + Materials.GetHashCode();
                    if (Travels != null)
                    hashCode = hashCode * 59 + Travels.GetHashCode();
                    if (Others != null)
                    hashCode = hashCode * 59 + Others.GetHashCode();
                    if (ExplainDispute != null)
                    hashCode = hashCode * 59 + ExplainDispute.GetHashCode();
                    
                    hashCode = hashCode * 59 + SubmitDisputed.GetHashCode();
                    
                    hashCode = hashCode * 59 + VendorId.GetHashCode();
                    if (Terms != null)
                    hashCode = hashCode * 59 + Terms.GetHashCode();
                    if (Attachments != null)
                    hashCode = hashCode * 59 + Attachments.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(SCServiceChannelServicesMessagingInvoicesCreateInvoiceRequest left, SCServiceChannelServicesMessagingInvoicesCreateInvoiceRequest right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(SCServiceChannelServicesMessagingInvoicesCreateInvoiceRequest left, SCServiceChannelServicesMessagingInvoicesCreateInvoiceRequest right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}
