/*
 * ServiceChannel API - v.3
 *
 * The ServiceChannel API is a RESTful and stateless API. It accepts standard HTTP verbs and supports OAuth 2.0 for authorizing requests.      Our API returns common HTTP status codes as well as JSON encapsulated data.      See [API Overview](https://developer.servicechannel.com/basics/introduction/overview/) for the intro to ServiceChannel API.<br>      <h3>Authentication and Authorization</h3>You should have a ServiceChannel account, register your application, and obtain `access_token` to integrate with our API.      See [Authentication and Authorization](https://developer.servicechannel.com/basics/general/authentication/) for more information.      To use this API playground, click **Authorize** and sign in to ServiceChannel.<br>      <h3>Environment</h3> All calls in this API Reference point to the **SB2 environment**.      See [Environments](https://developer.servicechannel.com/basics/general/environments/) for more information.<br>      <h3>API Version</h3>The current stable version of the ServiceChannel API is `v3`. In the request URL, `v3` is a version prefix that should be present.      When you omit the version prefix, calls point to the minimum supported version of the API.      We recommend you to always specify the API version to avoid possible errors.
 *
 * The version of the OpenAPI document: 3
 * 
 * Generated by: https://openapi-generator.tech
 */

using System;
using System.Linq;
using System.Text;
using System.Collections.Generic;
using System.ComponentModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using System.Text.Json;
using ServiceChannel.OpenAPIGenerated.Api.Converters;

namespace ServiceChannel.OpenAPIGenerated.Api.Models
{ 
    /// <summary>
    /// The model for update isDoNotDispatch value for providers.
    /// </summary>
    [DataContract]
    public class SCServiceChannelServicesWebApiModelsUpdateDispatchSettingModel : IEquatable<SCServiceChannelServicesWebApiModelsUpdateDispatchSettingModel>
    {
        /// <summary>
        /// The id of a calling subscriber.              This id is the one who sets isDoNotDispatch value or is an aggregator of other subscribers.              If it is the aggregator then subscriberId and subscriberIds from SubscriberProviders pairs do not match.
        /// </summary>
        /// <value>The id of a calling subscriber.              This id is the one who sets isDoNotDispatch value or is an aggregator of other subscribers.              If it is the aggregator then subscriberId and subscriberIds from SubscriberProviders pairs do not match.</value>
        [DataMember(Name="SubscriberId", EmitDefaultValue=true)]
        public int SubscriberId { get; set; }

        /// <summary>
        /// The flag to set isDoNotDispatch value for providers.
        /// </summary>
        /// <value>The flag to set isDoNotDispatch value for providers.</value>
        [DataMember(Name="DoNotDispatch", EmitDefaultValue=true)]
        public bool DoNotDispatch { get; set; } = false;

        /// <summary>
        /// The list of pairs subscriber and providers to set isDoNotDispatch value.
        /// </summary>
        /// <value>The list of pairs subscriber and providers to set isDoNotDispatch value.</value>
        [DataMember(Name="SubscriberIdProviderIds", EmitDefaultValue=false)]
        public List<SCServiceChannelServicesWebApiModelsSubscriberIdProviderIdsPair> SubscriberIdProviderIds { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class SCServiceChannelServicesWebApiModelsUpdateDispatchSettingModel {\n");
            sb.Append("  SubscriberId: ").Append(SubscriberId).Append("\n");
            sb.Append("  DoNotDispatch: ").Append(DoNotDispatch).Append("\n");
            sb.Append("  SubscriberIdProviderIds: ").Append(SubscriberIdProviderIds).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            var options = new JsonSerializerOptions
            {
                WriteIndented = true
            };

            return JsonSerializer.Serialize(this, options);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (obj is null) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((SCServiceChannelServicesWebApiModelsUpdateDispatchSettingModel)obj);
        }

        /// <summary>
        /// Returns true if SCServiceChannelServicesWebApiModelsUpdateDispatchSettingModel instances are equal
        /// </summary>
        /// <param name="other">Instance of SCServiceChannelServicesWebApiModelsUpdateDispatchSettingModel to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(SCServiceChannelServicesWebApiModelsUpdateDispatchSettingModel other)
        {
            if (other is null) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    SubscriberId == other.SubscriberId ||
                    
                    SubscriberId.Equals(other.SubscriberId)
                ) && 
                (
                    DoNotDispatch == other.DoNotDispatch ||
                    
                    DoNotDispatch.Equals(other.DoNotDispatch)
                ) && 
                (
                    SubscriberIdProviderIds == other.SubscriberIdProviderIds ||
                    SubscriberIdProviderIds != null &&
                    other.SubscriberIdProviderIds != null &&
                    SubscriberIdProviderIds.SequenceEqual(other.SubscriberIdProviderIds)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    
                    hashCode = hashCode * 59 + SubscriberId.GetHashCode();
                    
                    hashCode = hashCode * 59 + DoNotDispatch.GetHashCode();
                    if (SubscriberIdProviderIds != null)
                    hashCode = hashCode * 59 + SubscriberIdProviderIds.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(SCServiceChannelServicesWebApiModelsUpdateDispatchSettingModel left, SCServiceChannelServicesWebApiModelsUpdateDispatchSettingModel right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(SCServiceChannelServicesWebApiModelsUpdateDispatchSettingModel left, SCServiceChannelServicesWebApiModelsUpdateDispatchSettingModel right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}
