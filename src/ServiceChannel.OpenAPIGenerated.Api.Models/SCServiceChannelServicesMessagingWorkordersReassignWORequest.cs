/*
 * ServiceChannel API - v.3
 *
 * The ServiceChannel API is a RESTful and stateless API. It accepts standard HTTP verbs and supports OAuth 2.0 for authorizing requests.      Our API returns common HTTP status codes as well as JSON encapsulated data.      See [API Overview](https://developer.servicechannel.com/basics/introduction/overview/) for the intro to ServiceChannel API.<br>      <h3>Authentication and Authorization</h3>You should have a ServiceChannel account, register your application, and obtain `access_token` to integrate with our API.      See [Authentication and Authorization](https://developer.servicechannel.com/basics/general/authentication/) for more information.      To use this API playground, click **Authorize** and sign in to ServiceChannel.<br>      <h3>Environment</h3> All calls in this API Reference point to the **SB2 environment**.      See [Environments](https://developer.servicechannel.com/basics/general/environments/) for more information.<br>      <h3>API Version</h3>The current stable version of the ServiceChannel API is `v3`. In the request URL, `v3` is a version prefix that should be present.      When you omit the version prefix, calls point to the minimum supported version of the API.      We recommend you to always specify the API version to avoid possible errors.
 *
 * The version of the OpenAPI document: 3
 * 
 * Generated by: https://openapi-generator.tech
 */

using System;
using System.Linq;
using System.Text;
using System.Collections.Generic;
using System.ComponentModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using System.Text.Json;
using ServiceChannel.OpenAPIGenerated.Api.Converters;

namespace ServiceChannel.OpenAPIGenerated.Api.Models
{ 
    /// <summary>
    /// Reassign WorkOrder To other Provider
    /// </summary>
    [DataContract]
    public class SCServiceChannelServicesMessagingWorkordersReassignWORequest : IEquatable<SCServiceChannelServicesMessagingWorkordersReassignWORequest>
    {
        /// <summary>
        /// Work order id.
        /// </summary>
        /// <value>Work order id.</value>
        [DataMember(Name="WorkorderId", EmitDefaultValue=true)]
        public int WorkorderId { get; set; }

        /// <summary>
        /// Trade
        /// </summary>
        /// <value>Trade</value>
        [DataMember(Name="Trade", EmitDefaultValue=false)]
        public string Trade { get; set; }

        /// <summary>
        /// Problem Description.
        /// </summary>
        /// <value>Problem Description.</value>
        [DataMember(Name="Problem", EmitDefaultValue=false)]
        public string Problem { get; set; }

        /// <summary>
        /// Problem Code.
        /// </summary>
        /// <value>Problem Code.</value>
        [DataMember(Name="ProblemCode", EmitDefaultValue=false)]
        public string ProblemCode { get; set; }

        /// <summary>
        /// Optional, by default current Work Order Currency
        /// </summary>
        /// <value>Optional, by default current Work Order Currency</value>
        [DataMember(Name="CurrencyId", EmitDefaultValue=true)]
        public int CurrencyId { get; set; }

        /// <summary>
        /// Optional Nte value, by default current Work Order NTE
        /// </summary>
        /// <value>Optional Nte value, by default current Work Order NTE</value>
        [DataMember(Name="Nte", EmitDefaultValue=true)]
        public double Nte { get; set; }

        /// <summary>
        /// Optional GL code value
        /// </summary>
        /// <value>Optional GL code value</value>
        [DataMember(Name="GlCode", EmitDefaultValue=false)]
        public string GlCode { get; set; }

        /// <summary>
        /// Required, Reassignment reason Id.
        /// </summary>
        /// <value>Required, Reassignment reason Id.</value>
        [Required]
        [DataMember(Name="ReasonId", EmitDefaultValue=true)]
        public int ReasonId { get; set; }

        /// <summary>
        /// Required, Provider id to assign.
        /// </summary>
        /// <value>Required, Provider id to assign.</value>
        [Required]
        [DataMember(Name="ProviderId", EmitDefaultValue=true)]
        public int ProviderId { get; set; }

        /// <summary>
        /// Category.
        /// </summary>
        /// <value>Category.</value>
        [DataMember(Name="Category", EmitDefaultValue=false)]
        public string Category { get; set; }

        /// <summary>
        /// Priority
        /// </summary>
        /// <value>Priority</value>
        [DataMember(Name="Priority", EmitDefaultValue=false)]
        public string Priority { get; set; }

        /// <summary>
        /// Note
        /// </summary>
        /// <value>Note</value>
        [DataMember(Name="Note", EmitDefaultValue=false)]
        public string Note { get; set; }

        /// <summary>
        /// ProcessName
        /// </summary>
        /// <value>ProcessName</value>
        [DataMember(Name="ProcessName", EmitDefaultValue=false)]
        public string ProcessName { get; set; }

        /// <summary>
        /// Request email
        /// </summary>
        /// <value>Request email</value>
        [DataMember(Name="RequestEmail", EmitDefaultValue=false)]
        public string RequestEmail { get; set; }

        /// <summary>
        /// Request email copy to
        /// </summary>
        /// <value>Request email copy to</value>
        [DataMember(Name="RequestEmailCopy", EmitDefaultValue=false)]
        public string RequestEmailCopy { get; set; }

        /// <summary>
        /// Notify Provider: send email if true
        /// </summary>
        /// <value>Notify Provider: send email if true</value>
        [DataMember(Name="NotifyProvider", EmitDefaultValue=true)]
        public bool NotifyProvider { get; set; } = false;

        /// <summary>
        /// Additional approval codes
        /// </summary>
        /// <value>Additional approval codes</value>
        [DataMember(Name="AdditionalApprovalCodes", EmitDefaultValue=false)]
        public List<SCServiceChannelServicesMessagingApprovalCodesAdditionalApprovalCode> AdditionalApprovalCodes { get; set; }

        /// <summary>
        /// Work order scheduled date
        /// </summary>
        /// <value>Work order scheduled date</value>
        [DataMember(Name="ScheduledDate", EmitDefaultValue=false)]
        public DateTime ScheduledDate { get; set; }

        /// <summary>
        /// Original ETA
        /// </summary>
        /// <value>Original ETA</value>
        [DataMember(Name="OriginalETA", EmitDefaultValue=false)]
        public DateTime OriginalETA { get; set; }

        /// <summary>
        /// If true: update Approval Codes
        /// </summary>
        /// <value>If true: update Approval Codes</value>
        [DataMember(Name="RefreshApprovalCodes", EmitDefaultValue=true)]
        public bool RefreshApprovalCodes { get; set; } = false;

        /// <summary>
        /// Original work order Id
        /// </summary>
        /// <value>Original work order Id</value>
        [DataMember(Name="RecallWorkOrderId", EmitDefaultValue=true)]
        public int RecallWorkOrderId { get; set; }

        /// <summary>
        /// WO location id
        /// </summary>
        /// <value>WO location id</value>
        [DataMember(Name="LocationId", EmitDefaultValue=true)]
        public int LocationId { get; set; }

        /// <summary>
        /// Purchase Order
        /// </summary>
        /// <value>Purchase Order</value>
        [DataMember(Name="PurchaseOrder", EmitDefaultValue=false)]
        public string PurchaseOrder { get; set; }

        /// <summary>
        /// API request
        /// </summary>
        /// <value>API request</value>
        [DataMember(Name="ApiRequest", EmitDefaultValue=true)]
        public bool ApiRequest { get; set; } = false;

        /// <summary>
        /// Optional, Actor
        /// </summary>
        /// <value>Optional, Actor</value>
        [DataMember(Name="Actor", EmitDefaultValue=false)]
        public string Actor { get; set; }

        /// <summary>
        /// Gets or Sets LabelId
        /// </summary>
        [DataMember(Name="LabelId", EmitDefaultValue=true)]
        public int LabelId { get; set; }

        /// <summary>
        /// Gets or Sets Label
        /// </summary>
        [DataMember(Name="Label", EmitDefaultValue=false)]
        public string Label { get; set; }

        /// <summary>
        /// Gets or Sets DeleteLabel
        /// </summary>
        [DataMember(Name="DeleteLabel", EmitDefaultValue=true)]
        public bool DeleteLabel { get; set; } = false;

        /// <summary>
        /// Gets or Sets CategoryId
        /// </summary>
        [DataMember(Name="CategoryId", EmitDefaultValue=true)]
        public int CategoryId { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class SCServiceChannelServicesMessagingWorkordersReassignWORequest {\n");
            sb.Append("  WorkorderId: ").Append(WorkorderId).Append("\n");
            sb.Append("  Trade: ").Append(Trade).Append("\n");
            sb.Append("  Problem: ").Append(Problem).Append("\n");
            sb.Append("  ProblemCode: ").Append(ProblemCode).Append("\n");
            sb.Append("  CurrencyId: ").Append(CurrencyId).Append("\n");
            sb.Append("  Nte: ").Append(Nte).Append("\n");
            sb.Append("  GlCode: ").Append(GlCode).Append("\n");
            sb.Append("  ReasonId: ").Append(ReasonId).Append("\n");
            sb.Append("  ProviderId: ").Append(ProviderId).Append("\n");
            sb.Append("  Category: ").Append(Category).Append("\n");
            sb.Append("  Priority: ").Append(Priority).Append("\n");
            sb.Append("  Note: ").Append(Note).Append("\n");
            sb.Append("  ProcessName: ").Append(ProcessName).Append("\n");
            sb.Append("  RequestEmail: ").Append(RequestEmail).Append("\n");
            sb.Append("  RequestEmailCopy: ").Append(RequestEmailCopy).Append("\n");
            sb.Append("  NotifyProvider: ").Append(NotifyProvider).Append("\n");
            sb.Append("  AdditionalApprovalCodes: ").Append(AdditionalApprovalCodes).Append("\n");
            sb.Append("  ScheduledDate: ").Append(ScheduledDate).Append("\n");
            sb.Append("  OriginalETA: ").Append(OriginalETA).Append("\n");
            sb.Append("  RefreshApprovalCodes: ").Append(RefreshApprovalCodes).Append("\n");
            sb.Append("  RecallWorkOrderId: ").Append(RecallWorkOrderId).Append("\n");
            sb.Append("  LocationId: ").Append(LocationId).Append("\n");
            sb.Append("  PurchaseOrder: ").Append(PurchaseOrder).Append("\n");
            sb.Append("  ApiRequest: ").Append(ApiRequest).Append("\n");
            sb.Append("  Actor: ").Append(Actor).Append("\n");
            sb.Append("  LabelId: ").Append(LabelId).Append("\n");
            sb.Append("  Label: ").Append(Label).Append("\n");
            sb.Append("  DeleteLabel: ").Append(DeleteLabel).Append("\n");
            sb.Append("  CategoryId: ").Append(CategoryId).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            var options = new JsonSerializerOptions
            {
                WriteIndented = true
            };

            return JsonSerializer.Serialize(this, options);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (obj is null) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((SCServiceChannelServicesMessagingWorkordersReassignWORequest)obj);
        }

        /// <summary>
        /// Returns true if SCServiceChannelServicesMessagingWorkordersReassignWORequest instances are equal
        /// </summary>
        /// <param name="other">Instance of SCServiceChannelServicesMessagingWorkordersReassignWORequest to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(SCServiceChannelServicesMessagingWorkordersReassignWORequest other)
        {
            if (other is null) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    WorkorderId == other.WorkorderId ||
                    
                    WorkorderId.Equals(other.WorkorderId)
                ) && 
                (
                    Trade == other.Trade ||
                    Trade != null &&
                    Trade.Equals(other.Trade)
                ) && 
                (
                    Problem == other.Problem ||
                    Problem != null &&
                    Problem.Equals(other.Problem)
                ) && 
                (
                    ProblemCode == other.ProblemCode ||
                    ProblemCode != null &&
                    ProblemCode.Equals(other.ProblemCode)
                ) && 
                (
                    CurrencyId == other.CurrencyId ||
                    
                    CurrencyId.Equals(other.CurrencyId)
                ) && 
                (
                    Nte == other.Nte ||
                    
                    Nte.Equals(other.Nte)
                ) && 
                (
                    GlCode == other.GlCode ||
                    GlCode != null &&
                    GlCode.Equals(other.GlCode)
                ) && 
                (
                    ReasonId == other.ReasonId ||
                    
                    ReasonId.Equals(other.ReasonId)
                ) && 
                (
                    ProviderId == other.ProviderId ||
                    
                    ProviderId.Equals(other.ProviderId)
                ) && 
                (
                    Category == other.Category ||
                    Category != null &&
                    Category.Equals(other.Category)
                ) && 
                (
                    Priority == other.Priority ||
                    Priority != null &&
                    Priority.Equals(other.Priority)
                ) && 
                (
                    Note == other.Note ||
                    Note != null &&
                    Note.Equals(other.Note)
                ) && 
                (
                    ProcessName == other.ProcessName ||
                    ProcessName != null &&
                    ProcessName.Equals(other.ProcessName)
                ) && 
                (
                    RequestEmail == other.RequestEmail ||
                    RequestEmail != null &&
                    RequestEmail.Equals(other.RequestEmail)
                ) && 
                (
                    RequestEmailCopy == other.RequestEmailCopy ||
                    RequestEmailCopy != null &&
                    RequestEmailCopy.Equals(other.RequestEmailCopy)
                ) && 
                (
                    NotifyProvider == other.NotifyProvider ||
                    
                    NotifyProvider.Equals(other.NotifyProvider)
                ) && 
                (
                    AdditionalApprovalCodes == other.AdditionalApprovalCodes ||
                    AdditionalApprovalCodes != null &&
                    other.AdditionalApprovalCodes != null &&
                    AdditionalApprovalCodes.SequenceEqual(other.AdditionalApprovalCodes)
                ) && 
                (
                    ScheduledDate == other.ScheduledDate ||
                    ScheduledDate != null &&
                    ScheduledDate.Equals(other.ScheduledDate)
                ) && 
                (
                    OriginalETA == other.OriginalETA ||
                    OriginalETA != null &&
                    OriginalETA.Equals(other.OriginalETA)
                ) && 
                (
                    RefreshApprovalCodes == other.RefreshApprovalCodes ||
                    
                    RefreshApprovalCodes.Equals(other.RefreshApprovalCodes)
                ) && 
                (
                    RecallWorkOrderId == other.RecallWorkOrderId ||
                    
                    RecallWorkOrderId.Equals(other.RecallWorkOrderId)
                ) && 
                (
                    LocationId == other.LocationId ||
                    
                    LocationId.Equals(other.LocationId)
                ) && 
                (
                    PurchaseOrder == other.PurchaseOrder ||
                    PurchaseOrder != null &&
                    PurchaseOrder.Equals(other.PurchaseOrder)
                ) && 
                (
                    ApiRequest == other.ApiRequest ||
                    
                    ApiRequest.Equals(other.ApiRequest)
                ) && 
                (
                    Actor == other.Actor ||
                    Actor != null &&
                    Actor.Equals(other.Actor)
                ) && 
                (
                    LabelId == other.LabelId ||
                    
                    LabelId.Equals(other.LabelId)
                ) && 
                (
                    Label == other.Label ||
                    Label != null &&
                    Label.Equals(other.Label)
                ) && 
                (
                    DeleteLabel == other.DeleteLabel ||
                    
                    DeleteLabel.Equals(other.DeleteLabel)
                ) && 
                (
                    CategoryId == other.CategoryId ||
                    
                    CategoryId.Equals(other.CategoryId)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    
                    hashCode = hashCode * 59 + WorkorderId.GetHashCode();
                    if (Trade != null)
                    hashCode = hashCode * 59 + Trade.GetHashCode();
                    if (Problem != null)
                    hashCode = hashCode * 59 + Problem.GetHashCode();
                    if (ProblemCode != null)
                    hashCode = hashCode * 59 + ProblemCode.GetHashCode();
                    
                    hashCode = hashCode * 59 + CurrencyId.GetHashCode();
                    
                    hashCode = hashCode * 59 + Nte.GetHashCode();
                    if (GlCode != null)
                    hashCode = hashCode * 59 + GlCode.GetHashCode();
                    
                    hashCode = hashCode * 59 + ReasonId.GetHashCode();
                    
                    hashCode = hashCode * 59 + ProviderId.GetHashCode();
                    if (Category != null)
                    hashCode = hashCode * 59 + Category.GetHashCode();
                    if (Priority != null)
                    hashCode = hashCode * 59 + Priority.GetHashCode();
                    if (Note != null)
                    hashCode = hashCode * 59 + Note.GetHashCode();
                    if (ProcessName != null)
                    hashCode = hashCode * 59 + ProcessName.GetHashCode();
                    if (RequestEmail != null)
                    hashCode = hashCode * 59 + RequestEmail.GetHashCode();
                    if (RequestEmailCopy != null)
                    hashCode = hashCode * 59 + RequestEmailCopy.GetHashCode();
                    
                    hashCode = hashCode * 59 + NotifyProvider.GetHashCode();
                    if (AdditionalApprovalCodes != null)
                    hashCode = hashCode * 59 + AdditionalApprovalCodes.GetHashCode();
                    if (ScheduledDate != null)
                    hashCode = hashCode * 59 + ScheduledDate.GetHashCode();
                    if (OriginalETA != null)
                    hashCode = hashCode * 59 + OriginalETA.GetHashCode();
                    
                    hashCode = hashCode * 59 + RefreshApprovalCodes.GetHashCode();
                    
                    hashCode = hashCode * 59 + RecallWorkOrderId.GetHashCode();
                    
                    hashCode = hashCode * 59 + LocationId.GetHashCode();
                    if (PurchaseOrder != null)
                    hashCode = hashCode * 59 + PurchaseOrder.GetHashCode();
                    
                    hashCode = hashCode * 59 + ApiRequest.GetHashCode();
                    if (Actor != null)
                    hashCode = hashCode * 59 + Actor.GetHashCode();
                    
                    hashCode = hashCode * 59 + LabelId.GetHashCode();
                    if (Label != null)
                    hashCode = hashCode * 59 + Label.GetHashCode();
                    
                    hashCode = hashCode * 59 + DeleteLabel.GetHashCode();
                    
                    hashCode = hashCode * 59 + CategoryId.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(SCServiceChannelServicesMessagingWorkordersReassignWORequest left, SCServiceChannelServicesMessagingWorkordersReassignWORequest right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(SCServiceChannelServicesMessagingWorkordersReassignWORequest left, SCServiceChannelServicesMessagingWorkordersReassignWORequest right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}
