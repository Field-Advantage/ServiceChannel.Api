/*
 * ServiceChannel API - v.3
 *
 * The ServiceChannel API is a RESTful and stateless API. It accepts standard HTTP verbs and supports OAuth 2.0 for authorizing requests.      Our API returns common HTTP status codes as well as JSON encapsulated data.      See [API Overview](https://developer.servicechannel.com/basics/introduction/overview/) for the intro to ServiceChannel API.<br>      <h3>Authentication and Authorization</h3>You should have a ServiceChannel account, register your application, and obtain `access_token` to integrate with our API.      See [Authentication and Authorization](https://developer.servicechannel.com/basics/general/authentication/) for more information.      To use this API playground, click **Authorize** and sign in to ServiceChannel.<br>      <h3>Environment</h3> All calls in this API Reference point to the **SB2 environment**.      See [Environments](https://developer.servicechannel.com/basics/general/environments/) for more information.<br>      <h3>API Version</h3>The current stable version of the ServiceChannel API is `v3`. In the request URL, `v3` is a version prefix that should be present.      When you omit the version prefix, calls point to the minimum supported version of the API.      We recommend you to always specify the API version to avoid possible errors.
 *
 * The version of the OpenAPI document: 3
 * 
 * Generated by: https://openapi-generator.tech
 */

using System;
using System.Linq;
using System.Text;
using System.Collections.Generic;
using System.ComponentModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using System.Text.Json;
using ServiceChannel.OpenAPIGenerated.Api.Converters;

namespace ServiceChannel.OpenAPIGenerated.Api.Models
{ 
    /// <summary>
    /// The technician details object.
    /// </summary>
    [DataContract]
    public class SCServiceChannelServicesMessagingContractorToolsTechnicianDto : IEquatable<SCServiceChannelServicesMessagingContractorToolsTechnicianDto>
    {
        /// <summary>
        /// The first name of the technician.
        /// </summary>
        /// <value>The first name of the technician.</value>
        [DataMember(Name="FirstName", EmitDefaultValue=false)]
        public string FirstName { get; set; }

        /// <summary>
        /// The login name of the technician.
        /// </summary>
        /// <value>The login name of the technician.</value>
        [DataMember(Name="LoginName", EmitDefaultValue=false)]
        public string LoginName { get; set; }

        /// <summary>
        /// The last name of the technician.
        /// </summary>
        /// <value>The last name of the technician.</value>
        [DataMember(Name="LastName", EmitDefaultValue=false)]
        public string LastName { get; set; }

        /// <summary>
        /// The ID of the technician in the Authentication service.
        /// </summary>
        /// <value>The ID of the technician in the Authentication service.</value>
        [DataMember(Name="UserId", EmitDefaultValue=true)]
        public long UserId { get; set; }

        /// <summary>
        /// The email address of the technician.
        /// </summary>
        /// <value>The email address of the technician.</value>
        [DataMember(Name="Email", EmitDefaultValue=false)]
        public string Email { get; set; }

        /// <summary>
        /// The mobile phone number of the technician.
        /// </summary>
        /// <value>The mobile phone number of the technician.</value>
        [DataMember(Name="MobileNumber", EmitDefaultValue=false)]
        public string MobileNumber { get; set; }

        /// <summary>
        /// The access level of the technician.
        /// </summary>
        /// <value>The access level of the technician.</value>
        [DataMember(Name="TechnicianAccessLevel", EmitDefaultValue=false)]
        public List<string> TechnicianAccessLevel { get; set; }

        /// <summary>
        /// The employee ID of the technician.
        /// </summary>
        /// <value>The employee ID of the technician.</value>
        [DataMember(Name="EmployeeId", EmitDefaultValue=false)]
        public string EmployeeId { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class SCServiceChannelServicesMessagingContractorToolsTechnicianDto {\n");
            sb.Append("  FirstName: ").Append(FirstName).Append("\n");
            sb.Append("  LoginName: ").Append(LoginName).Append("\n");
            sb.Append("  LastName: ").Append(LastName).Append("\n");
            sb.Append("  UserId: ").Append(UserId).Append("\n");
            sb.Append("  Email: ").Append(Email).Append("\n");
            sb.Append("  MobileNumber: ").Append(MobileNumber).Append("\n");
            sb.Append("  TechnicianAccessLevel: ").Append(TechnicianAccessLevel).Append("\n");
            sb.Append("  EmployeeId: ").Append(EmployeeId).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            var options = new JsonSerializerOptions
            {
                WriteIndented = true
            };

            return JsonSerializer.Serialize(this, options);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (obj is null) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((SCServiceChannelServicesMessagingContractorToolsTechnicianDto)obj);
        }

        /// <summary>
        /// Returns true if SCServiceChannelServicesMessagingContractorToolsTechnicianDto instances are equal
        /// </summary>
        /// <param name="other">Instance of SCServiceChannelServicesMessagingContractorToolsTechnicianDto to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(SCServiceChannelServicesMessagingContractorToolsTechnicianDto other)
        {
            if (other is null) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    FirstName == other.FirstName ||
                    FirstName != null &&
                    FirstName.Equals(other.FirstName)
                ) && 
                (
                    LoginName == other.LoginName ||
                    LoginName != null &&
                    LoginName.Equals(other.LoginName)
                ) && 
                (
                    LastName == other.LastName ||
                    LastName != null &&
                    LastName.Equals(other.LastName)
                ) && 
                (
                    UserId == other.UserId ||
                    
                    UserId.Equals(other.UserId)
                ) && 
                (
                    Email == other.Email ||
                    Email != null &&
                    Email.Equals(other.Email)
                ) && 
                (
                    MobileNumber == other.MobileNumber ||
                    MobileNumber != null &&
                    MobileNumber.Equals(other.MobileNumber)
                ) && 
                (
                    TechnicianAccessLevel == other.TechnicianAccessLevel ||
                    TechnicianAccessLevel != null &&
                    other.TechnicianAccessLevel != null &&
                    TechnicianAccessLevel.SequenceEqual(other.TechnicianAccessLevel)
                ) && 
                (
                    EmployeeId == other.EmployeeId ||
                    EmployeeId != null &&
                    EmployeeId.Equals(other.EmployeeId)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    if (FirstName != null)
                    hashCode = hashCode * 59 + FirstName.GetHashCode();
                    if (LoginName != null)
                    hashCode = hashCode * 59 + LoginName.GetHashCode();
                    if (LastName != null)
                    hashCode = hashCode * 59 + LastName.GetHashCode();
                    
                    hashCode = hashCode * 59 + UserId.GetHashCode();
                    if (Email != null)
                    hashCode = hashCode * 59 + Email.GetHashCode();
                    if (MobileNumber != null)
                    hashCode = hashCode * 59 + MobileNumber.GetHashCode();
                    if (TechnicianAccessLevel != null)
                    hashCode = hashCode * 59 + TechnicianAccessLevel.GetHashCode();
                    if (EmployeeId != null)
                    hashCode = hashCode * 59 + EmployeeId.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(SCServiceChannelServicesMessagingContractorToolsTechnicianDto left, SCServiceChannelServicesMessagingContractorToolsTechnicianDto right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(SCServiceChannelServicesMessagingContractorToolsTechnicianDto left, SCServiceChannelServicesMessagingContractorToolsTechnicianDto right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}
