/*
 * ServiceChannel API - v.3
 *
 * The ServiceChannel API is a RESTful and stateless API. It accepts standard HTTP verbs and supports OAuth 2.0 for authorizing requests.      Our API returns common HTTP status codes as well as JSON encapsulated data.      See [API Overview](https://developer.servicechannel.com/basics/introduction/overview/) for the intro to ServiceChannel API.<br>      <h3>Authentication and Authorization</h3>You should have a ServiceChannel account, register your application, and obtain `access_token` to integrate with our API.      See [Authentication and Authorization](https://developer.servicechannel.com/basics/general/authentication/) for more information.      To use this API playground, click **Authorize** and sign in to ServiceChannel.<br>      <h3>Environment</h3> All calls in this API Reference point to the **SB2 environment**.      See [Environments](https://developer.servicechannel.com/basics/general/environments/) for more information.<br>      <h3>API Version</h3>The current stable version of the ServiceChannel API is `v3`. In the request URL, `v3` is a version prefix that should be present.      When you omit the version prefix, calls point to the minimum supported version of the API.      We recommend you to always specify the API version to avoid possible errors.
 *
 * The version of the OpenAPI document: 3
 * 
 * Generated by: https://openapi-generator.tech
 */

using System;
using System.Linq;
using System.Text;
using System.Collections.Generic;
using System.ComponentModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using System.Text.Json;
using ServiceChannel.OpenAPIGenerated.Api.Converters;

namespace ServiceChannel.OpenAPIGenerated.Api.Models
{ 
    /// <summary>
    /// The request object to create an RFP.
    /// </summary>
    [DataContract]
    public class SCServiceChannelServicesMessagingRfpCreateRfpRequest : IEquatable<SCServiceChannelServicesMessagingRfpCreateRfpRequest>
    {
        /// <summary>
        /// The non-unique RFP identifier. The value is generated automatically if not provided. It cannot be modified.
        /// </summary>
        /// <value>The non-unique RFP identifier. The value is generated automatically if not provided. It cannot be modified.</value>
        [DataMember(Name="Number", EmitDefaultValue=false)]
        public string Number { get; set; }

        /// <summary>
        /// Purchase order number.
        /// </summary>
        /// <value>Purchase order number.</value>
        [DataMember(Name="PONumber", EmitDefaultValue=false)]
        public string PONumber { get; set; }

        /// <summary>
        /// Work order number.
        /// </summary>
        /// <value>Work order number.</value>
        [DataMember(Name="WONumber", EmitDefaultValue=false)]
        public string WONumber { get; set; }

        /// <summary>
        /// The unique trade identifier.
        /// </summary>
        /// <value>The unique trade identifier.</value>
        [Required]
        [DataMember(Name="TradeId", EmitDefaultValue=true)]
        public int TradeId { get; set; }

        /// <summary>
        /// RFP description.
        /// </summary>
        /// <value>RFP description.</value>
        [Required]
        [DataMember(Name="Description", EmitDefaultValue=false)]
        public string Description { get; set; }

        /// <summary>
        /// RFP status.
        /// </summary>
        /// <value>RFP status.</value>
        [DataMember(Name="Status", EmitDefaultValue=false)]
        public string Status { get; set; }

        /// <summary>
        /// The RFP creation date and time. The format is &#x60;YYYY-MM-DDThh:mm:ss.sssZ&#x60;. The default is the current date and time.
        /// </summary>
        /// <value>The RFP creation date and time. The format is &#x60;YYYY-MM-DDThh:mm:ss.sssZ&#x60;. The default is the current date and time.</value>
        [DataMember(Name="Date", EmitDefaultValue=false)]
        public DateTime Date { get; set; }

        /// <summary>
        /// Gets or Sets DateString
        /// </summary>
        [DataMember(Name="DateString", EmitDefaultValue=false)]
        public string DateString { get; set; }

        /// <summary>
        /// Due time in hours for the provider to respond to the RFP and submit a proposal. The default is 48 hours unless a different value is specified in the &#x60;UiCreationRfpDefaultTime&#x60; settings group.
        /// </summary>
        /// <value>Due time in hours for the provider to respond to the RFP and submit a proposal. The default is 48 hours unless a different value is specified in the &#x60;UiCreationRfpDefaultTime&#x60; settings group.</value>
        [DataMember(Name="DueHrs", EmitDefaultValue=true)]
        public double DueHrs { get; set; }

        /// <summary>
        /// Due date and time for the provider to respond to the RFP and submit a proposal. The format is &#x60;YYYY-MM-DDThh:mm:ss.sssZ&#x60;. If &#x60;DueHrs&#x60; is passed, the &#x60;DueDate&#x60; value is &#x60;Date&#x60; plus &#x60;DueHrs&#x60;.              The default is the current date and time plus 48 hours unless a different value is specified in the &#x60;UiCreationRfpDefaultTime&#x60; settings group.
        /// </summary>
        /// <value>Due date and time for the provider to respond to the RFP and submit a proposal. The format is &#x60;YYYY-MM-DDThh:mm:ss.sssZ&#x60;. If &#x60;DueHrs&#x60; is passed, the &#x60;DueDate&#x60; value is &#x60;Date&#x60; plus &#x60;DueHrs&#x60;.              The default is the current date and time plus 48 hours unless a different value is specified in the &#x60;UiCreationRfpDefaultTime&#x60; settings group.</value>
        [DataMember(Name="DueDate", EmitDefaultValue=false)]
        public DateTime DueDate { get; set; }

        /// <summary>
        /// Gets or Sets DueDateString
        /// </summary>
        [DataMember(Name="DueDateString", EmitDefaultValue=false)]
        public string DueDateString { get; set; }

        /// <summary>
        /// Gets or Sets Location
        /// </summary>
        [Required]
        [DataMember(Name="Location", EmitDefaultValue=false)]
        public SCServiceChannelServicesMessagingLocationLocationIdentity Location { get; set; }

        /// <summary>
        /// Gets or Sets Language
        /// </summary>
        [DataMember(Name="Language", EmitDefaultValue=false)]
        public string Language { get; set; }

        /// <summary>
        /// The unique provider identifier.
        /// </summary>
        /// <value>The unique provider identifier.</value>
        [Required]
        [DataMember(Name="ProviderId", EmitDefaultValue=true)]
        public int ProviderId { get; set; }

        /// <summary>
        /// Obsolete.
        /// </summary>
        /// <value>Obsolete.</value>
        [DataMember(Name="ResponseDate", EmitDefaultValue=false)]
        public DateTime ResponseDate { get; set; }

        /// <summary>
        /// The email address to send the proposal notification to. The default is the email address of the current user specified in the &#x60;PropTeamEmail&#x60; settings group.
        /// </summary>
        /// <value>The email address to send the proposal notification to. The default is the email address of the current user specified in the &#x60;PropTeamEmail&#x60; settings group.</value>
        [DataMember(Name="ProposalNotificationEmail", EmitDefaultValue=false)]
        public string ProposalNotificationEmail { get; set; }

        /// <summary>
        /// The email address of the provider. The default is the email address of the specified provider.
        /// </summary>
        /// <value>The email address of the provider. The default is the email address of the specified provider.</value>
        [DataMember(Name="ProviderEmail", EmitDefaultValue=false)]
        public string ProviderEmail { get; set; }

        /// <summary>
        /// Obsolete.
        /// </summary>
        /// <value>Obsolete.</value>
        [DataMember(Name="ProposalTemplateId", EmitDefaultValue=true)]
        public int ProposalTemplateId { get; set; }

        /// <summary>
        /// The unique numeric identifier of the work order.
        /// </summary>
        /// <value>The unique numeric identifier of the work order.</value>
        [DataMember(Name="WorkOrderId", EmitDefaultValue=true)]
        public int WorkOrderId { get; set; }

        /// <summary>
        /// The unique numeric identifier of the project.
        /// </summary>
        /// <value>The unique numeric identifier of the project.</value>
        [DataMember(Name="ProjectId", EmitDefaultValue=true)]
        public int ProjectId { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class SCServiceChannelServicesMessagingRfpCreateRfpRequest {\n");
            sb.Append("  Number: ").Append(Number).Append("\n");
            sb.Append("  PONumber: ").Append(PONumber).Append("\n");
            sb.Append("  WONumber: ").Append(WONumber).Append("\n");
            sb.Append("  TradeId: ").Append(TradeId).Append("\n");
            sb.Append("  Description: ").Append(Description).Append("\n");
            sb.Append("  Status: ").Append(Status).Append("\n");
            sb.Append("  Date: ").Append(Date).Append("\n");
            sb.Append("  DateString: ").Append(DateString).Append("\n");
            sb.Append("  DueHrs: ").Append(DueHrs).Append("\n");
            sb.Append("  DueDate: ").Append(DueDate).Append("\n");
            sb.Append("  DueDateString: ").Append(DueDateString).Append("\n");
            sb.Append("  Location: ").Append(Location).Append("\n");
            sb.Append("  Language: ").Append(Language).Append("\n");
            sb.Append("  ProviderId: ").Append(ProviderId).Append("\n");
            sb.Append("  ResponseDate: ").Append(ResponseDate).Append("\n");
            sb.Append("  ProposalNotificationEmail: ").Append(ProposalNotificationEmail).Append("\n");
            sb.Append("  ProviderEmail: ").Append(ProviderEmail).Append("\n");
            sb.Append("  ProposalTemplateId: ").Append(ProposalTemplateId).Append("\n");
            sb.Append("  WorkOrderId: ").Append(WorkOrderId).Append("\n");
            sb.Append("  ProjectId: ").Append(ProjectId).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            var options = new JsonSerializerOptions
            {
                WriteIndented = true
            };

            return JsonSerializer.Serialize(this, options);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (obj is null) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((SCServiceChannelServicesMessagingRfpCreateRfpRequest)obj);
        }

        /// <summary>
        /// Returns true if SCServiceChannelServicesMessagingRfpCreateRfpRequest instances are equal
        /// </summary>
        /// <param name="other">Instance of SCServiceChannelServicesMessagingRfpCreateRfpRequest to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(SCServiceChannelServicesMessagingRfpCreateRfpRequest other)
        {
            if (other is null) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    Number == other.Number ||
                    Number != null &&
                    Number.Equals(other.Number)
                ) && 
                (
                    PONumber == other.PONumber ||
                    PONumber != null &&
                    PONumber.Equals(other.PONumber)
                ) && 
                (
                    WONumber == other.WONumber ||
                    WONumber != null &&
                    WONumber.Equals(other.WONumber)
                ) && 
                (
                    TradeId == other.TradeId ||
                    
                    TradeId.Equals(other.TradeId)
                ) && 
                (
                    Description == other.Description ||
                    Description != null &&
                    Description.Equals(other.Description)
                ) && 
                (
                    Status == other.Status ||
                    Status != null &&
                    Status.Equals(other.Status)
                ) && 
                (
                    Date == other.Date ||
                    Date != null &&
                    Date.Equals(other.Date)
                ) && 
                (
                    DateString == other.DateString ||
                    DateString != null &&
                    DateString.Equals(other.DateString)
                ) && 
                (
                    DueHrs == other.DueHrs ||
                    
                    DueHrs.Equals(other.DueHrs)
                ) && 
                (
                    DueDate == other.DueDate ||
                    DueDate != null &&
                    DueDate.Equals(other.DueDate)
                ) && 
                (
                    DueDateString == other.DueDateString ||
                    DueDateString != null &&
                    DueDateString.Equals(other.DueDateString)
                ) && 
                (
                    Location == other.Location ||
                    Location != null &&
                    Location.Equals(other.Location)
                ) && 
                (
                    Language == other.Language ||
                    Language != null &&
                    Language.Equals(other.Language)
                ) && 
                (
                    ProviderId == other.ProviderId ||
                    
                    ProviderId.Equals(other.ProviderId)
                ) && 
                (
                    ResponseDate == other.ResponseDate ||
                    ResponseDate != null &&
                    ResponseDate.Equals(other.ResponseDate)
                ) && 
                (
                    ProposalNotificationEmail == other.ProposalNotificationEmail ||
                    ProposalNotificationEmail != null &&
                    ProposalNotificationEmail.Equals(other.ProposalNotificationEmail)
                ) && 
                (
                    ProviderEmail == other.ProviderEmail ||
                    ProviderEmail != null &&
                    ProviderEmail.Equals(other.ProviderEmail)
                ) && 
                (
                    ProposalTemplateId == other.ProposalTemplateId ||
                    
                    ProposalTemplateId.Equals(other.ProposalTemplateId)
                ) && 
                (
                    WorkOrderId == other.WorkOrderId ||
                    
                    WorkOrderId.Equals(other.WorkOrderId)
                ) && 
                (
                    ProjectId == other.ProjectId ||
                    
                    ProjectId.Equals(other.ProjectId)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    if (Number != null)
                    hashCode = hashCode * 59 + Number.GetHashCode();
                    if (PONumber != null)
                    hashCode = hashCode * 59 + PONumber.GetHashCode();
                    if (WONumber != null)
                    hashCode = hashCode * 59 + WONumber.GetHashCode();
                    
                    hashCode = hashCode * 59 + TradeId.GetHashCode();
                    if (Description != null)
                    hashCode = hashCode * 59 + Description.GetHashCode();
                    if (Status != null)
                    hashCode = hashCode * 59 + Status.GetHashCode();
                    if (Date != null)
                    hashCode = hashCode * 59 + Date.GetHashCode();
                    if (DateString != null)
                    hashCode = hashCode * 59 + DateString.GetHashCode();
                    
                    hashCode = hashCode * 59 + DueHrs.GetHashCode();
                    if (DueDate != null)
                    hashCode = hashCode * 59 + DueDate.GetHashCode();
                    if (DueDateString != null)
                    hashCode = hashCode * 59 + DueDateString.GetHashCode();
                    if (Location != null)
                    hashCode = hashCode * 59 + Location.GetHashCode();
                    if (Language != null)
                    hashCode = hashCode * 59 + Language.GetHashCode();
                    
                    hashCode = hashCode * 59 + ProviderId.GetHashCode();
                    if (ResponseDate != null)
                    hashCode = hashCode * 59 + ResponseDate.GetHashCode();
                    if (ProposalNotificationEmail != null)
                    hashCode = hashCode * 59 + ProposalNotificationEmail.GetHashCode();
                    if (ProviderEmail != null)
                    hashCode = hashCode * 59 + ProviderEmail.GetHashCode();
                    
                    hashCode = hashCode * 59 + ProposalTemplateId.GetHashCode();
                    
                    hashCode = hashCode * 59 + WorkOrderId.GetHashCode();
                    
                    hashCode = hashCode * 59 + ProjectId.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(SCServiceChannelServicesMessagingRfpCreateRfpRequest left, SCServiceChannelServicesMessagingRfpCreateRfpRequest right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(SCServiceChannelServicesMessagingRfpCreateRfpRequest left, SCServiceChannelServicesMessagingRfpCreateRfpRequest right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}
