/*
 * ServiceChannel API - v.3
 *
 * The ServiceChannel API is a RESTful and stateless API. It accepts standard HTTP verbs and supports OAuth 2.0 for authorizing requests.      Our API returns common HTTP status codes as well as JSON encapsulated data.      See [API Overview](https://developer.servicechannel.com/basics/introduction/overview/) for the intro to ServiceChannel API.<br>      <h3>Authentication and Authorization</h3>You should have a ServiceChannel account, register your application, and obtain `access_token` to integrate with our API.      See [Authentication and Authorization](https://developer.servicechannel.com/basics/general/authentication/) for more information.      To use this API playground, click **Authorize** and sign in to ServiceChannel.<br>      <h3>Environment</h3> All calls in this API Reference point to the **SB2 environment**.      See [Environments](https://developer.servicechannel.com/basics/general/environments/) for more information.<br>      <h3>API Version</h3>The current stable version of the ServiceChannel API is `v3`. In the request URL, `v3` is a version prefix that should be present.      When you omit the version prefix, calls point to the minimum supported version of the API.      We recommend you to always specify the API version to avoid possible errors.
 *
 * The version of the OpenAPI document: 3
 * 
 * Generated by: https://openapi-generator.tech
 */

using System;
using System.Linq;
using System.Text;
using System.Collections.Generic;
using System.ComponentModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using System.Text.Json;
using ServiceChannel.OpenAPIGenerated.Api.Converters;

namespace ServiceChannel.OpenAPIGenerated.Api.Models
{ 
    /// <summary>
    /// Problem solve model
    /// </summary>
    [DataContract]
    public class SCServiceChannelServicesMessagingWorkordersDashboardRequestsSubmitSolvedIssueModel : IEquatable<SCServiceChannelServicesMessagingWorkordersDashboardRequestsSubmitSolvedIssueModel>
    {

        /// <summary>
        /// Gets or Sets Type
        /// </summary>
        
        public enum TypeEnum
        {
            
            /// <summary>
            /// Enum UnknownEnum for Unknown
            /// </summary>
            [EnumMember(Value = "Unknown")]
            UnknownEnum = 1,
            
            /// <summary>
            /// Enum DuplicateWorkOrderEnum for DuplicateWorkOrder
            /// </summary>
            [EnumMember(Value = "DuplicateWorkOrder")]
            DuplicateWorkOrderEnum = 2,
            
            /// <summary>
            /// Enum DecisionTreeEnum for DecisionTree
            /// </summary>
            [EnumMember(Value = "DecisionTree")]
            DecisionTreeEnum = 3,
            
            /// <summary>
            /// Enum DecisionTreeStopEnum for DecisionTreeStop
            /// </summary>
            [EnumMember(Value = "DecisionTreeStop")]
            DecisionTreeStopEnum = 4,
            
            /// <summary>
            /// Enum IssueListMessageEnum for IssueListMessage
            /// </summary>
            [EnumMember(Value = "IssueListMessage")]
            IssueListMessageEnum = 5
        }

        /// <summary>
        /// Gets or Sets Type
        /// </summary>
        [DataMember(Name="Type", EmitDefaultValue=true)]
        public TypeEnum Type { get; set; }

        /// <summary>
        /// Gets or Sets LocationId
        /// </summary>
        [Required]
        [DataMember(Name="LocationId", EmitDefaultValue=true)]
        public int LocationId { get; set; }

        /// <summary>
        /// Gets or Sets Source
        /// </summary>
        [Required]
        [DataMember(Name="Source", EmitDefaultValue=false)]
        public string Source { get; set; }

        /// <summary>
        /// Gets or Sets Category
        /// </summary>
        [DataMember(Name="Category", EmitDefaultValue=false)]
        public string Category { get; set; }

        /// <summary>
        /// Gets or Sets Trade
        /// </summary>
        [DataMember(Name="Trade", EmitDefaultValue=false)]
        public string Trade { get; set; }

        /// <summary>
        /// Gets or Sets Priority
        /// </summary>
        [DataMember(Name="Priority", EmitDefaultValue=false)]
        public string Priority { get; set; }

        /// <summary>
        /// Gets or Sets ProblemCode
        /// </summary>
        [DataMember(Name="ProblemCode", EmitDefaultValue=false)]
        public string ProblemCode { get; set; }

        /// <summary>
        /// Gets or Sets ProblemDescription
        /// </summary>
        [DataMember(Name="ProblemDescription", EmitDefaultValue=false)]
        public string ProblemDescription { get; set; }

        /// <summary>
        /// Gets or Sets WorkOrderId
        /// </summary>
        [DataMember(Name="WorkOrderId", EmitDefaultValue=true)]
        public int WorkOrderId { get; set; }

        /// <summary>
        /// Gets or Sets NTE
        /// </summary>
        [DataMember(Name="NTE", EmitDefaultValue=true)]
        public double NTE { get; set; }

        /// <summary>
        /// Gets or Sets CurrencyId
        /// </summary>
        [DataMember(Name="CurrencyId", EmitDefaultValue=true)]
        public int CurrencyId { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class SCServiceChannelServicesMessagingWorkordersDashboardRequestsSubmitSolvedIssueModel {\n");
            sb.Append("  Type: ").Append(Type).Append("\n");
            sb.Append("  LocationId: ").Append(LocationId).Append("\n");
            sb.Append("  Source: ").Append(Source).Append("\n");
            sb.Append("  Category: ").Append(Category).Append("\n");
            sb.Append("  Trade: ").Append(Trade).Append("\n");
            sb.Append("  Priority: ").Append(Priority).Append("\n");
            sb.Append("  ProblemCode: ").Append(ProblemCode).Append("\n");
            sb.Append("  ProblemDescription: ").Append(ProblemDescription).Append("\n");
            sb.Append("  WorkOrderId: ").Append(WorkOrderId).Append("\n");
            sb.Append("  NTE: ").Append(NTE).Append("\n");
            sb.Append("  CurrencyId: ").Append(CurrencyId).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            var options = new JsonSerializerOptions
            {
                WriteIndented = true
            };

            return JsonSerializer.Serialize(this, options);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (obj is null) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((SCServiceChannelServicesMessagingWorkordersDashboardRequestsSubmitSolvedIssueModel)obj);
        }

        /// <summary>
        /// Returns true if SCServiceChannelServicesMessagingWorkordersDashboardRequestsSubmitSolvedIssueModel instances are equal
        /// </summary>
        /// <param name="other">Instance of SCServiceChannelServicesMessagingWorkordersDashboardRequestsSubmitSolvedIssueModel to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(SCServiceChannelServicesMessagingWorkordersDashboardRequestsSubmitSolvedIssueModel other)
        {
            if (other is null) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    Type == other.Type ||
                    
                    Type.Equals(other.Type)
                ) && 
                (
                    LocationId == other.LocationId ||
                    
                    LocationId.Equals(other.LocationId)
                ) && 
                (
                    Source == other.Source ||
                    Source != null &&
                    Source.Equals(other.Source)
                ) && 
                (
                    Category == other.Category ||
                    Category != null &&
                    Category.Equals(other.Category)
                ) && 
                (
                    Trade == other.Trade ||
                    Trade != null &&
                    Trade.Equals(other.Trade)
                ) && 
                (
                    Priority == other.Priority ||
                    Priority != null &&
                    Priority.Equals(other.Priority)
                ) && 
                (
                    ProblemCode == other.ProblemCode ||
                    ProblemCode != null &&
                    ProblemCode.Equals(other.ProblemCode)
                ) && 
                (
                    ProblemDescription == other.ProblemDescription ||
                    ProblemDescription != null &&
                    ProblemDescription.Equals(other.ProblemDescription)
                ) && 
                (
                    WorkOrderId == other.WorkOrderId ||
                    
                    WorkOrderId.Equals(other.WorkOrderId)
                ) && 
                (
                    NTE == other.NTE ||
                    
                    NTE.Equals(other.NTE)
                ) && 
                (
                    CurrencyId == other.CurrencyId ||
                    
                    CurrencyId.Equals(other.CurrencyId)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    
                    hashCode = hashCode * 59 + Type.GetHashCode();
                    
                    hashCode = hashCode * 59 + LocationId.GetHashCode();
                    if (Source != null)
                    hashCode = hashCode * 59 + Source.GetHashCode();
                    if (Category != null)
                    hashCode = hashCode * 59 + Category.GetHashCode();
                    if (Trade != null)
                    hashCode = hashCode * 59 + Trade.GetHashCode();
                    if (Priority != null)
                    hashCode = hashCode * 59 + Priority.GetHashCode();
                    if (ProblemCode != null)
                    hashCode = hashCode * 59 + ProblemCode.GetHashCode();
                    if (ProblemDescription != null)
                    hashCode = hashCode * 59 + ProblemDescription.GetHashCode();
                    
                    hashCode = hashCode * 59 + WorkOrderId.GetHashCode();
                    
                    hashCode = hashCode * 59 + NTE.GetHashCode();
                    
                    hashCode = hashCode * 59 + CurrencyId.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(SCServiceChannelServicesMessagingWorkordersDashboardRequestsSubmitSolvedIssueModel left, SCServiceChannelServicesMessagingWorkordersDashboardRequestsSubmitSolvedIssueModel right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(SCServiceChannelServicesMessagingWorkordersDashboardRequestsSubmitSolvedIssueModel left, SCServiceChannelServicesMessagingWorkordersDashboardRequestsSubmitSolvedIssueModel right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}
