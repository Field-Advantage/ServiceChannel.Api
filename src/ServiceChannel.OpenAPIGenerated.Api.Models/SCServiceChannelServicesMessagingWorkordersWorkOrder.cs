/*
 * ServiceChannel API - v.3
 *
 * The ServiceChannel API is a RESTful and stateless API. It accepts standard HTTP verbs and supports OAuth 2.0 for authorizing requests.      Our API returns common HTTP status codes as well as JSON encapsulated data.      See [API Overview](https://developer.servicechannel.com/basics/introduction/overview/) for the intro to ServiceChannel API.<br>      <h3>Authentication and Authorization</h3>You should have a ServiceChannel account, register your application, and obtain `access_token` to integrate with our API.      See [Authentication and Authorization](https://developer.servicechannel.com/basics/general/authentication/) for more information.      To use this API playground, click **Authorize** and sign in to ServiceChannel.<br>      <h3>Environment</h3> All calls in this API Reference point to the **SB2 environment**.      See [Environments](https://developer.servicechannel.com/basics/general/environments/) for more information.<br>      <h3>API Version</h3>The current stable version of the ServiceChannel API is `v3`. In the request URL, `v3` is a version prefix that should be present.      When you omit the version prefix, calls point to the minimum supported version of the API.      We recommend you to always specify the API version to avoid possible errors.
 *
 * The version of the OpenAPI document: 3
 * 
 * Generated by: https://openapi-generator.tech
 */

using System;
using System.Linq;
using System.Text;
using System.Collections.Generic;
using System.ComponentModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using System.Text.Json;
using ServiceChannel.OpenAPIGenerated.Api.Converters;

namespace ServiceChannel.OpenAPIGenerated.Api.Models
{ 
    /// <summary>
    /// Workorder object for Messages exchenge.
    /// </summary>
    [DataContract]
    public class SCServiceChannelServicesMessagingWorkordersWorkOrder : IEquatable<SCServiceChannelServicesMessagingWorkordersWorkOrder>
    {
        /// <summary>
        /// Work Order identifier.
        /// </summary>
        /// <value>Work Order identifier.</value>
        [DataMember(Name="Id", EmitDefaultValue=true)]
        public int Id { get; set; }

        /// <summary>
        /// Work Order Number
        /// </summary>
        /// <value>Work Order Number</value>
        [DataMember(Name="Number", EmitDefaultValue=false)]
        public string Number { get; set; }

        /// <summary>
        /// Purchase number of work order
        /// </summary>
        /// <value>Purchase number of work order</value>
        [DataMember(Name="PurchaseNumber", EmitDefaultValue=false)]
        public string PurchaseNumber { get; set; }

        /// <summary>
        /// Gets or Sets Subscriber
        /// </summary>
        [DataMember(Name="Subscriber", EmitDefaultValue=false)]
        public SCServiceChannelServicesMessagingSubscribersSubscriber Subscriber { get; set; }

        /// <summary>
        /// Gets or Sets Provider
        /// </summary>
        [DataMember(Name="Provider", EmitDefaultValue=false)]
        public SCServiceChannelServicesMessagingProvidersProvider Provider { get; set; }

        /// <summary>
        /// Gets or Sets Location
        /// </summary>
        [DataMember(Name="Location", EmitDefaultValue=false)]
        public SCServiceChannelServicesMessagingLocationLocation Location { get; set; }

        /// <summary>
        /// LocationId for use in ODATA calls without expanding Location property (ref. PLAT-55878)
        /// </summary>
        /// <value>LocationId for use in ODATA calls without expanding Location property (ref. PLAT-55878)</value>
        [DataMember(Name="LocationId", EmitDefaultValue=true)]
        public int LocationId { get; set; }

        /// <summary>
        /// Gets or Sets Status
        /// </summary>
        [DataMember(Name="Status", EmitDefaultValue=false)]
        public SCServiceChannelServicesMessagingWorkordersWorkorderStatusDescriptor Status { get; set; }

        /// <summary>
        /// Gets or Sets IssueTicketInfo
        /// </summary>
        [DataMember(Name="IssueTicketInfo", EmitDefaultValue=false)]
        public SCServiceChannelServicesMessagingIssueListsIssueTicketInformation IssueTicketInfo { get; set; }

        /// <summary>
        /// Caller
        /// </summary>
        /// <value>Caller</value>
        [DataMember(Name="Caller", EmitDefaultValue=false)]
        public string Caller { get; set; }

        /// <summary>
        /// Gets or Sets CreatedBy
        /// </summary>
        [DataMember(Name="CreatedBy", EmitDefaultValue=false)]
        public string CreatedBy { get; set; }

        /// <summary>
        /// Gets or Sets CallDate
        /// </summary>
        [DataMember(Name="CallDate", EmitDefaultValue=false)]
        public DateTime CallDate { get; set; }

        /// <summary>
        /// Gets or Sets CallDateDTO
        /// </summary>
        [DataMember(Name="CallDate_DTO", EmitDefaultValue=false)]
        public DateTime CallDateDTO { get; set; }

        /// <summary>
        /// Gets or Sets ReassignDate
        /// </summary>
        [DataMember(Name="ReassignDate", EmitDefaultValue=false)]
        public DateTime ReassignDate { get; set; }

        /// <summary>
        /// Gets or Sets ReassignDateDTO
        /// </summary>
        [DataMember(Name="ReassignDate_DTO", EmitDefaultValue=false)]
        public DateTime ReassignDateDTO { get; set; }

        /// <summary>
        /// Gets or Sets LocationOpenDate
        /// </summary>
        [DataMember(Name="LocationOpenDate", EmitDefaultValue=false)]
        public string LocationOpenDate { get; set; }

        /// <summary>
        /// Gets or Sets LocationRemodelDate
        /// </summary>
        [DataMember(Name="LocationRemodelDate", EmitDefaultValue=false)]
        public string LocationRemodelDate { get; set; }

        /// <summary>
        /// Gets or Sets EstimatedCompletionDate
        /// </summary>
        [DataMember(Name="EstimatedCompletionDate", EmitDefaultValue=false)]
        public DateTime EstimatedCompletionDate { get; set; }

        /// <summary>
        /// Gets or Sets Priority
        /// </summary>
        [DataMember(Name="Priority", EmitDefaultValue=false)]
        public string Priority { get; set; }

        /// <summary>
        /// Gets or Sets Trade
        /// </summary>
        [DataMember(Name="Trade", EmitDefaultValue=false)]
        public string Trade { get; set; }

        /// <summary>
        /// Gets or Sets TradeId
        /// </summary>
        [DataMember(Name="TradeId", EmitDefaultValue=true)]
        public int TradeId { get; set; }

        /// <summary>
        /// Gets or Sets ProviderRank
        /// </summary>
        [DataMember(Name="ProviderRank", EmitDefaultValue=true)]
        public int ProviderRank { get; set; }

        /// <summary>
        /// Gets or Sets ApprovalCode
        /// </summary>
        [DataMember(Name="ApprovalCode", EmitDefaultValue=false)]
        public string ApprovalCode { get; set; }

        /// <summary>
        /// Gets or Sets ScheduledDate
        /// </summary>
        [DataMember(Name="ScheduledDate", EmitDefaultValue=false)]
        public DateTime ScheduledDate { get; set; }

        /// <summary>
        /// Gets or Sets ScheduledDateDTO
        /// </summary>
        [DataMember(Name="ScheduledDate_DTO", EmitDefaultValue=false)]
        public DateTime ScheduledDateDTO { get; set; }

        /// <summary>
        /// Gets or Sets CompletedDate
        /// </summary>
        [DataMember(Name="CompletedDate", EmitDefaultValue=false)]
        public DateTime CompletedDate { get; set; }

        /// <summary>
        /// Gets or Sets CompletedDateDTO
        /// </summary>
        [DataMember(Name="CompletedDate_DTO", EmitDefaultValue=false)]
        public DateTime CompletedDateDTO { get; set; }

        /// <summary>
        /// Gets or sets ExpirationDate.
        /// </summary>
        /// <value>Gets or sets ExpirationDate.</value>
        [DataMember(Name="ExpirationDate", EmitDefaultValue=false)]
        public DateTime ExpirationDate { get; set; }

        /// <summary>
        /// Gets or Sets ExpirationDateDTO
        /// </summary>
        [DataMember(Name="ExpirationDate_DTO", EmitDefaultValue=false)]
        public DateTime ExpirationDateDTO { get; set; }

        /// <summary>
        /// Gets or Sets OriginalEta
        /// </summary>
        [DataMember(Name="OriginalEta", EmitDefaultValue=false)]
        public DateTime OriginalEta { get; set; }

        /// <summary>
        /// Gets or Sets OriginalEtaDTO
        /// </summary>
        [DataMember(Name="OriginalEta_DTO", EmitDefaultValue=false)]
        public DateTime OriginalEtaDTO { get; set; }

        /// <summary>
        /// Updated Date
        /// </summary>
        /// <value>Updated Date</value>
        [DataMember(Name="UpdatedDate", EmitDefaultValue=false)]
        public DateTime UpdatedDate { get; set; }

        /// <summary>
        /// Gets or Sets UpdatedDateDTO
        /// </summary>
        [DataMember(Name="UpdatedDate_DTO", EmitDefaultValue=false)]
        public DateTime UpdatedDateDTO { get; set; }

        /// <summary>
        /// s              Created Date
        /// </summary>
        /// <value>s              Created Date</value>
        [DataMember(Name="CreatedDate", EmitDefaultValue=false)]
        public DateTime CreatedDate { get; set; }

        /// <summary>
        /// Gets or Sets CreatedDateDTO
        /// </summary>
        [DataMember(Name="CreatedDate_DTO", EmitDefaultValue=false)]
        public DateTime CreatedDateDTO { get; set; }

        /// <summary>
        /// Gets or Sets Description
        /// </summary>
        [DataMember(Name="Description", EmitDefaultValue=false)]
        public string Description { get; set; }

        /// <summary>
        /// Gets or Sets CategoryId
        /// </summary>
        [DataMember(Name="CategoryId", EmitDefaultValue=true)]
        public int CategoryId { get; set; }

        /// <summary>
        /// Gets or Sets Category
        /// </summary>
        [DataMember(Name="Category", EmitDefaultValue=false)]
        public string Category { get; set; }

        /// <summary>
        /// Gets or Sets Nte
        /// </summary>
        [DataMember(Name="Nte", EmitDefaultValue=true)]
        public double Nte { get; set; }

        /// <summary>
        /// Tax
        /// </summary>
        /// <value>Tax</value>
        [DataMember(Name="Tax", EmitDefaultValue=true)]
        public double Tax { get; set; }

        /// <summary>
        /// Tax2
        /// </summary>
        /// <value>Tax2</value>
        [DataMember(Name="Tax2", EmitDefaultValue=true)]
        public double Tax2 { get; set; }

        /// <summary>
        /// Tax2Type
        /// </summary>
        /// <value>Tax2Type</value>
        [DataMember(Name="Tax2Type", EmitDefaultValue=false)]
        public string Tax2Type { get; set; }

        /// <summary>
        /// Price (subtotal)
        /// </summary>
        /// <value>Price (subtotal)</value>
        [DataMember(Name="Price", EmitDefaultValue=true)]
        public double Price { get; set; }

        /// <summary>
        /// Gets or Sets Currency
        /// </summary>
        [DataMember(Name="Currency", EmitDefaultValue=false)]
        public SCServiceChannelServicesMessagingCurrenciesCurrency Currency { get; set; }

        /// <summary>
        /// Gets or Sets ProblemCode
        /// </summary>
        [DataMember(Name="ProblemCode", EmitDefaultValue=false)]
        public string ProblemCode { get; set; }

        /// <summary>
        /// Gets or Sets Invoice
        /// </summary>
        [DataMember(Name="Invoice", EmitDefaultValue=false)]
        public SCServiceChannelServicesMessagingInvoicesInvoice Invoice { get; set; }

        /// <summary>
        /// Gets or Sets Resolution
        /// </summary>
        [DataMember(Name="Resolution", EmitDefaultValue=false)]
        public string Resolution { get; set; }

        /// <summary>
        /// Gets or Sets Asset
        /// </summary>
        [DataMember(Name="Asset", EmitDefaultValue=false)]
        public SCServiceChannelServicesMessagingAssetsAssetResponse Asset { get; set; }

        /// <summary>
        /// Gets or Sets Assets
        /// </summary>
        [DataMember(Name="Assets", EmitDefaultValue=false)]
        public List<SCServiceChannelServicesMessagingAssetsAssetResponse> Assets { get; set; }

        /// <summary>
        /// Gets or Sets AssetCount
        /// </summary>
        [DataMember(Name="AssetCount", EmitDefaultValue=true)]
        public int AssetCount { get; set; }

        /// <summary>
        /// Gets or Sets Attachments
        /// </summary>
        [DataMember(Name="Attachments", EmitDefaultValue=false)]
        public SCServiceChannelServicesMessagingAttachmentsAttachmentsDescriptor Attachments { get; set; }

        /// <summary>
        /// Gets or Sets Notes
        /// </summary>
        [DataMember(Name="Notes", EmitDefaultValue=false)]
        public SCServiceChannelServicesMessagingNotesNotesDescriptor Notes { get; set; }

        /// <summary>
        /// Gets or sets PostedId.
        /// </summary>
        /// <value>Gets or sets PostedId.</value>
        [DataMember(Name="PostedId", EmitDefaultValue=true)]
        public int PostedId { get; set; }

        /// <summary>
        /// Gets or Sets LinkedWorkOrders
        /// </summary>
        [DataMember(Name="LinkedWorkOrders", EmitDefaultValue=false)]
        public List<SCServiceChannelServicesMessagingIdentityObject> LinkedWorkOrders { get; set; }

        /// <summary>
        /// Gets or Sets LinkedInWorkOrders
        /// </summary>
        [DataMember(Name="LinkedInWorkOrders", EmitDefaultValue=false)]
        public List<SCServiceChannelServicesMessagingIdentityObject> LinkedInWorkOrders { get; set; }

        /// <summary>
        /// Gets or sets a value indicating whether IsDenied.
        /// </summary>
        /// <value>Gets or sets a value indicating whether IsDenied.</value>
        [DataMember(Name="IsCheckInDenied", EmitDefaultValue=true)]
        public bool IsCheckInDenied { get; set; } = false;

        /// <summary>
        /// Gets or sets Reason.
        /// </summary>
        /// <value>Gets or sets Reason.</value>
        [DataMember(Name="CheckInDeniedReason", EmitDefaultValue=false)]
        public string CheckInDeniedReason { get; set; }

        /// <summary>
        /// Recall WorkOrder Id
        /// </summary>
        /// <value>Recall WorkOrder Id</value>
        [DataMember(Name="RecallWorkOrder", EmitDefaultValue=true)]
        public int RecallWorkOrder { get; set; }

        /// <summary>
        /// Gets or sets IsInvoiced.
        /// </summary>
        /// <value>Gets or sets IsInvoiced.</value>
        [DataMember(Name="IsInvoiced", EmitDefaultValue=true)]
        public bool IsInvoiced { get; set; } = false;

        /// <summary>
        /// Gets or sets IsExpired.
        /// </summary>
        /// <value>Gets or sets IsExpired.</value>
        [DataMember(Name="IsExpired", EmitDefaultValue=true)]
        public bool IsExpired { get; set; } = false;

        /// <summary>
        /// Gets or sets value that allowed clients to manage their vendors to participate in the mobile App process.
        /// </summary>
        /// <value>Gets or sets value that allowed clients to manage their vendors to participate in the mobile App process.</value>
        [DataMember(Name="IsEnabledForMobile", EmitDefaultValue=true)]
        public bool IsEnabledForMobile { get; set; } = false;

        /// <summary>
        /// Gets or Sets HasWorkActivity
        /// </summary>
        [DataMember(Name="HasWorkActivity", EmitDefaultValue=true)]
        public bool HasWorkActivity { get; set; } = false;

        /// <summary>
        /// Gets or Sets Source
        /// </summary>
        [DataMember(Name="Source", EmitDefaultValue=false)]
        public string Source { get; set; }

        /// <summary>
        /// Gets or Sets ClosingAuthorizationNumber
        /// </summary>
        [DataMember(Name="ClosingAuthorizationNumber", EmitDefaultValue=true)]
        public int ClosingAuthorizationNumber { get; set; }

        /// <summary>
        /// Gets or Sets CallerId
        /// </summary>
        [DataMember(Name="CallerId", EmitDefaultValue=true)]
        public int CallerId { get; set; }

        /// <summary>
        /// Gets or Sets AutoComplete
        /// </summary>
        [DataMember(Name="AutoComplete", EmitDefaultValue=true)]
        public bool AutoComplete { get; set; } = false;

        /// <summary>
        /// Gets or Sets Labels
        /// </summary>
        [DataMember(Name="Labels", EmitDefaultValue=false)]
        public List<SCServiceChannelApiModelWorkordersWorkOrderLabel> Labels { get; set; }

        /// <summary>
        /// Gets or Sets AutoInvoice
        /// </summary>
        [DataMember(Name="AutoInvoice", EmitDefaultValue=true)]
        public bool AutoInvoice { get; set; } = false;

        /// <summary>
        /// Gets or Sets Assignee
        /// </summary>
        [DataMember(Name="Assignee", EmitDefaultValue=false)]
        public SCServiceChannelServicesMessagingWorkordersAssigneeUser Assignee { get; set; }

        /// <summary>
        /// Gets or Sets ProjectId
        /// </summary>
        [DataMember(Name="ProjectId", EmitDefaultValue=true)]
        public int ProjectId { get; set; }

        /// <summary>
        /// Gets or Sets FrequencyId
        /// </summary>
        [DataMember(Name="FrequencyId", EmitDefaultValue=true)]
        public int FrequencyId { get; set; }

        /// <summary>
        /// Gets or Sets ServiceId
        /// </summary>
        [DataMember(Name="ServiceId", EmitDefaultValue=true)]
        public int ServiceId { get; set; }

        /// <summary>
        /// Gets or Sets WeatherEvent
        /// </summary>
        [DataMember(Name="WeatherEvent", EmitDefaultValue=false)]
        public SCServiceChannelServicesMessagingWorkordersWeatherEvent WeatherEvent { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class SCServiceChannelServicesMessagingWorkordersWorkOrder {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  Number: ").Append(Number).Append("\n");
            sb.Append("  PurchaseNumber: ").Append(PurchaseNumber).Append("\n");
            sb.Append("  Subscriber: ").Append(Subscriber).Append("\n");
            sb.Append("  Provider: ").Append(Provider).Append("\n");
            sb.Append("  Location: ").Append(Location).Append("\n");
            sb.Append("  LocationId: ").Append(LocationId).Append("\n");
            sb.Append("  Status: ").Append(Status).Append("\n");
            sb.Append("  IssueTicketInfo: ").Append(IssueTicketInfo).Append("\n");
            sb.Append("  Caller: ").Append(Caller).Append("\n");
            sb.Append("  CreatedBy: ").Append(CreatedBy).Append("\n");
            sb.Append("  CallDate: ").Append(CallDate).Append("\n");
            sb.Append("  CallDateDTO: ").Append(CallDateDTO).Append("\n");
            sb.Append("  ReassignDate: ").Append(ReassignDate).Append("\n");
            sb.Append("  ReassignDateDTO: ").Append(ReassignDateDTO).Append("\n");
            sb.Append("  LocationOpenDate: ").Append(LocationOpenDate).Append("\n");
            sb.Append("  LocationRemodelDate: ").Append(LocationRemodelDate).Append("\n");
            sb.Append("  EstimatedCompletionDate: ").Append(EstimatedCompletionDate).Append("\n");
            sb.Append("  Priority: ").Append(Priority).Append("\n");
            sb.Append("  Trade: ").Append(Trade).Append("\n");
            sb.Append("  TradeId: ").Append(TradeId).Append("\n");
            sb.Append("  ProviderRank: ").Append(ProviderRank).Append("\n");
            sb.Append("  ApprovalCode: ").Append(ApprovalCode).Append("\n");
            sb.Append("  ScheduledDate: ").Append(ScheduledDate).Append("\n");
            sb.Append("  ScheduledDateDTO: ").Append(ScheduledDateDTO).Append("\n");
            sb.Append("  CompletedDate: ").Append(CompletedDate).Append("\n");
            sb.Append("  CompletedDateDTO: ").Append(CompletedDateDTO).Append("\n");
            sb.Append("  ExpirationDate: ").Append(ExpirationDate).Append("\n");
            sb.Append("  ExpirationDateDTO: ").Append(ExpirationDateDTO).Append("\n");
            sb.Append("  OriginalEta: ").Append(OriginalEta).Append("\n");
            sb.Append("  OriginalEtaDTO: ").Append(OriginalEtaDTO).Append("\n");
            sb.Append("  UpdatedDate: ").Append(UpdatedDate).Append("\n");
            sb.Append("  UpdatedDateDTO: ").Append(UpdatedDateDTO).Append("\n");
            sb.Append("  CreatedDate: ").Append(CreatedDate).Append("\n");
            sb.Append("  CreatedDateDTO: ").Append(CreatedDateDTO).Append("\n");
            sb.Append("  Description: ").Append(Description).Append("\n");
            sb.Append("  CategoryId: ").Append(CategoryId).Append("\n");
            sb.Append("  Category: ").Append(Category).Append("\n");
            sb.Append("  Nte: ").Append(Nte).Append("\n");
            sb.Append("  Tax: ").Append(Tax).Append("\n");
            sb.Append("  Tax2: ").Append(Tax2).Append("\n");
            sb.Append("  Tax2Type: ").Append(Tax2Type).Append("\n");
            sb.Append("  Price: ").Append(Price).Append("\n");
            sb.Append("  Currency: ").Append(Currency).Append("\n");
            sb.Append("  ProblemCode: ").Append(ProblemCode).Append("\n");
            sb.Append("  Invoice: ").Append(Invoice).Append("\n");
            sb.Append("  Resolution: ").Append(Resolution).Append("\n");
            sb.Append("  Asset: ").Append(Asset).Append("\n");
            sb.Append("  Assets: ").Append(Assets).Append("\n");
            sb.Append("  AssetCount: ").Append(AssetCount).Append("\n");
            sb.Append("  Attachments: ").Append(Attachments).Append("\n");
            sb.Append("  Notes: ").Append(Notes).Append("\n");
            sb.Append("  PostedId: ").Append(PostedId).Append("\n");
            sb.Append("  LinkedWorkOrders: ").Append(LinkedWorkOrders).Append("\n");
            sb.Append("  LinkedInWorkOrders: ").Append(LinkedInWorkOrders).Append("\n");
            sb.Append("  IsCheckInDenied: ").Append(IsCheckInDenied).Append("\n");
            sb.Append("  CheckInDeniedReason: ").Append(CheckInDeniedReason).Append("\n");
            sb.Append("  RecallWorkOrder: ").Append(RecallWorkOrder).Append("\n");
            sb.Append("  IsInvoiced: ").Append(IsInvoiced).Append("\n");
            sb.Append("  IsExpired: ").Append(IsExpired).Append("\n");
            sb.Append("  IsEnabledForMobile: ").Append(IsEnabledForMobile).Append("\n");
            sb.Append("  HasWorkActivity: ").Append(HasWorkActivity).Append("\n");
            sb.Append("  Source: ").Append(Source).Append("\n");
            sb.Append("  ClosingAuthorizationNumber: ").Append(ClosingAuthorizationNumber).Append("\n");
            sb.Append("  CallerId: ").Append(CallerId).Append("\n");
            sb.Append("  AutoComplete: ").Append(AutoComplete).Append("\n");
            sb.Append("  Labels: ").Append(Labels).Append("\n");
            sb.Append("  AutoInvoice: ").Append(AutoInvoice).Append("\n");
            sb.Append("  Assignee: ").Append(Assignee).Append("\n");
            sb.Append("  ProjectId: ").Append(ProjectId).Append("\n");
            sb.Append("  FrequencyId: ").Append(FrequencyId).Append("\n");
            sb.Append("  ServiceId: ").Append(ServiceId).Append("\n");
            sb.Append("  WeatherEvent: ").Append(WeatherEvent).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            var options = new JsonSerializerOptions
            {
                WriteIndented = true
            };

            return JsonSerializer.Serialize(this, options);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (obj is null) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((SCServiceChannelServicesMessagingWorkordersWorkOrder)obj);
        }

        /// <summary>
        /// Returns true if SCServiceChannelServicesMessagingWorkordersWorkOrder instances are equal
        /// </summary>
        /// <param name="other">Instance of SCServiceChannelServicesMessagingWorkordersWorkOrder to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(SCServiceChannelServicesMessagingWorkordersWorkOrder other)
        {
            if (other is null) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    Id == other.Id ||
                    
                    Id.Equals(other.Id)
                ) && 
                (
                    Number == other.Number ||
                    Number != null &&
                    Number.Equals(other.Number)
                ) && 
                (
                    PurchaseNumber == other.PurchaseNumber ||
                    PurchaseNumber != null &&
                    PurchaseNumber.Equals(other.PurchaseNumber)
                ) && 
                (
                    Subscriber == other.Subscriber ||
                    Subscriber != null &&
                    Subscriber.Equals(other.Subscriber)
                ) && 
                (
                    Provider == other.Provider ||
                    Provider != null &&
                    Provider.Equals(other.Provider)
                ) && 
                (
                    Location == other.Location ||
                    Location != null &&
                    Location.Equals(other.Location)
                ) && 
                (
                    LocationId == other.LocationId ||
                    
                    LocationId.Equals(other.LocationId)
                ) && 
                (
                    Status == other.Status ||
                    Status != null &&
                    Status.Equals(other.Status)
                ) && 
                (
                    IssueTicketInfo == other.IssueTicketInfo ||
                    IssueTicketInfo != null &&
                    IssueTicketInfo.Equals(other.IssueTicketInfo)
                ) && 
                (
                    Caller == other.Caller ||
                    Caller != null &&
                    Caller.Equals(other.Caller)
                ) && 
                (
                    CreatedBy == other.CreatedBy ||
                    CreatedBy != null &&
                    CreatedBy.Equals(other.CreatedBy)
                ) && 
                (
                    CallDate == other.CallDate ||
                    CallDate != null &&
                    CallDate.Equals(other.CallDate)
                ) && 
                (
                    CallDateDTO == other.CallDateDTO ||
                    CallDateDTO != null &&
                    CallDateDTO.Equals(other.CallDateDTO)
                ) && 
                (
                    ReassignDate == other.ReassignDate ||
                    ReassignDate != null &&
                    ReassignDate.Equals(other.ReassignDate)
                ) && 
                (
                    ReassignDateDTO == other.ReassignDateDTO ||
                    ReassignDateDTO != null &&
                    ReassignDateDTO.Equals(other.ReassignDateDTO)
                ) && 
                (
                    LocationOpenDate == other.LocationOpenDate ||
                    LocationOpenDate != null &&
                    LocationOpenDate.Equals(other.LocationOpenDate)
                ) && 
                (
                    LocationRemodelDate == other.LocationRemodelDate ||
                    LocationRemodelDate != null &&
                    LocationRemodelDate.Equals(other.LocationRemodelDate)
                ) && 
                (
                    EstimatedCompletionDate == other.EstimatedCompletionDate ||
                    EstimatedCompletionDate != null &&
                    EstimatedCompletionDate.Equals(other.EstimatedCompletionDate)
                ) && 
                (
                    Priority == other.Priority ||
                    Priority != null &&
                    Priority.Equals(other.Priority)
                ) && 
                (
                    Trade == other.Trade ||
                    Trade != null &&
                    Trade.Equals(other.Trade)
                ) && 
                (
                    TradeId == other.TradeId ||
                    
                    TradeId.Equals(other.TradeId)
                ) && 
                (
                    ProviderRank == other.ProviderRank ||
                    
                    ProviderRank.Equals(other.ProviderRank)
                ) && 
                (
                    ApprovalCode == other.ApprovalCode ||
                    ApprovalCode != null &&
                    ApprovalCode.Equals(other.ApprovalCode)
                ) && 
                (
                    ScheduledDate == other.ScheduledDate ||
                    ScheduledDate != null &&
                    ScheduledDate.Equals(other.ScheduledDate)
                ) && 
                (
                    ScheduledDateDTO == other.ScheduledDateDTO ||
                    ScheduledDateDTO != null &&
                    ScheduledDateDTO.Equals(other.ScheduledDateDTO)
                ) && 
                (
                    CompletedDate == other.CompletedDate ||
                    CompletedDate != null &&
                    CompletedDate.Equals(other.CompletedDate)
                ) && 
                (
                    CompletedDateDTO == other.CompletedDateDTO ||
                    CompletedDateDTO != null &&
                    CompletedDateDTO.Equals(other.CompletedDateDTO)
                ) && 
                (
                    ExpirationDate == other.ExpirationDate ||
                    ExpirationDate != null &&
                    ExpirationDate.Equals(other.ExpirationDate)
                ) && 
                (
                    ExpirationDateDTO == other.ExpirationDateDTO ||
                    ExpirationDateDTO != null &&
                    ExpirationDateDTO.Equals(other.ExpirationDateDTO)
                ) && 
                (
                    OriginalEta == other.OriginalEta ||
                    OriginalEta != null &&
                    OriginalEta.Equals(other.OriginalEta)
                ) && 
                (
                    OriginalEtaDTO == other.OriginalEtaDTO ||
                    OriginalEtaDTO != null &&
                    OriginalEtaDTO.Equals(other.OriginalEtaDTO)
                ) && 
                (
                    UpdatedDate == other.UpdatedDate ||
                    UpdatedDate != null &&
                    UpdatedDate.Equals(other.UpdatedDate)
                ) && 
                (
                    UpdatedDateDTO == other.UpdatedDateDTO ||
                    UpdatedDateDTO != null &&
                    UpdatedDateDTO.Equals(other.UpdatedDateDTO)
                ) && 
                (
                    CreatedDate == other.CreatedDate ||
                    CreatedDate != null &&
                    CreatedDate.Equals(other.CreatedDate)
                ) && 
                (
                    CreatedDateDTO == other.CreatedDateDTO ||
                    CreatedDateDTO != null &&
                    CreatedDateDTO.Equals(other.CreatedDateDTO)
                ) && 
                (
                    Description == other.Description ||
                    Description != null &&
                    Description.Equals(other.Description)
                ) && 
                (
                    CategoryId == other.CategoryId ||
                    
                    CategoryId.Equals(other.CategoryId)
                ) && 
                (
                    Category == other.Category ||
                    Category != null &&
                    Category.Equals(other.Category)
                ) && 
                (
                    Nte == other.Nte ||
                    
                    Nte.Equals(other.Nte)
                ) && 
                (
                    Tax == other.Tax ||
                    
                    Tax.Equals(other.Tax)
                ) && 
                (
                    Tax2 == other.Tax2 ||
                    
                    Tax2.Equals(other.Tax2)
                ) && 
                (
                    Tax2Type == other.Tax2Type ||
                    Tax2Type != null &&
                    Tax2Type.Equals(other.Tax2Type)
                ) && 
                (
                    Price == other.Price ||
                    
                    Price.Equals(other.Price)
                ) && 
                (
                    Currency == other.Currency ||
                    Currency != null &&
                    Currency.Equals(other.Currency)
                ) && 
                (
                    ProblemCode == other.ProblemCode ||
                    ProblemCode != null &&
                    ProblemCode.Equals(other.ProblemCode)
                ) && 
                (
                    Invoice == other.Invoice ||
                    Invoice != null &&
                    Invoice.Equals(other.Invoice)
                ) && 
                (
                    Resolution == other.Resolution ||
                    Resolution != null &&
                    Resolution.Equals(other.Resolution)
                ) && 
                (
                    Asset == other.Asset ||
                    Asset != null &&
                    Asset.Equals(other.Asset)
                ) && 
                (
                    Assets == other.Assets ||
                    Assets != null &&
                    other.Assets != null &&
                    Assets.SequenceEqual(other.Assets)
                ) && 
                (
                    AssetCount == other.AssetCount ||
                    
                    AssetCount.Equals(other.AssetCount)
                ) && 
                (
                    Attachments == other.Attachments ||
                    Attachments != null &&
                    Attachments.Equals(other.Attachments)
                ) && 
                (
                    Notes == other.Notes ||
                    Notes != null &&
                    Notes.Equals(other.Notes)
                ) && 
                (
                    PostedId == other.PostedId ||
                    
                    PostedId.Equals(other.PostedId)
                ) && 
                (
                    LinkedWorkOrders == other.LinkedWorkOrders ||
                    LinkedWorkOrders != null &&
                    other.LinkedWorkOrders != null &&
                    LinkedWorkOrders.SequenceEqual(other.LinkedWorkOrders)
                ) && 
                (
                    LinkedInWorkOrders == other.LinkedInWorkOrders ||
                    LinkedInWorkOrders != null &&
                    other.LinkedInWorkOrders != null &&
                    LinkedInWorkOrders.SequenceEqual(other.LinkedInWorkOrders)
                ) && 
                (
                    IsCheckInDenied == other.IsCheckInDenied ||
                    
                    IsCheckInDenied.Equals(other.IsCheckInDenied)
                ) && 
                (
                    CheckInDeniedReason == other.CheckInDeniedReason ||
                    CheckInDeniedReason != null &&
                    CheckInDeniedReason.Equals(other.CheckInDeniedReason)
                ) && 
                (
                    RecallWorkOrder == other.RecallWorkOrder ||
                    
                    RecallWorkOrder.Equals(other.RecallWorkOrder)
                ) && 
                (
                    IsInvoiced == other.IsInvoiced ||
                    
                    IsInvoiced.Equals(other.IsInvoiced)
                ) && 
                (
                    IsExpired == other.IsExpired ||
                    
                    IsExpired.Equals(other.IsExpired)
                ) && 
                (
                    IsEnabledForMobile == other.IsEnabledForMobile ||
                    
                    IsEnabledForMobile.Equals(other.IsEnabledForMobile)
                ) && 
                (
                    HasWorkActivity == other.HasWorkActivity ||
                    
                    HasWorkActivity.Equals(other.HasWorkActivity)
                ) && 
                (
                    Source == other.Source ||
                    Source != null &&
                    Source.Equals(other.Source)
                ) && 
                (
                    ClosingAuthorizationNumber == other.ClosingAuthorizationNumber ||
                    
                    ClosingAuthorizationNumber.Equals(other.ClosingAuthorizationNumber)
                ) && 
                (
                    CallerId == other.CallerId ||
                    
                    CallerId.Equals(other.CallerId)
                ) && 
                (
                    AutoComplete == other.AutoComplete ||
                    
                    AutoComplete.Equals(other.AutoComplete)
                ) && 
                (
                    Labels == other.Labels ||
                    Labels != null &&
                    other.Labels != null &&
                    Labels.SequenceEqual(other.Labels)
                ) && 
                (
                    AutoInvoice == other.AutoInvoice ||
                    
                    AutoInvoice.Equals(other.AutoInvoice)
                ) && 
                (
                    Assignee == other.Assignee ||
                    Assignee != null &&
                    Assignee.Equals(other.Assignee)
                ) && 
                (
                    ProjectId == other.ProjectId ||
                    
                    ProjectId.Equals(other.ProjectId)
                ) && 
                (
                    FrequencyId == other.FrequencyId ||
                    
                    FrequencyId.Equals(other.FrequencyId)
                ) && 
                (
                    ServiceId == other.ServiceId ||
                    
                    ServiceId.Equals(other.ServiceId)
                ) && 
                (
                    WeatherEvent == other.WeatherEvent ||
                    WeatherEvent != null &&
                    WeatherEvent.Equals(other.WeatherEvent)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    
                    hashCode = hashCode * 59 + Id.GetHashCode();
                    if (Number != null)
                    hashCode = hashCode * 59 + Number.GetHashCode();
                    if (PurchaseNumber != null)
                    hashCode = hashCode * 59 + PurchaseNumber.GetHashCode();
                    if (Subscriber != null)
                    hashCode = hashCode * 59 + Subscriber.GetHashCode();
                    if (Provider != null)
                    hashCode = hashCode * 59 + Provider.GetHashCode();
                    if (Location != null)
                    hashCode = hashCode * 59 + Location.GetHashCode();
                    
                    hashCode = hashCode * 59 + LocationId.GetHashCode();
                    if (Status != null)
                    hashCode = hashCode * 59 + Status.GetHashCode();
                    if (IssueTicketInfo != null)
                    hashCode = hashCode * 59 + IssueTicketInfo.GetHashCode();
                    if (Caller != null)
                    hashCode = hashCode * 59 + Caller.GetHashCode();
                    if (CreatedBy != null)
                    hashCode = hashCode * 59 + CreatedBy.GetHashCode();
                    if (CallDate != null)
                    hashCode = hashCode * 59 + CallDate.GetHashCode();
                    if (CallDateDTO != null)
                    hashCode = hashCode * 59 + CallDateDTO.GetHashCode();
                    if (ReassignDate != null)
                    hashCode = hashCode * 59 + ReassignDate.GetHashCode();
                    if (ReassignDateDTO != null)
                    hashCode = hashCode * 59 + ReassignDateDTO.GetHashCode();
                    if (LocationOpenDate != null)
                    hashCode = hashCode * 59 + LocationOpenDate.GetHashCode();
                    if (LocationRemodelDate != null)
                    hashCode = hashCode * 59 + LocationRemodelDate.GetHashCode();
                    if (EstimatedCompletionDate != null)
                    hashCode = hashCode * 59 + EstimatedCompletionDate.GetHashCode();
                    if (Priority != null)
                    hashCode = hashCode * 59 + Priority.GetHashCode();
                    if (Trade != null)
                    hashCode = hashCode * 59 + Trade.GetHashCode();
                    
                    hashCode = hashCode * 59 + TradeId.GetHashCode();
                    
                    hashCode = hashCode * 59 + ProviderRank.GetHashCode();
                    if (ApprovalCode != null)
                    hashCode = hashCode * 59 + ApprovalCode.GetHashCode();
                    if (ScheduledDate != null)
                    hashCode = hashCode * 59 + ScheduledDate.GetHashCode();
                    if (ScheduledDateDTO != null)
                    hashCode = hashCode * 59 + ScheduledDateDTO.GetHashCode();
                    if (CompletedDate != null)
                    hashCode = hashCode * 59 + CompletedDate.GetHashCode();
                    if (CompletedDateDTO != null)
                    hashCode = hashCode * 59 + CompletedDateDTO.GetHashCode();
                    if (ExpirationDate != null)
                    hashCode = hashCode * 59 + ExpirationDate.GetHashCode();
                    if (ExpirationDateDTO != null)
                    hashCode = hashCode * 59 + ExpirationDateDTO.GetHashCode();
                    if (OriginalEta != null)
                    hashCode = hashCode * 59 + OriginalEta.GetHashCode();
                    if (OriginalEtaDTO != null)
                    hashCode = hashCode * 59 + OriginalEtaDTO.GetHashCode();
                    if (UpdatedDate != null)
                    hashCode = hashCode * 59 + UpdatedDate.GetHashCode();
                    if (UpdatedDateDTO != null)
                    hashCode = hashCode * 59 + UpdatedDateDTO.GetHashCode();
                    if (CreatedDate != null)
                    hashCode = hashCode * 59 + CreatedDate.GetHashCode();
                    if (CreatedDateDTO != null)
                    hashCode = hashCode * 59 + CreatedDateDTO.GetHashCode();
                    if (Description != null)
                    hashCode = hashCode * 59 + Description.GetHashCode();
                    
                    hashCode = hashCode * 59 + CategoryId.GetHashCode();
                    if (Category != null)
                    hashCode = hashCode * 59 + Category.GetHashCode();
                    
                    hashCode = hashCode * 59 + Nte.GetHashCode();
                    
                    hashCode = hashCode * 59 + Tax.GetHashCode();
                    
                    hashCode = hashCode * 59 + Tax2.GetHashCode();
                    if (Tax2Type != null)
                    hashCode = hashCode * 59 + Tax2Type.GetHashCode();
                    
                    hashCode = hashCode * 59 + Price.GetHashCode();
                    if (Currency != null)
                    hashCode = hashCode * 59 + Currency.GetHashCode();
                    if (ProblemCode != null)
                    hashCode = hashCode * 59 + ProblemCode.GetHashCode();
                    if (Invoice != null)
                    hashCode = hashCode * 59 + Invoice.GetHashCode();
                    if (Resolution != null)
                    hashCode = hashCode * 59 + Resolution.GetHashCode();
                    if (Asset != null)
                    hashCode = hashCode * 59 + Asset.GetHashCode();
                    if (Assets != null)
                    hashCode = hashCode * 59 + Assets.GetHashCode();
                    
                    hashCode = hashCode * 59 + AssetCount.GetHashCode();
                    if (Attachments != null)
                    hashCode = hashCode * 59 + Attachments.GetHashCode();
                    if (Notes != null)
                    hashCode = hashCode * 59 + Notes.GetHashCode();
                    
                    hashCode = hashCode * 59 + PostedId.GetHashCode();
                    if (LinkedWorkOrders != null)
                    hashCode = hashCode * 59 + LinkedWorkOrders.GetHashCode();
                    if (LinkedInWorkOrders != null)
                    hashCode = hashCode * 59 + LinkedInWorkOrders.GetHashCode();
                    
                    hashCode = hashCode * 59 + IsCheckInDenied.GetHashCode();
                    if (CheckInDeniedReason != null)
                    hashCode = hashCode * 59 + CheckInDeniedReason.GetHashCode();
                    
                    hashCode = hashCode * 59 + RecallWorkOrder.GetHashCode();
                    
                    hashCode = hashCode * 59 + IsInvoiced.GetHashCode();
                    
                    hashCode = hashCode * 59 + IsExpired.GetHashCode();
                    
                    hashCode = hashCode * 59 + IsEnabledForMobile.GetHashCode();
                    
                    hashCode = hashCode * 59 + HasWorkActivity.GetHashCode();
                    if (Source != null)
                    hashCode = hashCode * 59 + Source.GetHashCode();
                    
                    hashCode = hashCode * 59 + ClosingAuthorizationNumber.GetHashCode();
                    
                    hashCode = hashCode * 59 + CallerId.GetHashCode();
                    
                    hashCode = hashCode * 59 + AutoComplete.GetHashCode();
                    if (Labels != null)
                    hashCode = hashCode * 59 + Labels.GetHashCode();
                    
                    hashCode = hashCode * 59 + AutoInvoice.GetHashCode();
                    if (Assignee != null)
                    hashCode = hashCode * 59 + Assignee.GetHashCode();
                    
                    hashCode = hashCode * 59 + ProjectId.GetHashCode();
                    
                    hashCode = hashCode * 59 + FrequencyId.GetHashCode();
                    
                    hashCode = hashCode * 59 + ServiceId.GetHashCode();
                    if (WeatherEvent != null)
                    hashCode = hashCode * 59 + WeatherEvent.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(SCServiceChannelServicesMessagingWorkordersWorkOrder left, SCServiceChannelServicesMessagingWorkordersWorkOrder right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(SCServiceChannelServicesMessagingWorkordersWorkOrder left, SCServiceChannelServicesMessagingWorkordersWorkOrder right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}
