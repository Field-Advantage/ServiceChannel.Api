/*
 * ServiceChannel API - v.3
 *
 * The ServiceChannel API is a RESTful and stateless API. It accepts standard HTTP verbs and supports OAuth 2.0 for authorizing requests.      Our API returns common HTTP status codes as well as JSON encapsulated data.      See [API Overview](https://developer.servicechannel.com/basics/introduction/overview/) for the intro to ServiceChannel API.<br>      <h3>Authentication and Authorization</h3>You should have a ServiceChannel account, register your application, and obtain `access_token` to integrate with our API.      See [Authentication and Authorization](https://developer.servicechannel.com/basics/general/authentication/) for more information.      To use this API playground, click **Authorize** and sign in to ServiceChannel.<br>      <h3>Environment</h3> All calls in this API Reference point to the **SB2 environment**.      See [Environments](https://developer.servicechannel.com/basics/general/environments/) for more information.<br>      <h3>API Version</h3>The current stable version of the ServiceChannel API is `v3`. In the request URL, `v3` is a version prefix that should be present.      When you omit the version prefix, calls point to the minimum supported version of the API.      We recommend you to always specify the API version to avoid possible errors.
 *
 * The version of the OpenAPI document: 3
 * 
 * Generated by: https://openapi-generator.tech
 */

using System;
using System.Linq;
using System.Text;
using System.Collections.Generic;
using System.ComponentModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using System.Text.Json;
using ServiceChannel.OpenAPIGenerated.Api.Converters;

namespace ServiceChannel.OpenAPIGenerated.Api.Models
{ 
    /// <summary>
    /// 
    /// </summary>
    [DataContract]
    public class SCServiceChannelServicesMessagingIssueListsIssueFieldResponse : IEquatable<SCServiceChannelServicesMessagingIssueListsIssueFieldResponse>
    {
        /// <summary>
        /// Gets or sets the problem type.
        /// </summary>
        /// <value>Gets or sets the problem type.</value>
        [DataMember(Name="ProblemType", EmitDefaultValue=false)]
        public string ProblemType { get; set; }

        /// <summary>
        /// Gets or sets the item.
        /// </summary>
        /// <value>Gets or sets the item.</value>
        [DataMember(Name="Item", EmitDefaultValue=false)]
        public string Item { get; set; }

        /// <summary>
        /// Gets or sets the problem.
        /// </summary>
        /// <value>Gets or sets the problem.</value>
        [DataMember(Name="Problem", EmitDefaultValue=false)]
        public string Problem { get; set; }

        /// <summary>
        /// Gets or sets the for.
        /// </summary>
        /// <value>Gets or sets the for.</value>
        [DataMember(Name="For", EmitDefaultValue=false)]
        public string VarFor { get; set; }

        /// <summary>
        /// Gets or sets the id.
        /// </summary>
        /// <value>Gets or sets the id.</value>
        [DataMember(Name="Id", EmitDefaultValue=false)]
        public string Id { get; set; }

        /// <summary>
        /// Gets or sets the header.
        /// </summary>
        /// <value>Gets or sets the header.</value>
        [DataMember(Name="Header", EmitDefaultValue=false)]
        public string Header { get; set; }

        /// <summary>
        /// Gets or sets the error text.
        /// </summary>
        /// <value>Gets or sets the error text.</value>
        [DataMember(Name="ErrorText", EmitDefaultValue=false)]
        public string ErrorText { get; set; }

        /// <summary>
        /// Gets or sets the area name.
        /// </summary>
        /// <value>Gets or sets the area name.</value>
        [DataMember(Name="AreaName", EmitDefaultValue=false)]
        public string AreaName { get; set; }

        /// <summary>
        /// Gets or sets the exclude.
        /// </summary>
        /// <value>Gets or sets the exclude.</value>
        [DataMember(Name="Exclude", EmitDefaultValue=false)]
        public string Exclude { get; set; }

        /// <summary>
        /// Gets or sets the min.
        /// </summary>
        /// <value>Gets or sets the min.</value>
        [DataMember(Name="Min", EmitDefaultValue=false)]
        public string Min { get; set; }

        /// <summary>
        /// Gets or sets the max.
        /// </summary>
        /// <value>Gets or sets the max.</value>
        [DataMember(Name="Max", EmitDefaultValue=false)]
        public string Max { get; set; }

        /// <summary>
        /// Gets or sets the step.
        /// </summary>
        /// <value>Gets or sets the step.</value>
        [DataMember(Name="Step", EmitDefaultValue=false)]
        public string Step { get; set; }

        /// <summary>
        /// Gets or sets the helptip.
        /// </summary>
        /// <value>Gets or sets the helptip.</value>
        [DataMember(Name="Helptip", EmitDefaultValue=false)]
        public string Helptip { get; set; }


        /// <summary>
        /// Gets or sets the type.
        /// </summary>
        /// <value>Gets or sets the type.</value>
        
        public enum TypeEnum
        {
            
            /// <summary>
            /// Enum TextboxEnum for textbox
            /// </summary>
            [EnumMember(Value = "textbox")]
            TextboxEnum = 1,
            
            /// <summary>
            /// Enum SelectEnum for select
            /// </summary>
            [EnumMember(Value = "select")]
            SelectEnum = 2,
            
            /// <summary>
            /// Enum SizeEnum for size
            /// </summary>
            [EnumMember(Value = "size")]
            SizeEnum = 3,
            
            /// <summary>
            /// Enum LabelEnum for label
            /// </summary>
            [EnumMember(Value = "label")]
            LabelEnum = 4
        }

        /// <summary>
        /// Gets or sets the type.
        /// </summary>
        /// <value>Gets or sets the type.</value>
        [DataMember(Name="Type", EmitDefaultValue=true)]
        public TypeEnum Type { get; set; }


        /// <summary>
        /// Gets or sets the allow.
        /// </summary>
        /// <value>Gets or sets the allow.</value>
        
        public enum AllowEnum
        {
            
            /// <summary>
            /// Enum NumbersEnum for numbers
            /// </summary>
            [EnumMember(Value = "numbers")]
            NumbersEnum = 1,
            
            /// <summary>
            /// Enum DecimalsEnum for decimals
            /// </summary>
            [EnumMember(Value = "decimals")]
            DecimalsEnum = 2,
            
            /// <summary>
            /// Enum AllEnum for all
            /// </summary>
            [EnumMember(Value = "all")]
            AllEnum = 3
        }

        /// <summary>
        /// Gets or sets the allow.
        /// </summary>
        /// <value>Gets or sets the allow.</value>
        [DataMember(Name="Allow", EmitDefaultValue=true)]
        public AllowEnum Allow { get; set; }

        /// <summary>
        /// Gets or sets the expected value.
        /// </summary>
        /// <value>Gets or sets the expected value.</value>
        [DataMember(Name="ExpectedValue", EmitDefaultValue=false)]
        public string ExpectedValue { get; set; }

        /// <summary>
        /// Gets or sets the options.
        /// </summary>
        /// <value>Gets or sets the options.</value>
        [DataMember(Name="Options", EmitDefaultValue=false)]
        public List<string> Options { get; set; }

        /// <summary>
        /// Determines whether this field is required to fill or not
        /// </summary>
        /// <value>Determines whether this field is required to fill or not</value>
        [DataMember(Name="Required", EmitDefaultValue=true)]
        public bool Required { get; set; } = false;

        /// <summary>
        /// Gets or Sets Decisions
        /// </summary>
        [DataMember(Name="Decisions", EmitDefaultValue=false)]
        public List<SCServiceChannelApiModelDashboardIssueListsDecisionModel> Decisions { get; set; }

        /// <summary>
        /// Gets or Sets LinkToMedia
        /// </summary>
        [DataMember(Name="LinkToMedia", EmitDefaultValue=false)]
        public string LinkToMedia { get; set; }

        /// <summary>
        /// Gets a value indicating whether disable filter.
        /// </summary>
        /// <value>Gets a value indicating whether disable filter.</value>
        [DataMember(Name="DisableFilter", EmitDefaultValue=true)]
        public bool DisableFilter { get; set; } = false;

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class SCServiceChannelServicesMessagingIssueListsIssueFieldResponse {\n");
            sb.Append("  ProblemType: ").Append(ProblemType).Append("\n");
            sb.Append("  Item: ").Append(Item).Append("\n");
            sb.Append("  Problem: ").Append(Problem).Append("\n");
            sb.Append("  VarFor: ").Append(VarFor).Append("\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  Header: ").Append(Header).Append("\n");
            sb.Append("  ErrorText: ").Append(ErrorText).Append("\n");
            sb.Append("  AreaName: ").Append(AreaName).Append("\n");
            sb.Append("  Exclude: ").Append(Exclude).Append("\n");
            sb.Append("  Min: ").Append(Min).Append("\n");
            sb.Append("  Max: ").Append(Max).Append("\n");
            sb.Append("  Step: ").Append(Step).Append("\n");
            sb.Append("  Helptip: ").Append(Helptip).Append("\n");
            sb.Append("  Type: ").Append(Type).Append("\n");
            sb.Append("  Allow: ").Append(Allow).Append("\n");
            sb.Append("  ExpectedValue: ").Append(ExpectedValue).Append("\n");
            sb.Append("  Options: ").Append(Options).Append("\n");
            sb.Append("  Required: ").Append(Required).Append("\n");
            sb.Append("  Decisions: ").Append(Decisions).Append("\n");
            sb.Append("  LinkToMedia: ").Append(LinkToMedia).Append("\n");
            sb.Append("  DisableFilter: ").Append(DisableFilter).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            var options = new JsonSerializerOptions
            {
                WriteIndented = true
            };

            return JsonSerializer.Serialize(this, options);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (obj is null) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((SCServiceChannelServicesMessagingIssueListsIssueFieldResponse)obj);
        }

        /// <summary>
        /// Returns true if SCServiceChannelServicesMessagingIssueListsIssueFieldResponse instances are equal
        /// </summary>
        /// <param name="other">Instance of SCServiceChannelServicesMessagingIssueListsIssueFieldResponse to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(SCServiceChannelServicesMessagingIssueListsIssueFieldResponse other)
        {
            if (other is null) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    ProblemType == other.ProblemType ||
                    ProblemType != null &&
                    ProblemType.Equals(other.ProblemType)
                ) && 
                (
                    Item == other.Item ||
                    Item != null &&
                    Item.Equals(other.Item)
                ) && 
                (
                    Problem == other.Problem ||
                    Problem != null &&
                    Problem.Equals(other.Problem)
                ) && 
                (
                    VarFor == other.VarFor ||
                    VarFor != null &&
                    VarFor.Equals(other.VarFor)
                ) && 
                (
                    Id == other.Id ||
                    Id != null &&
                    Id.Equals(other.Id)
                ) && 
                (
                    Header == other.Header ||
                    Header != null &&
                    Header.Equals(other.Header)
                ) && 
                (
                    ErrorText == other.ErrorText ||
                    ErrorText != null &&
                    ErrorText.Equals(other.ErrorText)
                ) && 
                (
                    AreaName == other.AreaName ||
                    AreaName != null &&
                    AreaName.Equals(other.AreaName)
                ) && 
                (
                    Exclude == other.Exclude ||
                    Exclude != null &&
                    Exclude.Equals(other.Exclude)
                ) && 
                (
                    Min == other.Min ||
                    Min != null &&
                    Min.Equals(other.Min)
                ) && 
                (
                    Max == other.Max ||
                    Max != null &&
                    Max.Equals(other.Max)
                ) && 
                (
                    Step == other.Step ||
                    Step != null &&
                    Step.Equals(other.Step)
                ) && 
                (
                    Helptip == other.Helptip ||
                    Helptip != null &&
                    Helptip.Equals(other.Helptip)
                ) && 
                (
                    Type == other.Type ||
                    
                    Type.Equals(other.Type)
                ) && 
                (
                    Allow == other.Allow ||
                    
                    Allow.Equals(other.Allow)
                ) && 
                (
                    ExpectedValue == other.ExpectedValue ||
                    ExpectedValue != null &&
                    ExpectedValue.Equals(other.ExpectedValue)
                ) && 
                (
                    Options == other.Options ||
                    Options != null &&
                    other.Options != null &&
                    Options.SequenceEqual(other.Options)
                ) && 
                (
                    Required == other.Required ||
                    
                    Required.Equals(other.Required)
                ) && 
                (
                    Decisions == other.Decisions ||
                    Decisions != null &&
                    other.Decisions != null &&
                    Decisions.SequenceEqual(other.Decisions)
                ) && 
                (
                    LinkToMedia == other.LinkToMedia ||
                    LinkToMedia != null &&
                    LinkToMedia.Equals(other.LinkToMedia)
                ) && 
                (
                    DisableFilter == other.DisableFilter ||
                    
                    DisableFilter.Equals(other.DisableFilter)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    if (ProblemType != null)
                    hashCode = hashCode * 59 + ProblemType.GetHashCode();
                    if (Item != null)
                    hashCode = hashCode * 59 + Item.GetHashCode();
                    if (Problem != null)
                    hashCode = hashCode * 59 + Problem.GetHashCode();
                    if (VarFor != null)
                    hashCode = hashCode * 59 + VarFor.GetHashCode();
                    if (Id != null)
                    hashCode = hashCode * 59 + Id.GetHashCode();
                    if (Header != null)
                    hashCode = hashCode * 59 + Header.GetHashCode();
                    if (ErrorText != null)
                    hashCode = hashCode * 59 + ErrorText.GetHashCode();
                    if (AreaName != null)
                    hashCode = hashCode * 59 + AreaName.GetHashCode();
                    if (Exclude != null)
                    hashCode = hashCode * 59 + Exclude.GetHashCode();
                    if (Min != null)
                    hashCode = hashCode * 59 + Min.GetHashCode();
                    if (Max != null)
                    hashCode = hashCode * 59 + Max.GetHashCode();
                    if (Step != null)
                    hashCode = hashCode * 59 + Step.GetHashCode();
                    if (Helptip != null)
                    hashCode = hashCode * 59 + Helptip.GetHashCode();
                    
                    hashCode = hashCode * 59 + Type.GetHashCode();
                    
                    hashCode = hashCode * 59 + Allow.GetHashCode();
                    if (ExpectedValue != null)
                    hashCode = hashCode * 59 + ExpectedValue.GetHashCode();
                    if (Options != null)
                    hashCode = hashCode * 59 + Options.GetHashCode();
                    
                    hashCode = hashCode * 59 + Required.GetHashCode();
                    if (Decisions != null)
                    hashCode = hashCode * 59 + Decisions.GetHashCode();
                    if (LinkToMedia != null)
                    hashCode = hashCode * 59 + LinkToMedia.GetHashCode();
                    
                    hashCode = hashCode * 59 + DisableFilter.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(SCServiceChannelServicesMessagingIssueListsIssueFieldResponse left, SCServiceChannelServicesMessagingIssueListsIssueFieldResponse right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(SCServiceChannelServicesMessagingIssueListsIssueFieldResponse left, SCServiceChannelServicesMessagingIssueListsIssueFieldResponse right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}
