/*
 * ServiceChannel API - v.3
 *
 * The ServiceChannel API is a RESTful and stateless API. It accepts standard HTTP verbs and supports OAuth 2.0 for authorizing requests.      Our API returns common HTTP status codes as well as JSON encapsulated data.      See [API Overview](https://developer.servicechannel.com/basics/introduction/overview/) for the intro to ServiceChannel API.<br>      <h3>Authentication and Authorization</h3>You should have a ServiceChannel account, register your application, and obtain `access_token` to integrate with our API.      See [Authentication and Authorization](https://developer.servicechannel.com/basics/general/authentication/) for more information.      To use this API playground, click **Authorize** and sign in to ServiceChannel.<br>      <h3>Environment</h3> All calls in this API Reference point to the **SB2 environment**.      See [Environments](https://developer.servicechannel.com/basics/general/environments/) for more information.<br>      <h3>API Version</h3>The current stable version of the ServiceChannel API is `v3`. In the request URL, `v3` is a version prefix that should be present.      When you omit the version prefix, calls point to the minimum supported version of the API.      We recommend you to always specify the API version to avoid possible errors.
 *
 * The version of the OpenAPI document: 3
 * 
 * Generated by: https://openapi-generator.tech
 */

using System;
using System.Linq;
using System.Text;
using System.Collections.Generic;
using System.ComponentModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using System.Text.Json;
using ServiceChannel.OpenAPIGenerated.Api.Converters;

namespace ServiceChannel.OpenAPIGenerated.Api.Models
{ 
    /// <summary>
    /// LocationWithTimezoneName
    /// </summary>
    [DataContract]
    public class SCServiceChannelServicesMessagingLocationLocationWithTimezoneName : IEquatable<SCServiceChannelServicesMessagingLocationLocationWithTimezoneName>
    {
        /// <summary>
        /// The time zone identifier
        /// </summary>
        /// <value>The time zone identifier</value>
        [DataMember(Name="TimezoneName", EmitDefaultValue=false)]
        public string TimezoneName { get; set; }

        /// <summary>
        /// Unique location identifier.
        /// </summary>
        /// <value>Unique location identifier.</value>
        [DataMember(Name="Id", EmitDefaultValue=true)]
        public int Id { get; set; }

        /// <summary>
        /// Unique subscriber identifier.
        /// </summary>
        /// <value>Unique subscriber identifier.</value>
        [DataMember(Name="SubscriberId", EmitDefaultValue=true)]
        public int SubscriberId { get; set; }

        /// <summary>
        /// Gets or Sets SubscriberName
        /// </summary>
        [DataMember(Name="SubscriberName", EmitDefaultValue=false)]
        public string SubscriberName { get; set; }

        /// <summary>
        /// Alphanumeric identifier of the store in the client&#39;s system. Assigned by and unique per subscriber.
        /// </summary>
        /// <value>Alphanumeric identifier of the store in the client&#39;s system. Assigned by and unique per subscriber.</value>
        [DataMember(Name="StoreId", EmitDefaultValue=false)]
        public string StoreId { get; set; }

        /// <summary>
        /// Location name.
        /// </summary>
        /// <value>Location name.</value>
        [DataMember(Name="Name", EmitDefaultValue=false)]
        public string Name { get; set; }

        /// <summary>
        /// Shortened location name.
        /// </summary>
        /// <value>Shortened location name.</value>
        [DataMember(Name="ShortName", EmitDefaultValue=false)]
        public string ShortName { get; set; }

        /// <summary>
        /// Global position. Latitude.
        /// </summary>
        /// <value>Global position. Latitude.</value>
        [DataMember(Name="Latitude", EmitDefaultValue=true)]
        public double Latitude { get; set; }

        /// <summary>
        /// Global position. Longitude.
        /// </summary>
        /// <value>Global position. Longitude.</value>
        [DataMember(Name="Longitude", EmitDefaultValue=true)]
        public double Longitude { get; set; }

        /// <summary>
        /// Distance from GPS coordinate to this location
        /// </summary>
        /// <value>Distance from GPS coordinate to this location</value>
        [DataMember(Name="Distance", EmitDefaultValue=true)]
        public double Distance { get; set; }

        /// <summary>
        /// GPS radius for the location.
        /// </summary>
        /// <value>GPS radius for the location.</value>
        [DataMember(Name="Radius", EmitDefaultValue=true)]
        public double Radius { get; set; }

        /// <summary>
        /// Numeric identifier of the location type.
        /// </summary>
        /// <value>Numeric identifier of the location type.</value>
        [DataMember(Name="LocationTypeId", EmitDefaultValue=true)]
        public int LocationTypeId { get; set; }

        /// <summary>
        /// Additional location address.
        /// </summary>
        /// <value>Additional location address.</value>
        [DataMember(Name="Address1", EmitDefaultValue=false)]
        public string Address1 { get; set; }

        /// <summary>
        /// Main location address.
        /// </summary>
        /// <value>Main location address.</value>
        [DataMember(Name="Address2", EmitDefaultValue=false)]
        public string Address2 { get; set; }

        /// <summary>
        /// Location city.
        /// </summary>
        /// <value>Location city.</value>
        [DataMember(Name="City", EmitDefaultValue=false)]
        public string City { get; set; }

        /// <summary>
        /// State where the location is situated.
        /// </summary>
        /// <value>State where the location is situated.</value>
        [DataMember(Name="State", EmitDefaultValue=false)]
        public string State { get; set; }

        /// <summary>
        /// Numeric identifier of the location’s state.
        /// </summary>
        /// <value>Numeric identifier of the location’s state.</value>
        [DataMember(Name="StateId", EmitDefaultValue=true)]
        public int StateId { get; set; }

        /// <summary>
        /// Part of the country where the location is situated.
        /// </summary>
        /// <value>Part of the country where the location is situated.</value>
        [DataMember(Name="Region", EmitDefaultValue=false)]
        public string Region { get; set; }

        /// <summary>
        /// Abbreviation of the town or country area where the location is situated.
        /// </summary>
        /// <value>Abbreviation of the town or country area where the location is situated.</value>
        [DataMember(Name="District", EmitDefaultValue=false)]
        public string District { get; set; }

        /// <summary>
        /// Location ZIP or postal code.
        /// </summary>
        /// <value>Location ZIP or postal code.</value>
        [DataMember(Name="Zip", EmitDefaultValue=false)]
        public string Zip { get; set; }

        /// <summary>
        /// Abbreviation of the country name where the location is situated.
        /// </summary>
        /// <value>Abbreviation of the country name where the location is situated.</value>
        [DataMember(Name="Country", EmitDefaultValue=false)]
        public string Country { get; set; }

        /// <summary>
        /// Numeric identifier of the country of the location.
        /// </summary>
        /// <value>Numeric identifier of the country of the location.</value>
        [DataMember(Name="CountryId", EmitDefaultValue=true)]
        public int CountryId { get; set; }

        /// <summary>
        /// Last day when the location is open for business.
        /// </summary>
        /// <value>Last day when the location is open for business.</value>
        [DataMember(Name="ClosedDate", EmitDefaultValue=false)]
        public DateTime ClosedDate { get; set; }

        /// <summary>
        /// First day when the location is open for business.
        /// </summary>
        /// <value>First day when the location is open for business.</value>
        [DataMember(Name="OpenDate", EmitDefaultValue=false)]
        public DateTime OpenDate { get; set; }

        /// <summary>
        /// Status of the location. Possible values: *open*, *closed*.
        /// </summary>
        /// <value>Status of the location. Possible values: *open*, *closed*.</value>
        [DataMember(Name="Status", EmitDefaultValue=false)]
        public string Status { get; set; }

        /// <summary>
        /// Email the location can be contacted at.
        /// </summary>
        /// <value>Email the location can be contacted at.</value>
        [DataMember(Name="Email", EmitDefaultValue=false)]
        public string Email { get; set; }

        /// <summary>
        /// Fax number the location can be contacted at.
        /// </summary>
        /// <value>Fax number the location can be contacted at.</value>
        [DataMember(Name="FaxNumber", EmitDefaultValue=false)]
        public string FaxNumber { get; set; }

        /// <summary>
        /// Contact phone number of the location.
        /// </summary>
        /// <value>Contact phone number of the location.</value>
        [DataMember(Name="Phone", EmitDefaultValue=false)]
        public string Phone { get; set; }

        /// <summary>
        /// Name of the main person to contact at the location.
        /// </summary>
        /// <value>Name of the main person to contact at the location.</value>
        [DataMember(Name="Contact", EmitDefaultValue=false)]
        public string Contact { get; set; }

        /// <summary>
        /// Indicates whether it’s an inventory location or not. Possible values: *true*, *false*.
        /// </summary>
        /// <value>Indicates whether it’s an inventory location or not. Possible values: *true*, *false*.</value>
        [DataMember(Name="HasInventory", EmitDefaultValue=true)]
        public bool HasInventory { get; set; } = false;

        /// <summary>
        /// Square value of the facility.
        /// </summary>
        /// <value>Square value of the facility.</value>
        [DataMember(Name="SquareValue", EmitDefaultValue=true)]
        public double SquareValue { get; set; }

        /// <summary>
        /// Unit or system of units for measuring location area.
        /// </summary>
        /// <value>Unit or system of units for measuring location area.</value>
        [DataMember(Name="SquareMeasure", EmitDefaultValue=false)]
        public string SquareMeasure { get; set; }

        /// <summary>
        /// Numeric identifier of the location time zone.
        /// </summary>
        /// <value>Numeric identifier of the location time zone.</value>
        [DataMember(Name="TimeZoneInfoId", EmitDefaultValue=true)]
        public int TimeZoneInfoId { get; set; }

        /// <summary>
        /// Location time zone abbreviation.
        /// </summary>
        /// <value>Location time zone abbreviation.</value>
        [DataMember(Name="TimeZoneShortDescription", EmitDefaultValue=false)]
        public string TimeZoneShortDescription { get; set; }

        /// <summary>
        /// Location time zone Microsoft Name. e.g \&quot;Eastern Standard Time\&quot;
        /// </summary>
        /// <value>Location time zone Microsoft Name. e.g \&quot;Eastern Standard Time\&quot;</value>
        [DataMember(Name="TimeZoneMsName", EmitDefaultValue=false)]
        public string TimeZoneMsName { get; set; }

        /// <summary>
        /// Location time zone Iana Name. e.g. \&quot;America/New_York\&quot;
        /// </summary>
        /// <value>Location time zone Iana Name. e.g. \&quot;America/New_York\&quot;</value>
        [DataMember(Name="TimeZoneIanaName", EmitDefaultValue=false)]
        public string TimeZoneIanaName { get; set; }

        /// <summary>
        /// [Inventory location type](https://servicechannel.atlassian.net/wiki/spaces/SCU/pages/1209106525/Creating+Inventory+Locations?preview&#x3D;%2F1209106525%2F1205830388%2FSupply-House-Type.png). Possible values: *Location*, *Warehouse*, *Supply House*, *Truck*.
        /// </summary>
        /// <value>[Inventory location type](https://servicechannel.atlassian.net/wiki/spaces/SCU/pages/1209106525/Creating+Inventory+Locations?preview&#x3D;%2F1209106525%2F1205830388%2FSupply-House-Type.png). Possible values: *Location*, *Warehouse*, *Supply House*, *Truck*.</value>
        [DataMember(Name="TypeLabel", EmitDefaultValue=false)]
        public string TypeLabel { get; set; }

        /// <summary>
        /// Supplier’s location name.
        /// </summary>
        /// <value>Supplier’s location name.</value>
        [DataMember(Name="Supplier", EmitDefaultValue=false)]
        public string Supplier { get; set; }

        /// <summary>
        /// County numeric identifier.
        /// </summary>
        /// <value>County numeric identifier.</value>
        [DataMember(Name="CountyId", EmitDefaultValue=true)]
        public int CountyId { get; set; }

        /// <summary>
        /// Gets or Sets Notes
        /// </summary>
        [DataMember(Name="Notes", EmitDefaultValue=false)]
        public List<SCServiceChannelServicesMessagingLocationNoteLocationNote> Notes { get; set; }

        /// <summary>
        /// Gets or Sets TimeShiftToEST
        /// </summary>
        [DataMember(Name="TimeShiftToEST", EmitDefaultValue=true)]
        public int TimeShiftToEST { get; set; }

        /// <summary>
        /// Address format pattern Id
        /// </summary>
        /// <value>Address format pattern Id</value>
        [DataMember(Name="AddressTypeId", EmitDefaultValue=true)]
        public int AddressTypeId { get; set; }

        /// <summary>
        /// Gets or Sets FormattedAddress
        /// </summary>
        [DataMember(Name="FormattedAddress", EmitDefaultValue=false)]
        public string FormattedAddress { get; set; }

        /// <summary>
        /// Gets or Sets LocationFormattedAddressTail
        /// </summary>
        [DataMember(Name="LocationFormattedAddressTail", EmitDefaultValue=false)]
        public string LocationFormattedAddressTail { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class SCServiceChannelServicesMessagingLocationLocationWithTimezoneName {\n");
            sb.Append("  TimezoneName: ").Append(TimezoneName).Append("\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  SubscriberId: ").Append(SubscriberId).Append("\n");
            sb.Append("  SubscriberName: ").Append(SubscriberName).Append("\n");
            sb.Append("  StoreId: ").Append(StoreId).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  ShortName: ").Append(ShortName).Append("\n");
            sb.Append("  Latitude: ").Append(Latitude).Append("\n");
            sb.Append("  Longitude: ").Append(Longitude).Append("\n");
            sb.Append("  Distance: ").Append(Distance).Append("\n");
            sb.Append("  Radius: ").Append(Radius).Append("\n");
            sb.Append("  LocationTypeId: ").Append(LocationTypeId).Append("\n");
            sb.Append("  Address1: ").Append(Address1).Append("\n");
            sb.Append("  Address2: ").Append(Address2).Append("\n");
            sb.Append("  City: ").Append(City).Append("\n");
            sb.Append("  State: ").Append(State).Append("\n");
            sb.Append("  StateId: ").Append(StateId).Append("\n");
            sb.Append("  Region: ").Append(Region).Append("\n");
            sb.Append("  District: ").Append(District).Append("\n");
            sb.Append("  Zip: ").Append(Zip).Append("\n");
            sb.Append("  Country: ").Append(Country).Append("\n");
            sb.Append("  CountryId: ").Append(CountryId).Append("\n");
            sb.Append("  ClosedDate: ").Append(ClosedDate).Append("\n");
            sb.Append("  OpenDate: ").Append(OpenDate).Append("\n");
            sb.Append("  Status: ").Append(Status).Append("\n");
            sb.Append("  Email: ").Append(Email).Append("\n");
            sb.Append("  FaxNumber: ").Append(FaxNumber).Append("\n");
            sb.Append("  Phone: ").Append(Phone).Append("\n");
            sb.Append("  Contact: ").Append(Contact).Append("\n");
            sb.Append("  HasInventory: ").Append(HasInventory).Append("\n");
            sb.Append("  SquareValue: ").Append(SquareValue).Append("\n");
            sb.Append("  SquareMeasure: ").Append(SquareMeasure).Append("\n");
            sb.Append("  TimeZoneInfoId: ").Append(TimeZoneInfoId).Append("\n");
            sb.Append("  TimeZoneShortDescription: ").Append(TimeZoneShortDescription).Append("\n");
            sb.Append("  TimeZoneMsName: ").Append(TimeZoneMsName).Append("\n");
            sb.Append("  TimeZoneIanaName: ").Append(TimeZoneIanaName).Append("\n");
            sb.Append("  TypeLabel: ").Append(TypeLabel).Append("\n");
            sb.Append("  Supplier: ").Append(Supplier).Append("\n");
            sb.Append("  CountyId: ").Append(CountyId).Append("\n");
            sb.Append("  Notes: ").Append(Notes).Append("\n");
            sb.Append("  TimeShiftToEST: ").Append(TimeShiftToEST).Append("\n");
            sb.Append("  AddressTypeId: ").Append(AddressTypeId).Append("\n");
            sb.Append("  FormattedAddress: ").Append(FormattedAddress).Append("\n");
            sb.Append("  LocationFormattedAddressTail: ").Append(LocationFormattedAddressTail).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            var options = new JsonSerializerOptions
            {
                WriteIndented = true
            };

            return JsonSerializer.Serialize(this, options);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (obj is null) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((SCServiceChannelServicesMessagingLocationLocationWithTimezoneName)obj);
        }

        /// <summary>
        /// Returns true if SCServiceChannelServicesMessagingLocationLocationWithTimezoneName instances are equal
        /// </summary>
        /// <param name="other">Instance of SCServiceChannelServicesMessagingLocationLocationWithTimezoneName to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(SCServiceChannelServicesMessagingLocationLocationWithTimezoneName other)
        {
            if (other is null) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    TimezoneName == other.TimezoneName ||
                    TimezoneName != null &&
                    TimezoneName.Equals(other.TimezoneName)
                ) && 
                (
                    Id == other.Id ||
                    
                    Id.Equals(other.Id)
                ) && 
                (
                    SubscriberId == other.SubscriberId ||
                    
                    SubscriberId.Equals(other.SubscriberId)
                ) && 
                (
                    SubscriberName == other.SubscriberName ||
                    SubscriberName != null &&
                    SubscriberName.Equals(other.SubscriberName)
                ) && 
                (
                    StoreId == other.StoreId ||
                    StoreId != null &&
                    StoreId.Equals(other.StoreId)
                ) && 
                (
                    Name == other.Name ||
                    Name != null &&
                    Name.Equals(other.Name)
                ) && 
                (
                    ShortName == other.ShortName ||
                    ShortName != null &&
                    ShortName.Equals(other.ShortName)
                ) && 
                (
                    Latitude == other.Latitude ||
                    
                    Latitude.Equals(other.Latitude)
                ) && 
                (
                    Longitude == other.Longitude ||
                    
                    Longitude.Equals(other.Longitude)
                ) && 
                (
                    Distance == other.Distance ||
                    
                    Distance.Equals(other.Distance)
                ) && 
                (
                    Radius == other.Radius ||
                    
                    Radius.Equals(other.Radius)
                ) && 
                (
                    LocationTypeId == other.LocationTypeId ||
                    
                    LocationTypeId.Equals(other.LocationTypeId)
                ) && 
                (
                    Address1 == other.Address1 ||
                    Address1 != null &&
                    Address1.Equals(other.Address1)
                ) && 
                (
                    Address2 == other.Address2 ||
                    Address2 != null &&
                    Address2.Equals(other.Address2)
                ) && 
                (
                    City == other.City ||
                    City != null &&
                    City.Equals(other.City)
                ) && 
                (
                    State == other.State ||
                    State != null &&
                    State.Equals(other.State)
                ) && 
                (
                    StateId == other.StateId ||
                    
                    StateId.Equals(other.StateId)
                ) && 
                (
                    Region == other.Region ||
                    Region != null &&
                    Region.Equals(other.Region)
                ) && 
                (
                    District == other.District ||
                    District != null &&
                    District.Equals(other.District)
                ) && 
                (
                    Zip == other.Zip ||
                    Zip != null &&
                    Zip.Equals(other.Zip)
                ) && 
                (
                    Country == other.Country ||
                    Country != null &&
                    Country.Equals(other.Country)
                ) && 
                (
                    CountryId == other.CountryId ||
                    
                    CountryId.Equals(other.CountryId)
                ) && 
                (
                    ClosedDate == other.ClosedDate ||
                    ClosedDate != null &&
                    ClosedDate.Equals(other.ClosedDate)
                ) && 
                (
                    OpenDate == other.OpenDate ||
                    OpenDate != null &&
                    OpenDate.Equals(other.OpenDate)
                ) && 
                (
                    Status == other.Status ||
                    Status != null &&
                    Status.Equals(other.Status)
                ) && 
                (
                    Email == other.Email ||
                    Email != null &&
                    Email.Equals(other.Email)
                ) && 
                (
                    FaxNumber == other.FaxNumber ||
                    FaxNumber != null &&
                    FaxNumber.Equals(other.FaxNumber)
                ) && 
                (
                    Phone == other.Phone ||
                    Phone != null &&
                    Phone.Equals(other.Phone)
                ) && 
                (
                    Contact == other.Contact ||
                    Contact != null &&
                    Contact.Equals(other.Contact)
                ) && 
                (
                    HasInventory == other.HasInventory ||
                    
                    HasInventory.Equals(other.HasInventory)
                ) && 
                (
                    SquareValue == other.SquareValue ||
                    
                    SquareValue.Equals(other.SquareValue)
                ) && 
                (
                    SquareMeasure == other.SquareMeasure ||
                    SquareMeasure != null &&
                    SquareMeasure.Equals(other.SquareMeasure)
                ) && 
                (
                    TimeZoneInfoId == other.TimeZoneInfoId ||
                    
                    TimeZoneInfoId.Equals(other.TimeZoneInfoId)
                ) && 
                (
                    TimeZoneShortDescription == other.TimeZoneShortDescription ||
                    TimeZoneShortDescription != null &&
                    TimeZoneShortDescription.Equals(other.TimeZoneShortDescription)
                ) && 
                (
                    TimeZoneMsName == other.TimeZoneMsName ||
                    TimeZoneMsName != null &&
                    TimeZoneMsName.Equals(other.TimeZoneMsName)
                ) && 
                (
                    TimeZoneIanaName == other.TimeZoneIanaName ||
                    TimeZoneIanaName != null &&
                    TimeZoneIanaName.Equals(other.TimeZoneIanaName)
                ) && 
                (
                    TypeLabel == other.TypeLabel ||
                    TypeLabel != null &&
                    TypeLabel.Equals(other.TypeLabel)
                ) && 
                (
                    Supplier == other.Supplier ||
                    Supplier != null &&
                    Supplier.Equals(other.Supplier)
                ) && 
                (
                    CountyId == other.CountyId ||
                    
                    CountyId.Equals(other.CountyId)
                ) && 
                (
                    Notes == other.Notes ||
                    Notes != null &&
                    other.Notes != null &&
                    Notes.SequenceEqual(other.Notes)
                ) && 
                (
                    TimeShiftToEST == other.TimeShiftToEST ||
                    
                    TimeShiftToEST.Equals(other.TimeShiftToEST)
                ) && 
                (
                    AddressTypeId == other.AddressTypeId ||
                    
                    AddressTypeId.Equals(other.AddressTypeId)
                ) && 
                (
                    FormattedAddress == other.FormattedAddress ||
                    FormattedAddress != null &&
                    FormattedAddress.Equals(other.FormattedAddress)
                ) && 
                (
                    LocationFormattedAddressTail == other.LocationFormattedAddressTail ||
                    LocationFormattedAddressTail != null &&
                    LocationFormattedAddressTail.Equals(other.LocationFormattedAddressTail)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    if (TimezoneName != null)
                    hashCode = hashCode * 59 + TimezoneName.GetHashCode();
                    
                    hashCode = hashCode * 59 + Id.GetHashCode();
                    
                    hashCode = hashCode * 59 + SubscriberId.GetHashCode();
                    if (SubscriberName != null)
                    hashCode = hashCode * 59 + SubscriberName.GetHashCode();
                    if (StoreId != null)
                    hashCode = hashCode * 59 + StoreId.GetHashCode();
                    if (Name != null)
                    hashCode = hashCode * 59 + Name.GetHashCode();
                    if (ShortName != null)
                    hashCode = hashCode * 59 + ShortName.GetHashCode();
                    
                    hashCode = hashCode * 59 + Latitude.GetHashCode();
                    
                    hashCode = hashCode * 59 + Longitude.GetHashCode();
                    
                    hashCode = hashCode * 59 + Distance.GetHashCode();
                    
                    hashCode = hashCode * 59 + Radius.GetHashCode();
                    
                    hashCode = hashCode * 59 + LocationTypeId.GetHashCode();
                    if (Address1 != null)
                    hashCode = hashCode * 59 + Address1.GetHashCode();
                    if (Address2 != null)
                    hashCode = hashCode * 59 + Address2.GetHashCode();
                    if (City != null)
                    hashCode = hashCode * 59 + City.GetHashCode();
                    if (State != null)
                    hashCode = hashCode * 59 + State.GetHashCode();
                    
                    hashCode = hashCode * 59 + StateId.GetHashCode();
                    if (Region != null)
                    hashCode = hashCode * 59 + Region.GetHashCode();
                    if (District != null)
                    hashCode = hashCode * 59 + District.GetHashCode();
                    if (Zip != null)
                    hashCode = hashCode * 59 + Zip.GetHashCode();
                    if (Country != null)
                    hashCode = hashCode * 59 + Country.GetHashCode();
                    
                    hashCode = hashCode * 59 + CountryId.GetHashCode();
                    if (ClosedDate != null)
                    hashCode = hashCode * 59 + ClosedDate.GetHashCode();
                    if (OpenDate != null)
                    hashCode = hashCode * 59 + OpenDate.GetHashCode();
                    if (Status != null)
                    hashCode = hashCode * 59 + Status.GetHashCode();
                    if (Email != null)
                    hashCode = hashCode * 59 + Email.GetHashCode();
                    if (FaxNumber != null)
                    hashCode = hashCode * 59 + FaxNumber.GetHashCode();
                    if (Phone != null)
                    hashCode = hashCode * 59 + Phone.GetHashCode();
                    if (Contact != null)
                    hashCode = hashCode * 59 + Contact.GetHashCode();
                    
                    hashCode = hashCode * 59 + HasInventory.GetHashCode();
                    
                    hashCode = hashCode * 59 + SquareValue.GetHashCode();
                    if (SquareMeasure != null)
                    hashCode = hashCode * 59 + SquareMeasure.GetHashCode();
                    
                    hashCode = hashCode * 59 + TimeZoneInfoId.GetHashCode();
                    if (TimeZoneShortDescription != null)
                    hashCode = hashCode * 59 + TimeZoneShortDescription.GetHashCode();
                    if (TimeZoneMsName != null)
                    hashCode = hashCode * 59 + TimeZoneMsName.GetHashCode();
                    if (TimeZoneIanaName != null)
                    hashCode = hashCode * 59 + TimeZoneIanaName.GetHashCode();
                    if (TypeLabel != null)
                    hashCode = hashCode * 59 + TypeLabel.GetHashCode();
                    if (Supplier != null)
                    hashCode = hashCode * 59 + Supplier.GetHashCode();
                    
                    hashCode = hashCode * 59 + CountyId.GetHashCode();
                    if (Notes != null)
                    hashCode = hashCode * 59 + Notes.GetHashCode();
                    
                    hashCode = hashCode * 59 + TimeShiftToEST.GetHashCode();
                    
                    hashCode = hashCode * 59 + AddressTypeId.GetHashCode();
                    if (FormattedAddress != null)
                    hashCode = hashCode * 59 + FormattedAddress.GetHashCode();
                    if (LocationFormattedAddressTail != null)
                    hashCode = hashCode * 59 + LocationFormattedAddressTail.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(SCServiceChannelServicesMessagingLocationLocationWithTimezoneName left, SCServiceChannelServicesMessagingLocationLocationWithTimezoneName right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(SCServiceChannelServicesMessagingLocationLocationWithTimezoneName left, SCServiceChannelServicesMessagingLocationLocationWithTimezoneName right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}
