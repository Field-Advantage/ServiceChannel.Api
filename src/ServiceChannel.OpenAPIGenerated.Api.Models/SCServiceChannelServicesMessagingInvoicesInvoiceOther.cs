/*
 * ServiceChannel API - v.3
 *
 * The ServiceChannel API is a RESTful and stateless API. It accepts standard HTTP verbs and supports OAuth 2.0 for authorizing requests.      Our API returns common HTTP status codes as well as JSON encapsulated data.      See [API Overview](https://developer.servicechannel.com/basics/introduction/overview/) for the intro to ServiceChannel API.<br>      <h3>Authentication and Authorization</h3>You should have a ServiceChannel account, register your application, and obtain `access_token` to integrate with our API.      See [Authentication and Authorization](https://developer.servicechannel.com/basics/general/authentication/) for more information.      To use this API playground, click **Authorize** and sign in to ServiceChannel.<br>      <h3>Environment</h3> All calls in this API Reference point to the **SB2 environment**.      See [Environments](https://developer.servicechannel.com/basics/general/environments/) for more information.<br>      <h3>API Version</h3>The current stable version of the ServiceChannel API is `v3`. In the request URL, `v3` is a version prefix that should be present.      When you omit the version prefix, calls point to the minimum supported version of the API.      We recommend you to always specify the API version to avoid possible errors.
 *
 * The version of the OpenAPI document: 3
 * 
 * Generated by: https://openapi-generator.tech
 */

using System;
using System.Linq;
using System.Text;
using System.Collections.Generic;
using System.ComponentModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using System.Text.Json;
using ServiceChannel.OpenAPIGenerated.Api.Converters;

namespace ServiceChannel.OpenAPIGenerated.Api.Models
{ 
    /// <summary>
    /// The invoices material
    /// </summary>
    [DataContract]
    public class SCServiceChannelServicesMessagingInvoicesInvoiceOther : IEquatable<SCServiceChannelServicesMessagingInvoicesInvoiceOther>
    {
        /// <summary>
        /// Gets or Sets Id
        /// </summary>
        [DataMember(Name="Id", EmitDefaultValue=true)]
        public int Id { get; set; }

        /// <summary>
        /// Invoice identifier.
        /// </summary>
        /// <value>Invoice identifier.</value>
        [DataMember(Name="InvoiceId", EmitDefaultValue=true)]
        public int InvoiceId { get; set; }

        /// <summary>
        /// Get or set description.
        /// </summary>
        /// <value>Get or set description.</value>
        [DataMember(Name="Description", EmitDefaultValue=false)]
        public string Description { get; set; }

        /// <summary>
        /// Get or set type of charge.
        /// </summary>
        /// <value>Get or set type of charge.</value>
        [DataMember(Name="Type", EmitDefaultValue=false)]
        public string Type { get; set; }

        /// <summary>
        /// Get or set the amount of money that is charged.
        /// </summary>
        /// <value>Get or set the amount of money that is charged.</value>
        [DataMember(Name="Amount", EmitDefaultValue=true)]
        public double Amount { get; set; }

        /// <summary>
        /// Get or set the unit of measure
        /// </summary>
        /// <value>Get or set the unit of measure</value>
        [RegularExpression("^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$")]
        [DataMember(Name="UnitType", EmitDefaultValue=false)]
        public byte[] UnitType { get; set; }

        /// <summary>
        /// Get or set the price of unit
        /// </summary>
        /// <value>Get or set the price of unit</value>
        [DataMember(Name="UnitPrice", EmitDefaultValue=true)]
        public double UnitPrice { get; set; }

        /// <summary>
        /// Get or set the quantity
        /// </summary>
        /// <value>Get or set the quantity</value>
        [DataMember(Name="Quantity", EmitDefaultValue=true)]
        public double Quantity { get; set; }

        /// <summary>
        /// Get or set the AgreedUnitPrice
        /// </summary>
        /// <value>Get or set the AgreedUnitPrice</value>
        [DataMember(Name="AgreedUnitPrice", EmitDefaultValue=true)]
        public double AgreedUnitPrice { get; set; }

        /// <summary>
        /// UnitPriceDiscrepancyReason
        /// </summary>
        /// <value>UnitPriceDiscrepancyReason</value>
        [DataMember(Name="UnitPriceDiscrepancyReason", EmitDefaultValue=false)]
        public string UnitPriceDiscrepancyReason { get; set; }

        /// <summary>
        /// Get or set the PriceListOtherChargeId
        /// </summary>
        /// <value>Get or set the PriceListOtherChargeId</value>
        [DataMember(Name="PriceListOtherChargeId", EmitDefaultValue=true)]
        public int PriceListOtherChargeId { get; set; }

        /// <summary>
        /// Get IsUnitPriceDiscrepancy
        /// </summary>
        /// <value>Get IsUnitPriceDiscrepancy</value>
        [DataMember(Name="IsUnitPriceDiscrepancy", EmitDefaultValue=true)]
        public bool IsUnitPriceDiscrepancy { get; set; } = false;

        /// <summary>
        /// Gets or Sets ApprovalCodeGroup
        /// </summary>
        [DataMember(Name="ApprovalCodeGroup", EmitDefaultValue=false)]
        public SCServiceChannelServicesMessagingInvoicesInvoiceApprovalCodeGroup ApprovalCodeGroup { get; set; }

        /// <summary>
        /// Gets or Sets IsNontaxableVATEU
        /// </summary>
        [DataMember(Name="isNontaxableVATEU", EmitDefaultValue=true)]
        public bool IsNontaxableVATEU { get; set; } = false;

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class SCServiceChannelServicesMessagingInvoicesInvoiceOther {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  InvoiceId: ").Append(InvoiceId).Append("\n");
            sb.Append("  Description: ").Append(Description).Append("\n");
            sb.Append("  Type: ").Append(Type).Append("\n");
            sb.Append("  Amount: ").Append(Amount).Append("\n");
            sb.Append("  UnitType: ").Append(UnitType).Append("\n");
            sb.Append("  UnitPrice: ").Append(UnitPrice).Append("\n");
            sb.Append("  Quantity: ").Append(Quantity).Append("\n");
            sb.Append("  AgreedUnitPrice: ").Append(AgreedUnitPrice).Append("\n");
            sb.Append("  UnitPriceDiscrepancyReason: ").Append(UnitPriceDiscrepancyReason).Append("\n");
            sb.Append("  PriceListOtherChargeId: ").Append(PriceListOtherChargeId).Append("\n");
            sb.Append("  IsUnitPriceDiscrepancy: ").Append(IsUnitPriceDiscrepancy).Append("\n");
            sb.Append("  ApprovalCodeGroup: ").Append(ApprovalCodeGroup).Append("\n");
            sb.Append("  IsNontaxableVATEU: ").Append(IsNontaxableVATEU).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            var options = new JsonSerializerOptions
            {
                WriteIndented = true
            };

            return JsonSerializer.Serialize(this, options);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (obj is null) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((SCServiceChannelServicesMessagingInvoicesInvoiceOther)obj);
        }

        /// <summary>
        /// Returns true if SCServiceChannelServicesMessagingInvoicesInvoiceOther instances are equal
        /// </summary>
        /// <param name="other">Instance of SCServiceChannelServicesMessagingInvoicesInvoiceOther to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(SCServiceChannelServicesMessagingInvoicesInvoiceOther other)
        {
            if (other is null) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    Id == other.Id ||
                    
                    Id.Equals(other.Id)
                ) && 
                (
                    InvoiceId == other.InvoiceId ||
                    
                    InvoiceId.Equals(other.InvoiceId)
                ) && 
                (
                    Description == other.Description ||
                    Description != null &&
                    Description.Equals(other.Description)
                ) && 
                (
                    Type == other.Type ||
                    Type != null &&
                    Type.Equals(other.Type)
                ) && 
                (
                    Amount == other.Amount ||
                    
                    Amount.Equals(other.Amount)
                ) && 
                (
                    UnitType == other.UnitType ||
                    UnitType != null &&
                    UnitType.Equals(other.UnitType)
                ) && 
                (
                    UnitPrice == other.UnitPrice ||
                    
                    UnitPrice.Equals(other.UnitPrice)
                ) && 
                (
                    Quantity == other.Quantity ||
                    
                    Quantity.Equals(other.Quantity)
                ) && 
                (
                    AgreedUnitPrice == other.AgreedUnitPrice ||
                    
                    AgreedUnitPrice.Equals(other.AgreedUnitPrice)
                ) && 
                (
                    UnitPriceDiscrepancyReason == other.UnitPriceDiscrepancyReason ||
                    UnitPriceDiscrepancyReason != null &&
                    UnitPriceDiscrepancyReason.Equals(other.UnitPriceDiscrepancyReason)
                ) && 
                (
                    PriceListOtherChargeId == other.PriceListOtherChargeId ||
                    
                    PriceListOtherChargeId.Equals(other.PriceListOtherChargeId)
                ) && 
                (
                    IsUnitPriceDiscrepancy == other.IsUnitPriceDiscrepancy ||
                    
                    IsUnitPriceDiscrepancy.Equals(other.IsUnitPriceDiscrepancy)
                ) && 
                (
                    ApprovalCodeGroup == other.ApprovalCodeGroup ||
                    ApprovalCodeGroup != null &&
                    ApprovalCodeGroup.Equals(other.ApprovalCodeGroup)
                ) && 
                (
                    IsNontaxableVATEU == other.IsNontaxableVATEU ||
                    
                    IsNontaxableVATEU.Equals(other.IsNontaxableVATEU)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    
                    hashCode = hashCode * 59 + Id.GetHashCode();
                    
                    hashCode = hashCode * 59 + InvoiceId.GetHashCode();
                    if (Description != null)
                    hashCode = hashCode * 59 + Description.GetHashCode();
                    if (Type != null)
                    hashCode = hashCode * 59 + Type.GetHashCode();
                    
                    hashCode = hashCode * 59 + Amount.GetHashCode();
                    if (UnitType != null)
                    hashCode = hashCode * 59 + UnitType.GetHashCode();
                    
                    hashCode = hashCode * 59 + UnitPrice.GetHashCode();
                    
                    hashCode = hashCode * 59 + Quantity.GetHashCode();
                    
                    hashCode = hashCode * 59 + AgreedUnitPrice.GetHashCode();
                    if (UnitPriceDiscrepancyReason != null)
                    hashCode = hashCode * 59 + UnitPriceDiscrepancyReason.GetHashCode();
                    
                    hashCode = hashCode * 59 + PriceListOtherChargeId.GetHashCode();
                    
                    hashCode = hashCode * 59 + IsUnitPriceDiscrepancy.GetHashCode();
                    if (ApprovalCodeGroup != null)
                    hashCode = hashCode * 59 + ApprovalCodeGroup.GetHashCode();
                    
                    hashCode = hashCode * 59 + IsNontaxableVATEU.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(SCServiceChannelServicesMessagingInvoicesInvoiceOther left, SCServiceChannelServicesMessagingInvoicesInvoiceOther right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(SCServiceChannelServicesMessagingInvoicesInvoiceOther left, SCServiceChannelServicesMessagingInvoicesInvoiceOther right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}
