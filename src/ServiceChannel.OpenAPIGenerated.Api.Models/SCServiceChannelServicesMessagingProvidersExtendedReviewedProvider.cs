/*
 * ServiceChannel API - v.3
 *
 * The ServiceChannel API is a RESTful and stateless API. It accepts standard HTTP verbs and supports OAuth 2.0 for authorizing requests.      Our API returns common HTTP status codes as well as JSON encapsulated data.      See [API Overview](https://developer.servicechannel.com/basics/introduction/overview/) for the intro to ServiceChannel API.<br>      <h3>Authentication and Authorization</h3>You should have a ServiceChannel account, register your application, and obtain `access_token` to integrate with our API.      See [Authentication and Authorization](https://developer.servicechannel.com/basics/general/authentication/) for more information.      To use this API playground, click **Authorize** and sign in to ServiceChannel.<br>      <h3>Environment</h3> All calls in this API Reference point to the **SB2 environment**.      See [Environments](https://developer.servicechannel.com/basics/general/environments/) for more information.<br>      <h3>API Version</h3>The current stable version of the ServiceChannel API is `v3`. In the request URL, `v3` is a version prefix that should be present.      When you omit the version prefix, calls point to the minimum supported version of the API.      We recommend you to always specify the API version to avoid possible errors.
 *
 * The version of the OpenAPI document: 3
 * 
 * Generated by: https://openapi-generator.tech
 */

using System;
using System.Linq;
using System.Text;
using System.Collections.Generic;
using System.ComponentModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using System.Text.Json;
using ServiceChannel.OpenAPIGenerated.Api.Converters;

namespace ServiceChannel.OpenAPIGenerated.Api.Models
{ 
    /// <summary>
    /// A provider entity with common reviews information
    /// </summary>
    [DataContract]
    public class SCServiceChannelServicesMessagingProvidersExtendedReviewedProvider : IEquatable<SCServiceChannelServicesMessagingProvidersExtendedReviewedProvider>
    {
        /// <summary>
        /// Gets or Sets ReviewsInfo
        /// </summary>
        [DataMember(Name="ReviewsInfo", EmitDefaultValue=false)]
        public SCServiceChannelServicesMessagingFeedbackReviewsInfo ReviewsInfo { get; set; }

        /// <summary>
        /// Gets or Sets MyProviderReview
        /// </summary>
        [DataMember(Name="MyProviderReview", EmitDefaultValue=false)]
        public SCServiceChannelServicesMessagingFeedbackUserReview MyProviderReview { get; set; }

        /// <summary>
        /// Whether the provider has any reviews with current user
        /// </summary>
        /// <value>Whether the provider has any reviews with current user</value>
        [DataMember(Name="AnyMyReviews", EmitDefaultValue=true)]
        public bool AnyMyReviews { get; set; } = false;

        /// <summary>
        /// Trades which the provider serves for the current subscriber.
        /// </summary>
        /// <value>Trades which the provider serves for the current subscriber.</value>
        [DataMember(Name="Trades", EmitDefaultValue=false)]
        public List<string> Trades { get; set; }

        /// <summary>
        /// Gets or Sets Phone
        /// </summary>
        [DataMember(Name="Phone", EmitDefaultValue=false)]
        public string Phone { get; set; }

        /// <summary>
        /// Full Name
        /// </summary>
        /// <value>Full Name</value>
        [DataMember(Name="FullName", EmitDefaultValue=false)]
        public string FullName { get; set; }

        /// <summary>
        /// Address1
        /// </summary>
        /// <value>Address1</value>
        [DataMember(Name="Address1", EmitDefaultValue=false)]
        public string Address1 { get; set; }

        /// <summary>
        /// Adress2
        /// </summary>
        /// <value>Adress2</value>
        [DataMember(Name="Address2", EmitDefaultValue=false)]
        public string Address2 { get; set; }

        /// <summary>
        /// City
        /// </summary>
        /// <value>City</value>
        [DataMember(Name="City", EmitDefaultValue=false)]
        public string City { get; set; }

        /// <summary>
        /// State
        /// </summary>
        /// <value>State</value>
        [DataMember(Name="State", EmitDefaultValue=false)]
        public string State { get; set; }

        /// <summary>
        /// Zip
        /// </summary>
        /// <value>Zip</value>
        [DataMember(Name="Zip", EmitDefaultValue=false)]
        public string Zip { get; set; }

        /// <summary>
        /// Country
        /// </summary>
        /// <value>Country</value>
        [DataMember(Name="Country", EmitDefaultValue=false)]
        public string Country { get; set; }

        /// <summary>
        /// Main Contact
        /// </summary>
        /// <value>Main Contact</value>
        [DataMember(Name="MainContact", EmitDefaultValue=false)]
        public string MainContact { get; set; }

        /// <summary>
        /// Date Created
        /// </summary>
        /// <value>Date Created</value>
        [DataMember(Name="DateCreated", EmitDefaultValue=false)]
        public DateTime DateCreated { get; set; }

        /// <summary>
        /// Last User Date
        /// </summary>
        /// <value>Last User Date</value>
        [DataMember(Name="LastUserDate", EmitDefaultValue=false)]
        public string LastUserDate { get; set; }

        /// <summary>
        /// SuperUser
        /// </summary>
        /// <value>SuperUser</value>
        [DataMember(Name="SuperUser", EmitDefaultValue=false)]
        public string SuperUser { get; set; }

        /// <summary>
        /// WebSite
        /// </summary>
        /// <value>WebSite</value>
        [DataMember(Name="WebSite", EmitDefaultValue=false)]
        public string WebSite { get; set; }

        /// <summary>
        /// Email
        /// </summary>
        /// <value>Email</value>
        [DataMember(Name="Email", EmitDefaultValue=false)]
        public string Email { get; set; }

        /// <summary>
        /// Tax Id
        /// </summary>
        /// <value>Tax Id</value>
        [DataMember(Name="TaxId", EmitDefaultValue=false)]
        public string TaxId { get; set; }

        /// <summary>
        /// Trade
        /// </summary>
        /// <value>Trade</value>
        [DataMember(Name="Trade", EmitDefaultValue=false)]
        public string Trade { get; set; }

        /// <summary>
        /// Processing Email
        /// </summary>
        /// <value>Processing Email</value>
        [DataMember(Name="ProcessingEmail", EmitDefaultValue=false)]
        public string ProcessingEmail { get; set; }

        /// <summary>
        /// Fax Number
        /// </summary>
        /// <value>Fax Number</value>
        [DataMember(Name="FaxNumber", EmitDefaultValue=false)]
        public string FaxNumber { get; set; }

        /// <summary>
        /// Suite Floor
        /// </summary>
        /// <value>Suite Floor</value>
        [DataMember(Name="SuiteFloor", EmitDefaultValue=false)]
        public string SuiteFloor { get; set; }

        /// <summary>
        /// Mail Info
        /// </summary>
        /// <value>Mail Info</value>
        [DataMember(Name="MailInfo", EmitDefaultValue=false)]
        public string MailInfo { get; set; }

        /// <summary>
        /// Image File
        /// </summary>
        /// <value>Image File</value>
        [DataMember(Name="ImageFile", EmitDefaultValue=false)]
        public string ImageFile { get; set; }

        /// <summary>
        /// Return Mail
        /// </summary>
        /// <value>Return Mail</value>
        [DataMember(Name="ReturnMail", EmitDefaultValue=false)]
        public string ReturnMail { get; set; }

        /// <summary>
        /// Mail Frequency
        /// </summary>
        /// <value>Mail Frequency</value>
        [DataMember(Name="MailFrequency", EmitDefaultValue=true)]
        public int MailFrequency { get; set; }

        /// <summary>
        /// Form Id
        /// </summary>
        /// <value>Form Id</value>
        [DataMember(Name="FormId", EmitDefaultValue=true)]
        public int FormId { get; set; }

        /// <summary>
        /// Pager
        /// </summary>
        /// <value>Pager</value>
        [DataMember(Name="Pager", EmitDefaultValue=false)]
        public string Pager { get; set; }

        /// <summary>
        /// NightRequest
        /// </summary>
        /// <value>NightRequest</value>
        [DataMember(Name="NightRequest", EmitDefaultValue=true)]
        public int NightRequest { get; set; }

        /// <summary>
        /// Short Format Email
        /// </summary>
        /// <value>Short Format Email</value>
        [DataMember(Name="ShortFormatEmail", EmitDefaultValue=false)]
        public string ShortFormatEmail { get; set; }

        /// <summary>
        /// Last Training Date
        /// </summary>
        /// <value>Last Training Date</value>
        [DataMember(Name="LastTrainingDate", EmitDefaultValue=false)]
        public DateTime LastTrainingDate { get; set; }

        /// <summary>
        /// Last Training Date as a string
        /// </summary>
        /// <value>Last Training Date as a string</value>
        [DataMember(Name="LastTrainingDateStr", EmitDefaultValue=false)]
        public string LastTrainingDateStr { get; set; }

        /// <summary>
        /// Is Internal
        /// </summary>
        /// <value>Is Internal</value>
        [DataMember(Name="IsInternal", EmitDefaultValue=true)]
        public bool IsInternal { get; set; } = false;

        /// <summary>
        /// Is OnOffShoreFeature Enabled
        /// </summary>
        /// <value>Is OnOffShoreFeature Enabled</value>
        [DataMember(Name="IsOnOffShoreFeatureEnabled", EmitDefaultValue=true)]
        public bool IsOnOffShoreFeatureEnabled { get; set; } = false;

        /// <summary>
        /// Id
        /// </summary>
        /// <value>Id</value>
        [DataMember(Name="Id", EmitDefaultValue=true)]
        public int Id { get; set; }

        /// <summary>
        /// Name
        /// </summary>
        /// <value>Name</value>
        [DataMember(Name="Name", EmitDefaultValue=false)]
        public string Name { get; set; }

        /// <summary>
        /// DoNotDispatch enabled?
        /// </summary>
        /// <value>DoNotDispatch enabled?</value>
        [DataMember(Name="DoNotDispatch", EmitDefaultValue=true)]
        public bool DoNotDispatch { get; set; } = false;

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class SCServiceChannelServicesMessagingProvidersExtendedReviewedProvider {\n");
            sb.Append("  ReviewsInfo: ").Append(ReviewsInfo).Append("\n");
            sb.Append("  MyProviderReview: ").Append(MyProviderReview).Append("\n");
            sb.Append("  AnyMyReviews: ").Append(AnyMyReviews).Append("\n");
            sb.Append("  Trades: ").Append(Trades).Append("\n");
            sb.Append("  Phone: ").Append(Phone).Append("\n");
            sb.Append("  FullName: ").Append(FullName).Append("\n");
            sb.Append("  Address1: ").Append(Address1).Append("\n");
            sb.Append("  Address2: ").Append(Address2).Append("\n");
            sb.Append("  City: ").Append(City).Append("\n");
            sb.Append("  State: ").Append(State).Append("\n");
            sb.Append("  Zip: ").Append(Zip).Append("\n");
            sb.Append("  Country: ").Append(Country).Append("\n");
            sb.Append("  MainContact: ").Append(MainContact).Append("\n");
            sb.Append("  DateCreated: ").Append(DateCreated).Append("\n");
            sb.Append("  LastUserDate: ").Append(LastUserDate).Append("\n");
            sb.Append("  SuperUser: ").Append(SuperUser).Append("\n");
            sb.Append("  WebSite: ").Append(WebSite).Append("\n");
            sb.Append("  Email: ").Append(Email).Append("\n");
            sb.Append("  TaxId: ").Append(TaxId).Append("\n");
            sb.Append("  Trade: ").Append(Trade).Append("\n");
            sb.Append("  ProcessingEmail: ").Append(ProcessingEmail).Append("\n");
            sb.Append("  FaxNumber: ").Append(FaxNumber).Append("\n");
            sb.Append("  SuiteFloor: ").Append(SuiteFloor).Append("\n");
            sb.Append("  MailInfo: ").Append(MailInfo).Append("\n");
            sb.Append("  ImageFile: ").Append(ImageFile).Append("\n");
            sb.Append("  ReturnMail: ").Append(ReturnMail).Append("\n");
            sb.Append("  MailFrequency: ").Append(MailFrequency).Append("\n");
            sb.Append("  FormId: ").Append(FormId).Append("\n");
            sb.Append("  Pager: ").Append(Pager).Append("\n");
            sb.Append("  NightRequest: ").Append(NightRequest).Append("\n");
            sb.Append("  ShortFormatEmail: ").Append(ShortFormatEmail).Append("\n");
            sb.Append("  LastTrainingDate: ").Append(LastTrainingDate).Append("\n");
            sb.Append("  LastTrainingDateStr: ").Append(LastTrainingDateStr).Append("\n");
            sb.Append("  IsInternal: ").Append(IsInternal).Append("\n");
            sb.Append("  IsOnOffShoreFeatureEnabled: ").Append(IsOnOffShoreFeatureEnabled).Append("\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  DoNotDispatch: ").Append(DoNotDispatch).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            var options = new JsonSerializerOptions
            {
                WriteIndented = true
            };

            return JsonSerializer.Serialize(this, options);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (obj is null) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((SCServiceChannelServicesMessagingProvidersExtendedReviewedProvider)obj);
        }

        /// <summary>
        /// Returns true if SCServiceChannelServicesMessagingProvidersExtendedReviewedProvider instances are equal
        /// </summary>
        /// <param name="other">Instance of SCServiceChannelServicesMessagingProvidersExtendedReviewedProvider to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(SCServiceChannelServicesMessagingProvidersExtendedReviewedProvider other)
        {
            if (other is null) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    ReviewsInfo == other.ReviewsInfo ||
                    ReviewsInfo != null &&
                    ReviewsInfo.Equals(other.ReviewsInfo)
                ) && 
                (
                    MyProviderReview == other.MyProviderReview ||
                    MyProviderReview != null &&
                    MyProviderReview.Equals(other.MyProviderReview)
                ) && 
                (
                    AnyMyReviews == other.AnyMyReviews ||
                    
                    AnyMyReviews.Equals(other.AnyMyReviews)
                ) && 
                (
                    Trades == other.Trades ||
                    Trades != null &&
                    other.Trades != null &&
                    Trades.SequenceEqual(other.Trades)
                ) && 
                (
                    Phone == other.Phone ||
                    Phone != null &&
                    Phone.Equals(other.Phone)
                ) && 
                (
                    FullName == other.FullName ||
                    FullName != null &&
                    FullName.Equals(other.FullName)
                ) && 
                (
                    Address1 == other.Address1 ||
                    Address1 != null &&
                    Address1.Equals(other.Address1)
                ) && 
                (
                    Address2 == other.Address2 ||
                    Address2 != null &&
                    Address2.Equals(other.Address2)
                ) && 
                (
                    City == other.City ||
                    City != null &&
                    City.Equals(other.City)
                ) && 
                (
                    State == other.State ||
                    State != null &&
                    State.Equals(other.State)
                ) && 
                (
                    Zip == other.Zip ||
                    Zip != null &&
                    Zip.Equals(other.Zip)
                ) && 
                (
                    Country == other.Country ||
                    Country != null &&
                    Country.Equals(other.Country)
                ) && 
                (
                    MainContact == other.MainContact ||
                    MainContact != null &&
                    MainContact.Equals(other.MainContact)
                ) && 
                (
                    DateCreated == other.DateCreated ||
                    DateCreated != null &&
                    DateCreated.Equals(other.DateCreated)
                ) && 
                (
                    LastUserDate == other.LastUserDate ||
                    LastUserDate != null &&
                    LastUserDate.Equals(other.LastUserDate)
                ) && 
                (
                    SuperUser == other.SuperUser ||
                    SuperUser != null &&
                    SuperUser.Equals(other.SuperUser)
                ) && 
                (
                    WebSite == other.WebSite ||
                    WebSite != null &&
                    WebSite.Equals(other.WebSite)
                ) && 
                (
                    Email == other.Email ||
                    Email != null &&
                    Email.Equals(other.Email)
                ) && 
                (
                    TaxId == other.TaxId ||
                    TaxId != null &&
                    TaxId.Equals(other.TaxId)
                ) && 
                (
                    Trade == other.Trade ||
                    Trade != null &&
                    Trade.Equals(other.Trade)
                ) && 
                (
                    ProcessingEmail == other.ProcessingEmail ||
                    ProcessingEmail != null &&
                    ProcessingEmail.Equals(other.ProcessingEmail)
                ) && 
                (
                    FaxNumber == other.FaxNumber ||
                    FaxNumber != null &&
                    FaxNumber.Equals(other.FaxNumber)
                ) && 
                (
                    SuiteFloor == other.SuiteFloor ||
                    SuiteFloor != null &&
                    SuiteFloor.Equals(other.SuiteFloor)
                ) && 
                (
                    MailInfo == other.MailInfo ||
                    MailInfo != null &&
                    MailInfo.Equals(other.MailInfo)
                ) && 
                (
                    ImageFile == other.ImageFile ||
                    ImageFile != null &&
                    ImageFile.Equals(other.ImageFile)
                ) && 
                (
                    ReturnMail == other.ReturnMail ||
                    ReturnMail != null &&
                    ReturnMail.Equals(other.ReturnMail)
                ) && 
                (
                    MailFrequency == other.MailFrequency ||
                    
                    MailFrequency.Equals(other.MailFrequency)
                ) && 
                (
                    FormId == other.FormId ||
                    
                    FormId.Equals(other.FormId)
                ) && 
                (
                    Pager == other.Pager ||
                    Pager != null &&
                    Pager.Equals(other.Pager)
                ) && 
                (
                    NightRequest == other.NightRequest ||
                    
                    NightRequest.Equals(other.NightRequest)
                ) && 
                (
                    ShortFormatEmail == other.ShortFormatEmail ||
                    ShortFormatEmail != null &&
                    ShortFormatEmail.Equals(other.ShortFormatEmail)
                ) && 
                (
                    LastTrainingDate == other.LastTrainingDate ||
                    LastTrainingDate != null &&
                    LastTrainingDate.Equals(other.LastTrainingDate)
                ) && 
                (
                    LastTrainingDateStr == other.LastTrainingDateStr ||
                    LastTrainingDateStr != null &&
                    LastTrainingDateStr.Equals(other.LastTrainingDateStr)
                ) && 
                (
                    IsInternal == other.IsInternal ||
                    
                    IsInternal.Equals(other.IsInternal)
                ) && 
                (
                    IsOnOffShoreFeatureEnabled == other.IsOnOffShoreFeatureEnabled ||
                    
                    IsOnOffShoreFeatureEnabled.Equals(other.IsOnOffShoreFeatureEnabled)
                ) && 
                (
                    Id == other.Id ||
                    
                    Id.Equals(other.Id)
                ) && 
                (
                    Name == other.Name ||
                    Name != null &&
                    Name.Equals(other.Name)
                ) && 
                (
                    DoNotDispatch == other.DoNotDispatch ||
                    
                    DoNotDispatch.Equals(other.DoNotDispatch)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    if (ReviewsInfo != null)
                    hashCode = hashCode * 59 + ReviewsInfo.GetHashCode();
                    if (MyProviderReview != null)
                    hashCode = hashCode * 59 + MyProviderReview.GetHashCode();
                    
                    hashCode = hashCode * 59 + AnyMyReviews.GetHashCode();
                    if (Trades != null)
                    hashCode = hashCode * 59 + Trades.GetHashCode();
                    if (Phone != null)
                    hashCode = hashCode * 59 + Phone.GetHashCode();
                    if (FullName != null)
                    hashCode = hashCode * 59 + FullName.GetHashCode();
                    if (Address1 != null)
                    hashCode = hashCode * 59 + Address1.GetHashCode();
                    if (Address2 != null)
                    hashCode = hashCode * 59 + Address2.GetHashCode();
                    if (City != null)
                    hashCode = hashCode * 59 + City.GetHashCode();
                    if (State != null)
                    hashCode = hashCode * 59 + State.GetHashCode();
                    if (Zip != null)
                    hashCode = hashCode * 59 + Zip.GetHashCode();
                    if (Country != null)
                    hashCode = hashCode * 59 + Country.GetHashCode();
                    if (MainContact != null)
                    hashCode = hashCode * 59 + MainContact.GetHashCode();
                    if (DateCreated != null)
                    hashCode = hashCode * 59 + DateCreated.GetHashCode();
                    if (LastUserDate != null)
                    hashCode = hashCode * 59 + LastUserDate.GetHashCode();
                    if (SuperUser != null)
                    hashCode = hashCode * 59 + SuperUser.GetHashCode();
                    if (WebSite != null)
                    hashCode = hashCode * 59 + WebSite.GetHashCode();
                    if (Email != null)
                    hashCode = hashCode * 59 + Email.GetHashCode();
                    if (TaxId != null)
                    hashCode = hashCode * 59 + TaxId.GetHashCode();
                    if (Trade != null)
                    hashCode = hashCode * 59 + Trade.GetHashCode();
                    if (ProcessingEmail != null)
                    hashCode = hashCode * 59 + ProcessingEmail.GetHashCode();
                    if (FaxNumber != null)
                    hashCode = hashCode * 59 + FaxNumber.GetHashCode();
                    if (SuiteFloor != null)
                    hashCode = hashCode * 59 + SuiteFloor.GetHashCode();
                    if (MailInfo != null)
                    hashCode = hashCode * 59 + MailInfo.GetHashCode();
                    if (ImageFile != null)
                    hashCode = hashCode * 59 + ImageFile.GetHashCode();
                    if (ReturnMail != null)
                    hashCode = hashCode * 59 + ReturnMail.GetHashCode();
                    
                    hashCode = hashCode * 59 + MailFrequency.GetHashCode();
                    
                    hashCode = hashCode * 59 + FormId.GetHashCode();
                    if (Pager != null)
                    hashCode = hashCode * 59 + Pager.GetHashCode();
                    
                    hashCode = hashCode * 59 + NightRequest.GetHashCode();
                    if (ShortFormatEmail != null)
                    hashCode = hashCode * 59 + ShortFormatEmail.GetHashCode();
                    if (LastTrainingDate != null)
                    hashCode = hashCode * 59 + LastTrainingDate.GetHashCode();
                    if (LastTrainingDateStr != null)
                    hashCode = hashCode * 59 + LastTrainingDateStr.GetHashCode();
                    
                    hashCode = hashCode * 59 + IsInternal.GetHashCode();
                    
                    hashCode = hashCode * 59 + IsOnOffShoreFeatureEnabled.GetHashCode();
                    
                    hashCode = hashCode * 59 + Id.GetHashCode();
                    if (Name != null)
                    hashCode = hashCode * 59 + Name.GetHashCode();
                    
                    hashCode = hashCode * 59 + DoNotDispatch.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(SCServiceChannelServicesMessagingProvidersExtendedReviewedProvider left, SCServiceChannelServicesMessagingProvidersExtendedReviewedProvider right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(SCServiceChannelServicesMessagingProvidersExtendedReviewedProvider left, SCServiceChannelServicesMessagingProvidersExtendedReviewedProvider right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}
