/*
 * ServiceChannel API - v.3
 *
 * The ServiceChannel API is a RESTful and stateless API. It accepts standard HTTP verbs and supports OAuth 2.0 for authorizing requests.      Our API returns common HTTP status codes as well as JSON encapsulated data.      See [API Overview](https://developer.servicechannel.com/basics/introduction/overview/) for the intro to ServiceChannel API.<br>      <h3>Authentication and Authorization</h3>You should have a ServiceChannel account, register your application, and obtain `access_token` to integrate with our API.      See [Authentication and Authorization](https://developer.servicechannel.com/basics/general/authentication/) for more information.      To use this API playground, click **Authorize** and sign in to ServiceChannel.<br>      <h3>Environment</h3> All calls in this API Reference point to the **SB2 environment**.      See [Environments](https://developer.servicechannel.com/basics/general/environments/) for more information.<br>      <h3>API Version</h3>The current stable version of the ServiceChannel API is `v3`. In the request URL, `v3` is a version prefix that should be present.      When you omit the version prefix, calls point to the minimum supported version of the API.      We recommend you to always specify the API version to avoid possible errors.
 *
 * The version of the OpenAPI document: 3
 * 
 * Generated by: https://openapi-generator.tech
 */

using System;
using System.Linq;
using System.Text;
using System.Collections.Generic;
using System.ComponentModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using System.Text.Json;
using ServiceChannel.OpenAPIGenerated.Api.Converters;

namespace ServiceChannel.OpenAPIGenerated.Api.Models
{ 
    /// <summary>
    /// 
    /// </summary>
    [DataContract]
    public class SCAmazonRuntimeInternalErrorResponse : IEquatable<SCAmazonRuntimeInternalErrorResponse>
    {

        /// <summary>
        /// Gets or Sets Type
        /// </summary>
        
        public enum TypeEnum
        {
            
            /// <summary>
            /// Enum SenderEnum for Sender
            /// </summary>
            [EnumMember(Value = "Sender")]
            SenderEnum = 1,
            
            /// <summary>
            /// Enum ReceiverEnum for Receiver
            /// </summary>
            [EnumMember(Value = "Receiver")]
            ReceiverEnum = 2,
            
            /// <summary>
            /// Enum UnknownEnum for Unknown
            /// </summary>
            [EnumMember(Value = "Unknown")]
            UnknownEnum = 3
        }

        /// <summary>
        /// Gets or Sets Type
        /// </summary>
        [DataMember(Name="Type", EmitDefaultValue=true)]
        public TypeEnum Type { get; set; }

        /// <summary>
        /// Gets or Sets Code
        /// </summary>
        [DataMember(Name="Code", EmitDefaultValue=false)]
        public string Code { get; set; }

        /// <summary>
        /// Gets or Sets Message
        /// </summary>
        [DataMember(Name="Message", EmitDefaultValue=false)]
        public string Message { get; set; }

        /// <summary>
        /// Gets or Sets RequestId
        /// </summary>
        [DataMember(Name="RequestId", EmitDefaultValue=false)]
        public string RequestId { get; set; }

        /// <summary>
        /// Gets or Sets InnerException
        /// </summary>
        [DataMember(Name="InnerException", EmitDefaultValue=false)]
        public Object InnerException { get; set; }


        /// <summary>
        /// Gets or Sets StatusCode
        /// </summary>
        
        public enum StatusCodeEnum
        {
            
            /// <summary>
            /// Enum ContinueEnum for Continue
            /// </summary>
            [EnumMember(Value = "Continue")]
            ContinueEnum = 1,
            
            /// <summary>
            /// Enum SwitchingProtocolsEnum for SwitchingProtocols
            /// </summary>
            [EnumMember(Value = "SwitchingProtocols")]
            SwitchingProtocolsEnum = 2,
            
            /// <summary>
            /// Enum OKEnum for OK
            /// </summary>
            [EnumMember(Value = "OK")]
            OKEnum = 3,
            
            /// <summary>
            /// Enum CreatedEnum for Created
            /// </summary>
            [EnumMember(Value = "Created")]
            CreatedEnum = 4,
            
            /// <summary>
            /// Enum AcceptedEnum for Accepted
            /// </summary>
            [EnumMember(Value = "Accepted")]
            AcceptedEnum = 5,
            
            /// <summary>
            /// Enum NonAuthoritativeInformationEnum for NonAuthoritativeInformation
            /// </summary>
            [EnumMember(Value = "NonAuthoritativeInformation")]
            NonAuthoritativeInformationEnum = 6,
            
            /// <summary>
            /// Enum NoContentEnum for NoContent
            /// </summary>
            [EnumMember(Value = "NoContent")]
            NoContentEnum = 7,
            
            /// <summary>
            /// Enum ResetContentEnum for ResetContent
            /// </summary>
            [EnumMember(Value = "ResetContent")]
            ResetContentEnum = 8,
            
            /// <summary>
            /// Enum PartialContentEnum for PartialContent
            /// </summary>
            [EnumMember(Value = "PartialContent")]
            PartialContentEnum = 9,
            
            /// <summary>
            /// Enum MultipleChoicesEnum for MultipleChoices
            /// </summary>
            [EnumMember(Value = "MultipleChoices")]
            MultipleChoicesEnum = 10,
            
            /// <summary>
            /// Enum AmbiguousEnum for Ambiguous
            /// </summary>
            [EnumMember(Value = "Ambiguous")]
            AmbiguousEnum = 11,
            
            /// <summary>
            /// Enum MovedPermanentlyEnum for MovedPermanently
            /// </summary>
            [EnumMember(Value = "MovedPermanently")]
            MovedPermanentlyEnum = 12,
            
            /// <summary>
            /// Enum MovedEnum for Moved
            /// </summary>
            [EnumMember(Value = "Moved")]
            MovedEnum = 13,
            
            /// <summary>
            /// Enum FoundEnum for Found
            /// </summary>
            [EnumMember(Value = "Found")]
            FoundEnum = 14,
            
            /// <summary>
            /// Enum RedirectEnum for Redirect
            /// </summary>
            [EnumMember(Value = "Redirect")]
            RedirectEnum = 15,
            
            /// <summary>
            /// Enum SeeOtherEnum for SeeOther
            /// </summary>
            [EnumMember(Value = "SeeOther")]
            SeeOtherEnum = 16,
            
            /// <summary>
            /// Enum RedirectMethodEnum for RedirectMethod
            /// </summary>
            [EnumMember(Value = "RedirectMethod")]
            RedirectMethodEnum = 17,
            
            /// <summary>
            /// Enum NotModifiedEnum for NotModified
            /// </summary>
            [EnumMember(Value = "NotModified")]
            NotModifiedEnum = 18,
            
            /// <summary>
            /// Enum UseProxyEnum for UseProxy
            /// </summary>
            [EnumMember(Value = "UseProxy")]
            UseProxyEnum = 19,
            
            /// <summary>
            /// Enum UnusedEnum for Unused
            /// </summary>
            [EnumMember(Value = "Unused")]
            UnusedEnum = 20,
            
            /// <summary>
            /// Enum TemporaryRedirectEnum for TemporaryRedirect
            /// </summary>
            [EnumMember(Value = "TemporaryRedirect")]
            TemporaryRedirectEnum = 21,
            
            /// <summary>
            /// Enum RedirectKeepVerbEnum for RedirectKeepVerb
            /// </summary>
            [EnumMember(Value = "RedirectKeepVerb")]
            RedirectKeepVerbEnum = 22,
            
            /// <summary>
            /// Enum BadRequestEnum for BadRequest
            /// </summary>
            [EnumMember(Value = "BadRequest")]
            BadRequestEnum = 23,
            
            /// <summary>
            /// Enum UnauthorizedEnum for Unauthorized
            /// </summary>
            [EnumMember(Value = "Unauthorized")]
            UnauthorizedEnum = 24,
            
            /// <summary>
            /// Enum PaymentRequiredEnum for PaymentRequired
            /// </summary>
            [EnumMember(Value = "PaymentRequired")]
            PaymentRequiredEnum = 25,
            
            /// <summary>
            /// Enum ForbiddenEnum for Forbidden
            /// </summary>
            [EnumMember(Value = "Forbidden")]
            ForbiddenEnum = 26,
            
            /// <summary>
            /// Enum NotFoundEnum for NotFound
            /// </summary>
            [EnumMember(Value = "NotFound")]
            NotFoundEnum = 27,
            
            /// <summary>
            /// Enum MethodNotAllowedEnum for MethodNotAllowed
            /// </summary>
            [EnumMember(Value = "MethodNotAllowed")]
            MethodNotAllowedEnum = 28,
            
            /// <summary>
            /// Enum NotAcceptableEnum for NotAcceptable
            /// </summary>
            [EnumMember(Value = "NotAcceptable")]
            NotAcceptableEnum = 29,
            
            /// <summary>
            /// Enum ProxyAuthenticationRequiredEnum for ProxyAuthenticationRequired
            /// </summary>
            [EnumMember(Value = "ProxyAuthenticationRequired")]
            ProxyAuthenticationRequiredEnum = 30,
            
            /// <summary>
            /// Enum RequestTimeoutEnum for RequestTimeout
            /// </summary>
            [EnumMember(Value = "RequestTimeout")]
            RequestTimeoutEnum = 31,
            
            /// <summary>
            /// Enum ConflictEnum for Conflict
            /// </summary>
            [EnumMember(Value = "Conflict")]
            ConflictEnum = 32,
            
            /// <summary>
            /// Enum GoneEnum for Gone
            /// </summary>
            [EnumMember(Value = "Gone")]
            GoneEnum = 33,
            
            /// <summary>
            /// Enum LengthRequiredEnum for LengthRequired
            /// </summary>
            [EnumMember(Value = "LengthRequired")]
            LengthRequiredEnum = 34,
            
            /// <summary>
            /// Enum PreconditionFailedEnum for PreconditionFailed
            /// </summary>
            [EnumMember(Value = "PreconditionFailed")]
            PreconditionFailedEnum = 35,
            
            /// <summary>
            /// Enum RequestEntityTooLargeEnum for RequestEntityTooLarge
            /// </summary>
            [EnumMember(Value = "RequestEntityTooLarge")]
            RequestEntityTooLargeEnum = 36,
            
            /// <summary>
            /// Enum RequestUriTooLongEnum for RequestUriTooLong
            /// </summary>
            [EnumMember(Value = "RequestUriTooLong")]
            RequestUriTooLongEnum = 37,
            
            /// <summary>
            /// Enum UnsupportedMediaTypeEnum for UnsupportedMediaType
            /// </summary>
            [EnumMember(Value = "UnsupportedMediaType")]
            UnsupportedMediaTypeEnum = 38,
            
            /// <summary>
            /// Enum RequestedRangeNotSatisfiableEnum for RequestedRangeNotSatisfiable
            /// </summary>
            [EnumMember(Value = "RequestedRangeNotSatisfiable")]
            RequestedRangeNotSatisfiableEnum = 39,
            
            /// <summary>
            /// Enum ExpectationFailedEnum for ExpectationFailed
            /// </summary>
            [EnumMember(Value = "ExpectationFailed")]
            ExpectationFailedEnum = 40,
            
            /// <summary>
            /// Enum UpgradeRequiredEnum for UpgradeRequired
            /// </summary>
            [EnumMember(Value = "UpgradeRequired")]
            UpgradeRequiredEnum = 41,
            
            /// <summary>
            /// Enum InternalServerErrorEnum for InternalServerError
            /// </summary>
            [EnumMember(Value = "InternalServerError")]
            InternalServerErrorEnum = 42,
            
            /// <summary>
            /// Enum NotImplementedEnum for NotImplemented
            /// </summary>
            [EnumMember(Value = "NotImplemented")]
            NotImplementedEnum = 43,
            
            /// <summary>
            /// Enum BadGatewayEnum for BadGateway
            /// </summary>
            [EnumMember(Value = "BadGateway")]
            BadGatewayEnum = 44,
            
            /// <summary>
            /// Enum ServiceUnavailableEnum for ServiceUnavailable
            /// </summary>
            [EnumMember(Value = "ServiceUnavailable")]
            ServiceUnavailableEnum = 45,
            
            /// <summary>
            /// Enum GatewayTimeoutEnum for GatewayTimeout
            /// </summary>
            [EnumMember(Value = "GatewayTimeout")]
            GatewayTimeoutEnum = 46,
            
            /// <summary>
            /// Enum HttpVersionNotSupportedEnum for HttpVersionNotSupported
            /// </summary>
            [EnumMember(Value = "HttpVersionNotSupported")]
            HttpVersionNotSupportedEnum = 47
        }

        /// <summary>
        /// Gets or Sets StatusCode
        /// </summary>
        [DataMember(Name="StatusCode", EmitDefaultValue=true)]
        public StatusCodeEnum StatusCode { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class SCAmazonRuntimeInternalErrorResponse {\n");
            sb.Append("  Type: ").Append(Type).Append("\n");
            sb.Append("  Code: ").Append(Code).Append("\n");
            sb.Append("  Message: ").Append(Message).Append("\n");
            sb.Append("  RequestId: ").Append(RequestId).Append("\n");
            sb.Append("  InnerException: ").Append(InnerException).Append("\n");
            sb.Append("  StatusCode: ").Append(StatusCode).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            var options = new JsonSerializerOptions
            {
                WriteIndented = true
            };

            return JsonSerializer.Serialize(this, options);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (obj is null) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((SCAmazonRuntimeInternalErrorResponse)obj);
        }

        /// <summary>
        /// Returns true if SCAmazonRuntimeInternalErrorResponse instances are equal
        /// </summary>
        /// <param name="other">Instance of SCAmazonRuntimeInternalErrorResponse to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(SCAmazonRuntimeInternalErrorResponse other)
        {
            if (other is null) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    Type == other.Type ||
                    
                    Type.Equals(other.Type)
                ) && 
                (
                    Code == other.Code ||
                    Code != null &&
                    Code.Equals(other.Code)
                ) && 
                (
                    Message == other.Message ||
                    Message != null &&
                    Message.Equals(other.Message)
                ) && 
                (
                    RequestId == other.RequestId ||
                    RequestId != null &&
                    RequestId.Equals(other.RequestId)
                ) && 
                (
                    InnerException == other.InnerException ||
                    InnerException != null &&
                    InnerException.Equals(other.InnerException)
                ) && 
                (
                    StatusCode == other.StatusCode ||
                    
                    StatusCode.Equals(other.StatusCode)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    
                    hashCode = hashCode * 59 + Type.GetHashCode();
                    if (Code != null)
                    hashCode = hashCode * 59 + Code.GetHashCode();
                    if (Message != null)
                    hashCode = hashCode * 59 + Message.GetHashCode();
                    if (RequestId != null)
                    hashCode = hashCode * 59 + RequestId.GetHashCode();
                    if (InnerException != null)
                    hashCode = hashCode * 59 + InnerException.GetHashCode();
                    
                    hashCode = hashCode * 59 + StatusCode.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(SCAmazonRuntimeInternalErrorResponse left, SCAmazonRuntimeInternalErrorResponse right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(SCAmazonRuntimeInternalErrorResponse left, SCAmazonRuntimeInternalErrorResponse right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}
