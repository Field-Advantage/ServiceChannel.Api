/*
 * ServiceChannel API - v.3
 *
 * The ServiceChannel API is a RESTful and stateless API. It accepts standard HTTP verbs and supports OAuth 2.0 for authorizing requests.      Our API returns common HTTP status codes as well as JSON encapsulated data.      See [API Overview](https://developer.servicechannel.com/basics/introduction/overview/) for the intro to ServiceChannel API.<br>      <h3>Authentication and Authorization</h3>You should have a ServiceChannel account, register your application, and obtain `access_token` to integrate with our API.      See [Authentication and Authorization](https://developer.servicechannel.com/basics/general/authentication/) for more information.      To use this API playground, click **Authorize** and sign in to ServiceChannel.<br>      <h3>Environment</h3> All calls in this API Reference point to the **SB2 environment**.      See [Environments](https://developer.servicechannel.com/basics/general/environments/) for more information.<br>      <h3>API Version</h3>The current stable version of the ServiceChannel API is `v3`. In the request URL, `v3` is a version prefix that should be present.      When you omit the version prefix, calls point to the minimum supported version of the API.      We recommend you to always specify the API version to avoid possible errors.
 *
 * The version of the OpenAPI document: 3
 * 
 * Generated by: https://openapi-generator.tech
 */

using System;
using System.Linq;
using System.Text;
using System.Collections.Generic;
using System.ComponentModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using System.Text.Json;
using ServiceChannel.OpenAPIGenerated.Api.Converters;

namespace ServiceChannel.OpenAPIGenerated.Api.Models
{ 
    /// <summary>
    /// The request object to update a proposal status.
    /// </summary>
    [DataContract]
    public class SCServiceChannelServicesMessagingProposalsUpdateProposalStatusRequest : IEquatable<SCServiceChannelServicesMessagingProposalsUpdateProposalStatusRequest>
    {
        /// <summary>
        /// Comment on the proposal status update. The comment is added to the work order note.
        /// </summary>
        /// <value>Comment on the proposal status update. The comment is added to the work order note.</value>
        [DataMember(Name="Comment", EmitDefaultValue=false)]
        public string Comment { get; set; }

        /// <summary>
        /// Provider’s email address to which a notification about the proposal status change is sent. The default is the email address of the provider the proposal is assigned to.
        /// </summary>
        /// <value>Provider’s email address to which a notification about the proposal status change is sent. The default is the email address of the provider the proposal is assigned to.</value>
        [DataMember(Name="ProviderEmail", EmitDefaultValue=false)]
        public string ProviderEmail { get; set; }

        /// <summary>
        /// User’s email address to which a notification about the proposal status change is sent. The default is the email address of the current user.
        /// </summary>
        /// <value>User’s email address to which a notification about the proposal status change is sent. The default is the email address of the current user.</value>
        [DataMember(Name="UserEmail", EmitDefaultValue=false)]
        public string UserEmail { get; set; }

        /// <summary>
        /// Numeric identifier of the reason for rejecting the proposal.              Pass value to this parameter when sending the *PUT /proposals/{proposalId}/reject* request. To retrieve a list of rejection reason codes and their descriptions, use the *GET /proposals/RejectionReasons* method.
        /// </summary>
        /// <value>Numeric identifier of the reason for rejecting the proposal.              Pass value to this parameter when sending the *PUT /proposals/{proposalId}/reject* request. To retrieve a list of rejection reason codes and their descriptions, use the *GET /proposals/RejectionReasons* method.</value>
        [DataMember(Name="RejectReasonCodeId", EmitDefaultValue=true)]
        public int RejectReasonCodeId { get; set; }


        /// <summary>
        /// Gets or Sets ActionSource
        /// </summary>
        
        public enum ActionSourceEnum
        {
            
            /// <summary>
            /// Enum StandardEnum for Standard
            /// </summary>
            [EnumMember(Value = "Standard")]
            StandardEnum = 1,
            
            /// <summary>
            /// Enum DecisionEngineEnum for DecisionEngine
            /// </summary>
            [EnumMember(Value = "DecisionEngine")]
            DecisionEngineEnum = 2
        }

        /// <summary>
        /// Gets or Sets ActionSource
        /// </summary>
        [DataMember(Name="ActionSource", EmitDefaultValue=true)]
        public ActionSourceEnum ActionSource { get; set; }

        /// <summary>
        /// Reason for approving the proposal.              Pass value to this parameter when sending the *PUT /proposals/{proposalId}/approve* request. The entered reason is added to the work order note.
        /// </summary>
        /// <value>Reason for approving the proposal.              Pass value to this parameter when sending the *PUT /proposals/{proposalId}/approve* request. The entered reason is added to the work order note.</value>
        [DataMember(Name="ReasonString", EmitDefaultValue=false)]
        public string ReasonString { get; set; }

        /// <summary>
        /// The Actor is added to the work order note.
        /// </summary>
        /// <value>The Actor is added to the work order note.</value>
        [DataMember(Name="Actor", EmitDefaultValue=false)]
        public string Actor { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class SCServiceChannelServicesMessagingProposalsUpdateProposalStatusRequest {\n");
            sb.Append("  Comment: ").Append(Comment).Append("\n");
            sb.Append("  ProviderEmail: ").Append(ProviderEmail).Append("\n");
            sb.Append("  UserEmail: ").Append(UserEmail).Append("\n");
            sb.Append("  RejectReasonCodeId: ").Append(RejectReasonCodeId).Append("\n");
            sb.Append("  ActionSource: ").Append(ActionSource).Append("\n");
            sb.Append("  ReasonString: ").Append(ReasonString).Append("\n");
            sb.Append("  Actor: ").Append(Actor).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            var options = new JsonSerializerOptions
            {
                WriteIndented = true
            };

            return JsonSerializer.Serialize(this, options);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (obj is null) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((SCServiceChannelServicesMessagingProposalsUpdateProposalStatusRequest)obj);
        }

        /// <summary>
        /// Returns true if SCServiceChannelServicesMessagingProposalsUpdateProposalStatusRequest instances are equal
        /// </summary>
        /// <param name="other">Instance of SCServiceChannelServicesMessagingProposalsUpdateProposalStatusRequest to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(SCServiceChannelServicesMessagingProposalsUpdateProposalStatusRequest other)
        {
            if (other is null) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    Comment == other.Comment ||
                    Comment != null &&
                    Comment.Equals(other.Comment)
                ) && 
                (
                    ProviderEmail == other.ProviderEmail ||
                    ProviderEmail != null &&
                    ProviderEmail.Equals(other.ProviderEmail)
                ) && 
                (
                    UserEmail == other.UserEmail ||
                    UserEmail != null &&
                    UserEmail.Equals(other.UserEmail)
                ) && 
                (
                    RejectReasonCodeId == other.RejectReasonCodeId ||
                    
                    RejectReasonCodeId.Equals(other.RejectReasonCodeId)
                ) && 
                (
                    ActionSource == other.ActionSource ||
                    
                    ActionSource.Equals(other.ActionSource)
                ) && 
                (
                    ReasonString == other.ReasonString ||
                    ReasonString != null &&
                    ReasonString.Equals(other.ReasonString)
                ) && 
                (
                    Actor == other.Actor ||
                    Actor != null &&
                    Actor.Equals(other.Actor)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    if (Comment != null)
                    hashCode = hashCode * 59 + Comment.GetHashCode();
                    if (ProviderEmail != null)
                    hashCode = hashCode * 59 + ProviderEmail.GetHashCode();
                    if (UserEmail != null)
                    hashCode = hashCode * 59 + UserEmail.GetHashCode();
                    
                    hashCode = hashCode * 59 + RejectReasonCodeId.GetHashCode();
                    
                    hashCode = hashCode * 59 + ActionSource.GetHashCode();
                    if (ReasonString != null)
                    hashCode = hashCode * 59 + ReasonString.GetHashCode();
                    if (Actor != null)
                    hashCode = hashCode * 59 + Actor.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(SCServiceChannelServicesMessagingProposalsUpdateProposalStatusRequest left, SCServiceChannelServicesMessagingProposalsUpdateProposalStatusRequest right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(SCServiceChannelServicesMessagingProposalsUpdateProposalStatusRequest left, SCServiceChannelServicesMessagingProposalsUpdateProposalStatusRequest right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}
