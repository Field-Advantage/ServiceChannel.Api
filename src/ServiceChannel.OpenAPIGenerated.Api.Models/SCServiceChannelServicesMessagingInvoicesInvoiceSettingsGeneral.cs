/*
 * ServiceChannel API - v.3
 *
 * The ServiceChannel API is a RESTful and stateless API. It accepts standard HTTP verbs and supports OAuth 2.0 for authorizing requests.      Our API returns common HTTP status codes as well as JSON encapsulated data.      See [API Overview](https://developer.servicechannel.com/basics/introduction/overview/) for the intro to ServiceChannel API.<br>      <h3>Authentication and Authorization</h3>You should have a ServiceChannel account, register your application, and obtain `access_token` to integrate with our API.      See [Authentication and Authorization](https://developer.servicechannel.com/basics/general/authentication/) for more information.      To use this API playground, click **Authorize** and sign in to ServiceChannel.<br>      <h3>Environment</h3> All calls in this API Reference point to the **SB2 environment**.      See [Environments](https://developer.servicechannel.com/basics/general/environments/) for more information.<br>      <h3>API Version</h3>The current stable version of the ServiceChannel API is `v3`. In the request URL, `v3` is a version prefix that should be present.      When you omit the version prefix, calls point to the minimum supported version of the API.      We recommend you to always specify the API version to avoid possible errors.
 *
 * The version of the OpenAPI document: 3
 * 
 * Generated by: https://openapi-generator.tech
 */

using System;
using System.Linq;
using System.Text;
using System.Collections.Generic;
using System.ComponentModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using System.Text.Json;
using ServiceChannel.OpenAPIGenerated.Api.Converters;

namespace ServiceChannel.OpenAPIGenerated.Api.Models
{ 
    /// <summary>
    /// General invoice settings object.
    /// </summary>
    [DataContract]
    public class SCServiceChannelServicesMessagingInvoicesInvoiceSettingsGeneral : IEquatable<SCServiceChannelServicesMessagingInvoicesInvoiceSettingsGeneral>
    {
        /// <summary>
        /// The number of days prior to the invoice posting date within which the invoice creation date can be set. Providers can not create invoices for a date in the past that is older than the specified number of days from the invoice posting date.
        /// </summary>
        /// <value>The number of days prior to the invoice posting date within which the invoice creation date can be set. Providers can not create invoices for a date in the past that is older than the specified number of days from the invoice posting date.</value>
        [DataMember(Name="DaysBeforePostingDate", EmitDefaultValue=true)]
        public int DaysBeforePostingDate { get; set; }

        /// <summary>
        /// The number of days after the invoice posting date within which the invoice creation date can be set. Providers can not generate invoices for a date in the future that is greater than the specified number of days from the invoice posting date.
        /// </summary>
        /// <value>The number of days after the invoice posting date within which the invoice creation date can be set. Providers can not generate invoices for a date in the future that is greater than the specified number of days from the invoice posting date.</value>
        [DataMember(Name="MaxDaysAfterPostingDate", EmitDefaultValue=true)]
        public int MaxDaysAfterPostingDate { get; set; }

        /// <summary>
        /// Defines whether providers are required to enter a resolution when creating an invoice.
        /// </summary>
        /// <value>Defines whether providers are required to enter a resolution when creating an invoice.</value>
        [DataMember(Name="RequireResolutionText", EmitDefaultValue=true)]
        public bool RequireResolutionText { get; set; } = false;

        /// <summary>
        /// Defines whether subscriber’s employees are required to enter a comment when approving invoices.
        /// </summary>
        /// <value>Defines whether subscriber’s employees are required to enter a comment when approving invoices.</value>
        [DataMember(Name="RequireApprovalText", EmitDefaultValue=true)]
        public bool RequireApprovalText { get; set; } = false;

        /// <summary>
        /// Defines whether the feature that prompts subscriber’s employees to enter a comment when approving invoices is turned on.
        /// </summary>
        /// <value>Defines whether the feature that prompts subscriber’s employees to enter a comment when approving invoices is turned on.</value>
        [DataMember(Name="IsInvoiceApprovalCommentFeatureEnabled", EmitDefaultValue=true)]
        public bool IsInvoiceApprovalCommentFeatureEnabled { get; set; } = false;

        /// <summary>
        /// Defines whether the feature that enables the invoice number validation is turned on.
        /// </summary>
        /// <value>Defines whether the feature that enables the invoice number validation is turned on.</value>
        [DataMember(Name="IsInvoiceNumberValidationFeatureEnabled", EmitDefaultValue=true)]
        public bool IsInvoiceNumberValidationFeatureEnabled { get; set; } = false;

        /// <summary>
        /// Defines whether the feature that enables the invoice negative amounts for the required line items.
        /// </summary>
        /// <value>Defines whether the feature that enables the invoice negative amounts for the required line items.</value>
        [DataMember(Name="IsInvoiceNegativeFeatureEnabled", EmitDefaultValue=true)]
        public bool IsInvoiceNegativeFeatureEnabled { get; set; } = false;

        /// <summary>
        /// Use Us UI model in international locations.
        /// </summary>
        /// <value>Use Us UI model in international locations.</value>
        [DataMember(Name="IsInvoiceZeroVATEU", EmitDefaultValue=true)]
        public bool IsInvoiceZeroVATEU { get; set; } = false;

        /// <summary>
        /// A list of trades configured for the subscriber. The following parameters are returned for each trade:&lt;br /&gt; • &#x60;Id&#x60; — trade ID.&lt;br /&gt; • &#x60;Name&#x60; — trade name.&lt;br /&gt; • &#x60;PrimaryTradeName&#x60; — name of the primary trade for this trade.
        /// </summary>
        /// <value>A list of trades configured for the subscriber. The following parameters are returned for each trade:&lt;br /&gt; • &#x60;Id&#x60; — trade ID.&lt;br /&gt; • &#x60;Name&#x60; — trade name.&lt;br /&gt; • &#x60;PrimaryTradeName&#x60; — name of the primary trade for this trade.</value>
        [DataMember(Name="AvailableTrades", EmitDefaultValue=false)]
        public string AvailableTrades { get; set; }

        /// <summary>
        /// A list of categories set up for the subscriber. The following parameters are returned for each category:&lt;br /&gt; • &#x60;Id&#x60; — category ID.&lt;br /&gt; • &#x60;SubscriberId&#x60; — subscriber ID.&lt;br /&gt; • &#x60;Name&#x60; — category name.&lt;br /&gt; • &#x60;HasDependency&#x60; — defines whether the category has dependent categories.&lt;br /&gt; • &#x60;PrimaryCategoryID&#x60; — ID of the primary category for this category.&lt;br /&gt; • &#x60;PrimaryCategoryName&#x60; — name of the primary category for this category.
        /// </summary>
        /// <value>A list of categories set up for the subscriber. The following parameters are returned for each category:&lt;br /&gt; • &#x60;Id&#x60; — category ID.&lt;br /&gt; • &#x60;SubscriberId&#x60; — subscriber ID.&lt;br /&gt; • &#x60;Name&#x60; — category name.&lt;br /&gt; • &#x60;HasDependency&#x60; — defines whether the category has dependent categories.&lt;br /&gt; • &#x60;PrimaryCategoryID&#x60; — ID of the primary category for this category.&lt;br /&gt; • &#x60;PrimaryCategoryName&#x60; — name of the primary category for this category.</value>
        [DataMember(Name="AvailableCategories", EmitDefaultValue=false)]
        public string AvailableCategories { get; set; }

        /// <summary>
        /// Trade IDs for which providers must itemize Labor charges when creating a line-item invoice.
        /// </summary>
        /// <value>Trade IDs for which providers must itemize Labor charges when creating a line-item invoice.</value>
        [DataMember(Name="LaborTradeIds", EmitDefaultValue=false)]
        public List<int> LaborTradeIds { get; set; }

        /// <summary>
        /// Trade IDs for which providers must itemize Material charges when creating a line-item invoice.
        /// </summary>
        /// <value>Trade IDs for which providers must itemize Material charges when creating a line-item invoice.</value>
        [DataMember(Name="MaterialsTradeIds", EmitDefaultValue=false)]
        public List<int> MaterialsTradeIds { get; set; }

        /// <summary>
        /// Trade IDs for which providers must itemize Travel charges when creating a line-item invoice.
        /// </summary>
        /// <value>Trade IDs for which providers must itemize Travel charges when creating a line-item invoice.</value>
        [DataMember(Name="TravelTradeIds", EmitDefaultValue=false)]
        public List<int> TravelTradeIds { get; set; }

        /// <summary>
        /// Trade IDs for which providers must itemize Other charges when creating a line-item invoice.
        /// </summary>
        /// <value>Trade IDs for which providers must itemize Other charges when creating a line-item invoice.</value>
        [DataMember(Name="OtherTradeIds", EmitDefaultValue=false)]
        public List<int> OtherTradeIds { get; set; }

        /// <summary>
        /// Category IDs for which providers must itemize Labor charges when creating a line-item invoice.
        /// </summary>
        /// <value>Category IDs for which providers must itemize Labor charges when creating a line-item invoice.</value>
        [DataMember(Name="LaborCategoryIds", EmitDefaultValue=false)]
        public List<int> LaborCategoryIds { get; set; }

        /// <summary>
        /// Category IDs for which providers must itemize Material charges when creating a line-item invoice.
        /// </summary>
        /// <value>Category IDs for which providers must itemize Material charges when creating a line-item invoice.</value>
        [DataMember(Name="MaterialsCategoryIds", EmitDefaultValue=false)]
        public List<int> MaterialsCategoryIds { get; set; }

        /// <summary>
        /// Category IDs for which providers must itemize Travel charges when creating a line-item invoice.
        /// </summary>
        /// <value>Category IDs for which providers must itemize Travel charges when creating a line-item invoice.</value>
        [DataMember(Name="TravelCategoryIds", EmitDefaultValue=false)]
        public List<int> TravelCategoryIds { get; set; }

        /// <summary>
        /// Category IDs for which providers must itemize Other charges when creating a line-item invoice.
        /// </summary>
        /// <value>Category IDs for which providers must itemize Other charges when creating a line-item invoice.</value>
        [DataMember(Name="OtherCategoryIds", EmitDefaultValue=false)]
        public List<int> OtherCategoryIds { get; set; }

        /// <summary>
        /// Gets or Sets NumberRequirementsModel
        /// </summary>
        [DataMember(Name="NumberRequirementsModel", EmitDefaultValue=false)]
        public SCServiceChannelServicesMessagingInvoicesNumberRequirementsModel NumberRequirementsModel { get; set; }

        /// <summary>
        /// Defines whether the provider can add sales tax to its ivoices
        /// </summary>
        /// <value>Defines whether the provider can add sales tax to its ivoices</value>
        [DataMember(Name="IsProviderAbleToAddSalesTax", EmitDefaultValue=true)]
        public bool IsProviderAbleToAddSalesTax { get; set; } = false;

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class SCServiceChannelServicesMessagingInvoicesInvoiceSettingsGeneral {\n");
            sb.Append("  DaysBeforePostingDate: ").Append(DaysBeforePostingDate).Append("\n");
            sb.Append("  MaxDaysAfterPostingDate: ").Append(MaxDaysAfterPostingDate).Append("\n");
            sb.Append("  RequireResolutionText: ").Append(RequireResolutionText).Append("\n");
            sb.Append("  RequireApprovalText: ").Append(RequireApprovalText).Append("\n");
            sb.Append("  IsInvoiceApprovalCommentFeatureEnabled: ").Append(IsInvoiceApprovalCommentFeatureEnabled).Append("\n");
            sb.Append("  IsInvoiceNumberValidationFeatureEnabled: ").Append(IsInvoiceNumberValidationFeatureEnabled).Append("\n");
            sb.Append("  IsInvoiceNegativeFeatureEnabled: ").Append(IsInvoiceNegativeFeatureEnabled).Append("\n");
            sb.Append("  IsInvoiceZeroVATEU: ").Append(IsInvoiceZeroVATEU).Append("\n");
            sb.Append("  AvailableTrades: ").Append(AvailableTrades).Append("\n");
            sb.Append("  AvailableCategories: ").Append(AvailableCategories).Append("\n");
            sb.Append("  LaborTradeIds: ").Append(LaborTradeIds).Append("\n");
            sb.Append("  MaterialsTradeIds: ").Append(MaterialsTradeIds).Append("\n");
            sb.Append("  TravelTradeIds: ").Append(TravelTradeIds).Append("\n");
            sb.Append("  OtherTradeIds: ").Append(OtherTradeIds).Append("\n");
            sb.Append("  LaborCategoryIds: ").Append(LaborCategoryIds).Append("\n");
            sb.Append("  MaterialsCategoryIds: ").Append(MaterialsCategoryIds).Append("\n");
            sb.Append("  TravelCategoryIds: ").Append(TravelCategoryIds).Append("\n");
            sb.Append("  OtherCategoryIds: ").Append(OtherCategoryIds).Append("\n");
            sb.Append("  NumberRequirementsModel: ").Append(NumberRequirementsModel).Append("\n");
            sb.Append("  IsProviderAbleToAddSalesTax: ").Append(IsProviderAbleToAddSalesTax).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            var options = new JsonSerializerOptions
            {
                WriteIndented = true
            };

            return JsonSerializer.Serialize(this, options);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (obj is null) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((SCServiceChannelServicesMessagingInvoicesInvoiceSettingsGeneral)obj);
        }

        /// <summary>
        /// Returns true if SCServiceChannelServicesMessagingInvoicesInvoiceSettingsGeneral instances are equal
        /// </summary>
        /// <param name="other">Instance of SCServiceChannelServicesMessagingInvoicesInvoiceSettingsGeneral to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(SCServiceChannelServicesMessagingInvoicesInvoiceSettingsGeneral other)
        {
            if (other is null) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    DaysBeforePostingDate == other.DaysBeforePostingDate ||
                    
                    DaysBeforePostingDate.Equals(other.DaysBeforePostingDate)
                ) && 
                (
                    MaxDaysAfterPostingDate == other.MaxDaysAfterPostingDate ||
                    
                    MaxDaysAfterPostingDate.Equals(other.MaxDaysAfterPostingDate)
                ) && 
                (
                    RequireResolutionText == other.RequireResolutionText ||
                    
                    RequireResolutionText.Equals(other.RequireResolutionText)
                ) && 
                (
                    RequireApprovalText == other.RequireApprovalText ||
                    
                    RequireApprovalText.Equals(other.RequireApprovalText)
                ) && 
                (
                    IsInvoiceApprovalCommentFeatureEnabled == other.IsInvoiceApprovalCommentFeatureEnabled ||
                    
                    IsInvoiceApprovalCommentFeatureEnabled.Equals(other.IsInvoiceApprovalCommentFeatureEnabled)
                ) && 
                (
                    IsInvoiceNumberValidationFeatureEnabled == other.IsInvoiceNumberValidationFeatureEnabled ||
                    
                    IsInvoiceNumberValidationFeatureEnabled.Equals(other.IsInvoiceNumberValidationFeatureEnabled)
                ) && 
                (
                    IsInvoiceNegativeFeatureEnabled == other.IsInvoiceNegativeFeatureEnabled ||
                    
                    IsInvoiceNegativeFeatureEnabled.Equals(other.IsInvoiceNegativeFeatureEnabled)
                ) && 
                (
                    IsInvoiceZeroVATEU == other.IsInvoiceZeroVATEU ||
                    
                    IsInvoiceZeroVATEU.Equals(other.IsInvoiceZeroVATEU)
                ) && 
                (
                    AvailableTrades == other.AvailableTrades ||
                    AvailableTrades != null &&
                    AvailableTrades.Equals(other.AvailableTrades)
                ) && 
                (
                    AvailableCategories == other.AvailableCategories ||
                    AvailableCategories != null &&
                    AvailableCategories.Equals(other.AvailableCategories)
                ) && 
                (
                    LaborTradeIds == other.LaborTradeIds ||
                    LaborTradeIds != null &&
                    other.LaborTradeIds != null &&
                    LaborTradeIds.SequenceEqual(other.LaborTradeIds)
                ) && 
                (
                    MaterialsTradeIds == other.MaterialsTradeIds ||
                    MaterialsTradeIds != null &&
                    other.MaterialsTradeIds != null &&
                    MaterialsTradeIds.SequenceEqual(other.MaterialsTradeIds)
                ) && 
                (
                    TravelTradeIds == other.TravelTradeIds ||
                    TravelTradeIds != null &&
                    other.TravelTradeIds != null &&
                    TravelTradeIds.SequenceEqual(other.TravelTradeIds)
                ) && 
                (
                    OtherTradeIds == other.OtherTradeIds ||
                    OtherTradeIds != null &&
                    other.OtherTradeIds != null &&
                    OtherTradeIds.SequenceEqual(other.OtherTradeIds)
                ) && 
                (
                    LaborCategoryIds == other.LaborCategoryIds ||
                    LaborCategoryIds != null &&
                    other.LaborCategoryIds != null &&
                    LaborCategoryIds.SequenceEqual(other.LaborCategoryIds)
                ) && 
                (
                    MaterialsCategoryIds == other.MaterialsCategoryIds ||
                    MaterialsCategoryIds != null &&
                    other.MaterialsCategoryIds != null &&
                    MaterialsCategoryIds.SequenceEqual(other.MaterialsCategoryIds)
                ) && 
                (
                    TravelCategoryIds == other.TravelCategoryIds ||
                    TravelCategoryIds != null &&
                    other.TravelCategoryIds != null &&
                    TravelCategoryIds.SequenceEqual(other.TravelCategoryIds)
                ) && 
                (
                    OtherCategoryIds == other.OtherCategoryIds ||
                    OtherCategoryIds != null &&
                    other.OtherCategoryIds != null &&
                    OtherCategoryIds.SequenceEqual(other.OtherCategoryIds)
                ) && 
                (
                    NumberRequirementsModel == other.NumberRequirementsModel ||
                    NumberRequirementsModel != null &&
                    NumberRequirementsModel.Equals(other.NumberRequirementsModel)
                ) && 
                (
                    IsProviderAbleToAddSalesTax == other.IsProviderAbleToAddSalesTax ||
                    
                    IsProviderAbleToAddSalesTax.Equals(other.IsProviderAbleToAddSalesTax)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    
                    hashCode = hashCode * 59 + DaysBeforePostingDate.GetHashCode();
                    
                    hashCode = hashCode * 59 + MaxDaysAfterPostingDate.GetHashCode();
                    
                    hashCode = hashCode * 59 + RequireResolutionText.GetHashCode();
                    
                    hashCode = hashCode * 59 + RequireApprovalText.GetHashCode();
                    
                    hashCode = hashCode * 59 + IsInvoiceApprovalCommentFeatureEnabled.GetHashCode();
                    
                    hashCode = hashCode * 59 + IsInvoiceNumberValidationFeatureEnabled.GetHashCode();
                    
                    hashCode = hashCode * 59 + IsInvoiceNegativeFeatureEnabled.GetHashCode();
                    
                    hashCode = hashCode * 59 + IsInvoiceZeroVATEU.GetHashCode();
                    if (AvailableTrades != null)
                    hashCode = hashCode * 59 + AvailableTrades.GetHashCode();
                    if (AvailableCategories != null)
                    hashCode = hashCode * 59 + AvailableCategories.GetHashCode();
                    if (LaborTradeIds != null)
                    hashCode = hashCode * 59 + LaborTradeIds.GetHashCode();
                    if (MaterialsTradeIds != null)
                    hashCode = hashCode * 59 + MaterialsTradeIds.GetHashCode();
                    if (TravelTradeIds != null)
                    hashCode = hashCode * 59 + TravelTradeIds.GetHashCode();
                    if (OtherTradeIds != null)
                    hashCode = hashCode * 59 + OtherTradeIds.GetHashCode();
                    if (LaborCategoryIds != null)
                    hashCode = hashCode * 59 + LaborCategoryIds.GetHashCode();
                    if (MaterialsCategoryIds != null)
                    hashCode = hashCode * 59 + MaterialsCategoryIds.GetHashCode();
                    if (TravelCategoryIds != null)
                    hashCode = hashCode * 59 + TravelCategoryIds.GetHashCode();
                    if (OtherCategoryIds != null)
                    hashCode = hashCode * 59 + OtherCategoryIds.GetHashCode();
                    if (NumberRequirementsModel != null)
                    hashCode = hashCode * 59 + NumberRequirementsModel.GetHashCode();
                    
                    hashCode = hashCode * 59 + IsProviderAbleToAddSalesTax.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(SCServiceChannelServicesMessagingInvoicesInvoiceSettingsGeneral left, SCServiceChannelServicesMessagingInvoicesInvoiceSettingsGeneral right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(SCServiceChannelServicesMessagingInvoicesInvoiceSettingsGeneral left, SCServiceChannelServicesMessagingInvoicesInvoiceSettingsGeneral right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}
