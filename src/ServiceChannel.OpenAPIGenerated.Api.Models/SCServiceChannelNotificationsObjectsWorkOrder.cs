/*
 * ServiceChannel API - v.3
 *
 * The ServiceChannel API is a RESTful and stateless API. It accepts standard HTTP verbs and supports OAuth 2.0 for authorizing requests.      Our API returns common HTTP status codes as well as JSON encapsulated data.      See [API Overview](https://developer.servicechannel.com/basics/introduction/overview/) for the intro to ServiceChannel API.<br>      <h3>Authentication and Authorization</h3>You should have a ServiceChannel account, register your application, and obtain `access_token` to integrate with our API.      See [Authentication and Authorization](https://developer.servicechannel.com/basics/general/authentication/) for more information.      To use this API playground, click **Authorize** and sign in to ServiceChannel.<br>      <h3>Environment</h3> All calls in this API Reference point to the **SB2 environment**.      See [Environments](https://developer.servicechannel.com/basics/general/environments/) for more information.<br>      <h3>API Version</h3>The current stable version of the ServiceChannel API is `v3`. In the request URL, `v3` is a version prefix that should be present.      When you omit the version prefix, calls point to the minimum supported version of the API.      We recommend you to always specify the API version to avoid possible errors.
 *
 * The version of the OpenAPI document: 3
 * 
 * Generated by: https://openapi-generator.tech
 */

using System;
using System.Linq;
using System.Text;
using System.Collections.Generic;
using System.ComponentModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using System.Text.Json;
using ServiceChannel.OpenAPIGenerated.Api.Converters;

namespace ServiceChannel.OpenAPIGenerated.Api.Models
{ 
    /// <summary>
    /// 
    /// </summary>
    [DataContract]
    public class SCServiceChannelNotificationsObjectsWorkOrder : IEquatable<SCServiceChannelNotificationsObjectsWorkOrder>
    {
        /// <summary>
        /// Gets or Sets Id
        /// </summary>
        [DataMember(Name="Id", EmitDefaultValue=true)]
        public int Id { get; set; }

        /// <summary>
        /// Gets or Sets Number
        /// </summary>
        [DataMember(Name="Number", EmitDefaultValue=false)]
        public string Number { get; set; }

        /// <summary>
        /// Gets or Sets PurchaseNumber
        /// </summary>
        [DataMember(Name="PurchaseNumber", EmitDefaultValue=false)]
        public string PurchaseNumber { get; set; }

        /// <summary>
        /// Gets or Sets SubscriberId
        /// </summary>
        [DataMember(Name="SubscriberId", EmitDefaultValue=true)]
        public int SubscriberId { get; set; }

        /// <summary>
        /// Gets or Sets ProviderId
        /// </summary>
        [DataMember(Name="ProviderId", EmitDefaultValue=true)]
        public int ProviderId { get; set; }

        /// <summary>
        /// Gets or Sets ProviderName
        /// </summary>
        [DataMember(Name="ProviderName", EmitDefaultValue=false)]
        public string ProviderName { get; set; }

        /// <summary>
        /// Gets or Sets LocationId
        /// </summary>
        [DataMember(Name="LocationId", EmitDefaultValue=true)]
        public int LocationId { get; set; }

        /// <summary>
        /// Gets or Sets LocationName
        /// </summary>
        [DataMember(Name="LocationName", EmitDefaultValue=false)]
        public string LocationName { get; set; }

        /// <summary>
        /// Gets or Sets LocationStoreId
        /// </summary>
        [DataMember(Name="LocationStoreId", EmitDefaultValue=false)]
        public string LocationStoreId { get; set; }

        /// <summary>
        /// Gets or Sets Status
        /// </summary>
        [DataMember(Name="Status", EmitDefaultValue=false)]
        public SCServiceChannelNotificationsObjectsWorkorderStatusDescriptor Status { get; set; }

        /// <summary>
        /// Gets or Sets Caller
        /// </summary>
        [DataMember(Name="Caller", EmitDefaultValue=false)]
        public string Caller { get; set; }

        /// <summary>
        /// Gets or Sets CreatedBy
        /// </summary>
        [DataMember(Name="CreatedBy", EmitDefaultValue=false)]
        public string CreatedBy { get; set; }

        /// <summary>
        /// Gets or Sets UpdatedBy
        /// </summary>
        [DataMember(Name="UpdatedBy", EmitDefaultValue=false)]
        public SCServiceChannelNotificationsObjectsUser UpdatedBy { get; set; }

        /// <summary>
        /// Gets or Sets CallDate
        /// </summary>
        [DataMember(Name="CallDate", EmitDefaultValue=false)]
        public DateTime CallDate { get; set; }

        /// <summary>
        /// Gets or Sets CallDateDTO
        /// </summary>
        [DataMember(Name="CallDate_DTO", EmitDefaultValue=false)]
        public DateTime CallDateDTO { get; set; }

        /// <summary>
        /// Gets or Sets ReassignDate
        /// </summary>
        [DataMember(Name="ReassignDate", EmitDefaultValue=false)]
        public DateTime ReassignDate { get; set; }

        /// <summary>
        /// Gets or Sets Priority
        /// </summary>
        [DataMember(Name="Priority", EmitDefaultValue=false)]
        public string Priority { get; set; }

        /// <summary>
        /// Gets or Sets Trade
        /// </summary>
        [DataMember(Name="Trade", EmitDefaultValue=false)]
        public string Trade { get; set; }

        /// <summary>
        /// Gets or Sets ScheduledDate
        /// </summary>
        [DataMember(Name="ScheduledDate", EmitDefaultValue=false)]
        public DateTime ScheduledDate { get; set; }

        /// <summary>
        /// Gets or Sets AreaId
        /// </summary>
        [DataMember(Name="AreaId", EmitDefaultValue=true)]
        public int AreaId { get; set; }

        /// <summary>
        /// Gets or Sets AssetType
        /// </summary>
        [DataMember(Name="AssetType", EmitDefaultValue=false)]
        public string AssetType { get; set; }

        /// <summary>
        /// Gets or Sets ProblemType
        /// </summary>
        [DataMember(Name="ProblemType", EmitDefaultValue=false)]
        public string ProblemType { get; set; }

        /// <summary>
        /// Gets or Sets CreatedDateDTO
        /// </summary>
        [DataMember(Name="CreatedDate_DTO", EmitDefaultValue=false)]
        public DateTime CreatedDateDTO { get; set; }

        /// <summary>
        /// Gets or Sets UpdatedDate
        /// </summary>
        [DataMember(Name="UpdatedDate", EmitDefaultValue=false)]
        public DateTime UpdatedDate { get; set; }

        /// <summary>
        /// Gets or Sets UpdatedDateDTO
        /// </summary>
        [DataMember(Name="UpdatedDate_DTO", EmitDefaultValue=false)]
        public DateTime UpdatedDateDTO { get; set; }

        /// <summary>
        /// Gets or Sets ScheduledDateDTO
        /// </summary>
        [DataMember(Name="ScheduledDate_DTO", EmitDefaultValue=false)]
        public DateTime ScheduledDateDTO { get; set; }

        /// <summary>
        /// Gets or Sets RescheduleReason
        /// </summary>
        [DataMember(Name="RescheduleReason", EmitDefaultValue=false)]
        public string RescheduleReason { get; set; }

        /// <summary>
        /// Gets or Sets CompletedDate
        /// </summary>
        [DataMember(Name="CompletedDate", EmitDefaultValue=false)]
        public DateTime CompletedDate { get; set; }

        /// <summary>
        /// Gets or Sets ExpirationDate
        /// </summary>
        [DataMember(Name="ExpirationDate", EmitDefaultValue=false)]
        public DateTime ExpirationDate { get; set; }

        /// <summary>
        /// Gets or Sets ExpirationDateDTO
        /// </summary>
        [DataMember(Name="ExpirationDate_DTO", EmitDefaultValue=false)]
        public DateTime ExpirationDateDTO { get; set; }

        /// <summary>
        /// Gets or Sets Description
        /// </summary>
        [DataMember(Name="Description", EmitDefaultValue=false)]
        public string Description { get; set; }

        /// <summary>
        /// Gets or Sets Category
        /// </summary>
        [DataMember(Name="Category", EmitDefaultValue=false)]
        public string Category { get; set; }

        /// <summary>
        /// Gets or Sets Nte
        /// </summary>
        [DataMember(Name="Nte", EmitDefaultValue=true)]
        public double Nte { get; set; }

        /// <summary>
        /// Gets or Sets Subtotal
        /// </summary>
        [DataMember(Name="Subtotal", EmitDefaultValue=true)]
        public double Subtotal { get; set; }

        /// <summary>
        /// Gets or Sets Tax
        /// </summary>
        [DataMember(Name="Tax", EmitDefaultValue=true)]
        public double Tax { get; set; }

        /// <summary>
        /// Gets or Sets Tax2Type
        /// </summary>
        [DataMember(Name="Tax2Type", EmitDefaultValue=false)]
        public string Tax2Type { get; set; }

        /// <summary>
        /// Gets or Sets Tax2
        /// </summary>
        [DataMember(Name="Tax2", EmitDefaultValue=true)]
        public double Tax2 { get; set; }

        /// <summary>
        /// Gets or Sets CurrencyAlphabeticalCode
        /// </summary>
        [DataMember(Name="CurrencyAlphabeticalCode", EmitDefaultValue=false)]
        public string CurrencyAlphabeticalCode { get; set; }

        /// <summary>
        /// Gets or Sets ProblemCode
        /// </summary>
        [DataMember(Name="ProblemCode", EmitDefaultValue=false)]
        public string ProblemCode { get; set; }

        /// <summary>
        /// Gets or Sets Resolution
        /// </summary>
        [DataMember(Name="Resolution", EmitDefaultValue=false)]
        public string Resolution { get; set; }

        /// <summary>
        /// Gets or Sets AssetId
        /// </summary>
        [DataMember(Name="AssetId", EmitDefaultValue=true)]
        public int AssetId { get; set; }

        /// <summary>
        /// Gets or Sets Source
        /// </summary>
        [DataMember(Name="Source", EmitDefaultValue=false)]
        public string Source { get; set; }

        /// <summary>
        /// Gets or Sets RecallWorkOrder
        /// </summary>
        [DataMember(Name="RecallWorkOrder", EmitDefaultValue=true)]
        public int RecallWorkOrder { get; set; }

        /// <summary>
        /// Gets or Sets Notes
        /// </summary>
        [DataMember(Name="Notes", EmitDefaultValue=false)]
        public List<SCServiceChannelNotificationsObjectsNote> Notes { get; set; }

        /// <summary>
        /// Gets or Sets Attachments
        /// </summary>
        [DataMember(Name="Attachments", EmitDefaultValue=false)]
        public List<SCServiceChannelNotificationsObjectsAttachment> Attachments { get; set; }

        /// <summary>
        /// Gets or Sets ProjectId
        /// </summary>
        [DataMember(Name="ProjectId", EmitDefaultValue=true)]
        public int ProjectId { get; set; }

        /// <summary>
        /// Gets or Sets Labels
        /// </summary>
        [DataMember(Name="Labels", EmitDefaultValue=false)]
        public List<SCServiceChannelNotificationsObjectsLabel> Labels { get; set; }

        /// <summary>
        /// Gets or Sets ResolutionCodes
        /// </summary>
        [DataMember(Name="ResolutionCodes", EmitDefaultValue=false)]
        public List<SCServiceChannelNotificationsObjectsResolutionCodesAndRootCause> ResolutionCodes { get; set; }

        /// <summary>
        /// Gets or Sets ResolutionCodesIds
        /// </summary>
        [DataMember(Name="ResolutionCodesIds", EmitDefaultValue=false)]
        public List<int> ResolutionCodesIds { get; set; }

        /// <summary>
        /// Gets or Sets RootCauses
        /// </summary>
        [DataMember(Name="RootCauses", EmitDefaultValue=false)]
        public List<SCServiceChannelNotificationsObjectsResolutionCodesAndRootCause> RootCauses { get; set; }

        /// <summary>
        /// Gets or Sets LinkedWorOrderIds
        /// </summary>
        [DataMember(Name="LinkedWorOrderIds", EmitDefaultValue=false)]
        public List<int> LinkedWorOrderIds { get; set; }

        /// <summary>
        /// Gets or Sets Assets
        /// </summary>
        [DataMember(Name="Assets", EmitDefaultValue=false)]
        public List<SCServiceChannelNotificationsObjectsAsset> Assets { get; set; }

        /// <summary>
        /// Gets or Sets RefrigerantWasUsed
        /// </summary>
        [DataMember(Name="RefrigerantWasUsed", EmitDefaultValue=true)]
        public int RefrigerantWasUsed { get; set; }

        /// <summary>
        /// Gets or Sets WeatherEventId
        /// </summary>
        [DataMember(Name="WeatherEventId", EmitDefaultValue=true)]
        public int WeatherEventId { get; set; }

        /// <summary>
        /// Gets or Sets Technician
        /// </summary>
        [DataMember(Name="Technician", EmitDefaultValue=false)]
        public SCServiceChannelNotificationsObjectsTechnician Technician { get; set; }

        /// <summary>
        /// Gets or Sets IssueChoice
        /// </summary>
        [DataMember(Name="IssueChoice", EmitDefaultValue=false)]
        public SCServiceChannelNotificationsObjectsIssueChoice IssueChoice { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class SCServiceChannelNotificationsObjectsWorkOrder {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  Number: ").Append(Number).Append("\n");
            sb.Append("  PurchaseNumber: ").Append(PurchaseNumber).Append("\n");
            sb.Append("  SubscriberId: ").Append(SubscriberId).Append("\n");
            sb.Append("  ProviderId: ").Append(ProviderId).Append("\n");
            sb.Append("  ProviderName: ").Append(ProviderName).Append("\n");
            sb.Append("  LocationId: ").Append(LocationId).Append("\n");
            sb.Append("  LocationName: ").Append(LocationName).Append("\n");
            sb.Append("  LocationStoreId: ").Append(LocationStoreId).Append("\n");
            sb.Append("  Status: ").Append(Status).Append("\n");
            sb.Append("  Caller: ").Append(Caller).Append("\n");
            sb.Append("  CreatedBy: ").Append(CreatedBy).Append("\n");
            sb.Append("  UpdatedBy: ").Append(UpdatedBy).Append("\n");
            sb.Append("  CallDate: ").Append(CallDate).Append("\n");
            sb.Append("  CallDateDTO: ").Append(CallDateDTO).Append("\n");
            sb.Append("  ReassignDate: ").Append(ReassignDate).Append("\n");
            sb.Append("  Priority: ").Append(Priority).Append("\n");
            sb.Append("  Trade: ").Append(Trade).Append("\n");
            sb.Append("  ScheduledDate: ").Append(ScheduledDate).Append("\n");
            sb.Append("  AreaId: ").Append(AreaId).Append("\n");
            sb.Append("  AssetType: ").Append(AssetType).Append("\n");
            sb.Append("  ProblemType: ").Append(ProblemType).Append("\n");
            sb.Append("  CreatedDateDTO: ").Append(CreatedDateDTO).Append("\n");
            sb.Append("  UpdatedDate: ").Append(UpdatedDate).Append("\n");
            sb.Append("  UpdatedDateDTO: ").Append(UpdatedDateDTO).Append("\n");
            sb.Append("  ScheduledDateDTO: ").Append(ScheduledDateDTO).Append("\n");
            sb.Append("  RescheduleReason: ").Append(RescheduleReason).Append("\n");
            sb.Append("  CompletedDate: ").Append(CompletedDate).Append("\n");
            sb.Append("  ExpirationDate: ").Append(ExpirationDate).Append("\n");
            sb.Append("  ExpirationDateDTO: ").Append(ExpirationDateDTO).Append("\n");
            sb.Append("  Description: ").Append(Description).Append("\n");
            sb.Append("  Category: ").Append(Category).Append("\n");
            sb.Append("  Nte: ").Append(Nte).Append("\n");
            sb.Append("  Subtotal: ").Append(Subtotal).Append("\n");
            sb.Append("  Tax: ").Append(Tax).Append("\n");
            sb.Append("  Tax2Type: ").Append(Tax2Type).Append("\n");
            sb.Append("  Tax2: ").Append(Tax2).Append("\n");
            sb.Append("  CurrencyAlphabeticalCode: ").Append(CurrencyAlphabeticalCode).Append("\n");
            sb.Append("  ProblemCode: ").Append(ProblemCode).Append("\n");
            sb.Append("  Resolution: ").Append(Resolution).Append("\n");
            sb.Append("  AssetId: ").Append(AssetId).Append("\n");
            sb.Append("  Source: ").Append(Source).Append("\n");
            sb.Append("  RecallWorkOrder: ").Append(RecallWorkOrder).Append("\n");
            sb.Append("  Notes: ").Append(Notes).Append("\n");
            sb.Append("  Attachments: ").Append(Attachments).Append("\n");
            sb.Append("  ProjectId: ").Append(ProjectId).Append("\n");
            sb.Append("  Labels: ").Append(Labels).Append("\n");
            sb.Append("  ResolutionCodes: ").Append(ResolutionCodes).Append("\n");
            sb.Append("  ResolutionCodesIds: ").Append(ResolutionCodesIds).Append("\n");
            sb.Append("  RootCauses: ").Append(RootCauses).Append("\n");
            sb.Append("  LinkedWorOrderIds: ").Append(LinkedWorOrderIds).Append("\n");
            sb.Append("  Assets: ").Append(Assets).Append("\n");
            sb.Append("  RefrigerantWasUsed: ").Append(RefrigerantWasUsed).Append("\n");
            sb.Append("  WeatherEventId: ").Append(WeatherEventId).Append("\n");
            sb.Append("  Technician: ").Append(Technician).Append("\n");
            sb.Append("  IssueChoice: ").Append(IssueChoice).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            var options = new JsonSerializerOptions
            {
                WriteIndented = true
            };

            return JsonSerializer.Serialize(this, options);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (obj is null) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((SCServiceChannelNotificationsObjectsWorkOrder)obj);
        }

        /// <summary>
        /// Returns true if SCServiceChannelNotificationsObjectsWorkOrder instances are equal
        /// </summary>
        /// <param name="other">Instance of SCServiceChannelNotificationsObjectsWorkOrder to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(SCServiceChannelNotificationsObjectsWorkOrder other)
        {
            if (other is null) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    Id == other.Id ||
                    
                    Id.Equals(other.Id)
                ) && 
                (
                    Number == other.Number ||
                    Number != null &&
                    Number.Equals(other.Number)
                ) && 
                (
                    PurchaseNumber == other.PurchaseNumber ||
                    PurchaseNumber != null &&
                    PurchaseNumber.Equals(other.PurchaseNumber)
                ) && 
                (
                    SubscriberId == other.SubscriberId ||
                    
                    SubscriberId.Equals(other.SubscriberId)
                ) && 
                (
                    ProviderId == other.ProviderId ||
                    
                    ProviderId.Equals(other.ProviderId)
                ) && 
                (
                    ProviderName == other.ProviderName ||
                    ProviderName != null &&
                    ProviderName.Equals(other.ProviderName)
                ) && 
                (
                    LocationId == other.LocationId ||
                    
                    LocationId.Equals(other.LocationId)
                ) && 
                (
                    LocationName == other.LocationName ||
                    LocationName != null &&
                    LocationName.Equals(other.LocationName)
                ) && 
                (
                    LocationStoreId == other.LocationStoreId ||
                    LocationStoreId != null &&
                    LocationStoreId.Equals(other.LocationStoreId)
                ) && 
                (
                    Status == other.Status ||
                    Status != null &&
                    Status.Equals(other.Status)
                ) && 
                (
                    Caller == other.Caller ||
                    Caller != null &&
                    Caller.Equals(other.Caller)
                ) && 
                (
                    CreatedBy == other.CreatedBy ||
                    CreatedBy != null &&
                    CreatedBy.Equals(other.CreatedBy)
                ) && 
                (
                    UpdatedBy == other.UpdatedBy ||
                    UpdatedBy != null &&
                    UpdatedBy.Equals(other.UpdatedBy)
                ) && 
                (
                    CallDate == other.CallDate ||
                    CallDate != null &&
                    CallDate.Equals(other.CallDate)
                ) && 
                (
                    CallDateDTO == other.CallDateDTO ||
                    CallDateDTO != null &&
                    CallDateDTO.Equals(other.CallDateDTO)
                ) && 
                (
                    ReassignDate == other.ReassignDate ||
                    ReassignDate != null &&
                    ReassignDate.Equals(other.ReassignDate)
                ) && 
                (
                    Priority == other.Priority ||
                    Priority != null &&
                    Priority.Equals(other.Priority)
                ) && 
                (
                    Trade == other.Trade ||
                    Trade != null &&
                    Trade.Equals(other.Trade)
                ) && 
                (
                    ScheduledDate == other.ScheduledDate ||
                    ScheduledDate != null &&
                    ScheduledDate.Equals(other.ScheduledDate)
                ) && 
                (
                    AreaId == other.AreaId ||
                    
                    AreaId.Equals(other.AreaId)
                ) && 
                (
                    AssetType == other.AssetType ||
                    AssetType != null &&
                    AssetType.Equals(other.AssetType)
                ) && 
                (
                    ProblemType == other.ProblemType ||
                    ProblemType != null &&
                    ProblemType.Equals(other.ProblemType)
                ) && 
                (
                    CreatedDateDTO == other.CreatedDateDTO ||
                    CreatedDateDTO != null &&
                    CreatedDateDTO.Equals(other.CreatedDateDTO)
                ) && 
                (
                    UpdatedDate == other.UpdatedDate ||
                    UpdatedDate != null &&
                    UpdatedDate.Equals(other.UpdatedDate)
                ) && 
                (
                    UpdatedDateDTO == other.UpdatedDateDTO ||
                    UpdatedDateDTO != null &&
                    UpdatedDateDTO.Equals(other.UpdatedDateDTO)
                ) && 
                (
                    ScheduledDateDTO == other.ScheduledDateDTO ||
                    ScheduledDateDTO != null &&
                    ScheduledDateDTO.Equals(other.ScheduledDateDTO)
                ) && 
                (
                    RescheduleReason == other.RescheduleReason ||
                    RescheduleReason != null &&
                    RescheduleReason.Equals(other.RescheduleReason)
                ) && 
                (
                    CompletedDate == other.CompletedDate ||
                    CompletedDate != null &&
                    CompletedDate.Equals(other.CompletedDate)
                ) && 
                (
                    ExpirationDate == other.ExpirationDate ||
                    ExpirationDate != null &&
                    ExpirationDate.Equals(other.ExpirationDate)
                ) && 
                (
                    ExpirationDateDTO == other.ExpirationDateDTO ||
                    ExpirationDateDTO != null &&
                    ExpirationDateDTO.Equals(other.ExpirationDateDTO)
                ) && 
                (
                    Description == other.Description ||
                    Description != null &&
                    Description.Equals(other.Description)
                ) && 
                (
                    Category == other.Category ||
                    Category != null &&
                    Category.Equals(other.Category)
                ) && 
                (
                    Nte == other.Nte ||
                    
                    Nte.Equals(other.Nte)
                ) && 
                (
                    Subtotal == other.Subtotal ||
                    
                    Subtotal.Equals(other.Subtotal)
                ) && 
                (
                    Tax == other.Tax ||
                    
                    Tax.Equals(other.Tax)
                ) && 
                (
                    Tax2Type == other.Tax2Type ||
                    Tax2Type != null &&
                    Tax2Type.Equals(other.Tax2Type)
                ) && 
                (
                    Tax2 == other.Tax2 ||
                    
                    Tax2.Equals(other.Tax2)
                ) && 
                (
                    CurrencyAlphabeticalCode == other.CurrencyAlphabeticalCode ||
                    CurrencyAlphabeticalCode != null &&
                    CurrencyAlphabeticalCode.Equals(other.CurrencyAlphabeticalCode)
                ) && 
                (
                    ProblemCode == other.ProblemCode ||
                    ProblemCode != null &&
                    ProblemCode.Equals(other.ProblemCode)
                ) && 
                (
                    Resolution == other.Resolution ||
                    Resolution != null &&
                    Resolution.Equals(other.Resolution)
                ) && 
                (
                    AssetId == other.AssetId ||
                    
                    AssetId.Equals(other.AssetId)
                ) && 
                (
                    Source == other.Source ||
                    Source != null &&
                    Source.Equals(other.Source)
                ) && 
                (
                    RecallWorkOrder == other.RecallWorkOrder ||
                    
                    RecallWorkOrder.Equals(other.RecallWorkOrder)
                ) && 
                (
                    Notes == other.Notes ||
                    Notes != null &&
                    other.Notes != null &&
                    Notes.SequenceEqual(other.Notes)
                ) && 
                (
                    Attachments == other.Attachments ||
                    Attachments != null &&
                    other.Attachments != null &&
                    Attachments.SequenceEqual(other.Attachments)
                ) && 
                (
                    ProjectId == other.ProjectId ||
                    
                    ProjectId.Equals(other.ProjectId)
                ) && 
                (
                    Labels == other.Labels ||
                    Labels != null &&
                    other.Labels != null &&
                    Labels.SequenceEqual(other.Labels)
                ) && 
                (
                    ResolutionCodes == other.ResolutionCodes ||
                    ResolutionCodes != null &&
                    other.ResolutionCodes != null &&
                    ResolutionCodes.SequenceEqual(other.ResolutionCodes)
                ) && 
                (
                    ResolutionCodesIds == other.ResolutionCodesIds ||
                    ResolutionCodesIds != null &&
                    other.ResolutionCodesIds != null &&
                    ResolutionCodesIds.SequenceEqual(other.ResolutionCodesIds)
                ) && 
                (
                    RootCauses == other.RootCauses ||
                    RootCauses != null &&
                    other.RootCauses != null &&
                    RootCauses.SequenceEqual(other.RootCauses)
                ) && 
                (
                    LinkedWorOrderIds == other.LinkedWorOrderIds ||
                    LinkedWorOrderIds != null &&
                    other.LinkedWorOrderIds != null &&
                    LinkedWorOrderIds.SequenceEqual(other.LinkedWorOrderIds)
                ) && 
                (
                    Assets == other.Assets ||
                    Assets != null &&
                    other.Assets != null &&
                    Assets.SequenceEqual(other.Assets)
                ) && 
                (
                    RefrigerantWasUsed == other.RefrigerantWasUsed ||
                    
                    RefrigerantWasUsed.Equals(other.RefrigerantWasUsed)
                ) && 
                (
                    WeatherEventId == other.WeatherEventId ||
                    
                    WeatherEventId.Equals(other.WeatherEventId)
                ) && 
                (
                    Technician == other.Technician ||
                    Technician != null &&
                    Technician.Equals(other.Technician)
                ) && 
                (
                    IssueChoice == other.IssueChoice ||
                    IssueChoice != null &&
                    IssueChoice.Equals(other.IssueChoice)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    
                    hashCode = hashCode * 59 + Id.GetHashCode();
                    if (Number != null)
                    hashCode = hashCode * 59 + Number.GetHashCode();
                    if (PurchaseNumber != null)
                    hashCode = hashCode * 59 + PurchaseNumber.GetHashCode();
                    
                    hashCode = hashCode * 59 + SubscriberId.GetHashCode();
                    
                    hashCode = hashCode * 59 + ProviderId.GetHashCode();
                    if (ProviderName != null)
                    hashCode = hashCode * 59 + ProviderName.GetHashCode();
                    
                    hashCode = hashCode * 59 + LocationId.GetHashCode();
                    if (LocationName != null)
                    hashCode = hashCode * 59 + LocationName.GetHashCode();
                    if (LocationStoreId != null)
                    hashCode = hashCode * 59 + LocationStoreId.GetHashCode();
                    if (Status != null)
                    hashCode = hashCode * 59 + Status.GetHashCode();
                    if (Caller != null)
                    hashCode = hashCode * 59 + Caller.GetHashCode();
                    if (CreatedBy != null)
                    hashCode = hashCode * 59 + CreatedBy.GetHashCode();
                    if (UpdatedBy != null)
                    hashCode = hashCode * 59 + UpdatedBy.GetHashCode();
                    if (CallDate != null)
                    hashCode = hashCode * 59 + CallDate.GetHashCode();
                    if (CallDateDTO != null)
                    hashCode = hashCode * 59 + CallDateDTO.GetHashCode();
                    if (ReassignDate != null)
                    hashCode = hashCode * 59 + ReassignDate.GetHashCode();
                    if (Priority != null)
                    hashCode = hashCode * 59 + Priority.GetHashCode();
                    if (Trade != null)
                    hashCode = hashCode * 59 + Trade.GetHashCode();
                    if (ScheduledDate != null)
                    hashCode = hashCode * 59 + ScheduledDate.GetHashCode();
                    
                    hashCode = hashCode * 59 + AreaId.GetHashCode();
                    if (AssetType != null)
                    hashCode = hashCode * 59 + AssetType.GetHashCode();
                    if (ProblemType != null)
                    hashCode = hashCode * 59 + ProblemType.GetHashCode();
                    if (CreatedDateDTO != null)
                    hashCode = hashCode * 59 + CreatedDateDTO.GetHashCode();
                    if (UpdatedDate != null)
                    hashCode = hashCode * 59 + UpdatedDate.GetHashCode();
                    if (UpdatedDateDTO != null)
                    hashCode = hashCode * 59 + UpdatedDateDTO.GetHashCode();
                    if (ScheduledDateDTO != null)
                    hashCode = hashCode * 59 + ScheduledDateDTO.GetHashCode();
                    if (RescheduleReason != null)
                    hashCode = hashCode * 59 + RescheduleReason.GetHashCode();
                    if (CompletedDate != null)
                    hashCode = hashCode * 59 + CompletedDate.GetHashCode();
                    if (ExpirationDate != null)
                    hashCode = hashCode * 59 + ExpirationDate.GetHashCode();
                    if (ExpirationDateDTO != null)
                    hashCode = hashCode * 59 + ExpirationDateDTO.GetHashCode();
                    if (Description != null)
                    hashCode = hashCode * 59 + Description.GetHashCode();
                    if (Category != null)
                    hashCode = hashCode * 59 + Category.GetHashCode();
                    
                    hashCode = hashCode * 59 + Nte.GetHashCode();
                    
                    hashCode = hashCode * 59 + Subtotal.GetHashCode();
                    
                    hashCode = hashCode * 59 + Tax.GetHashCode();
                    if (Tax2Type != null)
                    hashCode = hashCode * 59 + Tax2Type.GetHashCode();
                    
                    hashCode = hashCode * 59 + Tax2.GetHashCode();
                    if (CurrencyAlphabeticalCode != null)
                    hashCode = hashCode * 59 + CurrencyAlphabeticalCode.GetHashCode();
                    if (ProblemCode != null)
                    hashCode = hashCode * 59 + ProblemCode.GetHashCode();
                    if (Resolution != null)
                    hashCode = hashCode * 59 + Resolution.GetHashCode();
                    
                    hashCode = hashCode * 59 + AssetId.GetHashCode();
                    if (Source != null)
                    hashCode = hashCode * 59 + Source.GetHashCode();
                    
                    hashCode = hashCode * 59 + RecallWorkOrder.GetHashCode();
                    if (Notes != null)
                    hashCode = hashCode * 59 + Notes.GetHashCode();
                    if (Attachments != null)
                    hashCode = hashCode * 59 + Attachments.GetHashCode();
                    
                    hashCode = hashCode * 59 + ProjectId.GetHashCode();
                    if (Labels != null)
                    hashCode = hashCode * 59 + Labels.GetHashCode();
                    if (ResolutionCodes != null)
                    hashCode = hashCode * 59 + ResolutionCodes.GetHashCode();
                    if (ResolutionCodesIds != null)
                    hashCode = hashCode * 59 + ResolutionCodesIds.GetHashCode();
                    if (RootCauses != null)
                    hashCode = hashCode * 59 + RootCauses.GetHashCode();
                    if (LinkedWorOrderIds != null)
                    hashCode = hashCode * 59 + LinkedWorOrderIds.GetHashCode();
                    if (Assets != null)
                    hashCode = hashCode * 59 + Assets.GetHashCode();
                    
                    hashCode = hashCode * 59 + RefrigerantWasUsed.GetHashCode();
                    
                    hashCode = hashCode * 59 + WeatherEventId.GetHashCode();
                    if (Technician != null)
                    hashCode = hashCode * 59 + Technician.GetHashCode();
                    if (IssueChoice != null)
                    hashCode = hashCode * 59 + IssueChoice.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(SCServiceChannelNotificationsObjectsWorkOrder left, SCServiceChannelNotificationsObjectsWorkOrder right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(SCServiceChannelNotificationsObjectsWorkOrder left, SCServiceChannelNotificationsObjectsWorkOrder right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}
