/*
 * ServiceChannel API - v.3
 *
 * The ServiceChannel API is a RESTful and stateless API. It accepts standard HTTP verbs and supports OAuth 2.0 for authorizing requests.      Our API returns common HTTP status codes as well as JSON encapsulated data.      See [API Overview](https://developer.servicechannel.com/basics/introduction/overview/) for the intro to ServiceChannel API.<br>      <h3>Authentication and Authorization</h3>You should have a ServiceChannel account, register your application, and obtain `access_token` to integrate with our API.      See [Authentication and Authorization](https://developer.servicechannel.com/basics/general/authentication/) for more information.      To use this API playground, click **Authorize** and sign in to ServiceChannel.<br>      <h3>Environment</h3> All calls in this API Reference point to the **SB2 environment**.      See [Environments](https://developer.servicechannel.com/basics/general/environments/) for more information.<br>      <h3>API Version</h3>The current stable version of the ServiceChannel API is `v3`. In the request URL, `v3` is a version prefix that should be present.      When you omit the version prefix, calls point to the minimum supported version of the API.      We recommend you to always specify the API version to avoid possible errors.
 *
 * The version of the OpenAPI document: 3
 * 
 * Generated by: https://openapi-generator.tech
 */

using System;
using System.Linq;
using System.Text;
using System.Collections.Generic;
using System.ComponentModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using System.Text.Json;
using ServiceChannel.OpenAPIGenerated.Api.Converters;

namespace ServiceChannel.OpenAPIGenerated.Api.Models
{ 
    /// <summary>
    /// 
    /// </summary>
    [DataContract]
    public class SCServiceChannelServicesMessagingProposalsSearchProposalModel : IEquatable<SCServiceChannelServicesMessagingProposalsSearchProposalModel>
    {
        /// <summary>
        /// Gets or Sets UserId
        /// </summary>
        [DataMember(Name="UserId", EmitDefaultValue=false)]
        public string UserId { get; set; }

        /// <summary>
        /// Gets or Sets CurrentLevelProposal
        /// </summary>
        [DataMember(Name="CurrentLevelProposal", EmitDefaultValue=true)]
        public bool CurrentLevelProposal { get; set; } = false;

        /// <summary>
        /// Gets or Sets WorkOrderId
        /// </summary>
        [DataMember(Name="WorkOrderId", EmitDefaultValue=false)]
        public string WorkOrderId { get; set; }

        /// <summary>
        /// Gets or Sets ProposalId
        /// </summary>
        [DataMember(Name="ProposalId", EmitDefaultValue=false)]
        public string ProposalId { get; set; }

        /// <summary>
        /// Gets or Sets PurchaseOrderId
        /// </summary>
        [DataMember(Name="PurchaseOrderId", EmitDefaultValue=false)]
        public string PurchaseOrderId { get; set; }

        /// <summary>
        /// Gets or Sets ProjectId
        /// </summary>
        [DataMember(Name="ProjectId", EmitDefaultValue=false)]
        public string ProjectId { get; set; }

        /// <summary>
        /// Gets or Sets Projects
        /// </summary>
        [DataMember(Name="Projects", EmitDefaultValue=false)]
        public List<SCServiceChannelServicesMessagingProjectsProject> Projects { get; set; }


        /// <summary>
        /// Gets or Sets DateType
        /// </summary>
        
        public enum DateTypeEnum
        {
            
            /// <summary>
            /// Enum PastMonthEnum for PastMonth
            /// </summary>
            [EnumMember(Value = "PastMonth")]
            PastMonthEnum = 1,
            
            /// <summary>
            /// Enum PastThreeMonthsEnum for PastThreeMonths
            /// </summary>
            [EnumMember(Value = "PastThreeMonths")]
            PastThreeMonthsEnum = 2,
            
            /// <summary>
            /// Enum PastYearEnum for PastYear
            /// </summary>
            [EnumMember(Value = "PastYear")]
            PastYearEnum = 3,
            
            /// <summary>
            /// Enum CustomEnum for Custom
            /// </summary>
            [EnumMember(Value = "Custom")]
            CustomEnum = 4
        }

        /// <summary>
        /// Gets or Sets DateType
        /// </summary>
        [DataMember(Name="DateType", EmitDefaultValue=true)]
        public DateTypeEnum DateType { get; set; }


        /// <summary>
        /// Gets or Sets ProposalFilterDateType
        /// </summary>
        
        public enum ProposalFilterDateTypeEnum
        {
            
            /// <summary>
            /// Enum ProposalDateEnum for ProposalDate
            /// </summary>
            [EnumMember(Value = "ProposalDate")]
            ProposalDateEnum = 1,
            
            /// <summary>
            /// Enum ScheduledDateEnum for ScheduledDate
            /// </summary>
            [EnumMember(Value = "ScheduledDate")]
            ScheduledDateEnum = 2,
            
            /// <summary>
            /// Enum ActionDateEnum for ActionDate
            /// </summary>
            [EnumMember(Value = "ActionDate")]
            ActionDateEnum = 3
        }

        /// <summary>
        /// Gets or Sets ProposalFilterDateType
        /// </summary>
        [DataMember(Name="ProposalFilterDateType", EmitDefaultValue=true)]
        public ProposalFilterDateTypeEnum ProposalFilterDateType { get; set; }

        /// <summary>
        /// Gets or Sets ProposalDateFrom
        /// </summary>
        [DataMember(Name="ProposalDateFrom", EmitDefaultValue=false)]
        public DateTime ProposalDateFrom { get; set; }

        /// <summary>
        /// Gets or Sets ProposalDateTo
        /// </summary>
        [DataMember(Name="ProposalDateTo", EmitDefaultValue=false)]
        public DateTime ProposalDateTo { get; set; }

        /// <summary>
        /// Gets or Sets ProposalDateFromString
        /// </summary>
        [DataMember(Name="ProposalDateFromString", EmitDefaultValue=false)]
        public string ProposalDateFromString { get; set; }

        /// <summary>
        /// Gets or Sets ProposalDateToString
        /// </summary>
        [DataMember(Name="ProposalDateToString", EmitDefaultValue=false)]
        public string ProposalDateToString { get; set; }


        /// <summary>
        /// Gets or Sets SortBy
        /// </summary>
        
        public enum SortByEnum
        {
            
            /// <summary>
            /// Enum DateDescEnum for DateDesc
            /// </summary>
            [EnumMember(Value = "DateDesc")]
            DateDescEnum = 1,
            
            /// <summary>
            /// Enum DateAscEnum for DateAsc
            /// </summary>
            [EnumMember(Value = "DateAsc")]
            DateAscEnum = 2,
            
            /// <summary>
            /// Enum ProposalNumberEnum for ProposalNumber
            /// </summary>
            [EnumMember(Value = "ProposalNumber")]
            ProposalNumberEnum = 3,
            
            /// <summary>
            /// Enum TradeEnum for Trade
            /// </summary>
            [EnumMember(Value = "Trade")]
            TradeEnum = 4,
            
            /// <summary>
            /// Enum LocationIdEnum for LocationId
            /// </summary>
            [EnumMember(Value = "LocationId")]
            LocationIdEnum = 5,
            
            /// <summary>
            /// Enum ProviderEnum for Provider
            /// </summary>
            [EnumMember(Value = "Provider")]
            ProviderEnum = 6,
            
            /// <summary>
            /// Enum StatusEnum for Status
            /// </summary>
            [EnumMember(Value = "Status")]
            StatusEnum = 7
        }

        /// <summary>
        /// Gets or Sets SortBy
        /// </summary>
        [DataMember(Name="SortBy", EmitDefaultValue=true)]
        public SortByEnum SortBy { get; set; }

        /// <summary>
        /// Gets or Sets ReportWithAttachmentsOnly
        /// </summary>
        [DataMember(Name="ReportWithAttachmentsOnly", EmitDefaultValue=true)]
        public bool ReportWithAttachmentsOnly { get; set; } = false;

        /// <summary>
        /// Gets or Sets ExcludePropAssociatedWithWo
        /// </summary>
        [DataMember(Name="ExcludePropAssociatedWithWo", EmitDefaultValue=true)]
        public bool ExcludePropAssociatedWithWo { get; set; } = false;


        /// <summary>
        /// Gets or Sets Report
        /// </summary>
        
        public enum ReportEnum
        {
            
            /// <summary>
            /// Enum ViewableEnum for Viewable
            /// </summary>
            [EnumMember(Value = "Viewable")]
            ViewableEnum = 1,
            
            /// <summary>
            /// Enum PrintableEnum for Printable
            /// </summary>
            [EnumMember(Value = "Printable")]
            PrintableEnum = 2,
            
            /// <summary>
            /// Enum ExcelEnum for Excel
            /// </summary>
            [EnumMember(Value = "Excel")]
            ExcelEnum = 3
        }

        /// <summary>
        /// Gets or Sets Report
        /// </summary>
        [DataMember(Name="Report", EmitDefaultValue=true)]
        public ReportEnum Report { get; set; }

        /// <summary>
        /// Gets or Sets Priorities
        /// </summary>
        [DataMember(Name="Priorities", EmitDefaultValue=false)]
        public List<string> Priorities { get; set; }


        /// <summary>
        /// Gets or Sets ProposalStatuses
        /// </summary>
        
        public enum ProposalStatusesEnum
        {
            
            /// <summary>
            /// Enum AllEnum for All
            /// </summary>
            [EnumMember(Value = "All")]
            AllEnum = 1,
            
            /// <summary>
            /// Enum OpenEnum for Open
            /// </summary>
            [EnumMember(Value = "Open")]
            OpenEnum = 2,
            
            /// <summary>
            /// Enum OnHoldEnum for OnHold
            /// </summary>
            [EnumMember(Value = "OnHold")]
            OnHoldEnum = 3,
            
            /// <summary>
            /// Enum ReviewedEnum for Reviewed
            /// </summary>
            [EnumMember(Value = "Reviewed")]
            ReviewedEnum = 4,
            
            /// <summary>
            /// Enum ApprovedNotScheduledEnum for ApprovedNotScheduled
            /// </summary>
            [EnumMember(Value = "ApprovedNotScheduled")]
            ApprovedNotScheduledEnum = 5,
            
            /// <summary>
            /// Enum ApprovedScheduledEnum for ApprovedScheduled
            /// </summary>
            [EnumMember(Value = "ApprovedScheduled")]
            ApprovedScheduledEnum = 6,
            
            /// <summary>
            /// Enum RejectedEnum for Rejected
            /// </summary>
            [EnumMember(Value = "Rejected")]
            RejectedEnum = 7,
            
            /// <summary>
            /// Enum PendingExtEnum for PendingExt
            /// </summary>
            [EnumMember(Value = "PendingExt")]
            PendingExtEnum = 8
        }

        /// <summary>
        /// Gets or Sets ProposalStatuses
        /// </summary>
        [DataMember(Name="ProposalStatuses", EmitDefaultValue=false)]
        public List<SCServiceChannelServicesMessagingProposalsSearchProposalModel.ProposalStatusesEnum> ProposalStatuses { get; set; }

        /// <summary>
        /// Gets or Sets CategoriesIdName
        /// </summary>
        [DataMember(Name="CategoriesIdName", EmitDefaultValue=false)]
        public List<SCServiceChannelApiModelKeyValueSystemStringSystemString> CategoriesIdName { get; set; }

        /// <summary>
        /// Gets or Sets TradesIdName
        /// </summary>
        [DataMember(Name="TradesIdName", EmitDefaultValue=false)]
        public List<SCServiceChannelApiModelKeyValueSystemStringSystemString> TradesIdName { get; set; }

        /// <summary>
        /// Gets or Sets Locations
        /// </summary>
        [DataMember(Name="Locations", EmitDefaultValue=false)]
        public List<string> Locations { get; set; }

        /// <summary>
        /// Gets or Sets LocationShortNames
        /// </summary>
        [DataMember(Name="LocationShortNames", EmitDefaultValue=false)]
        public List<string> LocationShortNames { get; set; }

        /// <summary>
        /// Gets or Sets LocationShortAddresses
        /// </summary>
        [DataMember(Name="LocationShortAddresses", EmitDefaultValue=false)]
        public List<string> LocationShortAddresses { get; set; }

        /// <summary>
        /// Gets or Sets LocationCities
        /// </summary>
        [DataMember(Name="LocationCities", EmitDefaultValue=false)]
        public List<string> LocationCities { get; set; }

        /// <summary>
        /// Gets or Sets StateIds
        /// </summary>
        [DataMember(Name="StateIds", EmitDefaultValue=false)]
        public List<int> StateIds { get; set; }

        /// <summary>
        /// Gets or Sets CountryIds
        /// </summary>
        [DataMember(Name="CountryIds", EmitDefaultValue=false)]
        public List<int> CountryIds { get; set; }

        /// <summary>
        /// Gets or Sets Regions
        /// </summary>
        [DataMember(Name="Regions", EmitDefaultValue=false)]
        public List<string> Regions { get; set; }

        /// <summary>
        /// Gets or Sets Districts
        /// </summary>
        [DataMember(Name="Districts", EmitDefaultValue=false)]
        public List<string> Districts { get; set; }

        /// <summary>
        /// Gets or Sets States
        /// </summary>
        [DataMember(Name="States", EmitDefaultValue=false)]
        public List<string> States { get; set; }

        /// <summary>
        /// Gets or Sets Countries
        /// </summary>
        [DataMember(Name="Countries", EmitDefaultValue=false)]
        public List<string> Countries { get; set; }

        /// <summary>
        /// Gets or Sets Attributes
        /// </summary>
        [DataMember(Name="Attributes", EmitDefaultValue=false)]
        public List<SCServiceChannelServicesMessagingProposalsIdNameValue> Attributes { get; set; }

        /// <summary>
        /// Gets or Sets LocationNoteHeaders
        /// </summary>
        [DataMember(Name="LocationNoteHeaders", EmitDefaultValue=false)]
        public List<string> LocationNoteHeaders { get; set; }

        /// <summary>
        /// Gets or Sets LineItemReport
        /// </summary>
        [DataMember(Name="LineItemReport", EmitDefaultValue=true)]
        public bool LineItemReport { get; set; } = false;

        /// <summary>
        /// Gets or Sets Provider
        /// </summary>
        [DataMember(Name="Provider", EmitDefaultValue=false)]
        public string Provider { get; set; }

        /// <summary>
        /// Gets or Sets ChangedProposals
        /// </summary>
        [DataMember(Name="ChangedProposals", EmitDefaultValue=false)]
        public List<int> ChangedProposals { get; set; }

        /// <summary>
        /// Gets or Sets ProposalIids
        /// </summary>
        [DataMember(Name="ProposalIids", EmitDefaultValue=false)]
        public string ProposalIids { get; set; }

        /// <summary>
        /// Gets or Sets ProposalNumber
        /// </summary>
        [DataMember(Name="ProposalNumber", EmitDefaultValue=false)]
        public string ProposalNumber { get; set; }

        /// <summary>
        /// Gets or Sets ProposalWO
        /// </summary>
        [DataMember(Name="ProposalWO", EmitDefaultValue=false)]
        public string ProposalWO { get; set; }

        /// <summary>
        /// Gets or Sets ProviderId
        /// </summary>
        [DataMember(Name="ProviderId", EmitDefaultValue=true)]
        public int ProviderId { get; set; }

        /// <summary>
        /// Gets or Sets LocationId
        /// </summary>
        [DataMember(Name="LocationId", EmitDefaultValue=true)]
        public int LocationId { get; set; }

        /// <summary>
        /// Gets or Sets SaveReport
        /// </summary>
        [DataMember(Name="SaveReport", EmitDefaultValue=false)]
        public string SaveReport { get; set; }

        /// <summary>
        /// Gets or Sets ALP
        /// </summary>
        [DataMember(Name="ALP", EmitDefaultValue=true)]
        public int ALP { get; set; }

        /// <summary>
        /// Gets or Sets Labels
        /// </summary>
        [DataMember(Name="Labels", EmitDefaultValue=false)]
        public List<SCServiceChannelApiModelKeyValueSystemStringSystemString> Labels { get; set; }

        /// <summary>
        /// Gets or Sets IncludeMlpCategory
        /// </summary>
        [DataMember(Name="IncludeMlpCategory", EmitDefaultValue=true)]
        public bool IncludeMlpCategory { get; set; } = false;

        /// <summary>
        /// Gets or Sets SubscribersIdName
        /// </summary>
        [DataMember(Name="SubscribersIdName", EmitDefaultValue=false)]
        public List<SCServiceChannelApiModelKeyValueSystemInt32SystemString> SubscribersIdName { get; set; }

        /// <summary>
        /// Gets or Sets IsAssignedToMe
        /// </summary>
        [DataMember(Name="IsAssignedToMe", EmitDefaultValue=true)]
        public bool IsAssignedToMe { get; set; } = false;

        /// <summary>
        /// Gets or Sets HasAssignee
        /// </summary>
        [DataMember(Name="HasAssignee", EmitDefaultValue=true)]
        public bool HasAssignee { get; set; } = false;

        /// <summary>
        /// Gets or Sets IncludeOverrideProposals
        /// </summary>
        [DataMember(Name="IncludeOverrideProposals", EmitDefaultValue=true)]
        public bool IncludeOverrideProposals { get; set; } = false;

        /// <summary>
        /// Gets or Sets AmountFrom
        /// </summary>
        [DataMember(Name="AmountFrom", EmitDefaultValue=true)]
        public double AmountFrom { get; set; }

        /// <summary>
        /// Gets or Sets AmountTo
        /// </summary>
        [DataMember(Name="AmountTo", EmitDefaultValue=true)]
        public double AmountTo { get; set; }

        /// <summary>
        /// Gets or Sets StatusesActiveTab
        /// </summary>
        [DataMember(Name="StatusesActiveTab", EmitDefaultValue=false)]
        public string StatusesActiveTab { get; set; }

        /// <summary>
        /// Gets or Sets ProposalsIds
        /// </summary>
        [DataMember(Name="ProposalsIds", EmitDefaultValue=false)]
        public List<int> ProposalsIds { get; set; }


        /// <summary>
        /// Gets or Sets SortField
        /// </summary>
        
        public enum SortFieldEnum
        {
            
            /// <summary>
            /// Enum LocDateEnum for LocDate
            /// </summary>
            [EnumMember(Value = "LocDate")]
            LocDateEnum = 1,
            
            /// <summary>
            /// Enum ProposalNumberEnum for ProposalNumber
            /// </summary>
            [EnumMember(Value = "ProposalNumber")]
            ProposalNumberEnum = 2,
            
            /// <summary>
            /// Enum TradeEnum for Trade
            /// </summary>
            [EnumMember(Value = "Trade")]
            TradeEnum = 3,
            
            /// <summary>
            /// Enum StoreIdEnum for StoreId
            /// </summary>
            [EnumMember(Value = "StoreId")]
            StoreIdEnum = 4,
            
            /// <summary>
            /// Enum ProviderNameEnum for ProviderName
            /// </summary>
            [EnumMember(Value = "ProviderName")]
            ProviderNameEnum = 5,
            
            /// <summary>
            /// Enum StatusEnum for Status
            /// </summary>
            [EnumMember(Value = "Status")]
            StatusEnum = 6,
            
            /// <summary>
            /// Enum SubscriberNameEnum for SubscriberName
            /// </summary>
            [EnumMember(Value = "SubscriberName")]
            SubscriberNameEnum = 7
        }

        /// <summary>
        /// Gets or Sets SortField
        /// </summary>
        [DataMember(Name="SortField", EmitDefaultValue=true)]
        public SortFieldEnum SortField { get; set; }


        /// <summary>
        /// Gets or Sets SortOrder
        /// </summary>
        
        public enum SortOrderEnum
        {
            
            /// <summary>
            /// Enum ASCEnum for ASC
            /// </summary>
            [EnumMember(Value = "ASC")]
            ASCEnum = 1,
            
            /// <summary>
            /// Enum DESCEnum for DESC
            /// </summary>
            [EnumMember(Value = "DESC")]
            DESCEnum = 2
        }

        /// <summary>
        /// Gets or Sets SortOrder
        /// </summary>
        [DataMember(Name="SortOrder", EmitDefaultValue=true)]
        public SortOrderEnum SortOrder { get; set; }

        /// <summary>
        /// Gets or Sets Currency
        /// </summary>
        [DataMember(Name="Currency", EmitDefaultValue=false)]
        public SCServiceChannelApiModelCurrencyCurrency Currency { get; set; }

        /// <summary>
        /// Gets or Sets Offset
        /// </summary>
        [DataMember(Name="Offset", EmitDefaultValue=true)]
        public int Offset { get; set; }

        /// <summary>
        /// Gets or Sets Count
        /// </summary>
        [DataMember(Name="Count", EmitDefaultValue=true)]
        public int Count { get; set; }

        /// <summary>
        /// Gets or Sets Language
        /// </summary>
        [DataMember(Name="Language", EmitDefaultValue=false)]
        public string Language { get; set; }

        /// <summary>
        /// Gets or Sets AllUsers
        /// </summary>
        [DataMember(Name="AllUsers", EmitDefaultValue=true)]
        public bool AllUsers { get; set; } = false;

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class SCServiceChannelServicesMessagingProposalsSearchProposalModel {\n");
            sb.Append("  UserId: ").Append(UserId).Append("\n");
            sb.Append("  CurrentLevelProposal: ").Append(CurrentLevelProposal).Append("\n");
            sb.Append("  WorkOrderId: ").Append(WorkOrderId).Append("\n");
            sb.Append("  ProposalId: ").Append(ProposalId).Append("\n");
            sb.Append("  PurchaseOrderId: ").Append(PurchaseOrderId).Append("\n");
            sb.Append("  ProjectId: ").Append(ProjectId).Append("\n");
            sb.Append("  Projects: ").Append(Projects).Append("\n");
            sb.Append("  DateType: ").Append(DateType).Append("\n");
            sb.Append("  ProposalFilterDateType: ").Append(ProposalFilterDateType).Append("\n");
            sb.Append("  ProposalDateFrom: ").Append(ProposalDateFrom).Append("\n");
            sb.Append("  ProposalDateTo: ").Append(ProposalDateTo).Append("\n");
            sb.Append("  ProposalDateFromString: ").Append(ProposalDateFromString).Append("\n");
            sb.Append("  ProposalDateToString: ").Append(ProposalDateToString).Append("\n");
            sb.Append("  SortBy: ").Append(SortBy).Append("\n");
            sb.Append("  ReportWithAttachmentsOnly: ").Append(ReportWithAttachmentsOnly).Append("\n");
            sb.Append("  ExcludePropAssociatedWithWo: ").Append(ExcludePropAssociatedWithWo).Append("\n");
            sb.Append("  Report: ").Append(Report).Append("\n");
            sb.Append("  Priorities: ").Append(Priorities).Append("\n");
            sb.Append("  ProposalStatuses: ").Append(ProposalStatuses).Append("\n");
            sb.Append("  CategoriesIdName: ").Append(CategoriesIdName).Append("\n");
            sb.Append("  TradesIdName: ").Append(TradesIdName).Append("\n");
            sb.Append("  Locations: ").Append(Locations).Append("\n");
            sb.Append("  LocationShortNames: ").Append(LocationShortNames).Append("\n");
            sb.Append("  LocationShortAddresses: ").Append(LocationShortAddresses).Append("\n");
            sb.Append("  LocationCities: ").Append(LocationCities).Append("\n");
            sb.Append("  StateIds: ").Append(StateIds).Append("\n");
            sb.Append("  CountryIds: ").Append(CountryIds).Append("\n");
            sb.Append("  Regions: ").Append(Regions).Append("\n");
            sb.Append("  Districts: ").Append(Districts).Append("\n");
            sb.Append("  States: ").Append(States).Append("\n");
            sb.Append("  Countries: ").Append(Countries).Append("\n");
            sb.Append("  Attributes: ").Append(Attributes).Append("\n");
            sb.Append("  LocationNoteHeaders: ").Append(LocationNoteHeaders).Append("\n");
            sb.Append("  LineItemReport: ").Append(LineItemReport).Append("\n");
            sb.Append("  Provider: ").Append(Provider).Append("\n");
            sb.Append("  ChangedProposals: ").Append(ChangedProposals).Append("\n");
            sb.Append("  ProposalIids: ").Append(ProposalIids).Append("\n");
            sb.Append("  ProposalNumber: ").Append(ProposalNumber).Append("\n");
            sb.Append("  ProposalWO: ").Append(ProposalWO).Append("\n");
            sb.Append("  ProviderId: ").Append(ProviderId).Append("\n");
            sb.Append("  LocationId: ").Append(LocationId).Append("\n");
            sb.Append("  SaveReport: ").Append(SaveReport).Append("\n");
            sb.Append("  ALP: ").Append(ALP).Append("\n");
            sb.Append("  Labels: ").Append(Labels).Append("\n");
            sb.Append("  IncludeMlpCategory: ").Append(IncludeMlpCategory).Append("\n");
            sb.Append("  SubscribersIdName: ").Append(SubscribersIdName).Append("\n");
            sb.Append("  IsAssignedToMe: ").Append(IsAssignedToMe).Append("\n");
            sb.Append("  HasAssignee: ").Append(HasAssignee).Append("\n");
            sb.Append("  IncludeOverrideProposals: ").Append(IncludeOverrideProposals).Append("\n");
            sb.Append("  AmountFrom: ").Append(AmountFrom).Append("\n");
            sb.Append("  AmountTo: ").Append(AmountTo).Append("\n");
            sb.Append("  StatusesActiveTab: ").Append(StatusesActiveTab).Append("\n");
            sb.Append("  ProposalsIds: ").Append(ProposalsIds).Append("\n");
            sb.Append("  SortField: ").Append(SortField).Append("\n");
            sb.Append("  SortOrder: ").Append(SortOrder).Append("\n");
            sb.Append("  Currency: ").Append(Currency).Append("\n");
            sb.Append("  Offset: ").Append(Offset).Append("\n");
            sb.Append("  Count: ").Append(Count).Append("\n");
            sb.Append("  Language: ").Append(Language).Append("\n");
            sb.Append("  AllUsers: ").Append(AllUsers).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            var options = new JsonSerializerOptions
            {
                WriteIndented = true
            };

            return JsonSerializer.Serialize(this, options);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (obj is null) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((SCServiceChannelServicesMessagingProposalsSearchProposalModel)obj);
        }

        /// <summary>
        /// Returns true if SCServiceChannelServicesMessagingProposalsSearchProposalModel instances are equal
        /// </summary>
        /// <param name="other">Instance of SCServiceChannelServicesMessagingProposalsSearchProposalModel to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(SCServiceChannelServicesMessagingProposalsSearchProposalModel other)
        {
            if (other is null) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    UserId == other.UserId ||
                    UserId != null &&
                    UserId.Equals(other.UserId)
                ) && 
                (
                    CurrentLevelProposal == other.CurrentLevelProposal ||
                    
                    CurrentLevelProposal.Equals(other.CurrentLevelProposal)
                ) && 
                (
                    WorkOrderId == other.WorkOrderId ||
                    WorkOrderId != null &&
                    WorkOrderId.Equals(other.WorkOrderId)
                ) && 
                (
                    ProposalId == other.ProposalId ||
                    ProposalId != null &&
                    ProposalId.Equals(other.ProposalId)
                ) && 
                (
                    PurchaseOrderId == other.PurchaseOrderId ||
                    PurchaseOrderId != null &&
                    PurchaseOrderId.Equals(other.PurchaseOrderId)
                ) && 
                (
                    ProjectId == other.ProjectId ||
                    ProjectId != null &&
                    ProjectId.Equals(other.ProjectId)
                ) && 
                (
                    Projects == other.Projects ||
                    Projects != null &&
                    other.Projects != null &&
                    Projects.SequenceEqual(other.Projects)
                ) && 
                (
                    DateType == other.DateType ||
                    
                    DateType.Equals(other.DateType)
                ) && 
                (
                    ProposalFilterDateType == other.ProposalFilterDateType ||
                    
                    ProposalFilterDateType.Equals(other.ProposalFilterDateType)
                ) && 
                (
                    ProposalDateFrom == other.ProposalDateFrom ||
                    ProposalDateFrom != null &&
                    ProposalDateFrom.Equals(other.ProposalDateFrom)
                ) && 
                (
                    ProposalDateTo == other.ProposalDateTo ||
                    ProposalDateTo != null &&
                    ProposalDateTo.Equals(other.ProposalDateTo)
                ) && 
                (
                    ProposalDateFromString == other.ProposalDateFromString ||
                    ProposalDateFromString != null &&
                    ProposalDateFromString.Equals(other.ProposalDateFromString)
                ) && 
                (
                    ProposalDateToString == other.ProposalDateToString ||
                    ProposalDateToString != null &&
                    ProposalDateToString.Equals(other.ProposalDateToString)
                ) && 
                (
                    SortBy == other.SortBy ||
                    
                    SortBy.Equals(other.SortBy)
                ) && 
                (
                    ReportWithAttachmentsOnly == other.ReportWithAttachmentsOnly ||
                    
                    ReportWithAttachmentsOnly.Equals(other.ReportWithAttachmentsOnly)
                ) && 
                (
                    ExcludePropAssociatedWithWo == other.ExcludePropAssociatedWithWo ||
                    
                    ExcludePropAssociatedWithWo.Equals(other.ExcludePropAssociatedWithWo)
                ) && 
                (
                    Report == other.Report ||
                    
                    Report.Equals(other.Report)
                ) && 
                (
                    Priorities == other.Priorities ||
                    Priorities != null &&
                    other.Priorities != null &&
                    Priorities.SequenceEqual(other.Priorities)
                ) && 
                (
                    ProposalStatuses == other.ProposalStatuses ||
                    ProposalStatuses != null &&
                    other.ProposalStatuses != null &&
                    ProposalStatuses.SequenceEqual(other.ProposalStatuses)
                ) && 
                (
                    CategoriesIdName == other.CategoriesIdName ||
                    CategoriesIdName != null &&
                    other.CategoriesIdName != null &&
                    CategoriesIdName.SequenceEqual(other.CategoriesIdName)
                ) && 
                (
                    TradesIdName == other.TradesIdName ||
                    TradesIdName != null &&
                    other.TradesIdName != null &&
                    TradesIdName.SequenceEqual(other.TradesIdName)
                ) && 
                (
                    Locations == other.Locations ||
                    Locations != null &&
                    other.Locations != null &&
                    Locations.SequenceEqual(other.Locations)
                ) && 
                (
                    LocationShortNames == other.LocationShortNames ||
                    LocationShortNames != null &&
                    other.LocationShortNames != null &&
                    LocationShortNames.SequenceEqual(other.LocationShortNames)
                ) && 
                (
                    LocationShortAddresses == other.LocationShortAddresses ||
                    LocationShortAddresses != null &&
                    other.LocationShortAddresses != null &&
                    LocationShortAddresses.SequenceEqual(other.LocationShortAddresses)
                ) && 
                (
                    LocationCities == other.LocationCities ||
                    LocationCities != null &&
                    other.LocationCities != null &&
                    LocationCities.SequenceEqual(other.LocationCities)
                ) && 
                (
                    StateIds == other.StateIds ||
                    StateIds != null &&
                    other.StateIds != null &&
                    StateIds.SequenceEqual(other.StateIds)
                ) && 
                (
                    CountryIds == other.CountryIds ||
                    CountryIds != null &&
                    other.CountryIds != null &&
                    CountryIds.SequenceEqual(other.CountryIds)
                ) && 
                (
                    Regions == other.Regions ||
                    Regions != null &&
                    other.Regions != null &&
                    Regions.SequenceEqual(other.Regions)
                ) && 
                (
                    Districts == other.Districts ||
                    Districts != null &&
                    other.Districts != null &&
                    Districts.SequenceEqual(other.Districts)
                ) && 
                (
                    States == other.States ||
                    States != null &&
                    other.States != null &&
                    States.SequenceEqual(other.States)
                ) && 
                (
                    Countries == other.Countries ||
                    Countries != null &&
                    other.Countries != null &&
                    Countries.SequenceEqual(other.Countries)
                ) && 
                (
                    Attributes == other.Attributes ||
                    Attributes != null &&
                    other.Attributes != null &&
                    Attributes.SequenceEqual(other.Attributes)
                ) && 
                (
                    LocationNoteHeaders == other.LocationNoteHeaders ||
                    LocationNoteHeaders != null &&
                    other.LocationNoteHeaders != null &&
                    LocationNoteHeaders.SequenceEqual(other.LocationNoteHeaders)
                ) && 
                (
                    LineItemReport == other.LineItemReport ||
                    
                    LineItemReport.Equals(other.LineItemReport)
                ) && 
                (
                    Provider == other.Provider ||
                    Provider != null &&
                    Provider.Equals(other.Provider)
                ) && 
                (
                    ChangedProposals == other.ChangedProposals ||
                    ChangedProposals != null &&
                    other.ChangedProposals != null &&
                    ChangedProposals.SequenceEqual(other.ChangedProposals)
                ) && 
                (
                    ProposalIids == other.ProposalIids ||
                    ProposalIids != null &&
                    ProposalIids.Equals(other.ProposalIids)
                ) && 
                (
                    ProposalNumber == other.ProposalNumber ||
                    ProposalNumber != null &&
                    ProposalNumber.Equals(other.ProposalNumber)
                ) && 
                (
                    ProposalWO == other.ProposalWO ||
                    ProposalWO != null &&
                    ProposalWO.Equals(other.ProposalWO)
                ) && 
                (
                    ProviderId == other.ProviderId ||
                    
                    ProviderId.Equals(other.ProviderId)
                ) && 
                (
                    LocationId == other.LocationId ||
                    
                    LocationId.Equals(other.LocationId)
                ) && 
                (
                    SaveReport == other.SaveReport ||
                    SaveReport != null &&
                    SaveReport.Equals(other.SaveReport)
                ) && 
                (
                    ALP == other.ALP ||
                    
                    ALP.Equals(other.ALP)
                ) && 
                (
                    Labels == other.Labels ||
                    Labels != null &&
                    other.Labels != null &&
                    Labels.SequenceEqual(other.Labels)
                ) && 
                (
                    IncludeMlpCategory == other.IncludeMlpCategory ||
                    
                    IncludeMlpCategory.Equals(other.IncludeMlpCategory)
                ) && 
                (
                    SubscribersIdName == other.SubscribersIdName ||
                    SubscribersIdName != null &&
                    other.SubscribersIdName != null &&
                    SubscribersIdName.SequenceEqual(other.SubscribersIdName)
                ) && 
                (
                    IsAssignedToMe == other.IsAssignedToMe ||
                    
                    IsAssignedToMe.Equals(other.IsAssignedToMe)
                ) && 
                (
                    HasAssignee == other.HasAssignee ||
                    
                    HasAssignee.Equals(other.HasAssignee)
                ) && 
                (
                    IncludeOverrideProposals == other.IncludeOverrideProposals ||
                    
                    IncludeOverrideProposals.Equals(other.IncludeOverrideProposals)
                ) && 
                (
                    AmountFrom == other.AmountFrom ||
                    
                    AmountFrom.Equals(other.AmountFrom)
                ) && 
                (
                    AmountTo == other.AmountTo ||
                    
                    AmountTo.Equals(other.AmountTo)
                ) && 
                (
                    StatusesActiveTab == other.StatusesActiveTab ||
                    StatusesActiveTab != null &&
                    StatusesActiveTab.Equals(other.StatusesActiveTab)
                ) && 
                (
                    ProposalsIds == other.ProposalsIds ||
                    ProposalsIds != null &&
                    other.ProposalsIds != null &&
                    ProposalsIds.SequenceEqual(other.ProposalsIds)
                ) && 
                (
                    SortField == other.SortField ||
                    
                    SortField.Equals(other.SortField)
                ) && 
                (
                    SortOrder == other.SortOrder ||
                    
                    SortOrder.Equals(other.SortOrder)
                ) && 
                (
                    Currency == other.Currency ||
                    Currency != null &&
                    Currency.Equals(other.Currency)
                ) && 
                (
                    Offset == other.Offset ||
                    
                    Offset.Equals(other.Offset)
                ) && 
                (
                    Count == other.Count ||
                    
                    Count.Equals(other.Count)
                ) && 
                (
                    Language == other.Language ||
                    Language != null &&
                    Language.Equals(other.Language)
                ) && 
                (
                    AllUsers == other.AllUsers ||
                    
                    AllUsers.Equals(other.AllUsers)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    if (UserId != null)
                    hashCode = hashCode * 59 + UserId.GetHashCode();
                    
                    hashCode = hashCode * 59 + CurrentLevelProposal.GetHashCode();
                    if (WorkOrderId != null)
                    hashCode = hashCode * 59 + WorkOrderId.GetHashCode();
                    if (ProposalId != null)
                    hashCode = hashCode * 59 + ProposalId.GetHashCode();
                    if (PurchaseOrderId != null)
                    hashCode = hashCode * 59 + PurchaseOrderId.GetHashCode();
                    if (ProjectId != null)
                    hashCode = hashCode * 59 + ProjectId.GetHashCode();
                    if (Projects != null)
                    hashCode = hashCode * 59 + Projects.GetHashCode();
                    
                    hashCode = hashCode * 59 + DateType.GetHashCode();
                    
                    hashCode = hashCode * 59 + ProposalFilterDateType.GetHashCode();
                    if (ProposalDateFrom != null)
                    hashCode = hashCode * 59 + ProposalDateFrom.GetHashCode();
                    if (ProposalDateTo != null)
                    hashCode = hashCode * 59 + ProposalDateTo.GetHashCode();
                    if (ProposalDateFromString != null)
                    hashCode = hashCode * 59 + ProposalDateFromString.GetHashCode();
                    if (ProposalDateToString != null)
                    hashCode = hashCode * 59 + ProposalDateToString.GetHashCode();
                    
                    hashCode = hashCode * 59 + SortBy.GetHashCode();
                    
                    hashCode = hashCode * 59 + ReportWithAttachmentsOnly.GetHashCode();
                    
                    hashCode = hashCode * 59 + ExcludePropAssociatedWithWo.GetHashCode();
                    
                    hashCode = hashCode * 59 + Report.GetHashCode();
                    if (Priorities != null)
                    hashCode = hashCode * 59 + Priorities.GetHashCode();
                    if (ProposalStatuses != null)
                    hashCode = hashCode * 59 + ProposalStatuses.GetHashCode();
                    if (CategoriesIdName != null)
                    hashCode = hashCode * 59 + CategoriesIdName.GetHashCode();
                    if (TradesIdName != null)
                    hashCode = hashCode * 59 + TradesIdName.GetHashCode();
                    if (Locations != null)
                    hashCode = hashCode * 59 + Locations.GetHashCode();
                    if (LocationShortNames != null)
                    hashCode = hashCode * 59 + LocationShortNames.GetHashCode();
                    if (LocationShortAddresses != null)
                    hashCode = hashCode * 59 + LocationShortAddresses.GetHashCode();
                    if (LocationCities != null)
                    hashCode = hashCode * 59 + LocationCities.GetHashCode();
                    if (StateIds != null)
                    hashCode = hashCode * 59 + StateIds.GetHashCode();
                    if (CountryIds != null)
                    hashCode = hashCode * 59 + CountryIds.GetHashCode();
                    if (Regions != null)
                    hashCode = hashCode * 59 + Regions.GetHashCode();
                    if (Districts != null)
                    hashCode = hashCode * 59 + Districts.GetHashCode();
                    if (States != null)
                    hashCode = hashCode * 59 + States.GetHashCode();
                    if (Countries != null)
                    hashCode = hashCode * 59 + Countries.GetHashCode();
                    if (Attributes != null)
                    hashCode = hashCode * 59 + Attributes.GetHashCode();
                    if (LocationNoteHeaders != null)
                    hashCode = hashCode * 59 + LocationNoteHeaders.GetHashCode();
                    
                    hashCode = hashCode * 59 + LineItemReport.GetHashCode();
                    if (Provider != null)
                    hashCode = hashCode * 59 + Provider.GetHashCode();
                    if (ChangedProposals != null)
                    hashCode = hashCode * 59 + ChangedProposals.GetHashCode();
                    if (ProposalIids != null)
                    hashCode = hashCode * 59 + ProposalIids.GetHashCode();
                    if (ProposalNumber != null)
                    hashCode = hashCode * 59 + ProposalNumber.GetHashCode();
                    if (ProposalWO != null)
                    hashCode = hashCode * 59 + ProposalWO.GetHashCode();
                    
                    hashCode = hashCode * 59 + ProviderId.GetHashCode();
                    
                    hashCode = hashCode * 59 + LocationId.GetHashCode();
                    if (SaveReport != null)
                    hashCode = hashCode * 59 + SaveReport.GetHashCode();
                    
                    hashCode = hashCode * 59 + ALP.GetHashCode();
                    if (Labels != null)
                    hashCode = hashCode * 59 + Labels.GetHashCode();
                    
                    hashCode = hashCode * 59 + IncludeMlpCategory.GetHashCode();
                    if (SubscribersIdName != null)
                    hashCode = hashCode * 59 + SubscribersIdName.GetHashCode();
                    
                    hashCode = hashCode * 59 + IsAssignedToMe.GetHashCode();
                    
                    hashCode = hashCode * 59 + HasAssignee.GetHashCode();
                    
                    hashCode = hashCode * 59 + IncludeOverrideProposals.GetHashCode();
                    
                    hashCode = hashCode * 59 + AmountFrom.GetHashCode();
                    
                    hashCode = hashCode * 59 + AmountTo.GetHashCode();
                    if (StatusesActiveTab != null)
                    hashCode = hashCode * 59 + StatusesActiveTab.GetHashCode();
                    if (ProposalsIds != null)
                    hashCode = hashCode * 59 + ProposalsIds.GetHashCode();
                    
                    hashCode = hashCode * 59 + SortField.GetHashCode();
                    
                    hashCode = hashCode * 59 + SortOrder.GetHashCode();
                    if (Currency != null)
                    hashCode = hashCode * 59 + Currency.GetHashCode();
                    
                    hashCode = hashCode * 59 + Offset.GetHashCode();
                    
                    hashCode = hashCode * 59 + Count.GetHashCode();
                    if (Language != null)
                    hashCode = hashCode * 59 + Language.GetHashCode();
                    
                    hashCode = hashCode * 59 + AllUsers.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(SCServiceChannelServicesMessagingProposalsSearchProposalModel left, SCServiceChannelServicesMessagingProposalsSearchProposalModel right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(SCServiceChannelServicesMessagingProposalsSearchProposalModel left, SCServiceChannelServicesMessagingProposalsSearchProposalModel right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}
