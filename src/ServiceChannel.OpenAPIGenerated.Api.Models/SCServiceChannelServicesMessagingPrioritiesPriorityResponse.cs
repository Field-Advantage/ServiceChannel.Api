/*
 * ServiceChannel API - v.3
 *
 * The ServiceChannel API is a RESTful and stateless API. It accepts standard HTTP verbs and supports OAuth 2.0 for authorizing requests.      Our API returns common HTTP status codes as well as JSON encapsulated data.      See [API Overview](https://developer.servicechannel.com/basics/introduction/overview/) for the intro to ServiceChannel API.<br>      <h3>Authentication and Authorization</h3>You should have a ServiceChannel account, register your application, and obtain `access_token` to integrate with our API.      See [Authentication and Authorization](https://developer.servicechannel.com/basics/general/authentication/) for more information.      To use this API playground, click **Authorize** and sign in to ServiceChannel.<br>      <h3>Environment</h3> All calls in this API Reference point to the **SB2 environment**.      See [Environments](https://developer.servicechannel.com/basics/general/environments/) for more information.<br>      <h3>API Version</h3>The current stable version of the ServiceChannel API is `v3`. In the request URL, `v3` is a version prefix that should be present.      When you omit the version prefix, calls point to the minimum supported version of the API.      We recommend you to always specify the API version to avoid possible errors.
 *
 * The version of the OpenAPI document: 3
 * 
 * Generated by: https://openapi-generator.tech
 */

using System;
using System.Linq;
using System.Text;
using System.Collections.Generic;
using System.ComponentModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using System.Text.Json;
using ServiceChannel.OpenAPIGenerated.Api.Converters;

namespace ServiceChannel.OpenAPIGenerated.Api.Models
{ 
    /// <summary>
    /// 
    /// </summary>
    [DataContract]
    public class SCServiceChannelServicesMessagingPrioritiesPriorityResponse : IEquatable<SCServiceChannelServicesMessagingPrioritiesPriorityResponse>
    {
        /// <summary>
        /// UID of priority. Can be null
        /// </summary>
        /// <value>UID of priority. Can be null</value>
        [DataMember(Name="Id", EmitDefaultValue=true)]
        public int Id { get; set; }

        /// <summary>
        /// Priority name
        /// </summary>
        /// <value>Priority name</value>
        [DataMember(Name="Name", EmitDefaultValue=false)]
        public string Name { get; set; }

        /// <summary>
        /// UID of subscriber. Can be null
        /// </summary>
        /// <value>UID of subscriber. Can be null</value>
        [DataMember(Name="SubscriberId", EmitDefaultValue=true)]
        public int SubscriberId { get; set; }

        /// <summary>
        /// ETA
        /// </summary>
        /// <value>ETA</value>
        [DataMember(Name="Eta", EmitDefaultValue=false)]
        public string Eta { get; set; }

        /// <summary>
        /// Skip nights while calculating scheduled date
        /// </summary>
        /// <value>Skip nights while calculating scheduled date</value>
        [DataMember(Name="SkipNights", EmitDefaultValue=true)]
        public bool SkipNights { get; set; } = false;

        /// <summary>
        /// Skip weekends while calculating scheduled date
        /// </summary>
        /// <value>Skip weekends while calculating scheduled date</value>
        [DataMember(Name="SkipWeekends", EmitDefaultValue=true)]
        public bool SkipWeekends { get; set; } = false;

        /// <summary>
        /// If priority is associated with location - assiciated location
        /// </summary>
        /// <value>If priority is associated with location - assiciated location</value>
        [DataMember(Name="LocationId", EmitDefaultValue=true)]
        public int LocationId { get; set; }

        /// <summary>
        /// If priority is associated with trade - assiciated trade
        /// </summary>
        /// <value>If priority is associated with trade - assiciated trade</value>
        [DataMember(Name="Trade", EmitDefaultValue=false)]
        public string Trade { get; set; }

        /// <summary>
        /// Calculated WO Scheduled Date
        /// </summary>
        /// <value>Calculated WO Scheduled Date</value>
        [DataMember(Name="ScheduledDate", EmitDefaultValue=false)]
        public DateTime ScheduledDate { get; set; }

        /// <summary>
        /// Calculated WO Scheduled Date with time zone offset
        /// </summary>
        /// <value>Calculated WO Scheduled Date with time zone offset</value>
        [DataMember(Name="ScheduledDate_DTO", EmitDefaultValue=false)]
        public DateTime ScheduledDateDTO { get; set; }

        /// <summary>
        /// IsSelectable
        /// </summary>
        /// <value>IsSelectable</value>
        [DataMember(Name="IsSelectable", EmitDefaultValue=true)]
        public bool IsSelectable { get; set; } = false;

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class SCServiceChannelServicesMessagingPrioritiesPriorityResponse {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  SubscriberId: ").Append(SubscriberId).Append("\n");
            sb.Append("  Eta: ").Append(Eta).Append("\n");
            sb.Append("  SkipNights: ").Append(SkipNights).Append("\n");
            sb.Append("  SkipWeekends: ").Append(SkipWeekends).Append("\n");
            sb.Append("  LocationId: ").Append(LocationId).Append("\n");
            sb.Append("  Trade: ").Append(Trade).Append("\n");
            sb.Append("  ScheduledDate: ").Append(ScheduledDate).Append("\n");
            sb.Append("  ScheduledDateDTO: ").Append(ScheduledDateDTO).Append("\n");
            sb.Append("  IsSelectable: ").Append(IsSelectable).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            var options = new JsonSerializerOptions
            {
                WriteIndented = true
            };

            return JsonSerializer.Serialize(this, options);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (obj is null) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((SCServiceChannelServicesMessagingPrioritiesPriorityResponse)obj);
        }

        /// <summary>
        /// Returns true if SCServiceChannelServicesMessagingPrioritiesPriorityResponse instances are equal
        /// </summary>
        /// <param name="other">Instance of SCServiceChannelServicesMessagingPrioritiesPriorityResponse to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(SCServiceChannelServicesMessagingPrioritiesPriorityResponse other)
        {
            if (other is null) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    Id == other.Id ||
                    
                    Id.Equals(other.Id)
                ) && 
                (
                    Name == other.Name ||
                    Name != null &&
                    Name.Equals(other.Name)
                ) && 
                (
                    SubscriberId == other.SubscriberId ||
                    
                    SubscriberId.Equals(other.SubscriberId)
                ) && 
                (
                    Eta == other.Eta ||
                    Eta != null &&
                    Eta.Equals(other.Eta)
                ) && 
                (
                    SkipNights == other.SkipNights ||
                    
                    SkipNights.Equals(other.SkipNights)
                ) && 
                (
                    SkipWeekends == other.SkipWeekends ||
                    
                    SkipWeekends.Equals(other.SkipWeekends)
                ) && 
                (
                    LocationId == other.LocationId ||
                    
                    LocationId.Equals(other.LocationId)
                ) && 
                (
                    Trade == other.Trade ||
                    Trade != null &&
                    Trade.Equals(other.Trade)
                ) && 
                (
                    ScheduledDate == other.ScheduledDate ||
                    ScheduledDate != null &&
                    ScheduledDate.Equals(other.ScheduledDate)
                ) && 
                (
                    ScheduledDateDTO == other.ScheduledDateDTO ||
                    ScheduledDateDTO != null &&
                    ScheduledDateDTO.Equals(other.ScheduledDateDTO)
                ) && 
                (
                    IsSelectable == other.IsSelectable ||
                    
                    IsSelectable.Equals(other.IsSelectable)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    
                    hashCode = hashCode * 59 + Id.GetHashCode();
                    if (Name != null)
                    hashCode = hashCode * 59 + Name.GetHashCode();
                    
                    hashCode = hashCode * 59 + SubscriberId.GetHashCode();
                    if (Eta != null)
                    hashCode = hashCode * 59 + Eta.GetHashCode();
                    
                    hashCode = hashCode * 59 + SkipNights.GetHashCode();
                    
                    hashCode = hashCode * 59 + SkipWeekends.GetHashCode();
                    
                    hashCode = hashCode * 59 + LocationId.GetHashCode();
                    if (Trade != null)
                    hashCode = hashCode * 59 + Trade.GetHashCode();
                    if (ScheduledDate != null)
                    hashCode = hashCode * 59 + ScheduledDate.GetHashCode();
                    if (ScheduledDateDTO != null)
                    hashCode = hashCode * 59 + ScheduledDateDTO.GetHashCode();
                    
                    hashCode = hashCode * 59 + IsSelectable.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(SCServiceChannelServicesMessagingPrioritiesPriorityResponse left, SCServiceChannelServicesMessagingPrioritiesPriorityResponse right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(SCServiceChannelServicesMessagingPrioritiesPriorityResponse left, SCServiceChannelServicesMessagingPrioritiesPriorityResponse right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}
