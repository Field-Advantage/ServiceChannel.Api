/*
 * ServiceChannel API - v.3
 *
 * The ServiceChannel API is a RESTful and stateless API. It accepts standard HTTP verbs and supports OAuth 2.0 for authorizing requests.      Our API returns common HTTP status codes as well as JSON encapsulated data.      See [API Overview](https://developer.servicechannel.com/basics/introduction/overview/) for the intro to ServiceChannel API.<br>      <h3>Authentication and Authorization</h3>You should have a ServiceChannel account, register your application, and obtain `access_token` to integrate with our API.      See [Authentication and Authorization](https://developer.servicechannel.com/basics/general/authentication/) for more information.      To use this API playground, click **Authorize** and sign in to ServiceChannel.<br>      <h3>Environment</h3> All calls in this API Reference point to the **SB2 environment**.      See [Environments](https://developer.servicechannel.com/basics/general/environments/) for more information.<br>      <h3>API Version</h3>The current stable version of the ServiceChannel API is `v3`. In the request URL, `v3` is a version prefix that should be present.      When you omit the version prefix, calls point to the minimum supported version of the API.      We recommend you to always specify the API version to avoid possible errors.
 *
 * The version of the OpenAPI document: 3
 * 
 * Generated by: https://openapi-generator.tech
 */

using System;
using System.Linq;
using System.Text;
using System.Collections.Generic;
using System.ComponentModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using System.Text.Json;
using ServiceChannel.OpenAPIGenerated.Api.Converters;

namespace ServiceChannel.OpenAPIGenerated.Api.Models
{ 
    /// <summary>
    /// Object for checklist response details.
    /// </summary>
    [DataContract]
    public class SCServiceChannelServicesMessagingCheckListDetailsCheckListResponseExtended : IEquatable<SCServiceChannelServicesMessagingCheckListDetailsCheckListResponseExtended>
    {
        /// <summary>
        /// Files attached to the checklist response.
        /// </summary>
        /// <value>Files attached to the checklist response.</value>
        [DataMember(Name="Pictures", EmitDefaultValue=false)]
        public List<SCServiceChannelServicesMessagingCheckListDetailsCheckListPictureResponse> Pictures { get; set; }

        /// <summary>
        /// Gets or Sets Question
        /// </summary>
        [DataMember(Name="Question", EmitDefaultValue=false)]
        public SCServiceChannelServicesMessagingCheckListDetailsCheckListDetailQuestionsExtendedResponse Question { get; set; }

        /// <summary>
        /// Gets or Sets QuestionOption
        /// </summary>
        [DataMember(Name="QuestionOption", EmitDefaultValue=false)]
        public SCServiceChannelServicesMessagingCheckListDetailsCheckListQuestionOptionResponse QuestionOption { get; set; }

        /// <summary>
        /// Is current checklist flag.
        /// </summary>
        /// <value>Is current checklist flag.</value>
        [DataMember(Name="IsCurrentChecklist", EmitDefaultValue=true)]
        public bool IsCurrentChecklist { get; set; } = false;

        /// <summary>
        /// Is PM frequency checklist flag.
        /// </summary>
        /// <value>Is PM frequency checklist flag.</value>
        [DataMember(Name="IsFrequencyChecklist", EmitDefaultValue=true)]
        public bool IsFrequencyChecklist { get; set; } = false;

        /// <summary>
        /// Checklist response ID.
        /// </summary>
        /// <value>Checklist response ID.</value>
        [DataMember(Name="Id", EmitDefaultValue=true)]
        public int Id { get; set; }

        /// <summary>
        /// Answer to a checklist question.
        /// </summary>
        /// <value>Answer to a checklist question.</value>
        [DataMember(Name="Answer", EmitDefaultValue=false)]
        public string Answer { get; set; }

        /// <summary>
        /// Comment to an answer option with the &#x60;IsConditionalFollowUp&#x60; attribute. Answer options are configured for questions of the **Selector** type.
        /// </summary>
        /// <value>Comment to an answer option with the &#x60;IsConditionalFollowUp&#x60; attribute. Answer options are configured for questions of the **Selector** type.</value>
        [DataMember(Name="FreeTextAnswer", EmitDefaultValue=false)]
        public string FreeTextAnswer { get; set; }

        /// <summary>
        /// ID of the work order the response was submitted for.
        /// </summary>
        /// <value>ID of the work order the response was submitted for.</value>
        [DataMember(Name="EntityId", EmitDefaultValue=true)]
        public int EntityId { get; set; }

        /// <summary>
        /// ID of the entity the response was submitted for. 0 is returned for work orders.
        /// </summary>
        /// <value>ID of the entity the response was submitted for. 0 is returned for work orders.</value>
        [DataMember(Name="EntityTypeId", EmitDefaultValue=true)]
        public int EntityTypeId { get; set; }

        /// <summary>
        /// Order of a technician’s on-site visit when the response was submitted.
        /// </summary>
        /// <value>Order of a technician’s on-site visit when the response was submitted.</value>
        [DataMember(Name="Attempt", EmitDefaultValue=true)]
        public int Attempt { get; set; }

        /// <summary>
        /// ID of the provider on whose behalf the response was submitted.
        /// </summary>
        /// <value>ID of the provider on whose behalf the response was submitted.</value>
        [DataMember(Name="ProviderId", EmitDefaultValue=true)]
        public int ProviderId { get; set; }

        /// <summary>
        /// ID of the technician on whose behalf the response was submitted.
        /// </summary>
        /// <value>ID of the technician on whose behalf the response was submitted.</value>
        [DataMember(Name="TechnicianId", EmitDefaultValue=true)]
        public int TechnicianId { get; set; }

        /// <summary>
        /// Date and time when the response was last updated set in EST. The format is &#x60;YYYY-MM-DDThh:mm:ss.sss&#x60;.
        /// </summary>
        /// <value>Date and time when the response was last updated set in EST. The format is &#x60;YYYY-MM-DDThh:mm:ss.sss&#x60;.</value>
        [DataMember(Name="UpdatedDate", EmitDefaultValue=false)]
        public DateTime UpdatedDate { get; set; }

        /// <summary>
        /// Date and time when the response was last updated set in the location’s time zone. The format is &#x60;Month Day Year hh:mm&#x60;.
        /// </summary>
        /// <value>Date and time when the response was last updated set in the location’s time zone. The format is &#x60;Month Day Year hh:mm&#x60;.</value>
        [DataMember(Name="UpdatedDateStr", EmitDefaultValue=false)]
        public string UpdatedDateStr { get; set; }

        /// <summary>
        /// Date and time when the response was last updated set in the location’s time zone with the UTC offset. The format is &#x60;YYYY-MM-DDThh:mm:ss.sss±hh:mm&#x60;.
        /// </summary>
        /// <value>Date and time when the response was last updated set in the location’s time zone with the UTC offset. The format is &#x60;YYYY-MM-DDThh:mm:ss.sss±hh:mm&#x60;.</value>
        [DataMember(Name="UpdatedDateDto", EmitDefaultValue=false)]
        public DateTime UpdatedDateDto { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class SCServiceChannelServicesMessagingCheckListDetailsCheckListResponseExtended {\n");
            sb.Append("  Pictures: ").Append(Pictures).Append("\n");
            sb.Append("  Question: ").Append(Question).Append("\n");
            sb.Append("  QuestionOption: ").Append(QuestionOption).Append("\n");
            sb.Append("  IsCurrentChecklist: ").Append(IsCurrentChecklist).Append("\n");
            sb.Append("  IsFrequencyChecklist: ").Append(IsFrequencyChecklist).Append("\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  Answer: ").Append(Answer).Append("\n");
            sb.Append("  FreeTextAnswer: ").Append(FreeTextAnswer).Append("\n");
            sb.Append("  EntityId: ").Append(EntityId).Append("\n");
            sb.Append("  EntityTypeId: ").Append(EntityTypeId).Append("\n");
            sb.Append("  Attempt: ").Append(Attempt).Append("\n");
            sb.Append("  ProviderId: ").Append(ProviderId).Append("\n");
            sb.Append("  TechnicianId: ").Append(TechnicianId).Append("\n");
            sb.Append("  UpdatedDate: ").Append(UpdatedDate).Append("\n");
            sb.Append("  UpdatedDateStr: ").Append(UpdatedDateStr).Append("\n");
            sb.Append("  UpdatedDateDto: ").Append(UpdatedDateDto).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            var options = new JsonSerializerOptions
            {
                WriteIndented = true
            };

            return JsonSerializer.Serialize(this, options);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (obj is null) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((SCServiceChannelServicesMessagingCheckListDetailsCheckListResponseExtended)obj);
        }

        /// <summary>
        /// Returns true if SCServiceChannelServicesMessagingCheckListDetailsCheckListResponseExtended instances are equal
        /// </summary>
        /// <param name="other">Instance of SCServiceChannelServicesMessagingCheckListDetailsCheckListResponseExtended to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(SCServiceChannelServicesMessagingCheckListDetailsCheckListResponseExtended other)
        {
            if (other is null) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    Pictures == other.Pictures ||
                    Pictures != null &&
                    other.Pictures != null &&
                    Pictures.SequenceEqual(other.Pictures)
                ) && 
                (
                    Question == other.Question ||
                    Question != null &&
                    Question.Equals(other.Question)
                ) && 
                (
                    QuestionOption == other.QuestionOption ||
                    QuestionOption != null &&
                    QuestionOption.Equals(other.QuestionOption)
                ) && 
                (
                    IsCurrentChecklist == other.IsCurrentChecklist ||
                    
                    IsCurrentChecklist.Equals(other.IsCurrentChecklist)
                ) && 
                (
                    IsFrequencyChecklist == other.IsFrequencyChecklist ||
                    
                    IsFrequencyChecklist.Equals(other.IsFrequencyChecklist)
                ) && 
                (
                    Id == other.Id ||
                    
                    Id.Equals(other.Id)
                ) && 
                (
                    Answer == other.Answer ||
                    Answer != null &&
                    Answer.Equals(other.Answer)
                ) && 
                (
                    FreeTextAnswer == other.FreeTextAnswer ||
                    FreeTextAnswer != null &&
                    FreeTextAnswer.Equals(other.FreeTextAnswer)
                ) && 
                (
                    EntityId == other.EntityId ||
                    
                    EntityId.Equals(other.EntityId)
                ) && 
                (
                    EntityTypeId == other.EntityTypeId ||
                    
                    EntityTypeId.Equals(other.EntityTypeId)
                ) && 
                (
                    Attempt == other.Attempt ||
                    
                    Attempt.Equals(other.Attempt)
                ) && 
                (
                    ProviderId == other.ProviderId ||
                    
                    ProviderId.Equals(other.ProviderId)
                ) && 
                (
                    TechnicianId == other.TechnicianId ||
                    
                    TechnicianId.Equals(other.TechnicianId)
                ) && 
                (
                    UpdatedDate == other.UpdatedDate ||
                    UpdatedDate != null &&
                    UpdatedDate.Equals(other.UpdatedDate)
                ) && 
                (
                    UpdatedDateStr == other.UpdatedDateStr ||
                    UpdatedDateStr != null &&
                    UpdatedDateStr.Equals(other.UpdatedDateStr)
                ) && 
                (
                    UpdatedDateDto == other.UpdatedDateDto ||
                    UpdatedDateDto != null &&
                    UpdatedDateDto.Equals(other.UpdatedDateDto)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    if (Pictures != null)
                    hashCode = hashCode * 59 + Pictures.GetHashCode();
                    if (Question != null)
                    hashCode = hashCode * 59 + Question.GetHashCode();
                    if (QuestionOption != null)
                    hashCode = hashCode * 59 + QuestionOption.GetHashCode();
                    
                    hashCode = hashCode * 59 + IsCurrentChecklist.GetHashCode();
                    
                    hashCode = hashCode * 59 + IsFrequencyChecklist.GetHashCode();
                    
                    hashCode = hashCode * 59 + Id.GetHashCode();
                    if (Answer != null)
                    hashCode = hashCode * 59 + Answer.GetHashCode();
                    if (FreeTextAnswer != null)
                    hashCode = hashCode * 59 + FreeTextAnswer.GetHashCode();
                    
                    hashCode = hashCode * 59 + EntityId.GetHashCode();
                    
                    hashCode = hashCode * 59 + EntityTypeId.GetHashCode();
                    
                    hashCode = hashCode * 59 + Attempt.GetHashCode();
                    
                    hashCode = hashCode * 59 + ProviderId.GetHashCode();
                    
                    hashCode = hashCode * 59 + TechnicianId.GetHashCode();
                    if (UpdatedDate != null)
                    hashCode = hashCode * 59 + UpdatedDate.GetHashCode();
                    if (UpdatedDateStr != null)
                    hashCode = hashCode * 59 + UpdatedDateStr.GetHashCode();
                    if (UpdatedDateDto != null)
                    hashCode = hashCode * 59 + UpdatedDateDto.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(SCServiceChannelServicesMessagingCheckListDetailsCheckListResponseExtended left, SCServiceChannelServicesMessagingCheckListDetailsCheckListResponseExtended right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(SCServiceChannelServicesMessagingCheckListDetailsCheckListResponseExtended left, SCServiceChannelServicesMessagingCheckListDetailsCheckListResponseExtended right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}
