/*
 * ServiceChannel API - v.3
 *
 * The ServiceChannel API is a RESTful and stateless API. It accepts standard HTTP verbs and supports OAuth 2.0 for authorizing requests.      Our API returns common HTTP status codes as well as JSON encapsulated data.      See [API Overview](https://developer.servicechannel.com/basics/introduction/overview/) for the intro to ServiceChannel API.<br>      <h3>Authentication and Authorization</h3>You should have a ServiceChannel account, register your application, and obtain `access_token` to integrate with our API.      See [Authentication and Authorization](https://developer.servicechannel.com/basics/general/authentication/) for more information.      To use this API playground, click **Authorize** and sign in to ServiceChannel.<br>      <h3>Environment</h3> All calls in this API Reference point to the **SB2 environment**.      See [Environments](https://developer.servicechannel.com/basics/general/environments/) for more information.<br>      <h3>API Version</h3>The current stable version of the ServiceChannel API is `v3`. In the request URL, `v3` is a version prefix that should be present.      When you omit the version prefix, calls point to the minimum supported version of the API.      We recommend you to always specify the API version to avoid possible errors.
 *
 * The version of the OpenAPI document: 3
 * 
 * Generated by: https://openapi-generator.tech
 */

using System;
using System.Linq;
using System.Text;
using System.Collections.Generic;
using System.ComponentModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using System.Text.Json;
using ServiceChannel.OpenAPIGenerated.Api.Converters;

namespace ServiceChannel.OpenAPIGenerated.Api.Models
{ 
    /// <summary>
    /// Invoice number requirements object.
    /// </summary>
    [DataContract]
    public class SCServiceChannelServicesMessagingInvoicesNumberRequirementsModel : IEquatable<SCServiceChannelServicesMessagingInvoicesNumberRequirementsModel>
    {
        /// <summary>
        /// A list of options in the \&quot;Generation uniqueness rule\&quot; drop-down list a subscriber admin can choose from when configuring invoice number rules for automatically generated invoices.
        /// </summary>
        /// <value>A list of options in the \&quot;Generation uniqueness rule\&quot; drop-down list a subscriber admin can choose from when configuring invoice number rules for automatically generated invoices.</value>
        [DataMember(Name="AutoGenerationTypesSelect", EmitDefaultValue=false)]
        public List<SCServiceChannelServicesMessagingInvoicesSelectItem> AutoGenerationTypesSelect { get; set; }

        /// <summary>
        /// A list of options in the \&quot;Restrictions\&quot; drop-down list a subscriber admin can choose from when configuring invoice number restrictions for manually created invoices.
        /// </summary>
        /// <value>A list of options in the \&quot;Restrictions\&quot; drop-down list a subscriber admin can choose from when configuring invoice number restrictions for manually created invoices.</value>
        [DataMember(Name="RestrictionTypesSelect", EmitDefaultValue=false)]
        public List<SCServiceChannelServicesMessagingInvoicesSelectItem> RestrictionTypesSelect { get; set; }

        /// <summary>
        /// A list of options in the \&quot;ReuseInvoiceNumber\&quot; drop-down list a subscriber admin can choose from when configuring invoice number.
        /// </summary>
        /// <value>A list of options in the \&quot;ReuseInvoiceNumber\&quot; drop-down list a subscriber admin can choose from when configuring invoice number.</value>
        [DataMember(Name="ReuseInvoiceNumbersSelect", EmitDefaultValue=false)]
        public List<SCServiceChannelServicesMessagingInvoicesSelectItem> ReuseInvoiceNumbersSelect { get; set; }

        /// <summary>
        /// Gets or Sets InvoiceNumberRequirement
        /// </summary>
        [DataMember(Name="InvoiceNumberRequirement", EmitDefaultValue=false)]
        public SCServiceChannelServicesMessagingInvoicesInvoiceNumberRequirement InvoiceNumberRequirement { get; set; }

        /// <summary>
        /// A list of default explanatory comments on the invoice number format for the corresponding restrictions. A comment is displayed to a provider user in a tooltip when they try to submit an invoice whose number does not meet the restrictions specified by their subscriber. See &#x60;RestrictionTypesSelect&#x60; to identify which number (&#x60;Value&#x60;) corresponds to which restriction type: &#x60;2&#x60; — *Digits Only*, &#x60;3&#x60; — *Alphanumeric Only*.
        /// </summary>
        /// <value>A list of default explanatory comments on the invoice number format for the corresponding restrictions. A comment is displayed to a provider user in a tooltip when they try to submit an invoice whose number does not meet the restrictions specified by their subscriber. See &#x60;RestrictionTypesSelect&#x60; to identify which number (&#x60;Value&#x60;) corresponds to which restriction type: &#x60;2&#x60; — *Digits Only*, &#x60;3&#x60; — *Alphanumeric Only*.</value>
        [DataMember(Name="DefaultRestrictionComments", EmitDefaultValue=false)]
        public Dictionary<string, string> DefaultRestrictionComments { get; set; }

        /// <summary>
        /// A list of default regular expressions that define search patterns used to validate the number format of invoices created manually. See &#x60;RestrictionTypesSelect&#x60; to identify which number (&#x60;Value&#x60;) corresponds to which restriction type: &#x60;2&#x60; — *Digits Only*, &#x60;3&#x60; — *Alphanumeric Only*.
        /// </summary>
        /// <value>A list of default regular expressions that define search patterns used to validate the number format of invoices created manually. See &#x60;RestrictionTypesSelect&#x60; to identify which number (&#x60;Value&#x60;) corresponds to which restriction type: &#x60;2&#x60; — *Digits Only*, &#x60;3&#x60; — *Alphanumeric Only*.</value>
        [DataMember(Name="DefaultRestrictionPatterns", EmitDefaultValue=false)]
        public Dictionary<string, string> DefaultRestrictionPatterns { get; set; }

        /// <summary>
        /// Gets or Sets Resources
        /// </summary>
        [DataMember(Name="Resources", EmitDefaultValue=false)]
        public SCServiceChannelServicesMessagingInvoicesLocalizations Resources { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class SCServiceChannelServicesMessagingInvoicesNumberRequirementsModel {\n");
            sb.Append("  AutoGenerationTypesSelect: ").Append(AutoGenerationTypesSelect).Append("\n");
            sb.Append("  RestrictionTypesSelect: ").Append(RestrictionTypesSelect).Append("\n");
            sb.Append("  ReuseInvoiceNumbersSelect: ").Append(ReuseInvoiceNumbersSelect).Append("\n");
            sb.Append("  InvoiceNumberRequirement: ").Append(InvoiceNumberRequirement).Append("\n");
            sb.Append("  DefaultRestrictionComments: ").Append(DefaultRestrictionComments).Append("\n");
            sb.Append("  DefaultRestrictionPatterns: ").Append(DefaultRestrictionPatterns).Append("\n");
            sb.Append("  Resources: ").Append(Resources).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            var options = new JsonSerializerOptions
            {
                WriteIndented = true
            };

            return JsonSerializer.Serialize(this, options);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (obj is null) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((SCServiceChannelServicesMessagingInvoicesNumberRequirementsModel)obj);
        }

        /// <summary>
        /// Returns true if SCServiceChannelServicesMessagingInvoicesNumberRequirementsModel instances are equal
        /// </summary>
        /// <param name="other">Instance of SCServiceChannelServicesMessagingInvoicesNumberRequirementsModel to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(SCServiceChannelServicesMessagingInvoicesNumberRequirementsModel other)
        {
            if (other is null) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    AutoGenerationTypesSelect == other.AutoGenerationTypesSelect ||
                    AutoGenerationTypesSelect != null &&
                    other.AutoGenerationTypesSelect != null &&
                    AutoGenerationTypesSelect.SequenceEqual(other.AutoGenerationTypesSelect)
                ) && 
                (
                    RestrictionTypesSelect == other.RestrictionTypesSelect ||
                    RestrictionTypesSelect != null &&
                    other.RestrictionTypesSelect != null &&
                    RestrictionTypesSelect.SequenceEqual(other.RestrictionTypesSelect)
                ) && 
                (
                    ReuseInvoiceNumbersSelect == other.ReuseInvoiceNumbersSelect ||
                    ReuseInvoiceNumbersSelect != null &&
                    other.ReuseInvoiceNumbersSelect != null &&
                    ReuseInvoiceNumbersSelect.SequenceEqual(other.ReuseInvoiceNumbersSelect)
                ) && 
                (
                    InvoiceNumberRequirement == other.InvoiceNumberRequirement ||
                    InvoiceNumberRequirement != null &&
                    InvoiceNumberRequirement.Equals(other.InvoiceNumberRequirement)
                ) && 
                (
                    DefaultRestrictionComments == other.DefaultRestrictionComments ||
                    DefaultRestrictionComments != null &&
                    other.DefaultRestrictionComments != null &&
                    DefaultRestrictionComments.SequenceEqual(other.DefaultRestrictionComments)
                ) && 
                (
                    DefaultRestrictionPatterns == other.DefaultRestrictionPatterns ||
                    DefaultRestrictionPatterns != null &&
                    other.DefaultRestrictionPatterns != null &&
                    DefaultRestrictionPatterns.SequenceEqual(other.DefaultRestrictionPatterns)
                ) && 
                (
                    Resources == other.Resources ||
                    Resources != null &&
                    Resources.Equals(other.Resources)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    if (AutoGenerationTypesSelect != null)
                    hashCode = hashCode * 59 + AutoGenerationTypesSelect.GetHashCode();
                    if (RestrictionTypesSelect != null)
                    hashCode = hashCode * 59 + RestrictionTypesSelect.GetHashCode();
                    if (ReuseInvoiceNumbersSelect != null)
                    hashCode = hashCode * 59 + ReuseInvoiceNumbersSelect.GetHashCode();
                    if (InvoiceNumberRequirement != null)
                    hashCode = hashCode * 59 + InvoiceNumberRequirement.GetHashCode();
                    if (DefaultRestrictionComments != null)
                    hashCode = hashCode * 59 + DefaultRestrictionComments.GetHashCode();
                    if (DefaultRestrictionPatterns != null)
                    hashCode = hashCode * 59 + DefaultRestrictionPatterns.GetHashCode();
                    if (Resources != null)
                    hashCode = hashCode * 59 + Resources.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(SCServiceChannelServicesMessagingInvoicesNumberRequirementsModel left, SCServiceChannelServicesMessagingInvoicesNumberRequirementsModel right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(SCServiceChannelServicesMessagingInvoicesNumberRequirementsModel left, SCServiceChannelServicesMessagingInvoicesNumberRequirementsModel right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}
