/*
 * ServiceChannel API - v.3
 *
 * The ServiceChannel API is a RESTful and stateless API. It accepts standard HTTP verbs and supports OAuth 2.0 for authorizing requests.      Our API returns common HTTP status codes as well as JSON encapsulated data.      See [API Overview](https://developer.servicechannel.com/basics/introduction/overview/) for the intro to ServiceChannel API.<br>      <h3>Authentication and Authorization</h3>You should have a ServiceChannel account, register your application, and obtain `access_token` to integrate with our API.      See [Authentication and Authorization](https://developer.servicechannel.com/basics/general/authentication/) for more information.      To use this API playground, click **Authorize** and sign in to ServiceChannel.<br>      <h3>Environment</h3> All calls in this API Reference point to the **SB2 environment**.      See [Environments](https://developer.servicechannel.com/basics/general/environments/) for more information.<br>      <h3>API Version</h3>The current stable version of the ServiceChannel API is `v3`. In the request URL, `v3` is a version prefix that should be present.      When you omit the version prefix, calls point to the minimum supported version of the API.      We recommend you to always specify the API version to avoid possible errors.
 *
 * The version of the OpenAPI document: 3
 * 
 * Generated by: https://openapi-generator.tech
 */

using System;
using System.Linq;
using System.Text;
using System.Collections.Generic;
using System.ComponentModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using System.Text.Json;
using ServiceChannel.OpenAPIGenerated.Api.Converters;

namespace ServiceChannel.OpenAPIGenerated.Api.Models
{ 
    /// <summary>
    /// Holds information about scanned asset tags.  This class must be kept in sync with ContractorTools.BL.Models.AssetTagScanAuditRecord
    /// </summary>
    [DataContract]
    public class SCServiceChannelServicesMessagingAssetsAssetTagScanAuditRecord : IEquatable<SCServiceChannelServicesMessagingAssetsAssetTagScanAuditRecord>
    {
        /// <summary>
        /// Asset/Equipment ID of asset whose tag was scanned
        /// </summary>
        /// <value>Asset/Equipment ID of asset whose tag was scanned</value>
        [DataMember(Name="AssetID", EmitDefaultValue=true)]
        public int AssetID { get; set; }

        /// <summary>
        /// Tracking ID associated with work order
        /// </summary>
        /// <value>Tracking ID associated with work order</value>
        [DataMember(Name="TrackingNumber", EmitDefaultValue=true)]
        public int TrackingNumber { get; set; }

        /// <summary>
        /// Work order number associated with this asset tag scan
        /// </summary>
        /// <value>Work order number associated with this asset tag scan</value>
        [DataMember(Name="WorkOrderID", EmitDefaultValue=false)]
        public string WorkOrderID { get; set; }


        /// <summary>
        /// Asset tag validation status
        /// </summary>
        /// <value>Asset tag validation status</value>
        
        public enum AssetTagStatusEnum
        {
            
            /// <summary>
            /// Enum UnknownEnum for Unknown
            /// </summary>
            [EnumMember(Value = "Unknown")]
            UnknownEnum = 1,
            
            /// <summary>
            /// Enum NotAvailableEnum for NotAvailable
            /// </summary>
            [EnumMember(Value = "NotAvailable")]
            NotAvailableEnum = 2,
            
            /// <summary>
            /// Enum NotValidatedEnum for NotValidated
            /// </summary>
            [EnumMember(Value = "NotValidated")]
            NotValidatedEnum = 3,
            
            /// <summary>
            /// Enum PendingValidationEnum for PendingValidation
            /// </summary>
            [EnumMember(Value = "PendingValidation")]
            PendingValidationEnum = 4,
            
            /// <summary>
            /// Enum ValidatedEnum for Validated
            /// </summary>
            [EnumMember(Value = "Validated")]
            ValidatedEnum = 5
        }

        /// <summary>
        /// Asset tag validation status
        /// </summary>
        /// <value>Asset tag validation status</value>
        [DataMember(Name="AssetTagStatus", EmitDefaultValue=true)]
        public AssetTagStatusEnum AssetTagStatus { get; set; }

        /// <summary>
        /// Indicates whether or not asset tag was manually entered instead of being scanned
        /// </summary>
        /// <value>Indicates whether or not asset tag was manually entered instead of being scanned</value>
        [DataMember(Name="ManuallyEntered", EmitDefaultValue=true)]
        public bool ManuallyEntered { get; set; } = false;

        /// <summary>
        /// Reason for asset tag not being scanned
        /// </summary>
        /// <value>Reason for asset tag not being scanned</value>
        [DataMember(Name="AssetTagNotScannedReason", EmitDefaultValue=false)]
        public string AssetTagNotScannedReason { get; set; }

        /// <summary>
        /// Indicates whether or not *this* asset needs its asset tag validated
        /// </summary>
        /// <value>Indicates whether or not *this* asset needs its asset tag validated</value>
        [DataMember(Name="ValidationRequired", EmitDefaultValue=true)]
        public bool ValidationRequired { get; set; } = false;

        /// <summary>
        /// The current validation status of *this* asset
        /// </summary>
        /// <value>The current validation status of *this* asset</value>
        [DataMember(Name="AssetValidated", EmitDefaultValue=true)]
        public bool AssetValidated { get; set; } = false;

        /// <summary>
        /// Reason for asset tag not being validated
        /// </summary>
        /// <value>Reason for asset tag not being validated</value>
        [DataMember(Name="UnableToValidateReasonId", EmitDefaultValue=true)]
        public int UnableToValidateReasonId { get; set; }

        /// <summary>
        /// Custom reason for asset tag not being validated
        /// </summary>
        /// <value>Custom reason for asset tag not being validated</value>
        [DataMember(Name="OtherReason", EmitDefaultValue=false)]
        public string OtherReason { get; set; }

        /// <summary>
        /// Reason for asset tag not being scanned
        /// </summary>
        /// <value>Reason for asset tag not being scanned</value>
        [DataMember(Name="UnableToScanReasonId", EmitDefaultValue=true)]
        public int UnableToScanReasonId { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class SCServiceChannelServicesMessagingAssetsAssetTagScanAuditRecord {\n");
            sb.Append("  AssetID: ").Append(AssetID).Append("\n");
            sb.Append("  TrackingNumber: ").Append(TrackingNumber).Append("\n");
            sb.Append("  WorkOrderID: ").Append(WorkOrderID).Append("\n");
            sb.Append("  AssetTagStatus: ").Append(AssetTagStatus).Append("\n");
            sb.Append("  ManuallyEntered: ").Append(ManuallyEntered).Append("\n");
            sb.Append("  AssetTagNotScannedReason: ").Append(AssetTagNotScannedReason).Append("\n");
            sb.Append("  ValidationRequired: ").Append(ValidationRequired).Append("\n");
            sb.Append("  AssetValidated: ").Append(AssetValidated).Append("\n");
            sb.Append("  UnableToValidateReasonId: ").Append(UnableToValidateReasonId).Append("\n");
            sb.Append("  OtherReason: ").Append(OtherReason).Append("\n");
            sb.Append("  UnableToScanReasonId: ").Append(UnableToScanReasonId).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            var options = new JsonSerializerOptions
            {
                WriteIndented = true
            };

            return JsonSerializer.Serialize(this, options);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (obj is null) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((SCServiceChannelServicesMessagingAssetsAssetTagScanAuditRecord)obj);
        }

        /// <summary>
        /// Returns true if SCServiceChannelServicesMessagingAssetsAssetTagScanAuditRecord instances are equal
        /// </summary>
        /// <param name="other">Instance of SCServiceChannelServicesMessagingAssetsAssetTagScanAuditRecord to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(SCServiceChannelServicesMessagingAssetsAssetTagScanAuditRecord other)
        {
            if (other is null) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    AssetID == other.AssetID ||
                    
                    AssetID.Equals(other.AssetID)
                ) && 
                (
                    TrackingNumber == other.TrackingNumber ||
                    
                    TrackingNumber.Equals(other.TrackingNumber)
                ) && 
                (
                    WorkOrderID == other.WorkOrderID ||
                    WorkOrderID != null &&
                    WorkOrderID.Equals(other.WorkOrderID)
                ) && 
                (
                    AssetTagStatus == other.AssetTagStatus ||
                    
                    AssetTagStatus.Equals(other.AssetTagStatus)
                ) && 
                (
                    ManuallyEntered == other.ManuallyEntered ||
                    
                    ManuallyEntered.Equals(other.ManuallyEntered)
                ) && 
                (
                    AssetTagNotScannedReason == other.AssetTagNotScannedReason ||
                    AssetTagNotScannedReason != null &&
                    AssetTagNotScannedReason.Equals(other.AssetTagNotScannedReason)
                ) && 
                (
                    ValidationRequired == other.ValidationRequired ||
                    
                    ValidationRequired.Equals(other.ValidationRequired)
                ) && 
                (
                    AssetValidated == other.AssetValidated ||
                    
                    AssetValidated.Equals(other.AssetValidated)
                ) && 
                (
                    UnableToValidateReasonId == other.UnableToValidateReasonId ||
                    
                    UnableToValidateReasonId.Equals(other.UnableToValidateReasonId)
                ) && 
                (
                    OtherReason == other.OtherReason ||
                    OtherReason != null &&
                    OtherReason.Equals(other.OtherReason)
                ) && 
                (
                    UnableToScanReasonId == other.UnableToScanReasonId ||
                    
                    UnableToScanReasonId.Equals(other.UnableToScanReasonId)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    
                    hashCode = hashCode * 59 + AssetID.GetHashCode();
                    
                    hashCode = hashCode * 59 + TrackingNumber.GetHashCode();
                    if (WorkOrderID != null)
                    hashCode = hashCode * 59 + WorkOrderID.GetHashCode();
                    
                    hashCode = hashCode * 59 + AssetTagStatus.GetHashCode();
                    
                    hashCode = hashCode * 59 + ManuallyEntered.GetHashCode();
                    if (AssetTagNotScannedReason != null)
                    hashCode = hashCode * 59 + AssetTagNotScannedReason.GetHashCode();
                    
                    hashCode = hashCode * 59 + ValidationRequired.GetHashCode();
                    
                    hashCode = hashCode * 59 + AssetValidated.GetHashCode();
                    
                    hashCode = hashCode * 59 + UnableToValidateReasonId.GetHashCode();
                    if (OtherReason != null)
                    hashCode = hashCode * 59 + OtherReason.GetHashCode();
                    
                    hashCode = hashCode * 59 + UnableToScanReasonId.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(SCServiceChannelServicesMessagingAssetsAssetTagScanAuditRecord left, SCServiceChannelServicesMessagingAssetsAssetTagScanAuditRecord right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(SCServiceChannelServicesMessagingAssetsAssetTagScanAuditRecord left, SCServiceChannelServicesMessagingAssetsAssetTagScanAuditRecord right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}
