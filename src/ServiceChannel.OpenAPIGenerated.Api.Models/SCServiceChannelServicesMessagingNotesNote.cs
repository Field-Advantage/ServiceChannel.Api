/*
 * ServiceChannel API - v.3
 *
 * The ServiceChannel API is a RESTful and stateless API. It accepts standard HTTP verbs and supports OAuth 2.0 for authorizing requests.      Our API returns common HTTP status codes as well as JSON encapsulated data.      See [API Overview](https://developer.servicechannel.com/basics/introduction/overview/) for the intro to ServiceChannel API.<br>      <h3>Authentication and Authorization</h3>You should have a ServiceChannel account, register your application, and obtain `access_token` to integrate with our API.      See [Authentication and Authorization](https://developer.servicechannel.com/basics/general/authentication/) for more information.      To use this API playground, click **Authorize** and sign in to ServiceChannel.<br>      <h3>Environment</h3> All calls in this API Reference point to the **SB2 environment**.      See [Environments](https://developer.servicechannel.com/basics/general/environments/) for more information.<br>      <h3>API Version</h3>The current stable version of the ServiceChannel API is `v3`. In the request URL, `v3` is a version prefix that should be present.      When you omit the version prefix, calls point to the minimum supported version of the API.      We recommend you to always specify the API version to avoid possible errors.
 *
 * The version of the OpenAPI document: 3
 * 
 * Generated by: https://openapi-generator.tech
 */

using System;
using System.Linq;
using System.Text;
using System.Collections.Generic;
using System.ComponentModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using System.Text.Json;
using ServiceChannel.OpenAPIGenerated.Api.Converters;

namespace ServiceChannel.OpenAPIGenerated.Api.Models
{ 
    /// <summary>
    /// 
    /// </summary>
    [DataContract]
    public class SCServiceChannelServicesMessagingNotesNote : IEquatable<SCServiceChannelServicesMessagingNotesNote>
    {
        /// <summary>
        /// UID of work order note, can be null
        /// </summary>
        /// <value>UID of work order note, can be null</value>
        [DataMember(Name="Id", EmitDefaultValue=true)]
        public int Id { get; set; }

        /// <summary>
        /// Note number
        /// </summary>
        /// <value>Note number</value>
        [DataMember(Name="Number", EmitDefaultValue=true)]
        public int Number { get; set; }

        /// <summary>
        /// Note data
        /// </summary>
        /// <value>Note data</value>
        [DataMember(Name="NoteData", EmitDefaultValue=false)]
        public string NoteData { get; set; }

        /// <summary>
        /// Date when Note was created
        /// </summary>
        /// <value>Date when Note was created</value>
        [DataMember(Name="DateCreated", EmitDefaultValue=false)]
        public DateTime DateCreated { get; set; }

        /// <summary>
        /// Gets or Sets ScheduledDate
        /// </summary>
        [DataMember(Name="ScheduledDate", EmitDefaultValue=false)]
        public DateTime ScheduledDate { get; set; }

        /// <summary>
        /// Gets or Sets FollowUpDate
        /// </summary>
        [DataMember(Name="FollowUpDate", EmitDefaultValue=false)]
        public DateTime FollowUpDate { get; set; }

        /// <summary>
        /// Action Required
        /// </summary>
        /// <value>Action Required</value>
        [DataMember(Name="ActionRequired", EmitDefaultValue=true)]
        public bool ActionRequired { get; set; } = false;

        /// <summary>
        /// Email
        /// </summary>
        /// <value>Email</value>
        [DataMember(Name="MailedTo", EmitDefaultValue=false)]
        public string MailedTo { get; set; }

        /// <summary>
        /// Describes who created the Note
        /// </summary>
        /// <value>Describes who created the Note</value>
        [DataMember(Name="CreatedBy", EmitDefaultValue=false)]
        public string CreatedBy { get; set; }

        /// <summary>
        /// Subscriber or Provider short name
        /// </summary>
        /// <value>Subscriber or Provider short name</value>
        [DataMember(Name="CompanyName", EmitDefaultValue=false)]
        public string CompanyName { get; set; }

        /// <summary>
        /// Collection of note attachments
        /// </summary>
        /// <value>Collection of note attachments</value>
        [DataMember(Name="Attachments", EmitDefaultValue=false)]
        public List<SCServiceChannelServicesMessagingAttachmentsAttachment> Attachments { get; set; }

        /// <summary>
        /// Gets or Sets Visibility
        /// </summary>
        [RegularExpression("^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$")]
        [DataMember(Name="Visibility", EmitDefaultValue=false)]
        public byte[] Visibility { get; set; }


        /// <summary>
        /// Gets or Sets NoteType
        /// </summary>
        
        public enum NoteTypeEnum
        {
            
            /// <summary>
            /// Enum SystemNoteEnum for SystemNote
            /// </summary>
            [EnumMember(Value = "SystemNote")]
            SystemNoteEnum = 1,
            
            /// <summary>
            /// Enum UsersNoteEnum for UsersNote
            /// </summary>
            [EnumMember(Value = "UsersNote")]
            UsersNoteEnum = 2
        }

        /// <summary>
        /// Gets or Sets NoteType
        /// </summary>
        [DataMember(Name="NoteType", EmitDefaultValue=true)]
        public NoteTypeEnum NoteType { get; set; }

        /// <summary>
        /// Gets or Sets IsAttachmentNote
        /// </summary>
        [DataMember(Name="IsAttachmentNote", EmitDefaultValue=true)]
        public bool IsAttachmentNote { get; set; } = false;

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class SCServiceChannelServicesMessagingNotesNote {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  Number: ").Append(Number).Append("\n");
            sb.Append("  NoteData: ").Append(NoteData).Append("\n");
            sb.Append("  DateCreated: ").Append(DateCreated).Append("\n");
            sb.Append("  ScheduledDate: ").Append(ScheduledDate).Append("\n");
            sb.Append("  FollowUpDate: ").Append(FollowUpDate).Append("\n");
            sb.Append("  ActionRequired: ").Append(ActionRequired).Append("\n");
            sb.Append("  MailedTo: ").Append(MailedTo).Append("\n");
            sb.Append("  CreatedBy: ").Append(CreatedBy).Append("\n");
            sb.Append("  CompanyName: ").Append(CompanyName).Append("\n");
            sb.Append("  Attachments: ").Append(Attachments).Append("\n");
            sb.Append("  Visibility: ").Append(Visibility).Append("\n");
            sb.Append("  NoteType: ").Append(NoteType).Append("\n");
            sb.Append("  IsAttachmentNote: ").Append(IsAttachmentNote).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            var options = new JsonSerializerOptions
            {
                WriteIndented = true
            };

            return JsonSerializer.Serialize(this, options);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (obj is null) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((SCServiceChannelServicesMessagingNotesNote)obj);
        }

        /// <summary>
        /// Returns true if SCServiceChannelServicesMessagingNotesNote instances are equal
        /// </summary>
        /// <param name="other">Instance of SCServiceChannelServicesMessagingNotesNote to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(SCServiceChannelServicesMessagingNotesNote other)
        {
            if (other is null) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    Id == other.Id ||
                    
                    Id.Equals(other.Id)
                ) && 
                (
                    Number == other.Number ||
                    
                    Number.Equals(other.Number)
                ) && 
                (
                    NoteData == other.NoteData ||
                    NoteData != null &&
                    NoteData.Equals(other.NoteData)
                ) && 
                (
                    DateCreated == other.DateCreated ||
                    DateCreated != null &&
                    DateCreated.Equals(other.DateCreated)
                ) && 
                (
                    ScheduledDate == other.ScheduledDate ||
                    ScheduledDate != null &&
                    ScheduledDate.Equals(other.ScheduledDate)
                ) && 
                (
                    FollowUpDate == other.FollowUpDate ||
                    FollowUpDate != null &&
                    FollowUpDate.Equals(other.FollowUpDate)
                ) && 
                (
                    ActionRequired == other.ActionRequired ||
                    
                    ActionRequired.Equals(other.ActionRequired)
                ) && 
                (
                    MailedTo == other.MailedTo ||
                    MailedTo != null &&
                    MailedTo.Equals(other.MailedTo)
                ) && 
                (
                    CreatedBy == other.CreatedBy ||
                    CreatedBy != null &&
                    CreatedBy.Equals(other.CreatedBy)
                ) && 
                (
                    CompanyName == other.CompanyName ||
                    CompanyName != null &&
                    CompanyName.Equals(other.CompanyName)
                ) && 
                (
                    Attachments == other.Attachments ||
                    Attachments != null &&
                    other.Attachments != null &&
                    Attachments.SequenceEqual(other.Attachments)
                ) && 
                (
                    Visibility == other.Visibility ||
                    Visibility != null &&
                    Visibility.Equals(other.Visibility)
                ) && 
                (
                    NoteType == other.NoteType ||
                    
                    NoteType.Equals(other.NoteType)
                ) && 
                (
                    IsAttachmentNote == other.IsAttachmentNote ||
                    
                    IsAttachmentNote.Equals(other.IsAttachmentNote)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    
                    hashCode = hashCode * 59 + Id.GetHashCode();
                    
                    hashCode = hashCode * 59 + Number.GetHashCode();
                    if (NoteData != null)
                    hashCode = hashCode * 59 + NoteData.GetHashCode();
                    if (DateCreated != null)
                    hashCode = hashCode * 59 + DateCreated.GetHashCode();
                    if (ScheduledDate != null)
                    hashCode = hashCode * 59 + ScheduledDate.GetHashCode();
                    if (FollowUpDate != null)
                    hashCode = hashCode * 59 + FollowUpDate.GetHashCode();
                    
                    hashCode = hashCode * 59 + ActionRequired.GetHashCode();
                    if (MailedTo != null)
                    hashCode = hashCode * 59 + MailedTo.GetHashCode();
                    if (CreatedBy != null)
                    hashCode = hashCode * 59 + CreatedBy.GetHashCode();
                    if (CompanyName != null)
                    hashCode = hashCode * 59 + CompanyName.GetHashCode();
                    if (Attachments != null)
                    hashCode = hashCode * 59 + Attachments.GetHashCode();
                    if (Visibility != null)
                    hashCode = hashCode * 59 + Visibility.GetHashCode();
                    
                    hashCode = hashCode * 59 + NoteType.GetHashCode();
                    
                    hashCode = hashCode * 59 + IsAttachmentNote.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(SCServiceChannelServicesMessagingNotesNote left, SCServiceChannelServicesMessagingNotesNote right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(SCServiceChannelServicesMessagingNotesNote left, SCServiceChannelServicesMessagingNotesNote right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}
