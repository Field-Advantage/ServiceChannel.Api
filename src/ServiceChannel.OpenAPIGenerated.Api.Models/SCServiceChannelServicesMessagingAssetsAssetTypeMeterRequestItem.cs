/*
 * ServiceChannel API - v.3
 *
 * The ServiceChannel API is a RESTful and stateless API. It accepts standard HTTP verbs and supports OAuth 2.0 for authorizing requests.      Our API returns common HTTP status codes as well as JSON encapsulated data.      See [API Overview](https://developer.servicechannel.com/basics/introduction/overview/) for the intro to ServiceChannel API.<br>      <h3>Authentication and Authorization</h3>You should have a ServiceChannel account, register your application, and obtain `access_token` to integrate with our API.      See [Authentication and Authorization](https://developer.servicechannel.com/basics/general/authentication/) for more information.      To use this API playground, click **Authorize** and sign in to ServiceChannel.<br>      <h3>Environment</h3> All calls in this API Reference point to the **SB2 environment**.      See [Environments](https://developer.servicechannel.com/basics/general/environments/) for more information.<br>      <h3>API Version</h3>The current stable version of the ServiceChannel API is `v3`. In the request URL, `v3` is a version prefix that should be present.      When you omit the version prefix, calls point to the minimum supported version of the API.      We recommend you to always specify the API version to avoid possible errors.
 *
 * The version of the OpenAPI document: 3
 * 
 * Generated by: https://openapi-generator.tech
 */

using System;
using System.Linq;
using System.Text;
using System.Collections.Generic;
using System.ComponentModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using System.Text.Json;
using ServiceChannel.OpenAPIGenerated.Api.Converters;

namespace ServiceChannel.OpenAPIGenerated.Api.Models
{ 
    /// <summary>
    /// Object with an asset type meter details.
    /// </summary>
    [DataContract]
    public class SCServiceChannelServicesMessagingAssetsAssetTypeMeterRequestItem : IEquatable<SCServiceChannelServicesMessagingAssetsAssetTypeMeterRequestItem>
    {
        /// <summary>
        /// Unique numeric identifier of an asset type meter.
        /// </summary>
        /// <value>Unique numeric identifier of an asset type meter.</value>
        [DataMember(Name="Id", EmitDefaultValue=true)]
        public int Id { get; set; }

        /// <summary>
        /// Asset type meter name given by a user.
        /// </summary>
        /// <value>Asset type meter name given by a user.</value>
        [DataMember(Name="Name", EmitDefaultValue=false)]
        public string Name { get; set; }

        /// <summary>
        /// Maximum value that a user can enter when recording a meter reading on an asset.
        /// </summary>
        /// <value>Maximum value that a user can enter when recording a meter reading on an asset.</value>
        [DataMember(Name="MaxValue", EmitDefaultValue=false)]
        public string MaxValue { get; set; }

        /// <summary>
        /// Comment added to a meter when creating or editing an asset type meter.
        /// </summary>
        /// <value>Comment added to a meter when creating or editing an asset type meter.</value>
        [DataMember(Name="Notes", EmitDefaultValue=false)]
        public string Notes { get; set; }

        /// <summary>
        /// Defines whether a meter is active or has been deactivated. **Possible values:** *true*, *false*. Note that readings can be recorded for active meters only.
        /// </summary>
        /// <value>Defines whether a meter is active or has been deactivated. **Possible values:** *true*, *false*. Note that readings can be recorded for active meters only.</value>
        [DataMember(Name="Inactive", EmitDefaultValue=true)]
        public bool Inactive { get; set; } = false;

        /// <summary>
        /// Defines whether a user can record asset meter readings on a work order via Dashboard. **Possible values:** *true*, *false*.
        /// </summary>
        /// <value>Defines whether a user can record asset meter readings on a work order via Dashboard. **Possible values:** *true*, *false*.</value>
        [DataMember(Name="EditOnWO", EmitDefaultValue=true)]
        public bool EditOnWO { get; set; } = false;

        /// <summary>
        /// Unique numeric identifier of an asset type.
        /// </summary>
        /// <value>Unique numeric identifier of an asset type.</value>
        [DataMember(Name="AssetTypeId", EmitDefaultValue=true)]
        public int AssetTypeId { get; set; }

        /// <summary>
        /// Number of the unit of measure associated with a meter. This is a sequence number of the unit of measure as it is listed in the overlay for creating a meter.
        /// </summary>
        /// <value>Number of the unit of measure associated with a meter. This is a sequence number of the unit of measure as it is listed in the overlay for creating a meter.</value>
        [DataMember(Name="UnitOfMeasure", EmitDefaultValue=true)]
        public int UnitOfMeasure { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class SCServiceChannelServicesMessagingAssetsAssetTypeMeterRequestItem {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  MaxValue: ").Append(MaxValue).Append("\n");
            sb.Append("  Notes: ").Append(Notes).Append("\n");
            sb.Append("  Inactive: ").Append(Inactive).Append("\n");
            sb.Append("  EditOnWO: ").Append(EditOnWO).Append("\n");
            sb.Append("  AssetTypeId: ").Append(AssetTypeId).Append("\n");
            sb.Append("  UnitOfMeasure: ").Append(UnitOfMeasure).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            var options = new JsonSerializerOptions
            {
                WriteIndented = true
            };

            return JsonSerializer.Serialize(this, options);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (obj is null) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((SCServiceChannelServicesMessagingAssetsAssetTypeMeterRequestItem)obj);
        }

        /// <summary>
        /// Returns true if SCServiceChannelServicesMessagingAssetsAssetTypeMeterRequestItem instances are equal
        /// </summary>
        /// <param name="other">Instance of SCServiceChannelServicesMessagingAssetsAssetTypeMeterRequestItem to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(SCServiceChannelServicesMessagingAssetsAssetTypeMeterRequestItem other)
        {
            if (other is null) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    Id == other.Id ||
                    
                    Id.Equals(other.Id)
                ) && 
                (
                    Name == other.Name ||
                    Name != null &&
                    Name.Equals(other.Name)
                ) && 
                (
                    MaxValue == other.MaxValue ||
                    MaxValue != null &&
                    MaxValue.Equals(other.MaxValue)
                ) && 
                (
                    Notes == other.Notes ||
                    Notes != null &&
                    Notes.Equals(other.Notes)
                ) && 
                (
                    Inactive == other.Inactive ||
                    
                    Inactive.Equals(other.Inactive)
                ) && 
                (
                    EditOnWO == other.EditOnWO ||
                    
                    EditOnWO.Equals(other.EditOnWO)
                ) && 
                (
                    AssetTypeId == other.AssetTypeId ||
                    
                    AssetTypeId.Equals(other.AssetTypeId)
                ) && 
                (
                    UnitOfMeasure == other.UnitOfMeasure ||
                    
                    UnitOfMeasure.Equals(other.UnitOfMeasure)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    
                    hashCode = hashCode * 59 + Id.GetHashCode();
                    if (Name != null)
                    hashCode = hashCode * 59 + Name.GetHashCode();
                    if (MaxValue != null)
                    hashCode = hashCode * 59 + MaxValue.GetHashCode();
                    if (Notes != null)
                    hashCode = hashCode * 59 + Notes.GetHashCode();
                    
                    hashCode = hashCode * 59 + Inactive.GetHashCode();
                    
                    hashCode = hashCode * 59 + EditOnWO.GetHashCode();
                    
                    hashCode = hashCode * 59 + AssetTypeId.GetHashCode();
                    
                    hashCode = hashCode * 59 + UnitOfMeasure.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(SCServiceChannelServicesMessagingAssetsAssetTypeMeterRequestItem left, SCServiceChannelServicesMessagingAssetsAssetTypeMeterRequestItem right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(SCServiceChannelServicesMessagingAssetsAssetTypeMeterRequestItem left, SCServiceChannelServicesMessagingAssetsAssetTypeMeterRequestItem right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}
