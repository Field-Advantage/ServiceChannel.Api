/*
 * ServiceChannel API - v.3
 *
 * The ServiceChannel API is a RESTful and stateless API. It accepts standard HTTP verbs and supports OAuth 2.0 for authorizing requests.      Our API returns common HTTP status codes as well as JSON encapsulated data.      See [API Overview](https://developer.servicechannel.com/basics/introduction/overview/) for the intro to ServiceChannel API.<br>      <h3>Authentication and Authorization</h3>You should have a ServiceChannel account, register your application, and obtain `access_token` to integrate with our API.      See [Authentication and Authorization](https://developer.servicechannel.com/basics/general/authentication/) for more information.      To use this API playground, click **Authorize** and sign in to ServiceChannel.<br>      <h3>Environment</h3> All calls in this API Reference point to the **SB2 environment**.      See [Environments](https://developer.servicechannel.com/basics/general/environments/) for more information.<br>      <h3>API Version</h3>The current stable version of the ServiceChannel API is `v3`. In the request URL, `v3` is a version prefix that should be present.      When you omit the version prefix, calls point to the minimum supported version of the API.      We recommend you to always specify the API version to avoid possible errors.
 *
 * The version of the OpenAPI document: 3
 * 
 * Generated by: https://openapi-generator.tech
 */

using System;
using System.Linq;
using System.Text;
using System.Collections.Generic;
using System.ComponentModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using System.Text.Json;
using ServiceChannel.OpenAPIGenerated.Api.Converters;

namespace ServiceChannel.OpenAPIGenerated.Api.Models
{ 
    /// <summary>
    /// 
    /// </summary>
    [DataContract]
    public class SCServiceChannelServicesMessagingRefrigerantTrackingWorkOrderPartRefrigerantResponse : IEquatable<SCServiceChannelServicesMessagingRefrigerantTrackingWorkOrderPartRefrigerantResponse>
    {
        /// <summary>
        /// Gets or Sets Id
        /// </summary>
        [DataMember(Name="Id", EmitDefaultValue=true)]
        public int Id { get; set; }

        /// <summary>
        /// Gets or Sets AssetId
        /// </summary>
        [DataMember(Name="AssetId", EmitDefaultValue=true)]
        public int AssetId { get; set; }

        /// <summary>
        /// Gets or Sets TagId
        /// </summary>
        [DataMember(Name="TagId", EmitDefaultValue=false)]
        public string TagId { get; set; }

        /// <summary>
        /// Gets or Sets RecId
        /// </summary>
        [DataMember(Name="RecId", EmitDefaultValue=true)]
        public int RecId { get; set; }

        /// <summary>
        /// Gets or Sets CertifiedTechnicianId
        /// </summary>
        [DataMember(Name="CertifiedTechnicianId", EmitDefaultValue=true)]
        public int CertifiedTechnicianId { get; set; }

        /// <summary>
        /// Gets or Sets Quantity
        /// </summary>
        [DataMember(Name="Quantity", EmitDefaultValue=true)]
        public double Quantity { get; set; }

        /// <summary>
        /// Gets or Sets QuantityMetrics
        /// </summary>
        [DataMember(Name="QuantityMetrics", EmitDefaultValue=true)]
        public double QuantityMetrics { get; set; }

        /// <summary>
        /// Gets or Sets QuantityStr
        /// </summary>
        [DataMember(Name="QuantityStr", EmitDefaultValue=false)]
        public string QuantityStr { get; set; }

        /// <summary>
        /// Gets or Sets UnitCost
        /// </summary>
        [DataMember(Name="UnitCost", EmitDefaultValue=true)]
        public double UnitCost { get; set; }

        /// <summary>
        /// Gets or Sets IsRefrigerant
        /// </summary>
        [DataMember(Name="IsRefrigerant", EmitDefaultValue=true)]
        public bool IsRefrigerant { get; set; } = false;

        /// <summary>
        /// Gets or Sets IsInventoryPart
        /// </summary>
        [DataMember(Name="IsInventoryPart", EmitDefaultValue=true)]
        public bool IsInventoryPart { get; set; } = false;

        /// <summary>
        /// Gets or Sets UseDate
        /// </summary>
        [DataMember(Name="UseDate", EmitDefaultValue=false)]
        public DateTime UseDate { get; set; }

        /// <summary>
        /// Gets or Sets ReasonCode
        /// </summary>
        [DataMember(Name="ReasonCode", EmitDefaultValue=true)]
        public int ReasonCode { get; set; }

        /// <summary>
        /// Gets or Sets ReasonCodeId
        /// </summary>
        [DataMember(Name="ReasonCodeId", EmitDefaultValue=true)]
        public int ReasonCodeId { get; set; }

        /// <summary>
        /// Gets or Sets PartNumber
        /// </summary>
        [DataMember(Name="PartNumber", EmitDefaultValue=false)]
        public string PartNumber { get; set; }

        /// <summary>
        /// Gets or Sets Description
        /// </summary>
        [DataMember(Name="Description", EmitDefaultValue=false)]
        public string Description { get; set; }

        /// <summary>
        /// Gets or Sets WOStatus
        /// </summary>
        [DataMember(Name="WOStatus", EmitDefaultValue=false)]
        public string WOStatus { get; set; }

        /// <summary>
        /// Gets or Sets ProblemType
        /// </summary>
        [DataMember(Name="ProblemType", EmitDefaultValue=false)]
        public string ProblemType { get; set; }

        /// <summary>
        /// Gets or Sets InventoryLocationId
        /// </summary>
        [DataMember(Name="InventoryLocationId", EmitDefaultValue=true)]
        public int InventoryLocationId { get; set; }

        /// <summary>
        /// GUID of inventory part location
        /// </summary>
        /// <value>GUID of inventory part location</value>
        [DataMember(Name="InventoryLocationGuid", EmitDefaultValue=false)]
        public string InventoryLocationGuid { get; set; }

        /// <summary>
        /// Gets or Sets InventoryLocationName
        /// </summary>
        [DataMember(Name="InventoryLocationName", EmitDefaultValue=false)]
        public string InventoryLocationName { get; set; }

        /// <summary>
        /// Gets or Sets InventoryPartId
        /// </summary>
        [DataMember(Name="InventoryPartId", EmitDefaultValue=true)]
        public int InventoryPartId { get; set; }

        /// <summary>
        /// Gets or Sets PartName
        /// </summary>
        [DataMember(Name="PartName", EmitDefaultValue=false)]
        public string PartName { get; set; }

        /// <summary>
        /// Gets or Sets PartGroup
        /// </summary>
        [DataMember(Name="PartGroup", EmitDefaultValue=false)]
        public string PartGroup { get; set; }

        /// <summary>
        /// Gets or Sets SupplierName
        /// </summary>
        [DataMember(Name="SupplierName", EmitDefaultValue=false)]
        public string SupplierName { get; set; }

        /// <summary>
        /// Gets or Sets RefrigerantChargeOptionsId
        /// </summary>
        [DataMember(Name="RefrigerantChargeOptionsId", EmitDefaultValue=true)]
        public int RefrigerantChargeOptionsId { get; set; }

        /// <summary>
        /// Gets or Sets RefrigerantChargeVendor
        /// </summary>
        [DataMember(Name="RefrigerantChargeVendor", EmitDefaultValue=false)]
        public string RefrigerantChargeVendor { get; set; }

        /// <summary>
        /// Gets or Sets ReasonCodeStr
        /// </summary>
        [DataMember(Name="ReasonCodeStr", EmitDefaultValue=false)]
        public string ReasonCodeStr { get; set; }

        /// <summary>
        /// Gets or Sets RefrigerantUsePurpose
        /// </summary>
        [DataMember(Name="RefrigerantUsePurpose", EmitDefaultValue=true)]
        public int RefrigerantUsePurpose { get; set; }

        /// <summary>
        /// Gets or Sets RefrigerantTypeName
        /// </summary>
        [DataMember(Name="RefrigerantTypeName", EmitDefaultValue=false)]
        public string RefrigerantTypeName { get; set; }

        /// <summary>
        /// Gets or Sets RefrigerantTypeId
        /// </summary>
        [DataMember(Name="RefrigerantTypeId", EmitDefaultValue=true)]
        public int RefrigerantTypeId { get; set; }

        /// <summary>
        /// Gets or Sets IsSupplierPart
        /// </summary>
        [DataMember(Name="IsSupplierPart", EmitDefaultValue=true)]
        public bool IsSupplierPart { get; set; } = false;

        /// <summary>
        /// Gets or Sets IsConnectorWOPart
        /// </summary>
        [DataMember(Name="IsConnectorWOPart", EmitDefaultValue=true)]
        public bool IsConnectorWOPart { get; set; } = false;

        /// <summary>
        /// Gets or Sets SubscriberTrackingNumber
        /// </summary>
        [DataMember(Name="SubscriberTrackingNumber", EmitDefaultValue=true)]
        public int SubscriberTrackingNumber { get; set; }

        /// <summary>
        /// Gets or Sets SubscriberAssetId
        /// </summary>
        [DataMember(Name="SubscriberAssetId", EmitDefaultValue=true)]
        public int SubscriberAssetId { get; set; }

        /// <summary>
        /// Gets or Sets CreatedByUserId
        /// </summary>
        [DataMember(Name="CreatedByUserId", EmitDefaultValue=false)]
        public string CreatedByUserId { get; set; }

        /// <summary>
        /// Gets or Sets ModifiedByUserId
        /// </summary>
        [DataMember(Name="ModifiedByUserId", EmitDefaultValue=false)]
        public string ModifiedByUserId { get; set; }

        /// <summary>
        /// Gets or Sets IsRetrofit
        /// </summary>
        [RegularExpression("^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$")]
        [DataMember(Name="IsRetrofit", EmitDefaultValue=false)]
        public byte[] IsRetrofit { get; set; }

        /// <summary>
        /// Gets or Sets RefrigerantPartNumber
        /// </summary>
        [DataMember(Name="RefrigerantPartNumber", EmitDefaultValue=false)]
        public string RefrigerantPartNumber { get; set; }

        /// <summary>
        /// Gets or Sets InventoryLocations
        /// </summary>
        [DataMember(Name="InventoryLocations", EmitDefaultValue=false)]
        public List<SCServiceChannelServicesMessagingInventoryInventoryLocation> InventoryLocations { get; set; }

        /// <summary>
        /// Gets or Sets SupplierPartId
        /// </summary>
        [DataMember(Name="SupplierPartId", EmitDefaultValue=false)]
        public string SupplierPartId { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class SCServiceChannelServicesMessagingRefrigerantTrackingWorkOrderPartRefrigerantResponse {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  AssetId: ").Append(AssetId).Append("\n");
            sb.Append("  TagId: ").Append(TagId).Append("\n");
            sb.Append("  RecId: ").Append(RecId).Append("\n");
            sb.Append("  CertifiedTechnicianId: ").Append(CertifiedTechnicianId).Append("\n");
            sb.Append("  Quantity: ").Append(Quantity).Append("\n");
            sb.Append("  QuantityMetrics: ").Append(QuantityMetrics).Append("\n");
            sb.Append("  QuantityStr: ").Append(QuantityStr).Append("\n");
            sb.Append("  UnitCost: ").Append(UnitCost).Append("\n");
            sb.Append("  IsRefrigerant: ").Append(IsRefrigerant).Append("\n");
            sb.Append("  IsInventoryPart: ").Append(IsInventoryPart).Append("\n");
            sb.Append("  UseDate: ").Append(UseDate).Append("\n");
            sb.Append("  ReasonCode: ").Append(ReasonCode).Append("\n");
            sb.Append("  ReasonCodeId: ").Append(ReasonCodeId).Append("\n");
            sb.Append("  PartNumber: ").Append(PartNumber).Append("\n");
            sb.Append("  Description: ").Append(Description).Append("\n");
            sb.Append("  WOStatus: ").Append(WOStatus).Append("\n");
            sb.Append("  ProblemType: ").Append(ProblemType).Append("\n");
            sb.Append("  InventoryLocationId: ").Append(InventoryLocationId).Append("\n");
            sb.Append("  InventoryLocationGuid: ").Append(InventoryLocationGuid).Append("\n");
            sb.Append("  InventoryLocationName: ").Append(InventoryLocationName).Append("\n");
            sb.Append("  InventoryPartId: ").Append(InventoryPartId).Append("\n");
            sb.Append("  PartName: ").Append(PartName).Append("\n");
            sb.Append("  PartGroup: ").Append(PartGroup).Append("\n");
            sb.Append("  SupplierName: ").Append(SupplierName).Append("\n");
            sb.Append("  RefrigerantChargeOptionsId: ").Append(RefrigerantChargeOptionsId).Append("\n");
            sb.Append("  RefrigerantChargeVendor: ").Append(RefrigerantChargeVendor).Append("\n");
            sb.Append("  ReasonCodeStr: ").Append(ReasonCodeStr).Append("\n");
            sb.Append("  RefrigerantUsePurpose: ").Append(RefrigerantUsePurpose).Append("\n");
            sb.Append("  RefrigerantTypeName: ").Append(RefrigerantTypeName).Append("\n");
            sb.Append("  RefrigerantTypeId: ").Append(RefrigerantTypeId).Append("\n");
            sb.Append("  IsSupplierPart: ").Append(IsSupplierPart).Append("\n");
            sb.Append("  IsConnectorWOPart: ").Append(IsConnectorWOPart).Append("\n");
            sb.Append("  SubscriberTrackingNumber: ").Append(SubscriberTrackingNumber).Append("\n");
            sb.Append("  SubscriberAssetId: ").Append(SubscriberAssetId).Append("\n");
            sb.Append("  CreatedByUserId: ").Append(CreatedByUserId).Append("\n");
            sb.Append("  ModifiedByUserId: ").Append(ModifiedByUserId).Append("\n");
            sb.Append("  IsRetrofit: ").Append(IsRetrofit).Append("\n");
            sb.Append("  RefrigerantPartNumber: ").Append(RefrigerantPartNumber).Append("\n");
            sb.Append("  InventoryLocations: ").Append(InventoryLocations).Append("\n");
            sb.Append("  SupplierPartId: ").Append(SupplierPartId).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            var options = new JsonSerializerOptions
            {
                WriteIndented = true
            };

            return JsonSerializer.Serialize(this, options);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (obj is null) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((SCServiceChannelServicesMessagingRefrigerantTrackingWorkOrderPartRefrigerantResponse)obj);
        }

        /// <summary>
        /// Returns true if SCServiceChannelServicesMessagingRefrigerantTrackingWorkOrderPartRefrigerantResponse instances are equal
        /// </summary>
        /// <param name="other">Instance of SCServiceChannelServicesMessagingRefrigerantTrackingWorkOrderPartRefrigerantResponse to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(SCServiceChannelServicesMessagingRefrigerantTrackingWorkOrderPartRefrigerantResponse other)
        {
            if (other is null) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    Id == other.Id ||
                    
                    Id.Equals(other.Id)
                ) && 
                (
                    AssetId == other.AssetId ||
                    
                    AssetId.Equals(other.AssetId)
                ) && 
                (
                    TagId == other.TagId ||
                    TagId != null &&
                    TagId.Equals(other.TagId)
                ) && 
                (
                    RecId == other.RecId ||
                    
                    RecId.Equals(other.RecId)
                ) && 
                (
                    CertifiedTechnicianId == other.CertifiedTechnicianId ||
                    
                    CertifiedTechnicianId.Equals(other.CertifiedTechnicianId)
                ) && 
                (
                    Quantity == other.Quantity ||
                    
                    Quantity.Equals(other.Quantity)
                ) && 
                (
                    QuantityMetrics == other.QuantityMetrics ||
                    
                    QuantityMetrics.Equals(other.QuantityMetrics)
                ) && 
                (
                    QuantityStr == other.QuantityStr ||
                    QuantityStr != null &&
                    QuantityStr.Equals(other.QuantityStr)
                ) && 
                (
                    UnitCost == other.UnitCost ||
                    
                    UnitCost.Equals(other.UnitCost)
                ) && 
                (
                    IsRefrigerant == other.IsRefrigerant ||
                    
                    IsRefrigerant.Equals(other.IsRefrigerant)
                ) && 
                (
                    IsInventoryPart == other.IsInventoryPart ||
                    
                    IsInventoryPart.Equals(other.IsInventoryPart)
                ) && 
                (
                    UseDate == other.UseDate ||
                    UseDate != null &&
                    UseDate.Equals(other.UseDate)
                ) && 
                (
                    ReasonCode == other.ReasonCode ||
                    
                    ReasonCode.Equals(other.ReasonCode)
                ) && 
                (
                    ReasonCodeId == other.ReasonCodeId ||
                    
                    ReasonCodeId.Equals(other.ReasonCodeId)
                ) && 
                (
                    PartNumber == other.PartNumber ||
                    PartNumber != null &&
                    PartNumber.Equals(other.PartNumber)
                ) && 
                (
                    Description == other.Description ||
                    Description != null &&
                    Description.Equals(other.Description)
                ) && 
                (
                    WOStatus == other.WOStatus ||
                    WOStatus != null &&
                    WOStatus.Equals(other.WOStatus)
                ) && 
                (
                    ProblemType == other.ProblemType ||
                    ProblemType != null &&
                    ProblemType.Equals(other.ProblemType)
                ) && 
                (
                    InventoryLocationId == other.InventoryLocationId ||
                    
                    InventoryLocationId.Equals(other.InventoryLocationId)
                ) && 
                (
                    InventoryLocationGuid == other.InventoryLocationGuid ||
                    InventoryLocationGuid != null &&
                    InventoryLocationGuid.Equals(other.InventoryLocationGuid)
                ) && 
                (
                    InventoryLocationName == other.InventoryLocationName ||
                    InventoryLocationName != null &&
                    InventoryLocationName.Equals(other.InventoryLocationName)
                ) && 
                (
                    InventoryPartId == other.InventoryPartId ||
                    
                    InventoryPartId.Equals(other.InventoryPartId)
                ) && 
                (
                    PartName == other.PartName ||
                    PartName != null &&
                    PartName.Equals(other.PartName)
                ) && 
                (
                    PartGroup == other.PartGroup ||
                    PartGroup != null &&
                    PartGroup.Equals(other.PartGroup)
                ) && 
                (
                    SupplierName == other.SupplierName ||
                    SupplierName != null &&
                    SupplierName.Equals(other.SupplierName)
                ) && 
                (
                    RefrigerantChargeOptionsId == other.RefrigerantChargeOptionsId ||
                    
                    RefrigerantChargeOptionsId.Equals(other.RefrigerantChargeOptionsId)
                ) && 
                (
                    RefrigerantChargeVendor == other.RefrigerantChargeVendor ||
                    RefrigerantChargeVendor != null &&
                    RefrigerantChargeVendor.Equals(other.RefrigerantChargeVendor)
                ) && 
                (
                    ReasonCodeStr == other.ReasonCodeStr ||
                    ReasonCodeStr != null &&
                    ReasonCodeStr.Equals(other.ReasonCodeStr)
                ) && 
                (
                    RefrigerantUsePurpose == other.RefrigerantUsePurpose ||
                    
                    RefrigerantUsePurpose.Equals(other.RefrigerantUsePurpose)
                ) && 
                (
                    RefrigerantTypeName == other.RefrigerantTypeName ||
                    RefrigerantTypeName != null &&
                    RefrigerantTypeName.Equals(other.RefrigerantTypeName)
                ) && 
                (
                    RefrigerantTypeId == other.RefrigerantTypeId ||
                    
                    RefrigerantTypeId.Equals(other.RefrigerantTypeId)
                ) && 
                (
                    IsSupplierPart == other.IsSupplierPart ||
                    
                    IsSupplierPart.Equals(other.IsSupplierPart)
                ) && 
                (
                    IsConnectorWOPart == other.IsConnectorWOPart ||
                    
                    IsConnectorWOPart.Equals(other.IsConnectorWOPart)
                ) && 
                (
                    SubscriberTrackingNumber == other.SubscriberTrackingNumber ||
                    
                    SubscriberTrackingNumber.Equals(other.SubscriberTrackingNumber)
                ) && 
                (
                    SubscriberAssetId == other.SubscriberAssetId ||
                    
                    SubscriberAssetId.Equals(other.SubscriberAssetId)
                ) && 
                (
                    CreatedByUserId == other.CreatedByUserId ||
                    CreatedByUserId != null &&
                    CreatedByUserId.Equals(other.CreatedByUserId)
                ) && 
                (
                    ModifiedByUserId == other.ModifiedByUserId ||
                    ModifiedByUserId != null &&
                    ModifiedByUserId.Equals(other.ModifiedByUserId)
                ) && 
                (
                    IsRetrofit == other.IsRetrofit ||
                    IsRetrofit != null &&
                    IsRetrofit.Equals(other.IsRetrofit)
                ) && 
                (
                    RefrigerantPartNumber == other.RefrigerantPartNumber ||
                    RefrigerantPartNumber != null &&
                    RefrigerantPartNumber.Equals(other.RefrigerantPartNumber)
                ) && 
                (
                    InventoryLocations == other.InventoryLocations ||
                    InventoryLocations != null &&
                    other.InventoryLocations != null &&
                    InventoryLocations.SequenceEqual(other.InventoryLocations)
                ) && 
                (
                    SupplierPartId == other.SupplierPartId ||
                    SupplierPartId != null &&
                    SupplierPartId.Equals(other.SupplierPartId)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    
                    hashCode = hashCode * 59 + Id.GetHashCode();
                    
                    hashCode = hashCode * 59 + AssetId.GetHashCode();
                    if (TagId != null)
                    hashCode = hashCode * 59 + TagId.GetHashCode();
                    
                    hashCode = hashCode * 59 + RecId.GetHashCode();
                    
                    hashCode = hashCode * 59 + CertifiedTechnicianId.GetHashCode();
                    
                    hashCode = hashCode * 59 + Quantity.GetHashCode();
                    
                    hashCode = hashCode * 59 + QuantityMetrics.GetHashCode();
                    if (QuantityStr != null)
                    hashCode = hashCode * 59 + QuantityStr.GetHashCode();
                    
                    hashCode = hashCode * 59 + UnitCost.GetHashCode();
                    
                    hashCode = hashCode * 59 + IsRefrigerant.GetHashCode();
                    
                    hashCode = hashCode * 59 + IsInventoryPart.GetHashCode();
                    if (UseDate != null)
                    hashCode = hashCode * 59 + UseDate.GetHashCode();
                    
                    hashCode = hashCode * 59 + ReasonCode.GetHashCode();
                    
                    hashCode = hashCode * 59 + ReasonCodeId.GetHashCode();
                    if (PartNumber != null)
                    hashCode = hashCode * 59 + PartNumber.GetHashCode();
                    if (Description != null)
                    hashCode = hashCode * 59 + Description.GetHashCode();
                    if (WOStatus != null)
                    hashCode = hashCode * 59 + WOStatus.GetHashCode();
                    if (ProblemType != null)
                    hashCode = hashCode * 59 + ProblemType.GetHashCode();
                    
                    hashCode = hashCode * 59 + InventoryLocationId.GetHashCode();
                    if (InventoryLocationGuid != null)
                    hashCode = hashCode * 59 + InventoryLocationGuid.GetHashCode();
                    if (InventoryLocationName != null)
                    hashCode = hashCode * 59 + InventoryLocationName.GetHashCode();
                    
                    hashCode = hashCode * 59 + InventoryPartId.GetHashCode();
                    if (PartName != null)
                    hashCode = hashCode * 59 + PartName.GetHashCode();
                    if (PartGroup != null)
                    hashCode = hashCode * 59 + PartGroup.GetHashCode();
                    if (SupplierName != null)
                    hashCode = hashCode * 59 + SupplierName.GetHashCode();
                    
                    hashCode = hashCode * 59 + RefrigerantChargeOptionsId.GetHashCode();
                    if (RefrigerantChargeVendor != null)
                    hashCode = hashCode * 59 + RefrigerantChargeVendor.GetHashCode();
                    if (ReasonCodeStr != null)
                    hashCode = hashCode * 59 + ReasonCodeStr.GetHashCode();
                    
                    hashCode = hashCode * 59 + RefrigerantUsePurpose.GetHashCode();
                    if (RefrigerantTypeName != null)
                    hashCode = hashCode * 59 + RefrigerantTypeName.GetHashCode();
                    
                    hashCode = hashCode * 59 + RefrigerantTypeId.GetHashCode();
                    
                    hashCode = hashCode * 59 + IsSupplierPart.GetHashCode();
                    
                    hashCode = hashCode * 59 + IsConnectorWOPart.GetHashCode();
                    
                    hashCode = hashCode * 59 + SubscriberTrackingNumber.GetHashCode();
                    
                    hashCode = hashCode * 59 + SubscriberAssetId.GetHashCode();
                    if (CreatedByUserId != null)
                    hashCode = hashCode * 59 + CreatedByUserId.GetHashCode();
                    if (ModifiedByUserId != null)
                    hashCode = hashCode * 59 + ModifiedByUserId.GetHashCode();
                    if (IsRetrofit != null)
                    hashCode = hashCode * 59 + IsRetrofit.GetHashCode();
                    if (RefrigerantPartNumber != null)
                    hashCode = hashCode * 59 + RefrigerantPartNumber.GetHashCode();
                    if (InventoryLocations != null)
                    hashCode = hashCode * 59 + InventoryLocations.GetHashCode();
                    if (SupplierPartId != null)
                    hashCode = hashCode * 59 + SupplierPartId.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(SCServiceChannelServicesMessagingRefrigerantTrackingWorkOrderPartRefrigerantResponse left, SCServiceChannelServicesMessagingRefrigerantTrackingWorkOrderPartRefrigerantResponse right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(SCServiceChannelServicesMessagingRefrigerantTrackingWorkOrderPartRefrigerantResponse left, SCServiceChannelServicesMessagingRefrigerantTrackingWorkOrderPartRefrigerantResponse right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}
