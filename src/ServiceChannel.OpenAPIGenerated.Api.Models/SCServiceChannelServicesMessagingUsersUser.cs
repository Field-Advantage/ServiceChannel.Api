/*
 * ServiceChannel API - v.3
 *
 * The ServiceChannel API is a RESTful and stateless API. It accepts standard HTTP verbs and supports OAuth 2.0 for authorizing requests.      Our API returns common HTTP status codes as well as JSON encapsulated data.      See [API Overview](https://developer.servicechannel.com/basics/introduction/overview/) for the intro to ServiceChannel API.<br>      <h3>Authentication and Authorization</h3>You should have a ServiceChannel account, register your application, and obtain `access_token` to integrate with our API.      See [Authentication and Authorization](https://developer.servicechannel.com/basics/general/authentication/) for more information.      To use this API playground, click **Authorize** and sign in to ServiceChannel.<br>      <h3>Environment</h3> All calls in this API Reference point to the **SB2 environment**.      See [Environments](https://developer.servicechannel.com/basics/general/environments/) for more information.<br>      <h3>API Version</h3>The current stable version of the ServiceChannel API is `v3`. In the request URL, `v3` is a version prefix that should be present.      When you omit the version prefix, calls point to the minimum supported version of the API.      We recommend you to always specify the API version to avoid possible errors.
 *
 * The version of the OpenAPI document: 3
 * 
 * Generated by: https://openapi-generator.tech
 */

using System;
using System.Linq;
using System.Text;
using System.Collections.Generic;
using System.ComponentModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using System.Text.Json;
using ServiceChannel.OpenAPIGenerated.Api.Converters;

namespace ServiceChannel.OpenAPIGenerated.Api.Models
{ 
    /// <summary>
    /// User details object.
    /// </summary>
    [DataContract]
    public class SCServiceChannelServicesMessagingUsersUser : IEquatable<SCServiceChannelServicesMessagingUsersUser>
    {
        /// <summary>
        /// Unique user identifier.
        /// </summary>
        /// <value>Unique user identifier.</value>
        [DataMember(Name="Id", EmitDefaultValue=true)]
        public int Id { get; set; }

        /// <summary>
        /// Unique subscriber ID.
        /// </summary>
        /// <value>Unique subscriber ID.</value>
        [DataMember(Name="SubscriberId", EmitDefaultValue=true)]
        public int SubscriberId { get; set; }

        /// <summary>
        /// Username of the user.&lt;br /&gt; • For subscriber users, the username appears as **User Id** on the \&quot;General Info\&quot; tab of the user profile page.&lt;br /&gt; • For provider users, the username is listed as **UserID** under \&quot;Access\&quot; on the \&quot;General\&quot; tab of the user profile page.
        /// </summary>
        /// <value>Username of the user.&lt;br /&gt; • For subscriber users, the username appears as **User Id** on the \&quot;General Info\&quot; tab of the user profile page.&lt;br /&gt; • For provider users, the username is listed as **UserID** under \&quot;Access\&quot; on the \&quot;General\&quot; tab of the user profile page.</value>
        [RegularExpression("^$|(\\A\\S+).(\\S).(\\S)\\z")]
        [DataMember(Name="UserName", EmitDefaultValue=false)]
        public string UserName { get; set; }

        /// <summary>
        /// Full name of the user.&lt;br /&gt; • For subscriber users, the full name appears as **User Name** on the \&quot;General Info\&quot; tab of the user profile page.&lt;br /&gt; • For provider users, you can see their first and last name under \&quot;Basic\&quot; on the \&quot;General\&quot; tab of the user profile page.
        /// </summary>
        /// <value>Full name of the user.&lt;br /&gt; • For subscriber users, the full name appears as **User Name** on the \&quot;General Info\&quot; tab of the user profile page.&lt;br /&gt; • For provider users, you can see their first and last name under \&quot;Basic\&quot; on the \&quot;General\&quot; tab of the user profile page.</value>
        [DataMember(Name="FullName", EmitDefaultValue=false)]
        public string FullName { get; set; }

        /// <summary>
        /// User’s email address.
        /// </summary>
        /// <value>User’s email address.</value>
        [DataMember(Name="Email", EmitDefaultValue=false)]
        public string Email { get; set; }

        /// <summary>
        /// Email address through which a user can reset their password.
        /// </summary>
        /// <value>Email address through which a user can reset their password.</value>
        [DataMember(Name="PsmEmail", EmitDefaultValue=false)]
        public string PsmEmail { get; set; }

        /// <summary>
        /// Defines if a user is deactivated.
        /// </summary>
        /// <value>Defines if a user is deactivated.</value>
        [DataMember(Name="Disabled", EmitDefaultValue=true)]
        public bool Disabled { get; set; } = false;

        /// <summary>
        /// Secondary roles assigned to a subscriber user that determine their permissions and level of access to various Service Automation modules.
        /// </summary>
        /// <value>Secondary roles assigned to a subscriber user that determine their permissions and level of access to various Service Automation modules.</value>
        [DataMember(Name="Roles", EmitDefaultValue=false)]
        public List<string> Roles { get; set; }

        /// <summary>
        /// Permissions assigned to a subscriber user that determine whether they have full or read-only access to various Service Automation modules.
        /// </summary>
        /// <value>Permissions assigned to a subscriber user that determine whether they have full or read-only access to various Service Automation modules.</value>
        [DataMember(Name="Permissions", EmitDefaultValue=false)]
        public List<string> Permissions { get; set; }


        /// <summary>
        /// Subscriber user type defining their level of access to ServiceChannel:<br /> • `Corporate` — a user can work in Service Automation.<br /> • `Dashboard` — a user can only access the dashboard assigned to them.<br />`0` is returned for provider users.
        /// </summary>
        /// <value>Subscriber user type defining their level of access to ServiceChannel:<br /> • `Corporate` — a user can work in Service Automation.<br /> • `Dashboard` — a user can only access the dashboard assigned to them.<br />`0` is returned for provider users.</value>
        
        public enum UserTypeEnum
        {
            
            /// <summary>
            /// Enum CorporateEnum for Corporate
            /// </summary>
            [EnumMember(Value = "Corporate")]
            CorporateEnum = 1,
            
            /// <summary>
            /// Enum DashboardEnum for Dashboard
            /// </summary>
            [EnumMember(Value = "Dashboard")]
            DashboardEnum = 2,
            
            /// <summary>
            /// Enum ServiceChannelEnum for ServiceChannel
            /// </summary>
            [EnumMember(Value = "ServiceChannel")]
            ServiceChannelEnum = 3
        }

        /// <summary>
        /// Subscriber user type defining their level of access to ServiceChannel:&lt;br /&gt; • &#x60;Corporate&#x60; — a user can work in Service Automation.&lt;br /&gt; • &#x60;Dashboard&#x60; — a user can only access the dashboard assigned to them.&lt;br /&gt;&#x60;0&#x60; is returned for provider users.
        /// </summary>
        /// <value>Subscriber user type defining their level of access to ServiceChannel:&lt;br /&gt; • &#x60;Corporate&#x60; — a user can work in Service Automation.&lt;br /&gt; • &#x60;Dashboard&#x60; — a user can only access the dashboard assigned to them.&lt;br /&gt;&#x60;0&#x60; is returned for provider users.</value>
        [DataMember(Name="UserType", EmitDefaultValue=true)]
        public UserTypeEnum UserType { get; set; }

        /// <summary>
        /// Gets or Sets Dashboard
        /// </summary>
        [DataMember(Name="Dashboard", EmitDefaultValue=false)]
        public SCServiceChannelServicesMessagingUsersDashboardInfo Dashboard { get; set; }

        /// <summary>
        /// Gets or Sets Access
        /// </summary>
        [DataMember(Name="Access", EmitDefaultValue=false)]
        public SCServiceChannelServicesMessagingUsersAccessOptions Access { get; set; }

        /// <summary>
        /// Gets or Sets Limits
        /// </summary>
        [DataMember(Name="Limits", EmitDefaultValue=false)]
        public SCServiceChannelServicesMessagingUsersLimitOptions Limits { get; set; }

        /// <summary>
        /// Gets or Sets FeedRole
        /// </summary>
        [DataMember(Name="FeedRole", EmitDefaultValue=false)]
        public string FeedRole { get; set; }

        /// <summary>
        /// Gets or Sets MliUserInfo
        /// </summary>
        [DataMember(Name="MliUserInfo", EmitDefaultValue=false)]
        public SCServiceChannelServicesMessagingUsersMliUserInfo MliUserInfo { get; set; }

        /// <summary>
        /// Gets or Sets MlpUserInfo
        /// </summary>
        [DataMember(Name="MlpUserInfo", EmitDefaultValue=false)]
        public SCServiceChannelServicesMessagingUsersMlpUserInfo MlpUserInfo { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class SCServiceChannelServicesMessagingUsersUser {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  SubscriberId: ").Append(SubscriberId).Append("\n");
            sb.Append("  UserName: ").Append(UserName).Append("\n");
            sb.Append("  FullName: ").Append(FullName).Append("\n");
            sb.Append("  Email: ").Append(Email).Append("\n");
            sb.Append("  PsmEmail: ").Append(PsmEmail).Append("\n");
            sb.Append("  Disabled: ").Append(Disabled).Append("\n");
            sb.Append("  Roles: ").Append(Roles).Append("\n");
            sb.Append("  Permissions: ").Append(Permissions).Append("\n");
            sb.Append("  UserType: ").Append(UserType).Append("\n");
            sb.Append("  Dashboard: ").Append(Dashboard).Append("\n");
            sb.Append("  Access: ").Append(Access).Append("\n");
            sb.Append("  Limits: ").Append(Limits).Append("\n");
            sb.Append("  FeedRole: ").Append(FeedRole).Append("\n");
            sb.Append("  MliUserInfo: ").Append(MliUserInfo).Append("\n");
            sb.Append("  MlpUserInfo: ").Append(MlpUserInfo).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            var options = new JsonSerializerOptions
            {
                WriteIndented = true
            };

            return JsonSerializer.Serialize(this, options);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (obj is null) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((SCServiceChannelServicesMessagingUsersUser)obj);
        }

        /// <summary>
        /// Returns true if SCServiceChannelServicesMessagingUsersUser instances are equal
        /// </summary>
        /// <param name="other">Instance of SCServiceChannelServicesMessagingUsersUser to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(SCServiceChannelServicesMessagingUsersUser other)
        {
            if (other is null) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    Id == other.Id ||
                    
                    Id.Equals(other.Id)
                ) && 
                (
                    SubscriberId == other.SubscriberId ||
                    
                    SubscriberId.Equals(other.SubscriberId)
                ) && 
                (
                    UserName == other.UserName ||
                    UserName != null &&
                    UserName.Equals(other.UserName)
                ) && 
                (
                    FullName == other.FullName ||
                    FullName != null &&
                    FullName.Equals(other.FullName)
                ) && 
                (
                    Email == other.Email ||
                    Email != null &&
                    Email.Equals(other.Email)
                ) && 
                (
                    PsmEmail == other.PsmEmail ||
                    PsmEmail != null &&
                    PsmEmail.Equals(other.PsmEmail)
                ) && 
                (
                    Disabled == other.Disabled ||
                    
                    Disabled.Equals(other.Disabled)
                ) && 
                (
                    Roles == other.Roles ||
                    Roles != null &&
                    other.Roles != null &&
                    Roles.SequenceEqual(other.Roles)
                ) && 
                (
                    Permissions == other.Permissions ||
                    Permissions != null &&
                    other.Permissions != null &&
                    Permissions.SequenceEqual(other.Permissions)
                ) && 
                (
                    UserType == other.UserType ||
                    
                    UserType.Equals(other.UserType)
                ) && 
                (
                    Dashboard == other.Dashboard ||
                    Dashboard != null &&
                    Dashboard.Equals(other.Dashboard)
                ) && 
                (
                    Access == other.Access ||
                    Access != null &&
                    Access.Equals(other.Access)
                ) && 
                (
                    Limits == other.Limits ||
                    Limits != null &&
                    Limits.Equals(other.Limits)
                ) && 
                (
                    FeedRole == other.FeedRole ||
                    FeedRole != null &&
                    FeedRole.Equals(other.FeedRole)
                ) && 
                (
                    MliUserInfo == other.MliUserInfo ||
                    MliUserInfo != null &&
                    MliUserInfo.Equals(other.MliUserInfo)
                ) && 
                (
                    MlpUserInfo == other.MlpUserInfo ||
                    MlpUserInfo != null &&
                    MlpUserInfo.Equals(other.MlpUserInfo)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    
                    hashCode = hashCode * 59 + Id.GetHashCode();
                    
                    hashCode = hashCode * 59 + SubscriberId.GetHashCode();
                    if (UserName != null)
                    hashCode = hashCode * 59 + UserName.GetHashCode();
                    if (FullName != null)
                    hashCode = hashCode * 59 + FullName.GetHashCode();
                    if (Email != null)
                    hashCode = hashCode * 59 + Email.GetHashCode();
                    if (PsmEmail != null)
                    hashCode = hashCode * 59 + PsmEmail.GetHashCode();
                    
                    hashCode = hashCode * 59 + Disabled.GetHashCode();
                    if (Roles != null)
                    hashCode = hashCode * 59 + Roles.GetHashCode();
                    if (Permissions != null)
                    hashCode = hashCode * 59 + Permissions.GetHashCode();
                    
                    hashCode = hashCode * 59 + UserType.GetHashCode();
                    if (Dashboard != null)
                    hashCode = hashCode * 59 + Dashboard.GetHashCode();
                    if (Access != null)
                    hashCode = hashCode * 59 + Access.GetHashCode();
                    if (Limits != null)
                    hashCode = hashCode * 59 + Limits.GetHashCode();
                    if (FeedRole != null)
                    hashCode = hashCode * 59 + FeedRole.GetHashCode();
                    if (MliUserInfo != null)
                    hashCode = hashCode * 59 + MliUserInfo.GetHashCode();
                    if (MlpUserInfo != null)
                    hashCode = hashCode * 59 + MlpUserInfo.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(SCServiceChannelServicesMessagingUsersUser left, SCServiceChannelServicesMessagingUsersUser right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(SCServiceChannelServicesMessagingUsersUser left, SCServiceChannelServicesMessagingUsersUser right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}
