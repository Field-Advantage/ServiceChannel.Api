/*
 * ServiceChannel API - v.3
 *
 * The ServiceChannel API is a RESTful and stateless API. It accepts standard HTTP verbs and supports OAuth 2.0 for authorizing requests.      Our API returns common HTTP status codes as well as JSON encapsulated data.      See [API Overview](https://developer.servicechannel.com/basics/introduction/overview/) for the intro to ServiceChannel API.<br>      <h3>Authentication and Authorization</h3>You should have a ServiceChannel account, register your application, and obtain `access_token` to integrate with our API.      See [Authentication and Authorization](https://developer.servicechannel.com/basics/general/authentication/) for more information.      To use this API playground, click **Authorize** and sign in to ServiceChannel.<br>      <h3>Environment</h3> All calls in this API Reference point to the **SB2 environment**.      See [Environments](https://developer.servicechannel.com/basics/general/environments/) for more information.<br>      <h3>API Version</h3>The current stable version of the ServiceChannel API is `v3`. In the request URL, `v3` is a version prefix that should be present.      When you omit the version prefix, calls point to the minimum supported version of the API.      We recommend you to always specify the API version to avoid possible errors.
 *
 * The version of the OpenAPI document: 3
 * 
 * Generated by: https://openapi-generator.tech
 */

using System;
using System.Linq;
using System.Text;
using System.Collections.Generic;
using System.ComponentModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using System.Text.Json;
using ServiceChannel.OpenAPIGenerated.Api.Converters;

namespace ServiceChannel.OpenAPIGenerated.Api.Models
{ 
    /// <summary>
    /// 
    /// </summary>
    [DataContract]
    public class SCServiceChannelServicesMessagingInvoicesInvoiceApprovalCodeGroup : IEquatable<SCServiceChannelServicesMessagingInvoicesInvoiceApprovalCodeGroup>
    {

        /// <summary>
        /// Gets or Sets ApprovalCodeType
        /// </summary>
        
        public enum ApprovalCodeTypeEnum
        {
            
            /// <summary>
            /// Enum LaborEnum for Labor
            /// </summary>
            [EnumMember(Value = "Labor")]
            LaborEnum = 1,
            
            /// <summary>
            /// Enum TravelEnum for Travel
            /// </summary>
            [EnumMember(Value = "Travel")]
            TravelEnum = 2,
            
            /// <summary>
            /// Enum MaterialEnum for Material
            /// </summary>
            [EnumMember(Value = "Material")]
            MaterialEnum = 3,
            
            /// <summary>
            /// Enum FreightEnum for Freight
            /// </summary>
            [EnumMember(Value = "Freight")]
            FreightEnum = 4,
            
            /// <summary>
            /// Enum OtherEnum for Other
            /// </summary>
            [EnumMember(Value = "Other")]
            OtherEnum = 5,
            
            /// <summary>
            /// Enum TaxEnum for Tax
            /// </summary>
            [EnumMember(Value = "Tax")]
            TaxEnum = 6,
            
            /// <summary>
            /// Enum Tax2Enum for Tax2
            /// </summary>
            [EnumMember(Value = "Tax2")]
            Tax2Enum = 7,
            
            /// <summary>
            /// Enum LineItemEnum for LineItem
            /// </summary>
            [EnumMember(Value = "LineItem")]
            LineItemEnum = 8,
            
            /// <summary>
            /// Enum FreightGeneratedEnum for FreightGenerated
            /// </summary>
            [EnumMember(Value = "FreightGenerated")]
            FreightGeneratedEnum = 9
        }

        /// <summary>
        /// Gets or Sets ApprovalCodeType
        /// </summary>
        [DataMember(Name="ApprovalCodeType", EmitDefaultValue=true)]
        public ApprovalCodeTypeEnum ApprovalCodeType { get; set; }

        /// <summary>
        /// Gets or Sets ApprovalCode
        /// </summary>
        [DataMember(Name="ApprovalCode", EmitDefaultValue=false)]
        public string ApprovalCode { get; set; }

        /// <summary>
        /// Gets or Sets AdditionalApprovalCode
        /// </summary>
        [DataMember(Name="AdditionalApprovalCode", EmitDefaultValue=false)]
        public string AdditionalApprovalCode { get; set; }

        /// <summary>
        /// Gets or Sets Amount
        /// </summary>
        [DataMember(Name="Amount", EmitDefaultValue=true)]
        public double Amount { get; set; }

        /// <summary>
        /// Gets or Sets ApprovalCodes
        /// </summary>
        [DataMember(Name="ApprovalCodes", EmitDefaultValue=false)]
        public List<SCServiceChannelServicesMessagingInvoicesInvoiceApprovalCodeChild> ApprovalCodes { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class SCServiceChannelServicesMessagingInvoicesInvoiceApprovalCodeGroup {\n");
            sb.Append("  ApprovalCodeType: ").Append(ApprovalCodeType).Append("\n");
            sb.Append("  ApprovalCode: ").Append(ApprovalCode).Append("\n");
            sb.Append("  AdditionalApprovalCode: ").Append(AdditionalApprovalCode).Append("\n");
            sb.Append("  Amount: ").Append(Amount).Append("\n");
            sb.Append("  ApprovalCodes: ").Append(ApprovalCodes).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            var options = new JsonSerializerOptions
            {
                WriteIndented = true
            };

            return JsonSerializer.Serialize(this, options);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (obj is null) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((SCServiceChannelServicesMessagingInvoicesInvoiceApprovalCodeGroup)obj);
        }

        /// <summary>
        /// Returns true if SCServiceChannelServicesMessagingInvoicesInvoiceApprovalCodeGroup instances are equal
        /// </summary>
        /// <param name="other">Instance of SCServiceChannelServicesMessagingInvoicesInvoiceApprovalCodeGroup to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(SCServiceChannelServicesMessagingInvoicesInvoiceApprovalCodeGroup other)
        {
            if (other is null) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    ApprovalCodeType == other.ApprovalCodeType ||
                    
                    ApprovalCodeType.Equals(other.ApprovalCodeType)
                ) && 
                (
                    ApprovalCode == other.ApprovalCode ||
                    ApprovalCode != null &&
                    ApprovalCode.Equals(other.ApprovalCode)
                ) && 
                (
                    AdditionalApprovalCode == other.AdditionalApprovalCode ||
                    AdditionalApprovalCode != null &&
                    AdditionalApprovalCode.Equals(other.AdditionalApprovalCode)
                ) && 
                (
                    Amount == other.Amount ||
                    
                    Amount.Equals(other.Amount)
                ) && 
                (
                    ApprovalCodes == other.ApprovalCodes ||
                    ApprovalCodes != null &&
                    other.ApprovalCodes != null &&
                    ApprovalCodes.SequenceEqual(other.ApprovalCodes)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    
                    hashCode = hashCode * 59 + ApprovalCodeType.GetHashCode();
                    if (ApprovalCode != null)
                    hashCode = hashCode * 59 + ApprovalCode.GetHashCode();
                    if (AdditionalApprovalCode != null)
                    hashCode = hashCode * 59 + AdditionalApprovalCode.GetHashCode();
                    
                    hashCode = hashCode * 59 + Amount.GetHashCode();
                    if (ApprovalCodes != null)
                    hashCode = hashCode * 59 + ApprovalCodes.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(SCServiceChannelServicesMessagingInvoicesInvoiceApprovalCodeGroup left, SCServiceChannelServicesMessagingInvoicesInvoiceApprovalCodeGroup right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(SCServiceChannelServicesMessagingInvoicesInvoiceApprovalCodeGroup left, SCServiceChannelServicesMessagingInvoicesInvoiceApprovalCodeGroup right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}
