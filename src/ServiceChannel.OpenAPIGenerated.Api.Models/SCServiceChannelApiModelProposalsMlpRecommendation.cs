/*
 * ServiceChannel API - v.3
 *
 * The ServiceChannel API is a RESTful and stateless API. It accepts standard HTTP verbs and supports OAuth 2.0 for authorizing requests.      Our API returns common HTTP status codes as well as JSON encapsulated data.      See [API Overview](https://developer.servicechannel.com/basics/introduction/overview/) for the intro to ServiceChannel API.<br>      <h3>Authentication and Authorization</h3>You should have a ServiceChannel account, register your application, and obtain `access_token` to integrate with our API.      See [Authentication and Authorization](https://developer.servicechannel.com/basics/general/authentication/) for more information.      To use this API playground, click **Authorize** and sign in to ServiceChannel.<br>      <h3>Environment</h3> All calls in this API Reference point to the **SB2 environment**.      See [Environments](https://developer.servicechannel.com/basics/general/environments/) for more information.<br>      <h3>API Version</h3>The current stable version of the ServiceChannel API is `v3`. In the request URL, `v3` is a version prefix that should be present.      When you omit the version prefix, calls point to the minimum supported version of the API.      We recommend you to always specify the API version to avoid possible errors.
 *
 * The version of the OpenAPI document: 3
 * 
 * Generated by: https://openapi-generator.tech
 */

using System;
using System.Linq;
using System.Text;
using System.Collections.Generic;
using System.ComponentModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using System.Text.Json;
using ServiceChannel.OpenAPIGenerated.Api.Converters;

namespace ServiceChannel.OpenAPIGenerated.Api.Models
{ 
    /// <summary>
    /// 
    /// </summary>
    [DataContract]
    public class SCServiceChannelApiModelProposalsMlpRecommendation : IEquatable<SCServiceChannelApiModelProposalsMlpRecommendation>
    {
        /// <summary>
        /// Gets or Sets Id
        /// </summary>
        [DataMember(Name="Id", EmitDefaultValue=true)]
        public int Id { get; set; }

        /// <summary>
        /// Gets or Sets ProposalId
        /// </summary>
        [DataMember(Name="ProposalId", EmitDefaultValue=true)]
        public int ProposalId { get; set; }

        /// <summary>
        /// Gets or Sets UserId
        /// </summary>
        [DataMember(Name="UserId", EmitDefaultValue=true)]
        public int UserId { get; set; }

        /// <summary>
        /// Gets or Sets Status
        /// </summary>
        [DataMember(Name="Status", EmitDefaultValue=false)]
        public string Status { get; set; }


        /// <summary>
        /// Gets or Sets WoType
        /// </summary>
        
        public enum WoTypeEnum
        {
            
            /// <summary>
            /// Enum OriginEnum for Origin
            /// </summary>
            [EnumMember(Value = "Origin")]
            OriginEnum = 1,
            
            /// <summary>
            /// Enum NewEnum for New
            /// </summary>
            [EnumMember(Value = "New")]
            NewEnum = 2,
            
            /// <summary>
            /// Enum ExistingEnum for Existing
            /// </summary>
            [EnumMember(Value = "Existing")]
            ExistingEnum = 3
        }

        /// <summary>
        /// Gets or Sets WoType
        /// </summary>
        [DataMember(Name="WoType", EmitDefaultValue=true)]
        public WoTypeEnum WoType { get; set; }

        /// <summary>
        /// Gets or Sets OriginalTrackingNumber
        /// </summary>
        [DataMember(Name="OriginalTrackingNumber", EmitDefaultValue=true)]
        public int OriginalTrackingNumber { get; set; }

        /// <summary>
        /// Gets or Sets SelectedTrackingNumber
        /// </summary>
        [DataMember(Name="SelectedTrackingNumber", EmitDefaultValue=true)]
        public int SelectedTrackingNumber { get; set; }

        /// <summary>
        /// Gets or Sets GeneratedTrackingNumber
        /// </summary>
        [DataMember(Name="GeneratedTrackingNumber", EmitDefaultValue=true)]
        public int GeneratedTrackingNumber { get; set; }

        /// <summary>
        /// Gets or Sets PoNumber
        /// </summary>
        [DataMember(Name="PoNumber", EmitDefaultValue=false)]
        public string PoNumber { get; set; }

        /// <summary>
        /// Gets or Sets Category
        /// </summary>
        [DataMember(Name="Category", EmitDefaultValue=false)]
        public string Category { get; set; }

        /// <summary>
        /// Gets or Sets CategoryId
        /// </summary>
        [DataMember(Name="CategoryId", EmitDefaultValue=true)]
        public int CategoryId { get; set; }

        /// <summary>
        /// Gets or Sets ApprovalCode
        /// </summary>
        [DataMember(Name="ApprovalCode", EmitDefaultValue=false)]
        public string ApprovalCode { get; set; }

        /// <summary>
        /// Gets or Sets Priority
        /// </summary>
        [DataMember(Name="Priority", EmitDefaultValue=false)]
        public string Priority { get; set; }

        /// <summary>
        /// Gets or Sets RejectCodeId
        /// </summary>
        [DataMember(Name="RejectCodeId", EmitDefaultValue=true)]
        public int RejectCodeId { get; set; }

        /// <summary>
        /// Gets or Sets ApprovalReason
        /// </summary>
        [DataMember(Name="ApprovalReason", EmitDefaultValue=false)]
        public string ApprovalReason { get; set; }

        /// <summary>
        /// Gets or Sets EmailsToNotify
        /// </summary>
        [DataMember(Name="EmailsToNotify", EmitDefaultValue=false)]
        public string EmailsToNotify { get; set; }

        /// <summary>
        /// Gets or Sets Applied
        /// </summary>
        [DataMember(Name="Applied", EmitDefaultValue=true)]
        public bool Applied { get; set; } = false;

        /// <summary>
        /// Gets or Sets EmailMyself
        /// </summary>
        [DataMember(Name="EmailMyself", EmitDefaultValue=true)]
        public bool EmailMyself { get; set; } = false;

        /// <summary>
        /// Gets or Sets MyEmail
        /// </summary>
        [DataMember(Name="MyEmail", EmitDefaultValue=false)]
        public string MyEmail { get; set; }

        /// <summary>
        /// Gets or Sets NotSavedRecommendation
        /// </summary>
        [DataMember(Name="NotSavedRecommendation", EmitDefaultValue=true)]
        public bool NotSavedRecommendation { get; set; } = false;

        /// <summary>
        /// Gets or Sets WorkOrderLabel
        /// </summary>
        [DataMember(Name="WorkOrderLabel", EmitDefaultValue=false)]
        public SCServiceChannelApiModelLabel WorkOrderLabel { get; set; }

        /// <summary>
        /// Gets or Sets Comment
        /// </summary>
        [DataMember(Name="Comment", EmitDefaultValue=false)]
        public string Comment { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class SCServiceChannelApiModelProposalsMlpRecommendation {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  ProposalId: ").Append(ProposalId).Append("\n");
            sb.Append("  UserId: ").Append(UserId).Append("\n");
            sb.Append("  Status: ").Append(Status).Append("\n");
            sb.Append("  WoType: ").Append(WoType).Append("\n");
            sb.Append("  OriginalTrackingNumber: ").Append(OriginalTrackingNumber).Append("\n");
            sb.Append("  SelectedTrackingNumber: ").Append(SelectedTrackingNumber).Append("\n");
            sb.Append("  GeneratedTrackingNumber: ").Append(GeneratedTrackingNumber).Append("\n");
            sb.Append("  PoNumber: ").Append(PoNumber).Append("\n");
            sb.Append("  Category: ").Append(Category).Append("\n");
            sb.Append("  CategoryId: ").Append(CategoryId).Append("\n");
            sb.Append("  ApprovalCode: ").Append(ApprovalCode).Append("\n");
            sb.Append("  Priority: ").Append(Priority).Append("\n");
            sb.Append("  RejectCodeId: ").Append(RejectCodeId).Append("\n");
            sb.Append("  ApprovalReason: ").Append(ApprovalReason).Append("\n");
            sb.Append("  EmailsToNotify: ").Append(EmailsToNotify).Append("\n");
            sb.Append("  Applied: ").Append(Applied).Append("\n");
            sb.Append("  EmailMyself: ").Append(EmailMyself).Append("\n");
            sb.Append("  MyEmail: ").Append(MyEmail).Append("\n");
            sb.Append("  NotSavedRecommendation: ").Append(NotSavedRecommendation).Append("\n");
            sb.Append("  WorkOrderLabel: ").Append(WorkOrderLabel).Append("\n");
            sb.Append("  Comment: ").Append(Comment).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            var options = new JsonSerializerOptions
            {
                WriteIndented = true
            };

            return JsonSerializer.Serialize(this, options);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (obj is null) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((SCServiceChannelApiModelProposalsMlpRecommendation)obj);
        }

        /// <summary>
        /// Returns true if SCServiceChannelApiModelProposalsMlpRecommendation instances are equal
        /// </summary>
        /// <param name="other">Instance of SCServiceChannelApiModelProposalsMlpRecommendation to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(SCServiceChannelApiModelProposalsMlpRecommendation other)
        {
            if (other is null) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    Id == other.Id ||
                    
                    Id.Equals(other.Id)
                ) && 
                (
                    ProposalId == other.ProposalId ||
                    
                    ProposalId.Equals(other.ProposalId)
                ) && 
                (
                    UserId == other.UserId ||
                    
                    UserId.Equals(other.UserId)
                ) && 
                (
                    Status == other.Status ||
                    Status != null &&
                    Status.Equals(other.Status)
                ) && 
                (
                    WoType == other.WoType ||
                    
                    WoType.Equals(other.WoType)
                ) && 
                (
                    OriginalTrackingNumber == other.OriginalTrackingNumber ||
                    
                    OriginalTrackingNumber.Equals(other.OriginalTrackingNumber)
                ) && 
                (
                    SelectedTrackingNumber == other.SelectedTrackingNumber ||
                    
                    SelectedTrackingNumber.Equals(other.SelectedTrackingNumber)
                ) && 
                (
                    GeneratedTrackingNumber == other.GeneratedTrackingNumber ||
                    
                    GeneratedTrackingNumber.Equals(other.GeneratedTrackingNumber)
                ) && 
                (
                    PoNumber == other.PoNumber ||
                    PoNumber != null &&
                    PoNumber.Equals(other.PoNumber)
                ) && 
                (
                    Category == other.Category ||
                    Category != null &&
                    Category.Equals(other.Category)
                ) && 
                (
                    CategoryId == other.CategoryId ||
                    
                    CategoryId.Equals(other.CategoryId)
                ) && 
                (
                    ApprovalCode == other.ApprovalCode ||
                    ApprovalCode != null &&
                    ApprovalCode.Equals(other.ApprovalCode)
                ) && 
                (
                    Priority == other.Priority ||
                    Priority != null &&
                    Priority.Equals(other.Priority)
                ) && 
                (
                    RejectCodeId == other.RejectCodeId ||
                    
                    RejectCodeId.Equals(other.RejectCodeId)
                ) && 
                (
                    ApprovalReason == other.ApprovalReason ||
                    ApprovalReason != null &&
                    ApprovalReason.Equals(other.ApprovalReason)
                ) && 
                (
                    EmailsToNotify == other.EmailsToNotify ||
                    EmailsToNotify != null &&
                    EmailsToNotify.Equals(other.EmailsToNotify)
                ) && 
                (
                    Applied == other.Applied ||
                    
                    Applied.Equals(other.Applied)
                ) && 
                (
                    EmailMyself == other.EmailMyself ||
                    
                    EmailMyself.Equals(other.EmailMyself)
                ) && 
                (
                    MyEmail == other.MyEmail ||
                    MyEmail != null &&
                    MyEmail.Equals(other.MyEmail)
                ) && 
                (
                    NotSavedRecommendation == other.NotSavedRecommendation ||
                    
                    NotSavedRecommendation.Equals(other.NotSavedRecommendation)
                ) && 
                (
                    WorkOrderLabel == other.WorkOrderLabel ||
                    WorkOrderLabel != null &&
                    WorkOrderLabel.Equals(other.WorkOrderLabel)
                ) && 
                (
                    Comment == other.Comment ||
                    Comment != null &&
                    Comment.Equals(other.Comment)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    
                    hashCode = hashCode * 59 + Id.GetHashCode();
                    
                    hashCode = hashCode * 59 + ProposalId.GetHashCode();
                    
                    hashCode = hashCode * 59 + UserId.GetHashCode();
                    if (Status != null)
                    hashCode = hashCode * 59 + Status.GetHashCode();
                    
                    hashCode = hashCode * 59 + WoType.GetHashCode();
                    
                    hashCode = hashCode * 59 + OriginalTrackingNumber.GetHashCode();
                    
                    hashCode = hashCode * 59 + SelectedTrackingNumber.GetHashCode();
                    
                    hashCode = hashCode * 59 + GeneratedTrackingNumber.GetHashCode();
                    if (PoNumber != null)
                    hashCode = hashCode * 59 + PoNumber.GetHashCode();
                    if (Category != null)
                    hashCode = hashCode * 59 + Category.GetHashCode();
                    
                    hashCode = hashCode * 59 + CategoryId.GetHashCode();
                    if (ApprovalCode != null)
                    hashCode = hashCode * 59 + ApprovalCode.GetHashCode();
                    if (Priority != null)
                    hashCode = hashCode * 59 + Priority.GetHashCode();
                    
                    hashCode = hashCode * 59 + RejectCodeId.GetHashCode();
                    if (ApprovalReason != null)
                    hashCode = hashCode * 59 + ApprovalReason.GetHashCode();
                    if (EmailsToNotify != null)
                    hashCode = hashCode * 59 + EmailsToNotify.GetHashCode();
                    
                    hashCode = hashCode * 59 + Applied.GetHashCode();
                    
                    hashCode = hashCode * 59 + EmailMyself.GetHashCode();
                    if (MyEmail != null)
                    hashCode = hashCode * 59 + MyEmail.GetHashCode();
                    
                    hashCode = hashCode * 59 + NotSavedRecommendation.GetHashCode();
                    if (WorkOrderLabel != null)
                    hashCode = hashCode * 59 + WorkOrderLabel.GetHashCode();
                    if (Comment != null)
                    hashCode = hashCode * 59 + Comment.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(SCServiceChannelApiModelProposalsMlpRecommendation left, SCServiceChannelApiModelProposalsMlpRecommendation right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(SCServiceChannelApiModelProposalsMlpRecommendation left, SCServiceChannelApiModelProposalsMlpRecommendation right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}
