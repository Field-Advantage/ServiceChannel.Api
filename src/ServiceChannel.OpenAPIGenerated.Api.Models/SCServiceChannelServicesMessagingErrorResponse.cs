/*
 * ServiceChannel API - v.3
 *
 * The ServiceChannel API is a RESTful and stateless API. It accepts standard HTTP verbs and supports OAuth 2.0 for authorizing requests.      Our API returns common HTTP status codes as well as JSON encapsulated data.      See [API Overview](https://developer.servicechannel.com/basics/introduction/overview/) for the intro to ServiceChannel API.<br>      <h3>Authentication and Authorization</h3>You should have a ServiceChannel account, register your application, and obtain `access_token` to integrate with our API.      See [Authentication and Authorization](https://developer.servicechannel.com/basics/general/authentication/) for more information.      To use this API playground, click **Authorize** and sign in to ServiceChannel.<br>      <h3>Environment</h3> All calls in this API Reference point to the **SB2 environment**.      See [Environments](https://developer.servicechannel.com/basics/general/environments/) for more information.<br>      <h3>API Version</h3>The current stable version of the ServiceChannel API is `v3`. In the request URL, `v3` is a version prefix that should be present.      When you omit the version prefix, calls point to the minimum supported version of the API.      We recommend you to always specify the API version to avoid possible errors.
 *
 * The version of the OpenAPI document: 3
 * 
 * Generated by: https://openapi-generator.tech
 */

using System;
using System.Linq;
using System.Text;
using System.Collections.Generic;
using System.ComponentModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using System.Text.Json;
using ServiceChannel.OpenAPIGenerated.Api.Converters;

namespace ServiceChannel.OpenAPIGenerated.Api.Models
{ 
    /// <summary>
    /// The error response object
    /// </summary>
    [DataContract]
    public class SCServiceChannelServicesMessagingErrorResponse : IEquatable<SCServiceChannelServicesMessagingErrorResponse>
    {

        /// <summary>
        /// Gets or Sets ErrorCodes
        /// </summary>
        
        public enum ErrorCodesEnum
        {
            
            /// <summary>
            /// Enum NotAllowedEnum for NotAllowed
            /// </summary>
            [EnumMember(Value = "NotAllowed")]
            NotAllowedEnum = 1,
            
            /// <summary>
            /// Enum EmptyProviderEnum for EmptyProvider
            /// </summary>
            [EnumMember(Value = "EmptyProvider")]
            EmptyProviderEnum = 2,
            
            /// <summary>
            /// Enum InvalidProviderIdEnum for InvalidProviderId
            /// </summary>
            [EnumMember(Value = "InvalidProviderId")]
            InvalidProviderIdEnum = 3,
            
            /// <summary>
            /// Enum UnknownProviderEnum for UnknownProvider
            /// </summary>
            [EnumMember(Value = "UnknownProvider")]
            UnknownProviderEnum = 4,
            
            /// <summary>
            /// Enum ProviderAlreadyExistsEnum for ProviderAlreadyExists
            /// </summary>
            [EnumMember(Value = "ProviderAlreadyExists")]
            ProviderAlreadyExistsEnum = 5,
            
            /// <summary>
            /// Enum ProviderIdNotExistsEnum for ProviderIdNotExists
            /// </summary>
            [EnumMember(Value = "ProviderIdNotExists")]
            ProviderIdNotExistsEnum = 6,
            
            /// <summary>
            /// Enum TimeoutExpiredErrorEnum for TimeoutExpiredError
            /// </summary>
            [EnumMember(Value = "TimeoutExpiredError")]
            TimeoutExpiredErrorEnum = 7,
            
            /// <summary>
            /// Enum EmptyContractEnum for EmptyContract
            /// </summary>
            [EnumMember(Value = "EmptyContract")]
            EmptyContractEnum = 8,
            
            /// <summary>
            /// Enum ContractUndefinedEnum for ContractUndefined
            /// </summary>
            [EnumMember(Value = "ContractUndefined")]
            ContractUndefinedEnum = 9,
            
            /// <summary>
            /// Enum EmptySubscriberEnum for EmptySubscriber
            /// </summary>
            [EnumMember(Value = "EmptySubscriber")]
            EmptySubscriberEnum = 10,
            
            /// <summary>
            /// Enum InvalidSubscriberIdEnum for InvalidSubscriberId
            /// </summary>
            [EnumMember(Value = "InvalidSubscriberId")]
            InvalidSubscriberIdEnum = 11,
            
            /// <summary>
            /// Enum UnknownSubscriberEnum for UnknownSubscriber
            /// </summary>
            [EnumMember(Value = "UnknownSubscriber")]
            UnknownSubscriberEnum = 12,
            
            /// <summary>
            /// Enum InactiveSubscriberEnum for InactiveSubscriber
            /// </summary>
            [EnumMember(Value = "InactiveSubscriber")]
            InactiveSubscriberEnum = 13,
            
            /// <summary>
            /// Enum EmptySubscriberIdEnum for EmptySubscriberId
            /// </summary>
            [EnumMember(Value = "EmptySubscriberId")]
            EmptySubscriberIdEnum = 14,
            
            /// <summary>
            /// Enum SubscriberIdNotExistsEnum for SubscriberIdNotExists
            /// </summary>
            [EnumMember(Value = "SubscriberIdNotExists")]
            SubscriberIdNotExistsEnum = 15,
            
            /// <summary>
            /// Enum InternalErrorEnum for InternalError
            /// </summary>
            [EnumMember(Value = "InternalError")]
            InternalErrorEnum = 16,
            
            /// <summary>
            /// Enum DataNotFoundEnum for DataNotFound
            /// </summary>
            [EnumMember(Value = "DataNotFound")]
            DataNotFoundEnum = 17,
            
            /// <summary>
            /// Enum BadRequestEnum for BadRequest
            /// </summary>
            [EnumMember(Value = "BadRequest")]
            BadRequestEnum = 18,
            
            /// <summary>
            /// Enum UnAuthorizedEnum for UnAuthorized
            /// </summary>
            [EnumMember(Value = "UnAuthorized")]
            UnAuthorizedEnum = 19,
            
            /// <summary>
            /// Enum UnSupportedApplicationEnum for UnSupportedApplication
            /// </summary>
            [EnumMember(Value = "UnSupportedApplication")]
            UnSupportedApplicationEnum = 20,
            
            /// <summary>
            /// Enum SubsidiaryUserDisabledEnum for SubsidiaryUserDisabled
            /// </summary>
            [EnumMember(Value = "SubsidiaryUserDisabled")]
            SubsidiaryUserDisabledEnum = 21,
            
            /// <summary>
            /// Enum EmptyLocationEnum for EmptyLocation
            /// </summary>
            [EnumMember(Value = "EmptyLocation")]
            EmptyLocationEnum = 22,
            
            /// <summary>
            /// Enum InvalidLocationIdEnum for InvalidLocationId
            /// </summary>
            [EnumMember(Value = "InvalidLocationId")]
            InvalidLocationIdEnum = 23,
            
            /// <summary>
            /// Enum UnknownLocationEnum for UnknownLocation
            /// </summary>
            [EnumMember(Value = "UnknownLocation")]
            UnknownLocationEnum = 24,
            
            /// <summary>
            /// Enum LocationNotBelongsToSubscriberEnum for LocationNotBelongsToSubscriber
            /// </summary>
            [EnumMember(Value = "LocationNotBelongsToSubscriber")]
            LocationNotBelongsToSubscriberEnum = 25,
            
            /// <summary>
            /// Enum EmptyLocationCountryEnum for EmptyLocationCountry
            /// </summary>
            [EnumMember(Value = "EmptyLocationCountry")]
            EmptyLocationCountryEnum = 26,
            
            /// <summary>
            /// Enum LocationAlreadyExistsEnum for LocationAlreadyExists
            /// </summary>
            [EnumMember(Value = "LocationAlreadyExists")]
            LocationAlreadyExistsEnum = 27,
            
            /// <summary>
            /// Enum InvalidStoreIdEnum for InvalidStoreId
            /// </summary>
            [EnumMember(Value = "InvalidStoreId")]
            InvalidStoreIdEnum = 28,
            
            /// <summary>
            /// Enum LocationEmptyStateEnum for LocationEmptyState
            /// </summary>
            [EnumMember(Value = "LocationEmptyState")]
            LocationEmptyStateEnum = 29,
            
            /// <summary>
            /// Enum NoAccessToLocationEnum for NoAccessToLocation
            /// </summary>
            [EnumMember(Value = "NoAccessToLocation")]
            NoAccessToLocationEnum = 30,
            
            /// <summary>
            /// Enum LocationAddressValidationErrorEnum for LocationAddressValidationError
            /// </summary>
            [EnumMember(Value = "LocationAddressValidationError")]
            LocationAddressValidationErrorEnum = 31,
            
            /// <summary>
            /// Enum LocationAddressRequestValidationErrorEnum for LocationAddressRequestValidationError
            /// </summary>
            [EnumMember(Value = "LocationAddressRequestValidationError")]
            LocationAddressRequestValidationErrorEnum = 32,
            
            /// <summary>
            /// Enum InvalidLocationNoteHeaderEnum for InvalidLocationNoteHeader
            /// </summary>
            [EnumMember(Value = "InvalidLocationNoteHeader")]
            InvalidLocationNoteHeaderEnum = 33,
            
            /// <summary>
            /// Enum NoAccessToUpdateProtectedNoteEnum for NoAccessToUpdateProtectedNote
            /// </summary>
            [EnumMember(Value = "NoAccessToUpdateProtectedNote")]
            NoAccessToUpdateProtectedNoteEnum = 34,
            
            /// <summary>
            /// Enum InvalidBusinessHoursFormatEnum for InvalidBusinessHoursFormat
            /// </summary>
            [EnumMember(Value = "InvalidBusinessHoursFormat")]
            InvalidBusinessHoursFormatEnum = 35,
            
            /// <summary>
            /// Enum WorkingHoursIntersectEnum for WorkingHoursIntersect
            /// </summary>
            [EnumMember(Value = "WorkingHoursIntersect")]
            WorkingHoursIntersectEnum = 36,
            
            /// <summary>
            /// Enum InvalidDayOfWeekEnum for InvalidDayOfWeek
            /// </summary>
            [EnumMember(Value = "InvalidDayOfWeek")]
            InvalidDayOfWeekEnum = 37,
            
            /// <summary>
            /// Enum DuplicateDayOfWeekEnum for DuplicateDayOfWeek
            /// </summary>
            [EnumMember(Value = "DuplicateDayOfWeek")]
            DuplicateDayOfWeekEnum = 38,
            
            /// <summary>
            /// Enum InvalidBusinessHoursInitialSetupEnum for InvalidBusinessHoursInitialSetup
            /// </summary>
            [EnumMember(Value = "InvalidBusinessHoursInitialSetup")]
            InvalidBusinessHoursInitialSetupEnum = 39,
            
            /// <summary>
            /// Enum BusinessHoursIsEmptyEnum for BusinessHoursIsEmpty
            /// </summary>
            [EnumMember(Value = "BusinessHoursIsEmpty")]
            BusinessHoursIsEmptyEnum = 40,
            
            /// <summary>
            /// Enum InvalidHolidayRepeatByTypeEnum for InvalidHolidayRepeatByType
            /// </summary>
            [EnumMember(Value = "InvalidHolidayRepeatByType")]
            InvalidHolidayRepeatByTypeEnum = 41,
            
            /// <summary>
            /// Enum EmptyHolidayListOfDaysEnum for EmptyHolidayListOfDays
            /// </summary>
            [EnumMember(Value = "EmptyHolidayListOfDays")]
            EmptyHolidayListOfDaysEnum = 42,
            
            /// <summary>
            /// Enum EmptyHolidayListOfMonthsEnum for EmptyHolidayListOfMonths
            /// </summary>
            [EnumMember(Value = "EmptyHolidayListOfMonths")]
            EmptyHolidayListOfMonthsEnum = 43,
            
            /// <summary>
            /// Enum InvalidHolidayMonthNameEnum for InvalidHolidayMonthName
            /// </summary>
            [EnumMember(Value = "InvalidHolidayMonthName")]
            InvalidHolidayMonthNameEnum = 44,
            
            /// <summary>
            /// Enum InvalidHolidayNameLengthEnum for InvalidHolidayNameLength
            /// </summary>
            [EnumMember(Value = "InvalidHolidayNameLength")]
            InvalidHolidayNameLengthEnum = 45,
            
            /// <summary>
            /// Enum InvalidHolidayRepeatEveryEnum for InvalidHolidayRepeatEvery
            /// </summary>
            [EnumMember(Value = "InvalidHolidayRepeatEvery")]
            InvalidHolidayRepeatEveryEnum = 46,
            
            /// <summary>
            /// Enum DuplicateMonthEnum for DuplicateMonth
            /// </summary>
            [EnumMember(Value = "DuplicateMonth")]
            DuplicateMonthEnum = 47,
            
            /// <summary>
            /// Enum InvalidHolidayFrequencyEnum for InvalidHolidayFrequency
            /// </summary>
            [EnumMember(Value = "InvalidHolidayFrequency")]
            InvalidHolidayFrequencyEnum = 48,
            
            /// <summary>
            /// Enum InvalidHolidayStartDateEnum for InvalidHolidayStartDate
            /// </summary>
            [EnumMember(Value = "InvalidHolidayStartDate")]
            InvalidHolidayStartDateEnum = 49,
            
            /// <summary>
            /// Enum InvalidCloseAllDayEnum for InvalidCloseAllDay
            /// </summary>
            [EnumMember(Value = "InvalidCloseAllDay")]
            InvalidCloseAllDayEnum = 50,
            
            /// <summary>
            /// Enum HolidayDoesNotExistEnum for HolidayDoesNotExist
            /// </summary>
            [EnumMember(Value = "HolidayDoesNotExist")]
            HolidayDoesNotExistEnum = 51,
            
            /// <summary>
            /// Enum InvalidFormatParameterEnum for InvalidFormatParameter
            /// </summary>
            [EnumMember(Value = "InvalidFormatParameter")]
            InvalidFormatParameterEnum = 52,
            
            /// <summary>
            /// Enum InvalidLocationCityEnum for InvalidLocationCity
            /// </summary>
            [EnumMember(Value = "InvalidLocationCity")]
            InvalidLocationCityEnum = 53,
            
            /// <summary>
            /// Enum InvalidLocationZipEnum for InvalidLocationZip
            /// </summary>
            [EnumMember(Value = "InvalidLocationZip")]
            InvalidLocationZipEnum = 54,
            
            /// <summary>
            /// Enum InvalidLocationLatitudeEnum for InvalidLocationLatitude
            /// </summary>
            [EnumMember(Value = "InvalidLocationLatitude")]
            InvalidLocationLatitudeEnum = 55,
            
            /// <summary>
            /// Enum InvalidLocationLongitudeEnum for InvalidLocationLongitude
            /// </summary>
            [EnumMember(Value = "InvalidLocationLongitude")]
            InvalidLocationLongitudeEnum = 56,
            
            /// <summary>
            /// Enum InvalidLocationEmailEnum for InvalidLocationEmail
            /// </summary>
            [EnumMember(Value = "InvalidLocationEmail")]
            InvalidLocationEmailEnum = 57,
            
            /// <summary>
            /// Enum InvalidLocationNameEnum for InvalidLocationName
            /// </summary>
            [EnumMember(Value = "InvalidLocationName")]
            InvalidLocationNameEnum = 58,
            
            /// <summary>
            /// Enum InvalidLocationStateEnum for InvalidLocationState
            /// </summary>
            [EnumMember(Value = "InvalidLocationState")]
            InvalidLocationStateEnum = 59,
            
            /// <summary>
            /// Enum InvalidLocationAddlAddressEnum for InvalidLocationAddlAddress
            /// </summary>
            [EnumMember(Value = "InvalidLocationAddlAddress")]
            InvalidLocationAddlAddressEnum = 60,
            
            /// <summary>
            /// Enum InvalidLocationMainAddressEnum for InvalidLocationMainAddress
            /// </summary>
            [EnumMember(Value = "InvalidLocationMainAddress")]
            InvalidLocationMainAddressEnum = 61,
            
            /// <summary>
            /// Enum InvalidLocationCountryEnum for InvalidLocationCountry
            /// </summary>
            [EnumMember(Value = "InvalidLocationCountry")]
            InvalidLocationCountryEnum = 62,
            
            /// <summary>
            /// Enum InvalidLocationRegionEnum for InvalidLocationRegion
            /// </summary>
            [EnumMember(Value = "InvalidLocationRegion")]
            InvalidLocationRegionEnum = 63,
            
            /// <summary>
            /// Enum InvalidLocationDistrictEnum for InvalidLocationDistrict
            /// </summary>
            [EnumMember(Value = "InvalidLocationDistrict")]
            InvalidLocationDistrictEnum = 64,
            
            /// <summary>
            /// Enum InvalidLocationPhoneEnum for InvalidLocationPhone
            /// </summary>
            [EnumMember(Value = "InvalidLocationPhone")]
            InvalidLocationPhoneEnum = 65,
            
            /// <summary>
            /// Enum InvalidLocationContactEnum for InvalidLocationContact
            /// </summary>
            [EnumMember(Value = "InvalidLocationContact")]
            InvalidLocationContactEnum = 66,
            
            /// <summary>
            /// Enum InvalidLocationFaxNumberEnum for InvalidLocationFaxNumber
            /// </summary>
            [EnumMember(Value = "InvalidLocationFaxNumber")]
            InvalidLocationFaxNumberEnum = 67,
            
            /// <summary>
            /// Enum LocationCountryNotFoundEnum for LocationCountryNotFound
            /// </summary>
            [EnumMember(Value = "LocationCountryNotFound")]
            LocationCountryNotFoundEnum = 68,
            
            /// <summary>
            /// Enum LocationStateNotFoundEnum for LocationStateNotFound
            /// </summary>
            [EnumMember(Value = "LocationStateNotFound")]
            LocationStateNotFoundEnum = 69,
            
            /// <summary>
            /// Enum LocationCityNotFoundEnum for LocationCityNotFound
            /// </summary>
            [EnumMember(Value = "LocationCityNotFound")]
            LocationCityNotFoundEnum = 70,
            
            /// <summary>
            /// Enum LocationIdNotExistsEnum for LocationIdNotExists
            /// </summary>
            [EnumMember(Value = "LocationIdNotExists")]
            LocationIdNotExistsEnum = 71,
            
            /// <summary>
            /// Enum InvalidLocationEmailLengthEnum for InvalidLocationEmailLength
            /// </summary>
            [EnumMember(Value = "InvalidLocationEmailLength")]
            InvalidLocationEmailLengthEnum = 72,
            
            /// <summary>
            /// Enum LocationStateIdNotFoundEnum for LocationStateIdNotFound
            /// </summary>
            [EnumMember(Value = "LocationStateIdNotFound")]
            LocationStateIdNotFoundEnum = 73,
            
            /// <summary>
            /// Enum IncorrectCombinationStateAndStateIdEnum for IncorrectCombinationStateAndStateId
            /// </summary>
            [EnumMember(Value = "IncorrectCombinationStateAndStateId")]
            IncorrectCombinationStateAndStateIdEnum = 74,
            
            /// <summary>
            /// Enum InvalidSubscriberIdsEnum for InvalidSubscriberIds
            /// </summary>
            [EnumMember(Value = "InvalidSubscriberIds")]
            InvalidSubscriberIdsEnum = 75,
            
            /// <summary>
            /// Enum InvalidLocalizationSettingsEnum for InvalidLocalizationSettings
            /// </summary>
            [EnumMember(Value = "InvalidLocalizationSettings")]
            InvalidLocalizationSettingsEnum = 76,
            
            /// <summary>
            /// Enum LandlordResponsibilityNotFoundEnum for LandlordResponsibilityNotFound
            /// </summary>
            [EnumMember(Value = "LandlordResponsibilityNotFound")]
            LandlordResponsibilityNotFoundEnum = 77,
            
            /// <summary>
            /// Enum LandlordResponsibilityAlreadyExistsEnum for LandlordResponsibilityAlreadyExists
            /// </summary>
            [EnumMember(Value = "LandlordResponsibilityAlreadyExists")]
            LandlordResponsibilityAlreadyExistsEnum = 78,
            
            /// <summary>
            /// Enum EmptyLocationIdsEnum for EmptyLocationIds
            /// </summary>
            [EnumMember(Value = "EmptyLocationIds")]
            EmptyLocationIdsEnum = 79,
            
            /// <summary>
            /// Enum AttachmentNotExistEnum for AttachmentNotExist
            /// </summary>
            [EnumMember(Value = "AttachmentNotExist")]
            AttachmentNotExistEnum = 80,
            
            /// <summary>
            /// Enum InvalidTradeIdEnum for InvalidTradeId
            /// </summary>
            [EnumMember(Value = "InvalidTradeId")]
            InvalidTradeIdEnum = 81,
            
            /// <summary>
            /// Enum InvalidCategoryIdEnum for InvalidCategoryId
            /// </summary>
            [EnumMember(Value = "InvalidCategoryId")]
            InvalidCategoryIdEnum = 82,
            
            /// <summary>
            /// Enum InvalidOverrideCategoryIdEnum for InvalidOverrideCategoryId
            /// </summary>
            [EnumMember(Value = "InvalidOverrideCategoryId")]
            InvalidOverrideCategoryIdEnum = 83,
            
            /// <summary>
            /// Enum InvalidOverridePriorityIdEnum for InvalidOverridePriorityId
            /// </summary>
            [EnumMember(Value = "InvalidOverridePriorityId")]
            InvalidOverridePriorityIdEnum = 84,
            
            /// <summary>
            /// Enum LeaseNoteExceedMaxLengthEnum for LeaseNoteExceedMaxLength
            /// </summary>
            [EnumMember(Value = "LeaseNoteExceedMaxLength")]
            LeaseNoteExceedMaxLengthEnum = 85,
            
            /// <summary>
            /// Enum InvalidOverrideProviderRankEnum for InvalidOverrideProviderRank
            /// </summary>
            [EnumMember(Value = "InvalidOverrideProviderRank")]
            InvalidOverrideProviderRankEnum = 86,
            
            /// <summary>
            /// Enum InvalidOverrideNTEEnum for InvalidOverrideNTE
            /// </summary>
            [EnumMember(Value = "InvalidOverrideNTE")]
            InvalidOverrideNTEEnum = 87,
            
            /// <summary>
            /// Enum EmptyTradeEnum for EmptyTrade
            /// </summary>
            [EnumMember(Value = "EmptyTrade")]
            EmptyTradeEnum = 88,
            
            /// <summary>
            /// Enum InvalidTradeEnum for InvalidTrade
            /// </summary>
            [EnumMember(Value = "InvalidTrade")]
            InvalidTradeEnum = 89,
            
            /// <summary>
            /// Enum TradeNotBelongsToSubscriberEnum for TradeNotBelongsToSubscriber
            /// </summary>
            [EnumMember(Value = "TradeNotBelongsToSubscriber")]
            TradeNotBelongsToSubscriberEnum = 90,
            
            /// <summary>
            /// Enum InvalidPrimaryTradeEnum for InvalidPrimaryTrade
            /// </summary>
            [EnumMember(Value = "InvalidPrimaryTrade")]
            InvalidPrimaryTradeEnum = 91,
            
            /// <summary>
            /// Enum InvalidTradeForSubscriberEnum for InvalidTradeForSubscriber
            /// </summary>
            [EnumMember(Value = "InvalidTradeForSubscriber")]
            InvalidTradeForSubscriberEnum = 92,
            
            /// <summary>
            /// Enum InvalidCategoryForSubscriberEnum for InvalidCategoryForSubscriber
            /// </summary>
            [EnumMember(Value = "InvalidCategoryForSubscriber")]
            InvalidCategoryForSubscriberEnum = 93,
            
            /// <summary>
            /// Enum GlCodeAlreadyExistsEnum for GlCodeAlreadyExists
            /// </summary>
            [EnumMember(Value = "GlCodeAlreadyExists")]
            GlCodeAlreadyExistsEnum = 94,
            
            /// <summary>
            /// Enum GlCodeNotExistsEnum for GlCodeNotExists
            /// </summary>
            [EnumMember(Value = "GlCodeNotExists")]
            GlCodeNotExistsEnum = 95,
            
            /// <summary>
            /// Enum InvalidGlCodeUpdateEnum for InvalidGlCodeUpdate
            /// </summary>
            [EnumMember(Value = "InvalidGlCodeUpdate")]
            InvalidGlCodeUpdateEnum = 96,
            
            /// <summary>
            /// Enum EmptyGlCodeEnum for EmptyGlCode
            /// </summary>
            [EnumMember(Value = "EmptyGlCode")]
            EmptyGlCodeEnum = 97,
            
            /// <summary>
            /// Enum TradeAlreadyExistsEnum for TradeAlreadyExists
            /// </summary>
            [EnumMember(Value = "TradeAlreadyExists")]
            TradeAlreadyExistsEnum = 98,
            
            /// <summary>
            /// Enum InvalidNTETradeEnum for InvalidNTETrade
            /// </summary>
            [EnumMember(Value = "InvalidNTETrade")]
            InvalidNTETradeEnum = 99,
            
            /// <summary>
            /// Enum TradeNotExistsEnum for TradeNotExists
            /// </summary>
            [EnumMember(Value = "TradeNotExists")]
            TradeNotExistsEnum = 100,
            
            /// <summary>
            /// Enum TradeAlreadyInUseEnum for TradeAlreadyInUse
            /// </summary>
            [EnumMember(Value = "TradeAlreadyInUse")]
            TradeAlreadyInUseEnum = 101,
            
            /// <summary>
            /// Enum EmptyUserEnum for EmptyUser
            /// </summary>
            [EnumMember(Value = "EmptyUser")]
            EmptyUserEnum = 102,
            
            /// <summary>
            /// Enum EmptyCreatedByEnum for EmptyCreatedBy
            /// </summary>
            [EnumMember(Value = "EmptyCreatedBy")]
            EmptyCreatedByEnum = 103,
            
            /// <summary>
            /// Enum InvalidUserNameEnum for InvalidUserName
            /// </summary>
            [EnumMember(Value = "InvalidUserName")]
            InvalidUserNameEnum = 104,
            
            /// <summary>
            /// Enum NotProviderUserEnum for NotProviderUser
            /// </summary>
            [EnumMember(Value = "NotProviderUser")]
            NotProviderUserEnum = 105,
            
            /// <summary>
            /// Enum UserHasNoPermissionsEnum for UserHasNoPermissions
            /// </summary>
            [EnumMember(Value = "UserHasNoPermissions")]
            UserHasNoPermissionsEnum = 106,
            
            /// <summary>
            /// Enum RestrictedAccountEnum for RestrictedAccount
            /// </summary>
            [EnumMember(Value = "RestrictedAccount")]
            RestrictedAccountEnum = 107,
            
            /// <summary>
            /// Enum UserAlreadyExistsEnum for UserAlreadyExists
            /// </summary>
            [EnumMember(Value = "UserAlreadyExists")]
            UserAlreadyExistsEnum = 108,
            
            /// <summary>
            /// Enum UserHasNoPermissionsEditWOEnum for UserHasNoPermissionsEditWO
            /// </summary>
            [EnumMember(Value = "UserHasNoPermissionsEditWO")]
            UserHasNoPermissionsEditWOEnum = 109,
            
            /// <summary>
            /// Enum UserEmailAddressIsMissingEnum for UserEmailAddressIsMissing
            /// </summary>
            [EnumMember(Value = "UserEmailAddressIsMissing")]
            UserEmailAddressIsMissingEnum = 110,
            
            /// <summary>
            /// Enum InvalidSubsriberProviderIdEnum for InvalidSubsriberProviderId
            /// </summary>
            [EnumMember(Value = "InvalidSubsriberProviderId")]
            InvalidSubsriberProviderIdEnum = 111,
            
            /// <summary>
            /// Enum LanguageNameNotFoundEnum for LanguageNameNotFound
            /// </summary>
            [EnumMember(Value = "LanguageNameNotFound")]
            LanguageNameNotFoundEnum = 112,
            
            /// <summary>
            /// Enum InvalidLanguageIdEnum for InvalidLanguageId
            /// </summary>
            [EnumMember(Value = "InvalidLanguageId")]
            InvalidLanguageIdEnum = 113,
            
            /// <summary>
            /// Enum LanguageIdNotFoundEnum for LanguageIdNotFound
            /// </summary>
            [EnumMember(Value = "LanguageIdNotFound")]
            LanguageIdNotFoundEnum = 114,
            
            /// <summary>
            /// Enum UseBothSubscriberIdProviderIdEnum for UseBothSubscriberIdProviderId
            /// </summary>
            [EnumMember(Value = "UseBothSubscriberIdProviderId")]
            UseBothSubscriberIdProviderIdEnum = 115,
            
            /// <summary>
            /// Enum EmptyWoProblemEnum for EmptyWoProblem
            /// </summary>
            [EnumMember(Value = "EmptyWoProblem")]
            EmptyWoProblemEnum = 116,
            
            /// <summary>
            /// Enum InvalidWoProblemSourceEnum for InvalidWoProblemSource
            /// </summary>
            [EnumMember(Value = "InvalidWoProblemSource")]
            InvalidWoProblemSourceEnum = 117,
            
            /// <summary>
            /// Enum InvalidWoProblemDescriptionEnum for InvalidWoProblemDescription
            /// </summary>
            [EnumMember(Value = "InvalidWoProblemDescription")]
            InvalidWoProblemDescriptionEnum = 118,
            
            /// <summary>
            /// Enum InvalidWoProblemCodeEnum for InvalidWoProblemCode
            /// </summary>
            [EnumMember(Value = "InvalidWoProblemCode")]
            InvalidWoProblemCodeEnum = 119,
            
            /// <summary>
            /// Enum InvalidWoStatusEnum for InvalidWoStatus
            /// </summary>
            [EnumMember(Value = "InvalidWoStatus")]
            InvalidWoStatusEnum = 120,
            
            /// <summary>
            /// Enum InvalidWoNteEnum for InvalidWoNte
            /// </summary>
            [EnumMember(Value = "InvalidWoNte")]
            InvalidWoNteEnum = 121,
            
            /// <summary>
            /// Enum InvalidWoCallerEnum for InvalidWoCaller
            /// </summary>
            [EnumMember(Value = "InvalidWoCaller")]
            InvalidWoCallerEnum = 122,
            
            /// <summary>
            /// Enum InvalidWoCallDateEnum for InvalidWoCallDate
            /// </summary>
            [EnumMember(Value = "InvalidWoCallDate")]
            InvalidWoCallDateEnum = 123,
            
            /// <summary>
            /// Enum InvalidWoScheduledDateEnum for InvalidWoScheduledDate
            /// </summary>
            [EnumMember(Value = "InvalidWoScheduledDate")]
            InvalidWoScheduledDateEnum = 124,
            
            /// <summary>
            /// Enum InvalidWoScheduledDateGreaterThanMaxAllowedEnum for InvalidWoScheduledDateGreaterThanMaxAllowed
            /// </summary>
            [EnumMember(Value = "InvalidWoScheduledDateGreaterThanMaxAllowed")]
            InvalidWoScheduledDateGreaterThanMaxAllowedEnum = 125,
            
            /// <summary>
            /// Enum EmptyWoCategoryEnum for EmptyWoCategory
            /// </summary>
            [EnumMember(Value = "EmptyWoCategory")]
            EmptyWoCategoryEnum = 126,
            
            /// <summary>
            /// Enum InvalidWoCategoryEnum for InvalidWoCategory
            /// </summary>
            [EnumMember(Value = "InvalidWoCategory")]
            InvalidWoCategoryEnum = 127,
            
            /// <summary>
            /// Enum EmptyWoPriorityEnum for EmptyWoPriority
            /// </summary>
            [EnumMember(Value = "EmptyWoPriority")]
            EmptyWoPriorityEnum = 128,
            
            /// <summary>
            /// Enum InvalidWoPriorityEnum for InvalidWoPriority
            /// </summary>
            [EnumMember(Value = "InvalidWoPriority")]
            InvalidWoPriorityEnum = 129,
            
            /// <summary>
            /// Enum InvalidWoCurrencyEnum for InvalidWoCurrency
            /// </summary>
            [EnumMember(Value = "InvalidWoCurrency")]
            InvalidWoCurrencyEnum = 130,
            
            /// <summary>
            /// Enum InvalidWoSetupIdEnum for InvalidWoSetupId
            /// </summary>
            [EnumMember(Value = "InvalidWoSetupId")]
            InvalidWoSetupIdEnum = 131,
            
            /// <summary>
            /// Enum AttachmentsRequiredEnum for AttachmentsRequired
            /// </summary>
            [EnumMember(Value = "AttachmentsRequired")]
            AttachmentsRequiredEnum = 132,
            
            /// <summary>
            /// Enum InvalidWoIdentifierEnum for InvalidWoIdentifier
            /// </summary>
            [EnumMember(Value = "InvalidWoIdentifier")]
            InvalidWoIdentifierEnum = 133,
            
            /// <summary>
            /// Enum EquipmentRequiredEnum for EquipmentRequired
            /// </summary>
            [EnumMember(Value = "EquipmentRequired")]
            EquipmentRequiredEnum = 134,
            
            /// <summary>
            /// Enum WoNteOverflowEnum for WoNteOverflow
            /// </summary>
            [EnumMember(Value = "WoNteOverflow")]
            WoNteOverflowEnum = 135,
            
            /// <summary>
            /// Enum InvalidWoPurchaseNumberEnum for InvalidWoPurchaseNumber
            /// </summary>
            [EnumMember(Value = "InvalidWoPurchaseNumber")]
            InvalidWoPurchaseNumberEnum = 136,
            
            /// <summary>
            /// Enum InvalidWoStateForUpdateEnum for InvalidWoStateForUpdate
            /// </summary>
            [EnumMember(Value = "InvalidWoStateForUpdate")]
            InvalidWoStateForUpdateEnum = 137,
            
            /// <summary>
            /// Enum InvalidPagingParameterEnum for InvalidPagingParameter
            /// </summary>
            [EnumMember(Value = "InvalidPagingParameter")]
            InvalidPagingParameterEnum = 138,
            
            /// <summary>
            /// Enum InvalidWoNumberEnum for InvalidWoNumber
            /// </summary>
            [EnumMember(Value = "InvalidWoNumber")]
            InvalidWoNumberEnum = 139,
            
            /// <summary>
            /// Enum CheckInDeniedEnum for CheckInDenied
            /// </summary>
            [EnumMember(Value = "CheckInDenied")]
            CheckInDeniedEnum = 140,
            
            /// <summary>
            /// Enum CheckOutDeniedEnum for CheckOutDenied
            /// </summary>
            [EnumMember(Value = "CheckOutDenied")]
            CheckOutDeniedEnum = 141,
            
            /// <summary>
            /// Enum WoScheduledDateLessThenReassignDateEnum for WoScheduledDateLessThenReassignDate
            /// </summary>
            [EnumMember(Value = "WoScheduledDateLessThenReassignDate")]
            WoScheduledDateLessThenReassignDateEnum = 142,
            
            /// <summary>
            /// Enum WoScheduledDateLessThenCallDateEnum for WoScheduledDateLessThenCallDate
            /// </summary>
            [EnumMember(Value = "WoScheduledDateLessThenCallDate")]
            WoScheduledDateLessThenCallDateEnum = 143,
            
            /// <summary>
            /// Enum InvalidWoActionReasonEnum for InvalidWoActionReason
            /// </summary>
            [EnumMember(Value = "InvalidWoActionReason")]
            InvalidWoActionReasonEnum = 144,
            
            /// <summary>
            /// Enum EmptySubscriberPropertyEnum for EmptySubscriberProperty
            /// </summary>
            [EnumMember(Value = "EmptySubscriberProperty")]
            EmptySubscriberPropertyEnum = 145,
            
            /// <summary>
            /// Enum WorkOrderUpdateErrorEnum for WorkOrderUpdateError
            /// </summary>
            [EnumMember(Value = "WorkOrderUpdateError")]
            WorkOrderUpdateErrorEnum = 146,
            
            /// <summary>
            /// Enum MissedWoNteDetailsEnum for MissedWoNteDetails
            /// </summary>
            [EnumMember(Value = "MissedWoNteDetails")]
            MissedWoNteDetailsEnum = 147,
            
            /// <summary>
            /// Enum InvalidLinkedWoIdentifierEnum for InvalidLinkedWoIdentifier
            /// </summary>
            [EnumMember(Value = "InvalidLinkedWoIdentifier")]
            InvalidLinkedWoIdentifierEnum = 148,
            
            /// <summary>
            /// Enum WoIsOnHoldEnum for WoIsOnHold
            /// </summary>
            [EnumMember(Value = "WoIsOnHold")]
            WoIsOnHoldEnum = 149,
            
            /// <summary>
            /// Enum InvalidWoTradeEnum for InvalidWoTrade
            /// </summary>
            [EnumMember(Value = "InvalidWoTrade")]
            InvalidWoTradeEnum = 150,
            
            /// <summary>
            /// Enum InvalidStarScoreEnum for InvalidStarScore
            /// </summary>
            [EnumMember(Value = "InvalidStarScore")]
            InvalidStarScoreEnum = 151,
            
            /// <summary>
            /// Enum WorkOrderAlreadyRatedEnum for WorkOrderAlreadyRated
            /// </summary>
            [EnumMember(Value = "WorkOrderAlreadyRated")]
            WorkOrderAlreadyRatedEnum = 152,
            
            /// <summary>
            /// Enum AttachmentThumbnailNotAvailableEnum for AttachmentThumbnailNotAvailable
            /// </summary>
            [EnumMember(Value = "AttachmentThumbnailNotAvailable")]
            AttachmentThumbnailNotAvailableEnum = 153,
            
            /// <summary>
            /// Enum InvalidWoIdentifierOrPinEnum for InvalidWoIdentifierOrPin
            /// </summary>
            [EnumMember(Value = "InvalidWoIdentifierOrPin")]
            InvalidWoIdentifierOrPinEnum = 154,
            
            /// <summary>
            /// Enum InvalidTimeZoneHeaderEnum for InvalidTimeZoneHeader
            /// </summary>
            [EnumMember(Value = "InvalidTimeZoneHeader")]
            InvalidTimeZoneHeaderEnum = 155,
            
            /// <summary>
            /// Enum RefrigerantWasUsedShouldBeYesOrNoEnum for RefrigerantWasUsedShouldBeYesOrNo
            /// </summary>
            [EnumMember(Value = "RefrigerantWasUsedShouldBeYesOrNo")]
            RefrigerantWasUsedShouldBeYesOrNoEnum = 156,
            
            /// <summary>
            /// Enum CheckInDeniedOutsideGeolocationEnum for CheckInDeniedOutsideGeolocation
            /// </summary>
            [EnumMember(Value = "CheckInDeniedOutsideGeolocation")]
            CheckInDeniedOutsideGeolocationEnum = 157,
            
            /// <summary>
            /// Enum CheckOutDeniedOutsideGeolocationEnum for CheckOutDeniedOutsideGeolocation
            /// </summary>
            [EnumMember(Value = "CheckOutDeniedOutsideGeolocation")]
            CheckOutDeniedOutsideGeolocationEnum = 158,
            
            /// <summary>
            /// Enum LeakDetectorAuditShouldBeCreatedEnum for LeakDetectorAuditShouldBeCreated
            /// </summary>
            [EnumMember(Value = "LeakDetectorAuditShouldBeCreated")]
            LeakDetectorAuditShouldBeCreatedEnum = 159,
            
            /// <summary>
            /// Enum CheckInOutPrematureEnum for CheckInOutPremature
            /// </summary>
            [EnumMember(Value = "CheckInOutPremature")]
            CheckInOutPrematureEnum = 160,
            
            /// <summary>
            /// Enum WorkOrderAttachmentsSizeExceededEnum for WorkOrderAttachmentsSizeExceeded
            /// </summary>
            [EnumMember(Value = "WorkOrderAttachmentsSizeExceeded")]
            WorkOrderAttachmentsSizeExceededEnum = 161,
            
            /// <summary>
            /// Enum WorkOrderNotFoundEnum for WorkOrderNotFound
            /// </summary>
            [EnumMember(Value = "WorkOrderNotFound")]
            WorkOrderNotFoundEnum = 162,
            
            /// <summary>
            /// Enum WorkOrderCreateErrorEnum for WorkOrderCreateError
            /// </summary>
            [EnumMember(Value = "WorkOrderCreateError")]
            WorkOrderCreateErrorEnum = 163,
            
            /// <summary>
            /// Enum InvalidSetupIdEnum for InvalidSetupId
            /// </summary>
            [EnumMember(Value = "InvalidSetupId")]
            InvalidSetupIdEnum = 164,
            
            /// <summary>
            /// Enum IssueListNotFoundEnum for IssueListNotFound
            /// </summary>
            [EnumMember(Value = "IssueListNotFound")]
            IssueListNotFoundEnum = 165,
            
            /// <summary>
            /// Enum InvalidIssueListFieldEnum for InvalidIssueListField
            /// </summary>
            [EnumMember(Value = "InvalidIssueListField")]
            InvalidIssueListFieldEnum = 166,
            
            /// <summary>
            /// Enum InactiveTemplateTypeEnum for InactiveTemplateType
            /// </summary>
            [EnumMember(Value = "InactiveTemplateType")]
            InactiveTemplateTypeEnum = 167,
            
            /// <summary>
            /// Enum SiteAuditNotFoundEnum for SiteAuditNotFound
            /// </summary>
            [EnumMember(Value = "SiteAuditNotFound")]
            SiteAuditNotFoundEnum = 168,
            
            /// <summary>
            /// Enum SiteAuditUpdateErrorEnum for SiteAuditUpdateError
            /// </summary>
            [EnumMember(Value = "SiteAuditUpdateError")]
            SiteAuditUpdateErrorEnum = 169,
            
            /// <summary>
            /// Enum InvalidSiteAuditParametersEnum for InvalidSiteAuditParameters
            /// </summary>
            [EnumMember(Value = "InvalidSiteAuditParameters")]
            InvalidSiteAuditParametersEnum = 170,
            
            /// <summary>
            /// Enum InvalidAdditionalApprovalCodeEnum for InvalidAdditionalApprovalCode
            /// </summary>
            [EnumMember(Value = "InvalidAdditionalApprovalCode")]
            InvalidAdditionalApprovalCodeEnum = 171,
            
            /// <summary>
            /// Enum InvalidAdditionalApprovalCodeValueEnum for InvalidAdditionalApprovalCodeValue
            /// </summary>
            [EnumMember(Value = "InvalidAdditionalApprovalCodeValue")]
            InvalidAdditionalApprovalCodeValueEnum = 172,
            
            /// <summary>
            /// Enum AdditionalApprovalCodeIsDisabledEnum for AdditionalApprovalCodeIsDisabled
            /// </summary>
            [EnumMember(Value = "AdditionalApprovalCodeIsDisabled")]
            AdditionalApprovalCodeIsDisabledEnum = 173,
            
            /// <summary>
            /// Enum InvalidOtherDescEnum for InvalidOtherDesc
            /// </summary>
            [EnumMember(Value = "InvalidOtherDesc")]
            InvalidOtherDescEnum = 174,
            
            /// <summary>
            /// Enum InvalidTax2NameEnum for InvalidTax2Name
            /// </summary>
            [EnumMember(Value = "InvalidTax2Name")]
            InvalidTax2NameEnum = 175,
            
            /// <summary>
            /// Enum InvoiceInconsistentAmountsEnum for InvoiceInconsistentAmounts
            /// </summary>
            [EnumMember(Value = "InvoiceInconsistentAmounts")]
            InvoiceInconsistentAmountsEnum = 176,
            
            /// <summary>
            /// Enum InvoiceInvalidTotalEnum for InvoiceInvalidTotal
            /// </summary>
            [EnumMember(Value = "InvoiceInvalidTotal")]
            InvoiceInvalidTotalEnum = 177,
            
            /// <summary>
            /// Enum InvoiceTotalGreaterNteEnum for InvoiceTotalGreaterNte
            /// </summary>
            [EnumMember(Value = "InvoiceTotalGreaterNte")]
            InvoiceTotalGreaterNteEnum = 178,
            
            /// <summary>
            /// Enum InvoiceExistsEnum for InvoiceExists
            /// </summary>
            [EnumMember(Value = "InvoiceExists")]
            InvoiceExistsEnum = 179,
            
            /// <summary>
            /// Enum CreatingInvoiceErrorEnum for CreatingInvoiceError
            /// </summary>
            [EnumMember(Value = "CreatingInvoiceError")]
            CreatingInvoiceErrorEnum = 180,
            
            /// <summary>
            /// Enum DuplInvNumberEnum for DuplInvNumber
            /// </summary>
            [EnumMember(Value = "DuplInvNumber")]
            DuplInvNumberEnum = 181,
            
            /// <summary>
            /// Enum InvoiceTotalNullEnum for InvoiceTotalNull
            /// </summary>
            [EnumMember(Value = "InvoiceTotalNull")]
            InvoiceTotalNullEnum = 182,
            
            /// <summary>
            /// Enum InvComplDateNullEnum for InvComplDateNull
            /// </summary>
            [EnumMember(Value = "InvComplDateNull")]
            InvComplDateNullEnum = 183,
            
            /// <summary>
            /// Enum InvDateLessComplDateEnum for InvDateLessComplDate
            /// </summary>
            [EnumMember(Value = "InvDateLessComplDate")]
            InvDateLessComplDateEnum = 184,
            
            /// <summary>
            /// Enum InvoiceNotAutoEnum for InvoiceNotAuto
            /// </summary>
            [EnumMember(Value = "InvoiceNotAuto")]
            InvoiceNotAutoEnum = 185,
            
            /// <summary>
            /// Enum ESignatureRequiredEnum for ESignatureRequired
            /// </summary>
            [EnumMember(Value = "ESignatureRequired")]
            ESignatureRequiredEnum = 186,
            
            /// <summary>
            /// Enum InvWoNotFoundEnum for InvWoNotFound
            /// </summary>
            [EnumMember(Value = "InvWoNotFound")]
            InvWoNotFoundEnum = 187,
            
            /// <summary>
            /// Enum InvWrongWoCurrEnum for InvWrongWoCurr
            /// </summary>
            [EnumMember(Value = "InvWrongWoCurr")]
            InvWrongWoCurrEnum = 188,
            
            /// <summary>
            /// Enum InvWoCurrNotFoundEnum for InvWoCurrNotFound
            /// </summary>
            [EnumMember(Value = "InvWoCurrNotFound")]
            InvWoCurrNotFoundEnum = 189,
            
            /// <summary>
            /// Enum InvoicingDisabledEnum for InvoicingDisabled
            /// </summary>
            [EnumMember(Value = "InvoicingDisabled")]
            InvoicingDisabledEnum = 190,
            
            /// <summary>
            /// Enum InvCreationUnexpectedResEnum for InvCreationUnexpectedRes
            /// </summary>
            [EnumMember(Value = "InvCreationUnexpectedRes")]
            InvCreationUnexpectedResEnum = 191,
            
            /// <summary>
            /// Enum InvoiceInvalidLaborAmountEnum for InvoiceInvalidLaborAmount
            /// </summary>
            [EnumMember(Value = "InvoiceInvalidLaborAmount")]
            InvoiceInvalidLaborAmountEnum = 192,
            
            /// <summary>
            /// Enum InvoiceInvalidMaterialAmountEnum for InvoiceInvalidMaterialAmount
            /// </summary>
            [EnumMember(Value = "InvoiceInvalidMaterialAmount")]
            InvoiceInvalidMaterialAmountEnum = 193,
            
            /// <summary>
            /// Enum InvDateOldEnum for InvDateOld
            /// </summary>
            [EnumMember(Value = "InvDateOld")]
            InvDateOldEnum = 194,
            
            /// <summary>
            /// Enum InvDateGreaterEnum for InvDateGreater
            /// </summary>
            [EnumMember(Value = "InvDateGreater")]
            InvDateGreaterEnum = 195,
            
            /// <summary>
            /// Enum InvoiceMaterialDescriptionLengthOverflowEnum for InvoiceMaterialDescriptionLengthOverflow
            /// </summary>
            [EnumMember(Value = "InvoiceMaterialDescriptionLengthOverflow")]
            InvoiceMaterialDescriptionLengthOverflowEnum = 196,
            
            /// <summary>
            /// Enum InvoiceTaxNotValidatedEnum for InvoiceTaxNotValidated
            /// </summary>
            [EnumMember(Value = "InvoiceTaxNotValidated")]
            InvoiceTaxNotValidatedEnum = 197,
            
            /// <summary>
            /// Enum InvoiceMaterialPartNumberLengthOverflowEnum for InvoiceMaterialPartNumberLengthOverflow
            /// </summary>
            [EnumMember(Value = "InvoiceMaterialPartNumberLengthOverflow")]
            InvoiceMaterialPartNumberLengthOverflowEnum = 198,
            
            /// <summary>
            /// Enum TaxValidationErrorEnum for TaxValidationError
            /// </summary>
            [EnumMember(Value = "TaxValidationError")]
            TaxValidationErrorEnum = 199,
            
            /// <summary>
            /// Enum TaxExemptionErrorEnum for TaxExemptionError
            /// </summary>
            [EnumMember(Value = "TaxExemptionError")]
            TaxExemptionErrorEnum = 200,
            
            /// <summary>
            /// Enum InvalidInvoiceNumberEnum for InvalidInvoiceNumber
            /// </summary>
            [EnumMember(Value = "InvalidInvoiceNumber")]
            InvalidInvoiceNumberEnum = 201,
            
            /// <summary>
            /// Enum GetApprovalLevelsErrorEnum for GetApprovalLevelsError
            /// </summary>
            [EnumMember(Value = "GetApprovalLevelsError")]
            GetApprovalLevelsErrorEnum = 202,
            
            /// <summary>
            /// Enum InvoiceAddUsersToMliLevelsErrorEnum for InvoiceAddUsersToMliLevelsError
            /// </summary>
            [EnumMember(Value = "InvoiceAddUsersToMliLevelsError")]
            InvoiceAddUsersToMliLevelsErrorEnum = 203,
            
            /// <summary>
            /// Enum InvoiceAddDeleteLocationsToMliLevelUserErrorEnum for InvoiceAddDeleteLocationsToMliLevelUserError
            /// </summary>
            [EnumMember(Value = "InvoiceAddDeleteLocationsToMliLevelUserError")]
            InvoiceAddDeleteLocationsToMliLevelUserErrorEnum = 204,
            
            /// <summary>
            /// Enum InvoiceUpdateMLiLevelErrorEnum for InvoiceUpdateMLiLevelError
            /// </summary>
            [EnumMember(Value = "InvoiceUpdateMLiLevelError")]
            InvoiceUpdateMLiLevelErrorEnum = 205,
            
            /// <summary>
            /// Enum InvoiceDeleteMliLevelErrorEnum for InvoiceDeleteMliLevelError
            /// </summary>
            [EnumMember(Value = "InvoiceDeleteMliLevelError")]
            InvoiceDeleteMliLevelErrorEnum = 206,
            
            /// <summary>
            /// Enum InvoiceDeleteUsersFromMliLevelErrorEnum for InvoiceDeleteUsersFromMliLevelError
            /// </summary>
            [EnumMember(Value = "InvoiceDeleteUsersFromMliLevelError")]
            InvoiceDeleteUsersFromMliLevelErrorEnum = 207,
            
            /// <summary>
            /// Enum ApprovalLevelNameLengthOverflowEnum for ApprovalLevelNameLengthOverflow
            /// </summary>
            [EnumMember(Value = "ApprovalLevelNameLengthOverflow")]
            ApprovalLevelNameLengthOverflowEnum = 208,
            
            /// <summary>
            /// Enum GstTaxErrorEnum for GstTaxError
            /// </summary>
            [EnumMember(Value = "GstTaxError")]
            GstTaxErrorEnum = 209,
            
            /// <summary>
            /// Enum Tax2ErrorEnum for Tax2Error
            /// </summary>
            [EnumMember(Value = "Tax2Error")]
            Tax2ErrorEnum = 210,
            
            /// <summary>
            /// Enum GetApprovalLevelsAndLocationsByUserErrorEnum for GetApprovalLevelsAndLocationsByUserError
            /// </summary>
            [EnumMember(Value = "GetApprovalLevelsAndLocationsByUserError")]
            GetApprovalLevelsAndLocationsByUserErrorEnum = 211,
            
            /// <summary>
            /// Enum GetAssignedUserShortInfoErrorEnum for GetAssignedUserShortInfoError
            /// </summary>
            [EnumMember(Value = "GetAssignedUserShortInfoError")]
            GetAssignedUserShortInfoErrorEnum = 212,
            
            /// <summary>
            /// Enum AssignAllLocationsToApprovalLevelAndUserErrorEnum for AssignAllLocationsToApprovalLevelAndUserError
            /// </summary>
            [EnumMember(Value = "AssignAllLocationsToApprovalLevelAndUserError")]
            AssignAllLocationsToApprovalLevelAndUserErrorEnum = 213,
            
            /// <summary>
            /// Enum GetLocationsForApprovalLevelAndAssignedUserErrorEnum for GetLocationsForApprovalLevelAndAssignedUserError
            /// </summary>
            [EnumMember(Value = "GetLocationsForApprovalLevelAndAssignedUserError")]
            GetLocationsForApprovalLevelAndAssignedUserErrorEnum = 214,
            
            /// <summary>
            /// Enum GetLocationsBySubscriberErrorEnum for GetLocationsBySubscriberError
            /// </summary>
            [EnumMember(Value = "GetLocationsBySubscriberError")]
            GetLocationsBySubscriberErrorEnum = 215,
            
            /// <summary>
            /// Enum AssignUserWithLocationsToApprovalLevelErrorEnum for AssignUserWithLocationsToApprovalLevelError
            /// </summary>
            [EnumMember(Value = "AssignUserWithLocationsToApprovalLevelError")]
            AssignUserWithLocationsToApprovalLevelErrorEnum = 216,
            
            /// <summary>
            /// Enum ReAssignUserWithLocationsToNewApprovalLevelErrorEnum for ReAssignUserWithLocationsToNewApprovalLevelError
            /// </summary>
            [EnumMember(Value = "ReAssignUserWithLocationsToNewApprovalLevelError")]
            ReAssignUserWithLocationsToNewApprovalLevelErrorEnum = 217,
            
            /// <summary>
            /// Enum ReAssignLocationsToApprovalLevelAndUserErrorEnum for ReAssignLocationsToApprovalLevelAndUserError
            /// </summary>
            [EnumMember(Value = "ReAssignLocationsToApprovalLevelAndUserError")]
            ReAssignLocationsToApprovalLevelAndUserErrorEnum = 218,
            
            /// <summary>
            /// Enum OutstandingBalanceEnum for OutstandingBalance
            /// </summary>
            [EnumMember(Value = "OutstandingBalance")]
            OutstandingBalanceEnum = 219,
            
            /// <summary>
            /// Enum InvoiceTaxDetailsEmptyEnum for InvoiceTaxDetailsEmpty
            /// </summary>
            [EnumMember(Value = "InvoiceTaxDetailsEmpty")]
            InvoiceTaxDetailsEmptyEnum = 220,
            
            /// <summary>
            /// Enum InvoiceTaxDetailsIncorrectSumEnum for InvoiceTaxDetailsIncorrectSum
            /// </summary>
            [EnumMember(Value = "InvoiceTaxDetailsIncorrectSum")]
            InvoiceTaxDetailsIncorrectSumEnum = 221,
            
            /// <summary>
            /// Enum MultipleUsersForLocationIsNotAllowedEnum for MultipleUsersForLocationIsNotAllowed
            /// </summary>
            [EnumMember(Value = "MultipleUsersForLocationIsNotAllowed")]
            MultipleUsersForLocationIsNotAllowedEnum = 222,
            
            /// <summary>
            /// Enum UserAssignedToOtherLevelEnum for UserAssignedToOtherLevel
            /// </summary>
            [EnumMember(Value = "UserAssignedToOtherLevel")]
            UserAssignedToOtherLevelEnum = 223,
            
            /// <summary>
            /// Enum UserDoesNotExistEnum for UserDoesNotExist
            /// </summary>
            [EnumMember(Value = "UserDoesNotExist")]
            UserDoesNotExistEnum = 224,
            
            /// <summary>
            /// Enum LaborLineItemRequiredEnum for LaborLineItemRequired
            /// </summary>
            [EnumMember(Value = "LaborLineItemRequired")]
            LaborLineItemRequiredEnum = 225,
            
            /// <summary>
            /// Enum MaterialLineItemRequiredEnum for MaterialLineItemRequired
            /// </summary>
            [EnumMember(Value = "MaterialLineItemRequired")]
            MaterialLineItemRequiredEnum = 226,
            
            /// <summary>
            /// Enum InvoiceDoesntExistEnum for InvoiceDoesntExist
            /// </summary>
            [EnumMember(Value = "InvoiceDoesntExist")]
            InvoiceDoesntExistEnum = 227,
            
            /// <summary>
            /// Enum InvoiceStarUnstarFailedEnum for InvoiceStarUnstarFailed
            /// </summary>
            [EnumMember(Value = "InvoiceStarUnstarFailed")]
            InvoiceStarUnstarFailedEnum = 228,
            
            /// <summary>
            /// Enum InvoiceBatchUpdateInvalidInvoiceStatusErrorEnum for InvoiceBatchUpdateInvalidInvoiceStatusError
            /// </summary>
            [EnumMember(Value = "InvoiceBatchUpdateInvalidInvoiceStatusError")]
            InvoiceBatchUpdateInvalidInvoiceStatusErrorEnum = 229,
            
            /// <summary>
            /// Enum InvoiceBatchUpdateLimitExceededErrorEnum for InvoiceBatchUpdateLimitExceededError
            /// </summary>
            [EnumMember(Value = "InvoiceBatchUpdateLimitExceededError")]
            InvoiceBatchUpdateLimitExceededErrorEnum = 230,
            
            /// <summary>
            /// Enum InvoiceNotAvailableForCurrentUserEnum for InvoiceNotAvailableForCurrentUser
            /// </summary>
            [EnumMember(Value = "InvoiceNotAvailableForCurrentUser")]
            InvoiceNotAvailableForCurrentUserEnum = 231,
            
            /// <summary>
            /// Enum InvoiceBatchUpdateInvalidRuleSetStructureEnum for InvoiceBatchUpdateInvalidRuleSetStructure
            /// </summary>
            [EnumMember(Value = "InvoiceBatchUpdateInvalidRuleSetStructure")]
            InvoiceBatchUpdateInvalidRuleSetStructureEnum = 232,
            
            /// <summary>
            /// Enum InvoiceBatchUpdateInvalidMliStructureEnum for InvoiceBatchUpdateInvalidMliStructure
            /// </summary>
            [EnumMember(Value = "InvoiceBatchUpdateInvalidMliStructure")]
            InvoiceBatchUpdateInvalidMliStructureEnum = 233,
            
            /// <summary>
            /// Enum InvoiceBatchUpdateStatusErrorEnum for InvoiceBatchUpdateStatusError
            /// </summary>
            [EnumMember(Value = "InvoiceBatchUpdateStatusError")]
            InvoiceBatchUpdateStatusErrorEnum = 234,
            
            /// <summary>
            /// Enum InvoiceMaterialUnitTypeInvalidEnum for InvoiceMaterialUnitTypeInvalid
            /// </summary>
            [EnumMember(Value = "InvoiceMaterialUnitTypeInvalid")]
            InvoiceMaterialUnitTypeInvalidEnum = 235,
            
            /// <summary>
            /// Enum ExistingBatchNumberEnum for ExistingBatchNumber
            /// </summary>
            [EnumMember(Value = "ExistingBatchNumber")]
            ExistingBatchNumberEnum = 236,
            
            /// <summary>
            /// Enum InvoiceResolutionTextRequiredEnum for InvoiceResolutionTextRequired
            /// </summary>
            [EnumMember(Value = "InvoiceResolutionTextRequired")]
            InvoiceResolutionTextRequiredEnum = 237,
            
            /// <summary>
            /// Enum GetInvoiceDefaultApprovalCodesErrorEnum for GetInvoiceDefaultApprovalCodesError
            /// </summary>
            [EnumMember(Value = "GetInvoiceDefaultApprovalCodesError")]
            GetInvoiceDefaultApprovalCodesErrorEnum = 238,
            
            /// <summary>
            /// Enum InvoiceInvalidTravelAmountEnum for InvoiceInvalidTravelAmount
            /// </summary>
            [EnumMember(Value = "InvoiceInvalidTravelAmount")]
            InvoiceInvalidTravelAmountEnum = 239,
            
            /// <summary>
            /// Enum InvoiceTravelDescriptionLengthOverflowEnum for InvoiceTravelDescriptionLengthOverflow
            /// </summary>
            [EnumMember(Value = "InvoiceTravelDescriptionLengthOverflow")]
            InvoiceTravelDescriptionLengthOverflowEnum = 240,
            
            /// <summary>
            /// Enum InvoiceTravelUnitTypeInvalidEnum for InvoiceTravelUnitTypeInvalid
            /// </summary>
            [EnumMember(Value = "InvoiceTravelUnitTypeInvalid")]
            InvoiceTravelUnitTypeInvalidEnum = 241,
            
            /// <summary>
            /// Enum TravelLineItemRequiredEnum for TravelLineItemRequired
            /// </summary>
            [EnumMember(Value = "TravelLineItemRequired")]
            TravelLineItemRequiredEnum = 242,
            
            /// <summary>
            /// Enum TravelDetailsDisabledEnum for TravelDetailsDisabled
            /// </summary>
            [EnumMember(Value = "TravelDetailsDisabled")]
            TravelDetailsDisabledEnum = 243,
            
            /// <summary>
            /// Enum OnOffShoreDisabledEnum for OnOffShoreDisabled
            /// </summary>
            [EnumMember(Value = "OnOffShoreDisabled")]
            OnOffShoreDisabledEnum = 244,
            
            /// <summary>
            /// Enum InvoiceInvalidLaborCountEnum for InvoiceInvalidLaborCount
            /// </summary>
            [EnumMember(Value = "InvoiceInvalidLaborCount")]
            InvoiceInvalidLaborCountEnum = 245,
            
            /// <summary>
            /// Enum InvoiceInvalidMaterialCountEnum for InvoiceInvalidMaterialCount
            /// </summary>
            [EnumMember(Value = "InvoiceInvalidMaterialCount")]
            InvoiceInvalidMaterialCountEnum = 246,
            
            /// <summary>
            /// Enum InvoiceInvalidTravelCountEnum for InvoiceInvalidTravelCount
            /// </summary>
            [EnumMember(Value = "InvoiceInvalidTravelCount")]
            InvoiceInvalidTravelCountEnum = 247,
            
            /// <summary>
            /// Enum SubscriberNotRegisteredForTaxValidationEnum for SubscriberNotRegisteredForTaxValidation
            /// </summary>
            [EnumMember(Value = "SubscriberNotRegisteredForTaxValidation")]
            SubscriberNotRegisteredForTaxValidationEnum = 248,
            
            /// <summary>
            /// Enum ManyDecimalsInAmountErrorEnum for ManyDecimalsInAmountError
            /// </summary>
            [EnumMember(Value = "ManyDecimalsInAmountError")]
            ManyDecimalsInAmountErrorEnum = 249,
            
            /// <summary>
            /// Enum DecimalPartQstTaxErrorEnum for DecimalPartQstTaxError
            /// </summary>
            [EnumMember(Value = "DecimalPartQstTaxError")]
            DecimalPartQstTaxErrorEnum = 250,
            
            /// <summary>
            /// Enum LaborRatesDiscrepancyEnum for LaborRatesDiscrepancy
            /// </summary>
            [EnumMember(Value = "LaborRatesDiscrepancy")]
            LaborRatesDiscrepancyEnum = 251,
            
            /// <summary>
            /// Enum PayInvoicesErrorEnum for PayInvoicesError
            /// </summary>
            [EnumMember(Value = "PayInvoicesError")]
            PayInvoicesErrorEnum = 252,
            
            /// <summary>
            /// Enum InvoiceNumberRequirementsErrorEnum for InvoiceNumberRequirementsError
            /// </summary>
            [EnumMember(Value = "InvoiceNumberRequirementsError")]
            InvoiceNumberRequirementsErrorEnum = 253,
            
            /// <summary>
            /// Enum InvoiceNumberIncorrectEnum for InvoiceNumberIncorrect
            /// </summary>
            [EnumMember(Value = "InvoiceNumberIncorrect")]
            InvoiceNumberIncorrectEnum = 254,
            
            /// <summary>
            /// Enum InvoiceNumberRegExPatternErrorEnum for InvoiceNumberRegExPatternError
            /// </summary>
            [EnumMember(Value = "InvoiceNumberRegExPatternError")]
            InvoiceNumberRegExPatternErrorEnum = 255,
            
            /// <summary>
            /// Enum GetInvoicesPendingApprovalByLocationErrorEnum for GetInvoicesPendingApprovalByLocationError
            /// </summary>
            [EnumMember(Value = "GetInvoicesPendingApprovalByLocationError")]
            GetInvoicesPendingApprovalByLocationErrorEnum = 256,
            
            /// <summary>
            /// Enum ReAssignInvoicesToUsersFailedEnum for ReAssignInvoicesToUsersFailed
            /// </summary>
            [EnumMember(Value = "ReAssignInvoicesToUsersFailed")]
            ReAssignInvoicesToUsersFailedEnum = 257,
            
            /// <summary>
            /// Enum ReAssignInvoicesUsersMatchedEnum for ReAssignInvoicesUsersMatched
            /// </summary>
            [EnumMember(Value = "ReAssignInvoicesUsersMatched")]
            ReAssignInvoicesUsersMatchedEnum = 258,
            
            /// <summary>
            /// Enum GetUsersForReassignInvoiceErrorEnum for GetUsersForReassignInvoiceError
            /// </summary>
            [EnumMember(Value = "GetUsersForReassignInvoiceError")]
            GetUsersForReassignInvoiceErrorEnum = 259,
            
            /// <summary>
            /// Enum InvalidTimeRangeActivityEnum for InvalidTimeRangeActivity
            /// </summary>
            [EnumMember(Value = "InvalidTimeRangeActivity")]
            InvalidTimeRangeActivityEnum = 260,
            
            /// <summary>
            /// Enum OutsourcedSourceInvoiceNotFoundEnum for OutsourcedSourceInvoiceNotFound
            /// </summary>
            [EnumMember(Value = "OutsourcedSourceInvoiceNotFound")]
            OutsourcedSourceInvoiceNotFoundEnum = 261,
            
            /// <summary>
            /// Enum OthersLineItemsDisabledEnum for OthersLineItemsDisabled
            /// </summary>
            [EnumMember(Value = "OthersLineItemsDisabled")]
            OthersLineItemsDisabledEnum = 262,
            
            /// <summary>
            /// Enum InvoiceInvalidOtherAmountEnum for InvoiceInvalidOtherAmount
            /// </summary>
            [EnumMember(Value = "InvoiceInvalidOtherAmount")]
            InvoiceInvalidOtherAmountEnum = 263,
            
            /// <summary>
            /// Enum InvoiceInvalidOtherCountEnum for InvoiceInvalidOtherCount
            /// </summary>
            [EnumMember(Value = "InvoiceInvalidOtherCount")]
            InvoiceInvalidOtherCountEnum = 264,
            
            /// <summary>
            /// Enum InvoiceOtherDescriptionLengthOverflowEnum for InvoiceOtherDescriptionLengthOverflow
            /// </summary>
            [EnumMember(Value = "InvoiceOtherDescriptionLengthOverflow")]
            InvoiceOtherDescriptionLengthOverflowEnum = 265,
            
            /// <summary>
            /// Enum OtherLineItemRequiredEnum for OtherLineItemRequired
            /// </summary>
            [EnumMember(Value = "OtherLineItemRequired")]
            OtherLineItemRequiredEnum = 266,
            
            /// <summary>
            /// Enum OtherLineItemsNotNegativeValueRequiredEnum for OtherLineItemsNotNegativeValueRequired
            /// </summary>
            [EnumMember(Value = "OtherLineItemsNotNegativeValueRequired")]
            OtherLineItemsNotNegativeValueRequiredEnum = 267,
            
            /// <summary>
            /// Enum InvalidLaborSkillLevelEnum for InvalidLaborSkillLevel
            /// </summary>
            [EnumMember(Value = "InvalidLaborSkillLevel")]
            InvalidLaborSkillLevelEnum = 268,
            
            /// <summary>
            /// Enum InvalidLaborTypeEnum for InvalidLaborType
            /// </summary>
            [EnumMember(Value = "InvalidLaborType")]
            InvalidLaborTypeEnum = 269,
            
            /// <summary>
            /// Enum InvalidTechnicianQuantityEnum for InvalidTechnicianQuantity
            /// </summary>
            [EnumMember(Value = "InvalidTechnicianQuantity")]
            InvalidTechnicianQuantityEnum = 270,
            
            /// <summary>
            /// Enum GetInvoicesCommonCategoriesErrorEnum for GetInvoicesCommonCategoriesError
            /// </summary>
            [EnumMember(Value = "GetInvoicesCommonCategoriesError")]
            GetInvoicesCommonCategoriesErrorEnum = 271,
            
            /// <summary>
            /// Enum InvoiceExplainDisputeEmptyEnum for InvoiceExplainDisputeEmpty
            /// </summary>
            [EnumMember(Value = "InvoiceExplainDisputeEmpty")]
            InvoiceExplainDisputeEmptyEnum = 272,
            
            /// <summary>
            /// Enum InvoiceAdditionalApprovalCodeHeaderErrorEnum for InvoiceAdditionalApprovalCodeHeaderError
            /// </summary>
            [EnumMember(Value = "InvoiceAdditionalApprovalCodeHeaderError")]
            InvoiceAdditionalApprovalCodeHeaderErrorEnum = 273,
            
            /// <summary>
            /// Enum TemplateParseSuccessEnum for TemplateParseSuccess
            /// </summary>
            [EnumMember(Value = "TemplateParseSuccess")]
            TemplateParseSuccessEnum = 274,
            
            /// <summary>
            /// Enum TemplateIncorrectHeaderErrorEnum for TemplateIncorrectHeaderError
            /// </summary>
            [EnumMember(Value = "TemplateIncorrectHeaderError")]
            TemplateIncorrectHeaderErrorEnum = 275,
            
            /// <summary>
            /// Enum TemplateEmptyTemplateErrorEnum for TemplateEmptyTemplateError
            /// </summary>
            [EnumMember(Value = "TemplateEmptyTemplateError")]
            TemplateEmptyTemplateErrorEnum = 276,
            
            /// <summary>
            /// Enum TemplateWrongFieldsCountErrorEnum for TemplateWrongFieldsCountError
            /// </summary>
            [EnumMember(Value = "TemplateWrongFieldsCountError")]
            TemplateWrongFieldsCountErrorEnum = 277,
            
            /// <summary>
            /// Enum TemplateFieldNotFoundErrorEnum for TemplateFieldNotFoundError
            /// </summary>
            [EnumMember(Value = "TemplateFieldNotFoundError")]
            TemplateFieldNotFoundErrorEnum = 278,
            
            /// <summary>
            /// Enum TemplateFieldRequiredErrorEnum for TemplateFieldRequiredError
            /// </summary>
            [EnumMember(Value = "TemplateFieldRequiredError")]
            TemplateFieldRequiredErrorEnum = 279,
            
            /// <summary>
            /// Enum TemplateParseIntErrorEnum for TemplateParseIntError
            /// </summary>
            [EnumMember(Value = "TemplateParseIntError")]
            TemplateParseIntErrorEnum = 280,
            
            /// <summary>
            /// Enum TemplateFieldSizeErrorEnum for TemplateFieldSizeError
            /// </summary>
            [EnumMember(Value = "TemplateFieldSizeError")]
            TemplateFieldSizeErrorEnum = 281,
            
            /// <summary>
            /// Enum TemplateInvalidValueErrorEnum for TemplateInvalidValueError
            /// </summary>
            [EnumMember(Value = "TemplateInvalidValueError")]
            TemplateInvalidValueErrorEnum = 282,
            
            /// <summary>
            /// Enum TemplateFieldFormatErrorEnum for TemplateFieldFormatError
            /// </summary>
            [EnumMember(Value = "TemplateFieldFormatError")]
            TemplateFieldFormatErrorEnum = 283,
            
            /// <summary>
            /// Enum TemplateFieldMaxRangeErrorEnum for TemplateFieldMaxRangeError
            /// </summary>
            [EnumMember(Value = "TemplateFieldMaxRangeError")]
            TemplateFieldMaxRangeErrorEnum = 284,
            
            /// <summary>
            /// Enum TemplateFieldMinRangeErrorEnum for TemplateFieldMinRangeError
            /// </summary>
            [EnumMember(Value = "TemplateFieldMinRangeError")]
            TemplateFieldMinRangeErrorEnum = 285,
            
            /// <summary>
            /// Enum TemplateProviderNotEnteredEnum for TemplateProviderNotEntered
            /// </summary>
            [EnumMember(Value = "TemplateProviderNotEntered")]
            TemplateProviderNotEnteredEnum = 286,
            
            /// <summary>
            /// Enum TemplateInvalidSubscriberErrorEnum for TemplateInvalidSubscriberError
            /// </summary>
            [EnumMember(Value = "TemplateInvalidSubscriberError")]
            TemplateInvalidSubscriberErrorEnum = 287,
            
            /// <summary>
            /// Enum TemplateVendorNotFoundErrorEnum for TemplateVendorNotFoundError
            /// </summary>
            [EnumMember(Value = "TemplateVendorNotFoundError")]
            TemplateVendorNotFoundErrorEnum = 288,
            
            /// <summary>
            /// Enum TemplateMissedProviderErrorEnum for TemplateMissedProviderError
            /// </summary>
            [EnumMember(Value = "TemplateMissedProviderError")]
            TemplateMissedProviderErrorEnum = 289,
            
            /// <summary>
            /// Enum TemplateProviderNotFoundErrorEnum for TemplateProviderNotFoundError
            /// </summary>
            [EnumMember(Value = "TemplateProviderNotFoundError")]
            TemplateProviderNotFoundErrorEnum = 290,
            
            /// <summary>
            /// Enum TemplateProviderSubsccriberLinkErrorEnum for TemplateProviderSubsccriberLinkError
            /// </summary>
            [EnumMember(Value = "TemplateProviderSubsccriberLinkError")]
            TemplateProviderSubsccriberLinkErrorEnum = 291,
            
            /// <summary>
            /// Enum TemplateTradeDispatchRankErrorEnum for TemplateTradeDispatchRankError
            /// </summary>
            [EnumMember(Value = "TemplateTradeDispatchRankError")]
            TemplateTradeDispatchRankErrorEnum = 292,
            
            /// <summary>
            /// Enum TemplateInvalidTradeForSubscriberErrorEnum for TemplateInvalidTradeForSubscriberError
            /// </summary>
            [EnumMember(Value = "TemplateInvalidTradeForSubscriberError")]
            TemplateInvalidTradeForSubscriberErrorEnum = 293,
            
            /// <summary>
            /// Enum TemplateStoreNotFoundErrorEnum for TemplateStoreNotFoundError
            /// </summary>
            [EnumMember(Value = "TemplateStoreNotFoundError")]
            TemplateStoreNotFoundErrorEnum = 294,
            
            /// <summary>
            /// Enum TemplateNotStoresForStateErrorEnum for TemplateNotStoresForStateError
            /// </summary>
            [EnumMember(Value = "TemplateNotStoresForStateError")]
            TemplateNotStoresForStateErrorEnum = 295,
            
            /// <summary>
            /// Enum TemplateNotStoresForCountryErrorEnum for TemplateNotStoresForCountryError
            /// </summary>
            [EnumMember(Value = "TemplateNotStoresForCountryError")]
            TemplateNotStoresForCountryErrorEnum = 296,
            
            /// <summary>
            /// Enum TemplateNotStoresForDistrictErrorEnum for TemplateNotStoresForDistrictError
            /// </summary>
            [EnumMember(Value = "TemplateNotStoresForDistrictError")]
            TemplateNotStoresForDistrictErrorEnum = 297,
            
            /// <summary>
            /// Enum TemplateNotStoresForRegionErrorEnum for TemplateNotStoresForRegionError
            /// </summary>
            [EnumMember(Value = "TemplateNotStoresForRegionError")]
            TemplateNotStoresForRegionErrorEnum = 298,
            
            /// <summary>
            /// Enum TemplateMultiplePimaryProvidersForTradeStoreErrorEnum for TemplateMultiplePimaryProvidersForTradeStoreError
            /// </summary>
            [EnumMember(Value = "TemplateMultiplePimaryProvidersForTradeStoreError")]
            TemplateMultiplePimaryProvidersForTradeStoreErrorEnum = 299,
            
            /// <summary>
            /// Enum TemplateDuplicatePrimaryRelationshipErrorEnum for TemplateDuplicatePrimaryRelationshipError
            /// </summary>
            [EnumMember(Value = "TemplateDuplicatePrimaryRelationshipError")]
            TemplateDuplicatePrimaryRelationshipErrorEnum = 300,
            
            /// <summary>
            /// Enum TemplateAmbiguousDataErrorEnum for TemplateAmbiguousDataError
            /// </summary>
            [EnumMember(Value = "TemplateAmbiguousDataError")]
            TemplateAmbiguousDataErrorEnum = 301,
            
            /// <summary>
            /// Enum TemplateIncorrectSubscriberEnum for TemplateIncorrectSubscriber
            /// </summary>
            [EnumMember(Value = "TemplateIncorrectSubscriber")]
            TemplateIncorrectSubscriberEnum = 302,
            
            /// <summary>
            /// Enum TemplateDuplicateRankingEnum for TemplateDuplicateRanking
            /// </summary>
            [EnumMember(Value = "TemplateDuplicateRanking")]
            TemplateDuplicateRankingEnum = 303,
            
            /// <summary>
            /// Enum TemplateLongitudeRangeErrorEnum for TemplateLongitudeRangeError
            /// </summary>
            [EnumMember(Value = "TemplateLongitudeRangeError")]
            TemplateLongitudeRangeErrorEnum = 304,
            
            /// <summary>
            /// Enum TemplateLatitudeRangeErrorEnum for TemplateLatitudeRangeError
            /// </summary>
            [EnumMember(Value = "TemplateLatitudeRangeError")]
            TemplateLatitudeRangeErrorEnum = 305,
            
            /// <summary>
            /// Enum TemplateInvalidStateErrorEnum for TemplateInvalidStateError
            /// </summary>
            [EnumMember(Value = "TemplateInvalidStateError")]
            TemplateInvalidStateErrorEnum = 306,
            
            /// <summary>
            /// Enum TemplateMissedSubscriberErrorEnum for TemplateMissedSubscriberError
            /// </summary>
            [EnumMember(Value = "TemplateMissedSubscriberError")]
            TemplateMissedSubscriberErrorEnum = 307,
            
            /// <summary>
            /// Enum TemplateMissedStoreIdErrorEnum for TemplateMissedStoreIdError
            /// </summary>
            [EnumMember(Value = "TemplateMissedStoreIdError")]
            TemplateMissedStoreIdErrorEnum = 308,
            
            /// <summary>
            /// Enum TemplateInvalidSubscriberIdErrorEnum for TemplateInvalidSubscriberIdError
            /// </summary>
            [EnumMember(Value = "TemplateInvalidSubscriberIdError")]
            TemplateInvalidSubscriberIdErrorEnum = 309,
            
            /// <summary>
            /// Enum TemplateOpenCloseDateErrorEnum for TemplateOpenCloseDateError
            /// </summary>
            [EnumMember(Value = "TemplateOpenCloseDateError")]
            TemplateOpenCloseDateErrorEnum = 310,
            
            /// <summary>
            /// Enum TemplateInvalidCountryErrorEnum for TemplateInvalidCountryError
            /// </summary>
            [EnumMember(Value = "TemplateInvalidCountryError")]
            TemplateInvalidCountryErrorEnum = 311,
            
            /// <summary>
            /// Enum TemplateInvalidStateForCountryErrorEnum for TemplateInvalidStateForCountryError
            /// </summary>
            [EnumMember(Value = "TemplateInvalidStateForCountryError")]
            TemplateInvalidStateForCountryErrorEnum = 312,
            
            /// <summary>
            /// Enum TemplateInvalidLocationTypeErrorEnum for TemplateInvalidLocationTypeError
            /// </summary>
            [EnumMember(Value = "TemplateInvalidLocationTypeError")]
            TemplateInvalidLocationTypeErrorEnum = 313,
            
            /// <summary>
            /// Enum TemplateMissingFullAndShortNameErrorEnum for TemplateMissingFullAndShortNameError
            /// </summary>
            [EnumMember(Value = "TemplateMissingFullAndShortNameError")]
            TemplateMissingFullAndShortNameErrorEnum = 314,
            
            /// <summary>
            /// Enum TemplateMissingCountryErrorEnum for TemplateMissingCountryError
            /// </summary>
            [EnumMember(Value = "TemplateMissingCountryError")]
            TemplateMissingCountryErrorEnum = 315,
            
            /// <summary>
            /// Enum TemplateDuplicatedDataErrorEnum for TemplateDuplicatedDataError
            /// </summary>
            [EnumMember(Value = "TemplateDuplicatedDataError")]
            TemplateDuplicatedDataErrorEnum = 316,
            
            /// <summary>
            /// Enum TemplateParentLocationNotFoundErrorEnum for TemplateParentLocationNotFoundError
            /// </summary>
            [EnumMember(Value = "TemplateParentLocationNotFoundError")]
            TemplateParentLocationNotFoundErrorEnum = 317,
            
            /// <summary>
            /// Enum TemplateParseDateTimeErrorEnum for TemplateParseDateTimeError
            /// </summary>
            [EnumMember(Value = "TemplateParseDateTimeError")]
            TemplateParseDateTimeErrorEnum = 318,
            
            /// <summary>
            /// Enum TemplateParseDecimalErrorEnum for TemplateParseDecimalError
            /// </summary>
            [EnumMember(Value = "TemplateParseDecimalError")]
            TemplateParseDecimalErrorEnum = 319,
            
            /// <summary>
            /// Enum TemplateSquareValueRangeErrorEnum for TemplateSquareValueRangeError
            /// </summary>
            [EnumMember(Value = "TemplateSquareValueRangeError")]
            TemplateSquareValueRangeErrorEnum = 320,
            
            /// <summary>
            /// Enum TemplateInvalidSquareMeasureErrorEnum for TemplateInvalidSquareMeasureError
            /// </summary>
            [EnumMember(Value = "TemplateInvalidSquareMeasureError")]
            TemplateInvalidSquareMeasureErrorEnum = 321,
            
            /// <summary>
            /// Enum TemplateTypeLabelCanNotBeUpdatedErrorEnum for TemplateTypeLabelCanNotBeUpdatedError
            /// </summary>
            [EnumMember(Value = "TemplateTypeLabelCanNotBeUpdatedError")]
            TemplateTypeLabelCanNotBeUpdatedErrorEnum = 322,
            
            /// <summary>
            /// Enum TemplateTypeLabelHaveToBeLocationForNotInventoryEnum for TemplateTypeLabelHaveToBeLocationForNotInventory
            /// </summary>
            [EnumMember(Value = "TemplateTypeLabelHaveToBeLocationForNotInventory")]
            TemplateTypeLabelHaveToBeLocationForNotInventoryEnum = 323,
            
            /// <summary>
            /// Enum TemplateInvalidPrimarySupplyLocationEnum for TemplateInvalidPrimarySupplyLocation
            /// </summary>
            [EnumMember(Value = "TemplateInvalidPrimarySupplyLocation")]
            TemplateInvalidPrimarySupplyLocationEnum = 324,
            
            /// <summary>
            /// Enum TemplateInvalidHomestoreLocationNumberEnum for TemplateInvalidHomestoreLocationNumber
            /// </summary>
            [EnumMember(Value = "TemplateInvalidHomestoreLocationNumber")]
            TemplateInvalidHomestoreLocationNumberEnum = 325,
            
            /// <summary>
            /// Enum TemplateErrorDuringCreationEnum for TemplateErrorDuringCreation
            /// </summary>
            [EnumMember(Value = "TemplateErrorDuringCreation")]
            TemplateErrorDuringCreationEnum = 326,
            
            /// <summary>
            /// Enum TemplateLocationNotFoundErrorEnum for TemplateLocationNotFoundError
            /// </summary>
            [EnumMember(Value = "TemplateLocationNotFoundError")]
            TemplateLocationNotFoundErrorEnum = 327,
            
            /// <summary>
            /// Enum TemplateDuplicatedLocationFoundErrorEnum for TemplateDuplicatedLocationFoundError
            /// </summary>
            [EnumMember(Value = "TemplateDuplicatedLocationFoundError")]
            TemplateDuplicatedLocationFoundErrorEnum = 328,
            
            /// <summary>
            /// Enum TemplateInvalidLocationHeaderErrorEnum for TemplateInvalidLocationHeaderError
            /// </summary>
            [EnumMember(Value = "TemplateInvalidLocationHeaderError")]
            TemplateInvalidLocationHeaderErrorEnum = 329,
            
            /// <summary>
            /// Enum TemplateDuplicatedLocationHeaderErrorEnum for TemplateDuplicatedLocationHeaderError
            /// </summary>
            [EnumMember(Value = "TemplateDuplicatedLocationHeaderError")]
            TemplateDuplicatedLocationHeaderErrorEnum = 330,
            
            /// <summary>
            /// Enum TemplateHeaderContainsEmptyFieldsErrorEnum for TemplateHeaderContainsEmptyFieldsError
            /// </summary>
            [EnumMember(Value = "TemplateHeaderContainsEmptyFieldsError")]
            TemplateHeaderContainsEmptyFieldsErrorEnum = 331,
            
            /// <summary>
            /// Enum TemplateLocHeadersShortHeaderErrorEnum for TemplateLocHeadersShortHeaderError
            /// </summary>
            [EnumMember(Value = "TemplateLocHeadersShortHeaderError")]
            TemplateLocHeadersShortHeaderErrorEnum = 332,
            
            /// <summary>
            /// Enum TemplateHeaderContainsDuplicatesErrorEnum for TemplateHeaderContainsDuplicatesError
            /// </summary>
            [EnumMember(Value = "TemplateHeaderContainsDuplicatesError")]
            TemplateHeaderContainsDuplicatesErrorEnum = 333,
            
            /// <summary>
            /// Enum TemplateLocationNotesStoreIdFieldLengthErrorEnum for TemplateLocationNotesStoreIdFieldLengthError
            /// </summary>
            [EnumMember(Value = "TemplateLocationNotesStoreIdFieldLengthError")]
            TemplateLocationNotesStoreIdFieldLengthErrorEnum = 334,
            
            /// <summary>
            /// Enum TemplateLocationNotesNoteValueFieldLengthErrorEnum for TemplateLocationNotesNoteValueFieldLengthError
            /// </summary>
            [EnumMember(Value = "TemplateLocationNotesNoteValueFieldLengthError")]
            TemplateLocationNotesNoteValueFieldLengthErrorEnum = 335,
            
            /// <summary>
            /// Enum TemplateErrorInvalidZipCodeEnum for TemplateErrorInvalidZipCode
            /// </summary>
            [EnumMember(Value = "TemplateErrorInvalidZipCode")]
            TemplateErrorInvalidZipCodeEnum = 336,
            
            /// <summary>
            /// Enum TemplateMissingLocationNoteHeaderEnum for TemplateMissingLocationNoteHeader
            /// </summary>
            [EnumMember(Value = "TemplateMissingLocationNoteHeader")]
            TemplateMissingLocationNoteHeaderEnum = 337,
            
            /// <summary>
            /// Enum TemplateMissingLocationNoteIdHeaderEnum for TemplateMissingLocationNoteIdHeader
            /// </summary>
            [EnumMember(Value = "TemplateMissingLocationNoteIdHeader")]
            TemplateMissingLocationNoteIdHeaderEnum = 338,
            
            /// <summary>
            /// Enum TemplateInvalidSecondarySupplyLocationEnum for TemplateInvalidSecondarySupplyLocation
            /// </summary>
            [EnumMember(Value = "TemplateInvalidSecondarySupplyLocation")]
            TemplateInvalidSecondarySupplyLocationEnum = 339,
            
            /// <summary>
            /// Enum TemplateLocationWasNotCreatedEnum for TemplateLocationWasNotCreated
            /// </summary>
            [EnumMember(Value = "TemplateLocationWasNotCreated")]
            TemplateLocationWasNotCreatedEnum = 340,
            
            /// <summary>
            /// Enum TemplateTruckNameIsEmptyEnum for TemplateTruckNameIsEmpty
            /// </summary>
            [EnumMember(Value = "TemplateTruckNameIsEmpty")]
            TemplateTruckNameIsEmptyEnum = 341,
            
            /// <summary>
            /// Enum TemplateWrongFormatEnum for TemplateWrongFormat
            /// </summary>
            [EnumMember(Value = "TemplateWrongFormat")]
            TemplateWrongFormatEnum = 342,
            
            /// <summary>
            /// Enum TemplateSubscriberNotFoundEnum for TemplateSubscriberNotFound
            /// </summary>
            [EnumMember(Value = "TemplateSubscriberNotFound")]
            TemplateSubscriberNotFoundEnum = 343,
            
            /// <summary>
            /// Enum TemplateDuplicatedLocationHeadersEnum for TemplateDuplicatedLocationHeaders
            /// </summary>
            [EnumMember(Value = "TemplateDuplicatedLocationHeaders")]
            TemplateDuplicatedLocationHeadersEnum = 344,
            
            /// <summary>
            /// Enum TemplateInvalidHeadersEnum for TemplateInvalidHeaders
            /// </summary>
            [EnumMember(Value = "TemplateInvalidHeaders")]
            TemplateInvalidHeadersEnum = 345,
            
            /// <summary>
            /// Enum TemplateInvalidPhoneErrorEnum for TemplateInvalidPhoneError
            /// </summary>
            [EnumMember(Value = "TemplateInvalidPhoneError")]
            TemplateInvalidPhoneErrorEnum = 346,
            
            /// <summary>
            /// Enum TemplateDuplicateTelecomRecordErrorEnum for TemplateDuplicateTelecomRecordError
            /// </summary>
            [EnumMember(Value = "TemplateDuplicateTelecomRecordError")]
            TemplateDuplicateTelecomRecordErrorEnum = 347,
            
            /// <summary>
            /// Enum TemplateTelecomRecordExistsErrorEnum for TemplateTelecomRecordExistsError
            /// </summary>
            [EnumMember(Value = "TemplateTelecomRecordExistsError")]
            TemplateTelecomRecordExistsErrorEnum = 348,
            
            /// <summary>
            /// Enum TemplateInvalidCategoryEnum for TemplateInvalidCategory
            /// </summary>
            [EnumMember(Value = "TemplateInvalidCategory")]
            TemplateInvalidCategoryEnum = 349,
            
            /// <summary>
            /// Enum TemplateDifferentRanksForProviderAssignmentsEnum for TemplateDifferentRanksForProviderAssignments
            /// </summary>
            [EnumMember(Value = "TemplateDifferentRanksForProviderAssignments")]
            TemplateDifferentRanksForProviderAssignmentsEnum = 350,
            
            /// <summary>
            /// Enum TemplateDuplicateRankErrorEnum for TemplateDuplicateRankError
            /// </summary>
            [EnumMember(Value = "TemplateDuplicateRankError")]
            TemplateDuplicateRankErrorEnum = 351,
            
            /// <summary>
            /// Enum TemplateProviderNonCompliantEnum for TemplateProviderNonCompliant
            /// </summary>
            [EnumMember(Value = "TemplateProviderNonCompliant")]
            TemplateProviderNonCompliantEnum = 352,
            
            /// <summary>
            /// Enum TemplateLocationIsClosedEnum for TemplateLocationIsClosed
            /// </summary>
            [EnumMember(Value = "TemplateLocationIsClosed")]
            TemplateLocationIsClosedEnum = 353,
            
            /// <summary>
            /// Enum TemplateProviderWarningEnum for TemplateProviderWarning
            /// </summary>
            [EnumMember(Value = "TemplateProviderWarning")]
            TemplateProviderWarningEnum = 354,
            
            /// <summary>
            /// Enum EmptyRequestEnum for EmptyRequest
            /// </summary>
            [EnumMember(Value = "EmptyRequest")]
            EmptyRequestEnum = 355,
            
            /// <summary>
            /// Enum InvoiceOtherUnitTypeInvalidEnum for InvoiceOtherUnitTypeInvalid
            /// </summary>
            [EnumMember(Value = "InvoiceOtherUnitTypeInvalid")]
            InvoiceOtherUnitTypeInvalidEnum = 356,
            
            /// <summary>
            /// Enum InvalidNumberOfParametersEnum for InvalidNumberOfParameters
            /// </summary>
            [EnumMember(Value = "InvalidNumberOfParameters")]
            InvalidNumberOfParametersEnum = 357,
            
            /// <summary>
            /// Enum EmptyLocationOrTradeListEnum for EmptyLocationOrTradeList
            /// </summary>
            [EnumMember(Value = "EmptyLocationOrTradeList")]
            EmptyLocationOrTradeListEnum = 358,
            
            /// <summary>
            /// Enum StoreIdRequiredErrorEnum for StoreIdRequiredError
            /// </summary>
            [EnumMember(Value = "StoreIdRequiredError")]
            StoreIdRequiredErrorEnum = 359,
            
            /// <summary>
            /// Enum InvalidUserIdErrorEnum for InvalidUserIdError
            /// </summary>
            [EnumMember(Value = "InvalidUserIdError")]
            InvalidUserIdErrorEnum = 360,
            
            /// <summary>
            /// Enum InvalidStoreIdErrorEnum for InvalidStoreIdError
            /// </summary>
            [EnumMember(Value = "InvalidStoreIdError")]
            InvalidStoreIdErrorEnum = 361,
            
            /// <summary>
            /// Enum AmbigiousErrorEnum for AmbigiousError
            /// </summary>
            [EnumMember(Value = "AmbigiousError")]
            AmbigiousErrorEnum = 362,
            
            /// <summary>
            /// Enum MliHierarchyFiledsCountErrorEnum for MliHierarchyFiledsCountError
            /// </summary>
            [EnumMember(Value = "MliHierarchyFiledsCountError")]
            MliHierarchyFiledsCountErrorEnum = 363,
            
            /// <summary>
            /// Enum MliHierarchyMaxUserNameErrorEnum for MliHierarchyMaxUserNameError
            /// </summary>
            [EnumMember(Value = "MliHierarchyMaxUserNameError")]
            MliHierarchyMaxUserNameErrorEnum = 364,
            
            /// <summary>
            /// Enum MliHierarchyDuplicateUserErrorEnum for MliHierarchyDuplicateUserError
            /// </summary>
            [EnumMember(Value = "MliHierarchyDuplicateUserError")]
            MliHierarchyDuplicateUserErrorEnum = 365,
            
            /// <summary>
            /// Enum MLiHirarchyUserExistInOtherLevelErrorEnum for MLiHirarchyUserExistInOtherLevelError
            /// </summary>
            [EnumMember(Value = "MLiHirarchyUserExistInOtherLevelError")]
            MLiHirarchyUserExistInOtherLevelErrorEnum = 366,
            
            /// <summary>
            /// Enum MissingLevelsErrorEnum for MissingLevelsError
            /// </summary>
            [EnumMember(Value = "MissingLevelsError")]
            MissingLevelsErrorEnum = 367,
            
            /// <summary>
            /// Enum DuplicateApprovalLevelsErrorEnum for DuplicateApprovalLevelsError
            /// </summary>
            [EnumMember(Value = "DuplicateApprovalLevelsError")]
            DuplicateApprovalLevelsErrorEnum = 368,
            
            /// <summary>
            /// Enum InvalidMliLocationsEnum for InvalidMliLocations
            /// </summary>
            [EnumMember(Value = "InvalidMliLocations")]
            InvalidMliLocationsEnum = 369,
            
            /// <summary>
            /// Enum InvalidMlpLocationsEnum for InvalidMlpLocations
            /// </summary>
            [EnumMember(Value = "InvalidMlpLocations")]
            InvalidMlpLocationsEnum = 370,
            
            /// <summary>
            /// Enum ApprovalLevelUsedInRulsetErrorEnum for ApprovalLevelUsedInRulsetError
            /// </summary>
            [EnumMember(Value = "ApprovalLevelUsedInRulsetError")]
            ApprovalLevelUsedInRulsetErrorEnum = 371,
            
            /// <summary>
            /// Enum GLCodeAmbiguousEnum for GLCodeAmbiguous
            /// </summary>
            [EnumMember(Value = "GLCodeAmbiguous")]
            GLCodeAmbiguousEnum = 372,
            
            /// <summary>
            /// Enum GlCodeInvalidResponceEnum for GlCodeInvalidResponce
            /// </summary>
            [EnumMember(Value = "GlCodeInvalidResponce")]
            GlCodeInvalidResponceEnum = 373,
            
            /// <summary>
            /// Enum GetRuleSetListErrorEnum for GetRuleSetListError
            /// </summary>
            [EnumMember(Value = "GetRuleSetListError")]
            GetRuleSetListErrorEnum = 374,
            
            /// <summary>
            /// Enum RuleSetDuplicateNameErrorEnum for RuleSetDuplicateNameError
            /// </summary>
            [EnumMember(Value = "RuleSetDuplicateNameError")]
            RuleSetDuplicateNameErrorEnum = 375,
            
            /// <summary>
            /// Enum RuleSetDuplicateActionErrorEnum for RuleSetDuplicateActionError
            /// </summary>
            [EnumMember(Value = "RuleSetDuplicateActionError")]
            RuleSetDuplicateActionErrorEnum = 376,
            
            /// <summary>
            /// Enum RuleSetConflictedActionErrorEnum for RuleSetConflictedActionError
            /// </summary>
            [EnumMember(Value = "RuleSetConflictedActionError")]
            RuleSetConflictedActionErrorEnum = 377,
            
            /// <summary>
            /// Enum RuleSetRuleSetDoesNotExistsErrorEnum for RuleSetRuleSetDoesNotExistsError
            /// </summary>
            [EnumMember(Value = "RuleSetRuleSetDoesNotExistsError")]
            RuleSetRuleSetDoesNotExistsErrorEnum = 378,
            
            /// <summary>
            /// Enum RuleSetTradeDoesNotExistErrorEnum for RuleSetTradeDoesNotExistError
            /// </summary>
            [EnumMember(Value = "RuleSetTradeDoesNotExistError")]
            RuleSetTradeDoesNotExistErrorEnum = 379,
            
            /// <summary>
            /// Enum RuleSetCategoryDoesNotExistErrorEnum for RuleSetCategoryDoesNotExistError
            /// </summary>
            [EnumMember(Value = "RuleSetCategoryDoesNotExistError")]
            RuleSetCategoryDoesNotExistErrorEnum = 380,
            
            /// <summary>
            /// Enum RuleSetMliLevelDoesNotExistErrorEnum for RuleSetMliLevelDoesNotExistError
            /// </summary>
            [EnumMember(Value = "RuleSetMliLevelDoesNotExistError")]
            RuleSetMliLevelDoesNotExistErrorEnum = 381,
            
            /// <summary>
            /// Enum GetRuleSetEnum for GetRuleSet
            /// </summary>
            [EnumMember(Value = "GetRuleSet")]
            GetRuleSetEnum = 382,
            
            /// <summary>
            /// Enum CreateUpdateRuleSetErrorEnum for CreateUpdateRuleSetError
            /// </summary>
            [EnumMember(Value = "CreateUpdateRuleSetError")]
            CreateUpdateRuleSetErrorEnum = 383,
            
            /// <summary>
            /// Enum DeleteRuleSetEnum for DeleteRuleSet
            /// </summary>
            [EnumMember(Value = "DeleteRuleSet")]
            DeleteRuleSetEnum = 384,
            
            /// <summary>
            /// Enum GetRuleSetCategoriesTradesCountErrorEnum for GetRuleSetCategoriesTradesCountError
            /// </summary>
            [EnumMember(Value = "GetRuleSetCategoriesTradesCountError")]
            GetRuleSetCategoriesTradesCountErrorEnum = 385,
            
            /// <summary>
            /// Enum GetRuleSetByInvoiceEnum for GetRuleSetByInvoice
            /// </summary>
            [EnumMember(Value = "GetRuleSetByInvoice")]
            GetRuleSetByInvoiceEnum = 386,
            
            /// <summary>
            /// Enum GetCategoryTradeIdsAreSelectedErrorEnum for GetCategoryTradeIdsAreSelectedError
            /// </summary>
            [EnumMember(Value = "GetCategoryTradeIdsAreSelectedError")]
            GetCategoryTradeIdsAreSelectedErrorEnum = 387,
            
            /// <summary>
            /// Enum ProposalAboveMlpLimitErrorEnum for ProposalAboveMlpLimitError
            /// </summary>
            [EnumMember(Value = "ProposalAboveMlpLimitError")]
            ProposalAboveMlpLimitErrorEnum = 388,
            
            /// <summary>
            /// Enum ProposalNextLevelHasNoAvailableActionsErrorEnum for ProposalNextLevelHasNoAvailableActionsError
            /// </summary>
            [EnumMember(Value = "ProposalNextLevelHasNoAvailableActionsError")]
            ProposalNextLevelHasNoAvailableActionsErrorEnum = 389,
            
            /// <summary>
            /// Enum DefaultRuleSetErrorEnum for DefaultRuleSetError
            /// </summary>
            [EnumMember(Value = "DefaultRuleSetError")]
            DefaultRuleSetErrorEnum = 390,
            
            /// <summary>
            /// Enum UserFilterGetErrorEnum for UserFilterGetError
            /// </summary>
            [EnumMember(Value = "UserFilterGetError")]
            UserFilterGetErrorEnum = 391,
            
            /// <summary>
            /// Enum UserFilterCreateUpdateErrorEnum for UserFilterCreateUpdateError
            /// </summary>
            [EnumMember(Value = "UserFilterCreateUpdateError")]
            UserFilterCreateUpdateErrorEnum = 392,
            
            /// <summary>
            /// Enum UserFilterDeleteErrorEnum for UserFilterDeleteError
            /// </summary>
            [EnumMember(Value = "UserFilterDeleteError")]
            UserFilterDeleteErrorEnum = 393,
            
            /// <summary>
            /// Enum UserFilterSetAsDefaultErrorEnum for UserFilterSetAsDefaultError
            /// </summary>
            [EnumMember(Value = "UserFilterSetAsDefaultError")]
            UserFilterSetAsDefaultErrorEnum = 394,
            
            /// <summary>
            /// Enum InvoiceFilterFromAlpProviderErrorEnum for InvoiceFilterFromAlpProviderError
            /// </summary>
            [EnumMember(Value = "InvoiceFilterFromAlpProviderError")]
            InvoiceFilterFromAlpProviderErrorEnum = 395,
            
            /// <summary>
            /// Enum PaymenowScProviderIdOrFbCompanyIdMustBeProvidedEnum for PaymenowScProviderIdOrFbCompanyIdMustBeProvided
            /// </summary>
            [EnumMember(Value = "PaymenowScProviderIdOrFbCompanyIdMustBeProvided")]
            PaymenowScProviderIdOrFbCompanyIdMustBeProvidedEnum = 396,
            
            /// <summary>
            /// Enum PaymenowBannersForProvidersOnlyEnum for PaymenowBannersForProvidersOnly
            /// </summary>
            [EnumMember(Value = "PaymenowBannersForProvidersOnly")]
            PaymenowBannersForProvidersOnlyEnum = 397,
            
            /// <summary>
            /// Enum PaymenowFeatureDisabledEnum for PaymenowFeatureDisabled
            /// </summary>
            [EnumMember(Value = "PaymenowFeatureDisabled")]
            PaymenowFeatureDisabledEnum = 398,
            
            /// <summary>
            /// Enum PaymenowBannerInfoNotFoundEnum for PaymenowBannerInfoNotFound
            /// </summary>
            [EnumMember(Value = "PaymenowBannerInfoNotFound")]
            PaymenowBannerInfoNotFoundEnum = 399,
            
            /// <summary>
            /// Enum PaymenowBannerInvalidNavigationUrlEnum for PaymenowBannerInvalidNavigationUrl
            /// </summary>
            [EnumMember(Value = "PaymenowBannerInvalidNavigationUrl")]
            PaymenowBannerInvalidNavigationUrlEnum = 400,
            
            /// <summary>
            /// Enum PaymenowRequestedProvidersIsNotAssignedEnum for PaymenowRequestedProvidersIsNotAssigned
            /// </summary>
            [EnumMember(Value = "PaymenowRequestedProvidersIsNotAssigned")]
            PaymenowRequestedProvidersIsNotAssignedEnum = 401,
            
            /// <summary>
            /// Enum PaymenowEmptyRequestedProvidersEnum for PaymenowEmptyRequestedProviders
            /// </summary>
            [EnumMember(Value = "PaymenowEmptyRequestedProviders")]
            PaymenowEmptyRequestedProvidersEnum = 402,
            
            /// <summary>
            /// Enum PaymentManagerFeatureDisabledEnum for PaymentManagerFeatureDisabled
            /// </summary>
            [EnumMember(Value = "PaymentManagerFeatureDisabled")]
            PaymentManagerFeatureDisabledEnum = 403,
            
            /// <summary>
            /// Enum PaymentManagerFeatureDisabledForSubscriberEnum for PaymentManagerFeatureDisabledForSubscriber
            /// </summary>
            [EnumMember(Value = "PaymentManagerFeatureDisabledForSubscriber")]
            PaymentManagerFeatureDisabledForSubscriberEnum = 404,
            
            /// <summary>
            /// Enum PaymentSystemCurrentlyUnavailableEnum for PaymentSystemCurrentlyUnavailable
            /// </summary>
            [EnumMember(Value = "PaymentSystemCurrentlyUnavailable")]
            PaymentSystemCurrentlyUnavailableEnum = 405,
            
            /// <summary>
            /// Enum CurrencyNotSupportedEnum for CurrencyNotSupported
            /// </summary>
            [EnumMember(Value = "CurrencyNotSupported")]
            CurrencyNotSupportedEnum = 406,
            
            /// <summary>
            /// Enum PaymentSystemAccountNotFoundEnum for PaymentSystemAccountNotFound
            /// </summary>
            [EnumMember(Value = "PaymentSystemAccountNotFound")]
            PaymentSystemAccountNotFoundEnum = 407,
            
            /// <summary>
            /// Enum FeatureIsOffEnum for FeatureIsOff
            /// </summary>
            [EnumMember(Value = "FeatureIsOff")]
            FeatureIsOffEnum = 408,
            
            /// <summary>
            /// Enum EarlyPayFeatureWithoutPaymentManagetFeatureErrorEnum for EarlyPayFeatureWithoutPaymentManagetFeatureError
            /// </summary>
            [EnumMember(Value = "EarlyPayFeatureWithoutPaymentManagetFeatureError")]
            EarlyPayFeatureWithoutPaymentManagetFeatureErrorEnum = 409,
            
            /// <summary>
            /// Enum FtpTestErrorEnum for FtpTestError
            /// </summary>
            [EnumMember(Value = "FtpTestError")]
            FtpTestErrorEnum = 410,
            
            /// <summary>
            /// Enum AcceptTermsAndConditionsRequestInvalidEnum for AcceptTermsAndConditionsRequestInvalid
            /// </summary>
            [EnumMember(Value = "AcceptTermsAndConditionsRequestInvalid")]
            AcceptTermsAndConditionsRequestInvalidEnum = 411,
            
            /// <summary>
            /// Enum PaymentSystemAccountErrorEnum for PaymentSystemAccountError
            /// </summary>
            [EnumMember(Value = "PaymentSystemAccountError")]
            PaymentSystemAccountErrorEnum = 412,
            
            /// <summary>
            /// Enum SendReportToFTPEnum for SendReportToFTP
            /// </summary>
            [EnumMember(Value = "SendReportToFTP")]
            SendReportToFTPEnum = 413,
            
            /// <summary>
            /// Enum SchedulingErrorEnum for SchedulingError
            /// </summary>
            [EnumMember(Value = "SchedulingError")]
            SchedulingErrorEnum = 414,
            
            /// <summary>
            /// Enum BadPaymentDataEnum for BadPaymentData
            /// </summary>
            [EnumMember(Value = "BadPaymentData")]
            BadPaymentDataEnum = 415,
            
            /// <summary>
            /// Enum InvoicesCanNotBeRepaidEnum for InvoicesCanNotBeRepaid
            /// </summary>
            [EnumMember(Value = "InvoicesCanNotBeRepaid")]
            InvoicesCanNotBeRepaidEnum = 416,
            
            /// <summary>
            /// Enum InvoicesCanNotBeRescheduledEnum for InvoicesCanNotBeRescheduled
            /// </summary>
            [EnumMember(Value = "InvoicesCanNotBeRescheduled")]
            InvoicesCanNotBeRescheduledEnum = 417,
            
            /// <summary>
            /// Enum InvalidBillingAddressEnum for InvalidBillingAddress
            /// </summary>
            [EnumMember(Value = "InvalidBillingAddress")]
            InvalidBillingAddressEnum = 418,
            
            /// <summary>
            /// Enum PaymentManagerGeneralSettingsNotFoundEnum for PaymentManagerGeneralSettingsNotFound
            /// </summary>
            [EnumMember(Value = "PaymentManagerGeneralSettingsNotFound")]
            PaymentManagerGeneralSettingsNotFoundEnum = 419,
            
            /// <summary>
            /// Enum PaymentManagerEInvoiceSettingsNotFoundEnum for PaymentManagerEInvoiceSettingsNotFound
            /// </summary>
            [EnumMember(Value = "PaymentManagerEInvoiceSettingsNotFound")]
            PaymentManagerEInvoiceSettingsNotFoundEnum = 420,
            
            /// <summary>
            /// Enum BadgeVerificationFailedEnum for BadgeVerificationFailed
            /// </summary>
            [EnumMember(Value = "BadgeVerificationFailed")]
            BadgeVerificationFailedEnum = 421,
            
            /// <summary>
            /// Enum BadgeTempPassEmptyEnum for BadgeTempPassEmpty
            /// </summary>
            [EnumMember(Value = "BadgeTempPassEmpty")]
            BadgeTempPassEmptyEnum = 422,
            
            /// <summary>
            /// Enum BadgeScanRequiredEnum for BadgeScanRequired
            /// </summary>
            [EnumMember(Value = "BadgeScanRequired")]
            BadgeScanRequiredEnum = 423,
            
            /// <summary>
            /// Enum SolvedIssueSubmitFailedEnum for SolvedIssueSubmitFailed
            /// </summary>
            [EnumMember(Value = "SolvedIssueSubmitFailed")]
            SolvedIssueSubmitFailedEnum = 424,
            
            /// <summary>
            /// Enum SolvedIssueInvalidLocationIdEnum for SolvedIssueInvalidLocationId
            /// </summary>
            [EnumMember(Value = "SolvedIssueInvalidLocationId")]
            SolvedIssueInvalidLocationIdEnum = 425,
            
            /// <summary>
            /// Enum SolvedIssueInvalidCategoryIdEnum for SolvedIssueInvalidCategoryId
            /// </summary>
            [EnumMember(Value = "SolvedIssueInvalidCategoryId")]
            SolvedIssueInvalidCategoryIdEnum = 426,
            
            /// <summary>
            /// Enum SolvedIssueInvalidTradeIdEnum for SolvedIssueInvalidTradeId
            /// </summary>
            [EnumMember(Value = "SolvedIssueInvalidTradeId")]
            SolvedIssueInvalidTradeIdEnum = 427,
            
            /// <summary>
            /// Enum SolvedIssueInvalidPriorityIdEnum for SolvedIssueInvalidPriorityId
            /// </summary>
            [EnumMember(Value = "SolvedIssueInvalidPriorityId")]
            SolvedIssueInvalidPriorityIdEnum = 428,
            
            /// <summary>
            /// Enum SolvedIssueInvalidSourceEnum for SolvedIssueInvalidSource
            /// </summary>
            [EnumMember(Value = "SolvedIssueInvalidSource")]
            SolvedIssueInvalidSourceEnum = 429,
            
            /// <summary>
            /// Enum SolvedIssueInvalidProblemCodeEnum for SolvedIssueInvalidProblemCode
            /// </summary>
            [EnumMember(Value = "SolvedIssueInvalidProblemCode")]
            SolvedIssueInvalidProblemCodeEnum = 430,
            
            /// <summary>
            /// Enum SolvedIssueInvalidTypeEnum for SolvedIssueInvalidType
            /// </summary>
            [EnumMember(Value = "SolvedIssueInvalidType")]
            SolvedIssueInvalidTypeEnum = 431,
            
            /// <summary>
            /// Enum SubmitFeedbackErrorWoStatusEnum for SubmitFeedbackErrorWoStatus
            /// </summary>
            [EnumMember(Value = "SubmitFeedbackErrorWoStatus")]
            SubmitFeedbackErrorWoStatusEnum = 432,
            
            /// <summary>
            /// Enum SubmitFeedbackInvalidAnswerEnum for SubmitFeedbackInvalidAnswer
            /// </summary>
            [EnumMember(Value = "SubmitFeedbackInvalidAnswer")]
            SubmitFeedbackInvalidAnswerEnum = 433,
            
            /// <summary>
            /// Enum SubmitFeedbackInvalidTrackingNumberEnum for SubmitFeedbackInvalidTrackingNumber
            /// </summary>
            [EnumMember(Value = "SubmitFeedbackInvalidTrackingNumber")]
            SubmitFeedbackInvalidTrackingNumberEnum = 434,
            
            /// <summary>
            /// Enum SubmitFeedbackInvalidSubscriberEnum for SubmitFeedbackInvalidSubscriber
            /// </summary>
            [EnumMember(Value = "SubmitFeedbackInvalidSubscriber")]
            SubmitFeedbackInvalidSubscriberEnum = 435,
            
            /// <summary>
            /// Enum SubmitFeedbackInvalidScoreEnum for SubmitFeedbackInvalidScore
            /// </summary>
            [EnumMember(Value = "SubmitFeedbackInvalidScore")]
            SubmitFeedbackInvalidScoreEnum = 436,
            
            /// <summary>
            /// Enum SubmitFeedbackUnsatisfactoryCommentRequiredEnum for SubmitFeedbackUnsatisfactoryCommentRequired
            /// </summary>
            [EnumMember(Value = "SubmitFeedbackUnsatisfactoryCommentRequired")]
            SubmitFeedbackUnsatisfactoryCommentRequiredEnum = 437,
            
            /// <summary>
            /// Enum SubmitFeedbackInvalidReviewIdEnum for SubmitFeedbackInvalidReviewId
            /// </summary>
            [EnumMember(Value = "SubmitFeedbackInvalidReviewId")]
            SubmitFeedbackInvalidReviewIdEnum = 438,
            
            /// <summary>
            /// Enum SubmitFeedbackInvalidSetupIdEnum for SubmitFeedbackInvalidSetupId
            /// </summary>
            [EnumMember(Value = "SubmitFeedbackInvalidSetupId")]
            SubmitFeedbackInvalidSetupIdEnum = 439,
            
            /// <summary>
            /// Enum FeedbackSetupInvalidSetupIdEnum for FeedbackSetupInvalidSetupId
            /// </summary>
            [EnumMember(Value = "FeedbackSetupInvalidSetupId")]
            FeedbackSetupInvalidSetupIdEnum = 440,
            
            /// <summary>
            /// Enum S3SaveErrorEnum for S3SaveError
            /// </summary>
            [EnumMember(Value = "S3SaveError")]
            S3SaveErrorEnum = 441,
            
            /// <summary>
            /// Enum AbsSaveErrorEnum for AbsSaveError
            /// </summary>
            [EnumMember(Value = "AbsSaveError")]
            AbsSaveErrorEnum = 442,
            
            /// <summary>
            /// Enum GoodDataLoginFailedEnum for GoodDataLoginFailed
            /// </summary>
            [EnumMember(Value = "GoodDataLoginFailed")]
            GoodDataLoginFailedEnum = 443,
            
            /// <summary>
            /// Enum GoodDataElementUriErrorEnum for GoodDataElementUriError
            /// </summary>
            [EnumMember(Value = "GoodDataElementUriError")]
            GoodDataElementUriErrorEnum = 444,
            
            /// <summary>
            /// Enum GoodDataReportResultUriErrorEnum for GoodDataReportResultUriError
            /// </summary>
            [EnumMember(Value = "GoodDataReportResultUriError")]
            GoodDataReportResultUriErrorEnum = 445,
            
            /// <summary>
            /// Enum GoodDataReportResultEmptyEnum for GoodDataReportResultEmpty
            /// </summary>
            [EnumMember(Value = "GoodDataReportResultEmpty")]
            GoodDataReportResultEmptyEnum = 446,
            
            /// <summary>
            /// Enum GoodDataDesReportResCountErrorEnum for GoodDataDesReportResCountError
            /// </summary>
            [EnumMember(Value = "GoodDataDesReportResCountError")]
            GoodDataDesReportResCountErrorEnum = 447,
            
            /// <summary>
            /// Enum GoodDataDesReportResConvertErrorEnum for GoodDataDesReportResConvertError
            /// </summary>
            [EnumMember(Value = "GoodDataDesReportResConvertError")]
            GoodDataDesReportResConvertErrorEnum = 448,
            
            /// <summary>
            /// Enum GoodDataDesDisplayFormAttributeEmptyEnum for GoodDataDesDisplayFormAttributeEmpty
            /// </summary>
            [EnumMember(Value = "GoodDataDesDisplayFormAttributeEmpty")]
            GoodDataDesDisplayFormAttributeEmptyEnum = 449,
            
            /// <summary>
            /// Enum InvalidProposalAmountLimitEnum for InvalidProposalAmountLimit
            /// </summary>
            [EnumMember(Value = "InvalidProposalAmountLimit")]
            InvalidProposalAmountLimitEnum = 450,
            
            /// <summary>
            /// Enum GetApprovalProposalReasonsErrorEnum for GetApprovalProposalReasonsError
            /// </summary>
            [EnumMember(Value = "GetApprovalProposalReasonsError")]
            GetApprovalProposalReasonsErrorEnum = 451,
            
            /// <summary>
            /// Enum GetEmailRecipientsErrorEnum for GetEmailRecipientsError
            /// </summary>
            [EnumMember(Value = "GetEmailRecipientsError")]
            GetEmailRecipientsErrorEnum = 452,
            
            /// <summary>
            /// Enum GetAssignProposalReasonsErrorEnum for GetAssignProposalReasonsError
            /// </summary>
            [EnumMember(Value = "GetAssignProposalReasonsError")]
            GetAssignProposalReasonsErrorEnum = 453,
            
            /// <summary>
            /// Enum AssetTypeDuplicateNameErrorEnum for AssetTypeDuplicateNameError
            /// </summary>
            [EnumMember(Value = "AssetTypeDuplicateNameError")]
            AssetTypeDuplicateNameErrorEnum = 454,
            
            /// <summary>
            /// Enum AssetTypeDoesntExistErrorEnum for AssetTypeDoesntExistError
            /// </summary>
            [EnumMember(Value = "AssetTypeDoesntExistError")]
            AssetTypeDoesntExistErrorEnum = 455,
            
            /// <summary>
            /// Enum AssetTypeFailUpdateRefrigerantPurposeEnum for AssetTypeFailUpdateRefrigerantPurpose
            /// </summary>
            [EnumMember(Value = "AssetTypeFailUpdateRefrigerantPurpose")]
            AssetTypeFailUpdateRefrigerantPurposeEnum = 456,
            
            /// <summary>
            /// Enum AssetTypeDeleteFailedEnum for AssetTypeDeleteFailed
            /// </summary>
            [EnumMember(Value = "AssetTypeDeleteFailed")]
            AssetTypeDeleteFailedEnum = 457,
            
            /// <summary>
            /// Enum ExistingAssetsFoundForAssetTypeEnum for ExistingAssetsFoundForAssetType
            /// </summary>
            [EnumMember(Value = "ExistingAssetsFoundForAssetType")]
            ExistingAssetsFoundForAssetTypeEnum = 458,
            
            /// <summary>
            /// Enum CantModifyAssetTypeParentIdEnum for CantModifyAssetTypeParentId
            /// </summary>
            [EnumMember(Value = "CantModifyAssetTypeParentId")]
            CantModifyAssetTypeParentIdEnum = 459,
            
            /// <summary>
            /// Enum InvalidAssetTypeNameEnum for InvalidAssetTypeName
            /// </summary>
            [EnumMember(Value = "InvalidAssetTypeName")]
            InvalidAssetTypeNameEnum = 460,
            
            /// <summary>
            /// Enum AssetTypeInheritanceErrorEnum for AssetTypeInheritanceError
            /// </summary>
            [EnumMember(Value = "AssetTypeInheritanceError")]
            AssetTypeInheritanceErrorEnum = 461,
            
            /// <summary>
            /// Enum ExistingProposalsFoundForAssetTypeEnum for ExistingProposalsFoundForAssetType
            /// </summary>
            [EnumMember(Value = "ExistingProposalsFoundForAssetType")]
            ExistingProposalsFoundForAssetTypeEnum = 462,
            
            /// <summary>
            /// Enum InstallPurchaseDateOverflowEnum for InstallPurchaseDateOverflow
            /// </summary>
            [EnumMember(Value = "InstallPurchaseDateOverflow")]
            InstallPurchaseDateOverflowEnum = 463,
            
            /// <summary>
            /// Enum WOexistsWithSomeAssetsEnum for WOexistsWithSomeAssets
            /// </summary>
            [EnumMember(Value = "WOexistsWithSomeAssets")]
            WOexistsWithSomeAssetsEnum = 464,
            
            /// <summary>
            /// Enum PartsChangeFailedEnum for PartsChangeFailed
            /// </summary>
            [EnumMember(Value = "PartsChangeFailed")]
            PartsChangeFailedEnum = 465,
            
            /// <summary>
            /// Enum PartsReasonCodeErrorEnum for PartsReasonCodeError
            /// </summary>
            [EnumMember(Value = "PartsReasonCodeError")]
            PartsReasonCodeErrorEnum = 466,
            
            /// <summary>
            /// Enum PartsUseDateErrorEnum for PartsUseDateError
            /// </summary>
            [EnumMember(Value = "PartsUseDateError")]
            PartsUseDateErrorEnum = 467,
            
            /// <summary>
            /// Enum PartsRefrigerantAlreadyExistsEnum for PartsRefrigerantAlreadyExists
            /// </summary>
            [EnumMember(Value = "PartsRefrigerantAlreadyExists")]
            PartsRefrigerantAlreadyExistsEnum = 468,
            
            /// <summary>
            /// Enum PartsChargeHistoryAlreadyExistsEnum for PartsChargeHistoryAlreadyExists
            /// </summary>
            [EnumMember(Value = "PartsChargeHistoryAlreadyExists")]
            PartsChargeHistoryAlreadyExistsEnum = 469,
            
            /// <summary>
            /// Enum PartsNotFoundEnum for PartsNotFound
            /// </summary>
            [EnumMember(Value = "PartsNotFound")]
            PartsNotFoundEnum = 470,
            
            /// <summary>
            /// Enum BulkPartUseIncorrectWorkOrderEnum for BulkPartUseIncorrectWorkOrder
            /// </summary>
            [EnumMember(Value = "BulkPartUseIncorrectWorkOrder")]
            BulkPartUseIncorrectWorkOrderEnum = 471,
            
            /// <summary>
            /// Enum BulkPartsByIdsNotFoundEnum for BulkPartsByIdsNotFound
            /// </summary>
            [EnumMember(Value = "BulkPartsByIdsNotFound")]
            BulkPartsByIdsNotFoundEnum = 472,
            
            /// <summary>
            /// Enum BulkPartsMultipleWosErrorEnum for BulkPartsMultipleWosError
            /// </summary>
            [EnumMember(Value = "BulkPartsMultipleWosError")]
            BulkPartsMultipleWosErrorEnum = 473,
            
            /// <summary>
            /// Enum BulkPartsIncorrectIsRefrigerantParamEnum for BulkPartsIncorrectIsRefrigerantParam
            /// </summary>
            [EnumMember(Value = "BulkPartsIncorrectIsRefrigerantParam")]
            BulkPartsIncorrectIsRefrigerantParamEnum = 474,
            
            /// <summary>
            /// Enum BulkPartsIsRefrigerantCanNotbeChangedEnum for BulkPartsIsRefrigerantCanNotbeChanged
            /// </summary>
            [EnumMember(Value = "BulkPartsIsRefrigerantCanNotbeChanged")]
            BulkPartsIsRefrigerantCanNotbeChangedEnum = 475,
            
            /// <summary>
            /// Enum BulkPartsReasonCodeChangeErrorEnum for BulkPartsReasonCodeChangeError
            /// </summary>
            [EnumMember(Value = "BulkPartsReasonCodeChangeError")]
            BulkPartsReasonCodeChangeErrorEnum = 476,
            
            /// <summary>
            /// Enum BulkPartsInvalidAssetAndReasonCodeParamsEnum for BulkPartsInvalidAssetAndReasonCodeParams
            /// </summary>
            [EnumMember(Value = "BulkPartsInvalidAssetAndReasonCodeParams")]
            BulkPartsInvalidAssetAndReasonCodeParamsEnum = 477,
            
            /// <summary>
            /// Enum BulkPartsInvalidAssetIdEnum for BulkPartsInvalidAssetId
            /// </summary>
            [EnumMember(Value = "BulkPartsInvalidAssetId")]
            BulkPartsInvalidAssetIdEnum = 478,
            
            /// <summary>
            /// Enum BulkPartsInvalidInitialChargeCodeEnum for BulkPartsInvalidInitialChargeCode
            /// </summary>
            [EnumMember(Value = "BulkPartsInvalidInitialChargeCode")]
            BulkPartsInvalidInitialChargeCodeEnum = 479,
            
            /// <summary>
            /// Enum BulkPartsAssetDoesntContainChargeEnum for BulkPartsAssetDoesntContainCharge
            /// </summary>
            [EnumMember(Value = "BulkPartsAssetDoesntContainCharge")]
            BulkPartsAssetDoesntContainChargeEnum = 480,
            
            /// <summary>
            /// Enum BulkPartsIsInventoryFlagErrorEnum for BulkPartsIsInventoryFlagError
            /// </summary>
            [EnumMember(Value = "BulkPartsIsInventoryFlagError")]
            BulkPartsIsInventoryFlagErrorEnum = 481,
            
            /// <summary>
            /// Enum BulkPartsLeakAlreadyInProcessErrorEnum for BulkPartsLeakAlreadyInProcessError
            /// </summary>
            [EnumMember(Value = "BulkPartsLeakAlreadyInProcessError")]
            BulkPartsLeakAlreadyInProcessErrorEnum = 482,
            
            /// <summary>
            /// Enum BulkPartsInvalidDateRangeErrorEnum for BulkPartsInvalidDateRangeError
            /// </summary>
            [EnumMember(Value = "BulkPartsInvalidDateRangeError")]
            BulkPartsInvalidDateRangeErrorEnum = 483,
            
            /// <summary>
            /// Enum BulkPartsMoeNumberRequiredErrorEnum for BulkPartsMoeNumberRequiredError
            /// </summary>
            [EnumMember(Value = "BulkPartsMoeNumberRequiredError")]
            BulkPartsMoeNumberRequiredErrorEnum = 484,
            
            /// <summary>
            /// Enum BulkPartsSystemChargeExceededEnum for BulkPartsSystemChargeExceeded
            /// </summary>
            [EnumMember(Value = "BulkPartsSystemChargeExceeded")]
            BulkPartsSystemChargeExceededEnum = 485,
            
            /// <summary>
            /// Enum BulkRefrigerantuUageBlockedEnum for BulkRefrigerantuUageBlocked
            /// </summary>
            [EnumMember(Value = "BulkRefrigerantuUageBlocked")]
            BulkRefrigerantuUageBlockedEnum = 486,
            
            /// <summary>
            /// Enum BulkIDsNotBeNullEnum for BulkIDsNotBeNull
            /// </summary>
            [EnumMember(Value = "BulkIDsNotBeNull")]
            BulkIDsNotBeNullEnum = 487,
            
            /// <summary>
            /// Enum BulkPartRemovalNotAllowedOnRetrofitRetireWOEnum for BulkPartRemovalNotAllowedOnRetrofitRetireWO
            /// </summary>
            [EnumMember(Value = "BulkPartRemovalNotAllowedOnRetrofitRetireWO")]
            BulkPartRemovalNotAllowedOnRetrofitRetireWOEnum = 488,
            
            /// <summary>
            /// Enum BulkAddPartUsagesNotAllowedAfterRetrofitRetireCreationEnum for BulkAddPartUsagesNotAllowedAfterRetrofitRetireCreation
            /// </summary>
            [EnumMember(Value = "BulkAddPartUsagesNotAllowedAfterRetrofitRetireCreation")]
            BulkAddPartUsagesNotAllowedAfterRetrofitRetireCreationEnum = 489,
            
            /// <summary>
            /// Enum BulkRetrofitRetireRefrigerantUsageReasonCanNotChangedEnum for BulkRetrofitRetireRefrigerantUsageReasonCanNotChanged
            /// </summary>
            [EnumMember(Value = "BulkRetrofitRetireRefrigerantUsageReasonCanNotChanged")]
            BulkRetrofitRetireRefrigerantUsageReasonCanNotChangedEnum = 490,
            
            /// <summary>
            /// Enum BulkInitialChargeSystemExpansionNotAllowedEnum for BulkInitialChargeSystemExpansionNotAllowed
            /// </summary>
            [EnumMember(Value = "BulkInitialChargeSystemExpansionNotAllowed")]
            BulkInitialChargeSystemExpansionNotAllowedEnum = 491,
            
            /// <summary>
            /// Enum BulkInventoryPartIdCanNotBeChangedEnum for BulkInventoryPartIdCanNotBeChanged
            /// </summary>
            [EnumMember(Value = "BulkInventoryPartIdCanNotBeChanged")]
            BulkInventoryPartIdCanNotBeChangedEnum = 492,
            
            /// <summary>
            /// Enum BulkInventoryLocationIdCanNotBeChangedEnum for BulkInventoryLocationIdCanNotBeChanged
            /// </summary>
            [EnumMember(Value = "BulkInventoryLocationIdCanNotBeChanged")]
            BulkInventoryLocationIdCanNotBeChangedEnum = 493,
            
            /// <summary>
            /// Enum BulkPartsDuplicatedRequestEnum for BulkPartsDuplicatedRequest
            /// </summary>
            [EnumMember(Value = "BulkPartsDuplicatedRequest")]
            BulkPartsDuplicatedRequestEnum = 494,
            
            /// <summary>
            /// Enum BulkChangePartsIncorrectRefrigerantTypeEnum for BulkChangePartsIncorrectRefrigerantType
            /// </summary>
            [EnumMember(Value = "BulkChangePartsIncorrectRefrigerantType")]
            BulkChangePartsIncorrectRefrigerantTypeEnum = 495,
            
            /// <summary>
            /// Enum BulkPartsWorkOrderInProcessingEnum for BulkPartsWorkOrderInProcessing
            /// </summary>
            [EnumMember(Value = "BulkPartsWorkOrderInProcessing")]
            BulkPartsWorkOrderInProcessingEnum = 496,
            
            /// <summary>
            /// Enum BulkPartsRetroRetireIsInProgressOnThisDateEnum for BulkPartsRetroRetireIsInProgressOnThisDate
            /// </summary>
            [EnumMember(Value = "BulkPartsRetroRetireIsInProgressOnThisDate")]
            BulkPartsRetroRetireIsInProgressOnThisDateEnum = 497,
            
            /// <summary>
            /// Enum BulkPartsCanNotAttachRefrigerantUsageToPlanLeakRecordEnum for BulkPartsCanNotAttachRefrigerantUsageToPlanLeakRecord
            /// </summary>
            [EnumMember(Value = "BulkPartsCanNotAttachRefrigerantUsageToPlanLeakRecord")]
            BulkPartsCanNotAttachRefrigerantUsageToPlanLeakRecordEnum = 498,
            
            /// <summary>
            /// Enum RetrofitRetireCanNotBeRemovedEnum for RetrofitRetireCanNotBeRemoved
            /// </summary>
            [EnumMember(Value = "RetrofitRetireCanNotBeRemoved")]
            RetrofitRetireCanNotBeRemovedEnum = 499,
            
            /// <summary>
            /// Enum RetroRetirePartsCantbeChangedEnum for RetroRetirePartsCantbeChanged
            /// </summary>
            [EnumMember(Value = "RetroRetirePartsCantbeChanged")]
            RetroRetirePartsCantbeChangedEnum = 500,
            
            /// <summary>
            /// Enum BulkPartsInventoryApiFailedEnum for BulkPartsInventoryApiFailed
            /// </summary>
            [EnumMember(Value = "BulkPartsInventoryApiFailed")]
            BulkPartsInventoryApiFailedEnum = 501,
            
            /// <summary>
            /// Enum BadNotificationSubscriptionEventTypeEnum for BadNotificationSubscriptionEventType
            /// </summary>
            [EnumMember(Value = "BadNotificationSubscriptionEventType")]
            BadNotificationSubscriptionEventTypeEnum = 502,
            
            /// <summary>
            /// Enum RefrigerantUseDateOutOfTheLeakProcessDateRangeEnum for RefrigerantUseDateOutOfTheLeakProcessDateRange
            /// </summary>
            [EnumMember(Value = "RefrigerantUseDateOutOfTheLeakProcessDateRange")]
            RefrigerantUseDateOutOfTheLeakProcessDateRangeEnum = 503,
            
            /// <summary>
            /// Enum InventoryUsageNotAllowedOnRTrackingConnectedSubAndSubcontractorsEnum for InventoryUsageNotAllowedOnRTrackingConnectedSubAndSubcontractors
            /// </summary>
            [EnumMember(Value = "InventoryUsageNotAllowedOnRTrackingConnectedSubAndSubcontractors")]
            InventoryUsageNotAllowedOnRTrackingConnectedSubAndSubcontractorsEnum = 504,
            
            /// <summary>
            /// Enum BulkExternalWoCurrentlyDoesntExistsEnum for BulkExternalWoCurrentlyDoesntExists
            /// </summary>
            [EnumMember(Value = "BulkExternalWoCurrentlyDoesntExists")]
            BulkExternalWoCurrentlyDoesntExistsEnum = 505,
            
            /// <summary>
            /// Enum BulkConnectorOnlyExternalClientAssetsCanBeProcessedEnum for BulkConnectorOnlyExternalClientAssetsCanBeProcessed
            /// </summary>
            [EnumMember(Value = "BulkConnectorOnlyExternalClientAssetsCanBeProcessed")]
            BulkConnectorOnlyExternalClientAssetsCanBeProcessedEnum = 506,
            
            /// <summary>
            /// Enum BulkConnectorOnlyClientAssetsCouldBeProcessedEnum for BulkConnectorOnlyClientAssetsCouldBeProcessed
            /// </summary>
            [EnumMember(Value = "BulkConnectorOnlyClientAssetsCouldBeProcessed")]
            BulkConnectorOnlyClientAssetsCouldBeProcessedEnum = 507,
            
            /// <summary>
            /// Enum LeakRecordHasWrongDateValueEnum for LeakRecordHasWrongDateValue
            /// </summary>
            [EnumMember(Value = "LeakRecordHasWrongDateValue")]
            LeakRecordHasWrongDateValueEnum = 508,
            
            /// <summary>
            /// Enum HasUncompliedLeakRecordInAnoutherWOEnum for HasUncompliedLeakRecordInAnoutherWO
            /// </summary>
            [EnumMember(Value = "HasUncompliedLeakRecordInAnoutherWO")]
            HasUncompliedLeakRecordInAnoutherWOEnum = 509,
            
            /// <summary>
            /// Enum HasUncompletedWOOnAnotherLeakRecordEnum for HasUncompletedWOOnAnotherLeakRecord
            /// </summary>
            [EnumMember(Value = "HasUncompletedWOOnAnotherLeakRecord")]
            HasUncompletedWOOnAnotherLeakRecordEnum = 510,
            
            /// <summary>
            /// Enum OnlyOneAssetWorkOrderPairEnum for OnlyOneAssetWorkOrderPair
            /// </summary>
            [EnumMember(Value = "OnlyOneAssetWorkOrderPair")]
            OnlyOneAssetWorkOrderPairEnum = 511,
            
            /// <summary>
            /// Enum OneLeakRecordMustBeOnCompletedWOEnum for OneLeakRecordMustBeOnCompletedWO
            /// </summary>
            [EnumMember(Value = "OneLeakRecordMustBeOnCompletedWO")]
            OneLeakRecordMustBeOnCompletedWOEnum = 512,
            
            /// <summary>
            /// Enum LeakRecordNotFaundEnum for LeakRecordNotFaund
            /// </summary>
            [EnumMember(Value = "LeakRecordNotFaund")]
            LeakRecordNotFaundEnum = 513,
            
            /// <summary>
            /// Enum AssetIDWoIdIsRequiredEnum for AssetIDWoIdIsRequired
            /// </summary>
            [EnumMember(Value = "AssetIDWoIdIsRequired")]
            AssetIDWoIdIsRequiredEnum = 514,
            
            /// <summary>
            /// Enum BulkPartsReasonCodeRetrofitEnum for BulkPartsReasonCodeRetrofit
            /// </summary>
            [EnumMember(Value = "BulkPartsReasonCodeRetrofit")]
            BulkPartsReasonCodeRetrofitEnum = 515,
            
            /// <summary>
            /// Enum MlpImportLevelErrorEnum for MlpImportLevelError
            /// </summary>
            [EnumMember(Value = "MlpImportLevelError")]
            MlpImportLevelErrorEnum = 516,
            
            /// <summary>
            /// Enum UpdateMlpUserLevelErrorEnum for UpdateMlpUserLevelError
            /// </summary>
            [EnumMember(Value = "UpdateMlpUserLevelError")]
            UpdateMlpUserLevelErrorEnum = 517,
            
            /// <summary>
            /// Enum InvalidHolidayNameEnum for InvalidHolidayName
            /// </summary>
            [EnumMember(Value = "InvalidHolidayName")]
            InvalidHolidayNameEnum = 518,
            
            /// <summary>
            /// Enum DuplicateHolidayNameEnum for DuplicateHolidayName
            /// </summary>
            [EnumMember(Value = "DuplicateHolidayName")]
            DuplicateHolidayNameEnum = 519,
            
            /// <summary>
            /// Enum HolidaysDeleteFailedEnum for HolidaysDeleteFailed
            /// </summary>
            [EnumMember(Value = "HolidaysDeleteFailed")]
            HolidaysDeleteFailedEnum = 520,
            
            /// <summary>
            /// Enum HolidaysExcludeInsertFailedEnum for HolidaysExcludeInsertFailed
            /// </summary>
            [EnumMember(Value = "HolidaysExcludeInsertFailed")]
            HolidaysExcludeInsertFailedEnum = 521,
            
            /// <summary>
            /// Enum HolidaysUpdateFailedEnum for HolidaysUpdateFailed
            /// </summary>
            [EnumMember(Value = "HolidaysUpdateFailed")]
            HolidaysUpdateFailedEnum = 522,
            
            /// <summary>
            /// Enum HolidaysInsertFailedEnum for HolidaysInsertFailed
            /// </summary>
            [EnumMember(Value = "HolidaysInsertFailed")]
            HolidaysInsertFailedEnum = 523,
            
            /// <summary>
            /// Enum HolidaysExcludeDeleteFailedEnum for HolidaysExcludeDeleteFailed
            /// </summary>
            [EnumMember(Value = "HolidaysExcludeDeleteFailed")]
            HolidaysExcludeDeleteFailedEnum = 524,
            
            /// <summary>
            /// Enum BusinessHoursDeleteFailedEnum for BusinessHoursDeleteFailed
            /// </summary>
            [EnumMember(Value = "BusinessHoursDeleteFailed")]
            BusinessHoursDeleteFailedEnum = 525,
            
            /// <summary>
            /// Enum BusinessHoursUpdateFailedEnum for BusinessHoursUpdateFailed
            /// </summary>
            [EnumMember(Value = "BusinessHoursUpdateFailed")]
            BusinessHoursUpdateFailedEnum = 526,
            
            /// <summary>
            /// Enum BusinessHoursInsertFailedEnum for BusinessHoursInsertFailed
            /// </summary>
            [EnumMember(Value = "BusinessHoursInsertFailed")]
            BusinessHoursInsertFailedEnum = 527,
            
            /// <summary>
            /// Enum InvalidTimeEnum for InvalidTime
            /// </summary>
            [EnumMember(Value = "InvalidTime")]
            InvalidTimeEnum = 528,
            
            /// <summary>
            /// Enum HolidayForDeleteNotFoundEnum for HolidayForDeleteNotFound
            /// </summary>
            [EnumMember(Value = "HolidayForDeleteNotFound")]
            HolidayForDeleteNotFoundEnum = 529,
            
            /// <summary>
            /// Enum InvalidChecklistIdEnum for InvalidChecklistId
            /// </summary>
            [EnumMember(Value = "InvalidChecklistId")]
            InvalidChecklistIdEnum = 530,
            
            /// <summary>
            /// Enum NoLinkBetweenSubscriberAndProviderEnum for NoLinkBetweenSubscriberAndProvider
            /// </summary>
            [EnumMember(Value = "NoLinkBetweenSubscriberAndProvider")]
            NoLinkBetweenSubscriberAndProviderEnum = 531,
            
            /// <summary>
            /// Enum WorkforceCreateContractorErrorEnum for WorkforceCreateContractorError
            /// </summary>
            [EnumMember(Value = "WorkforceCreateContractorError")]
            WorkforceCreateContractorErrorEnum = 532,
            
            /// <summary>
            /// Enum InvalidCertificateIdEnum for InvalidCertificateId
            /// </summary>
            [EnumMember(Value = "InvalidCertificateId")]
            InvalidCertificateIdEnum = 533,
            
            /// <summary>
            /// Enum MaxThresholdExceededEnum for MaxThresholdExceeded
            /// </summary>
            [EnumMember(Value = "MaxThresholdExceeded")]
            MaxThresholdExceededEnum = 534,
            
            /// <summary>
            /// Enum MaxTriggerRateExceededEnum for MaxTriggerRateExceeded
            /// </summary>
            [EnumMember(Value = "MaxTriggerRateExceeded")]
            MaxTriggerRateExceededEnum = 535,
            
            /// <summary>
            /// Enum LeakPriorityIsRequiredEnum for LeakPriorityIsRequired
            /// </summary>
            [EnumMember(Value = "LeakPriorityIsRequired")]
            LeakPriorityIsRequiredEnum = 536,
            
            /// <summary>
            /// Enum MissingRTSettingsEnum for MissingRTSettings
            /// </summary>
            [EnumMember(Value = "MissingRTSettings")]
            MissingRTSettingsEnum = 537,
            
            /// <summary>
            /// Enum ResolutionCodesLimitExceededEnum for ResolutionCodesLimitExceeded
            /// </summary>
            [EnumMember(Value = "ResolutionCodesLimitExceeded")]
            ResolutionCodesLimitExceededEnum = 538,
            
            /// <summary>
            /// Enum ResolutionCodesAreRequiredEnum for ResolutionCodesAreRequired
            /// </summary>
            [EnumMember(Value = "ResolutionCodesAreRequired")]
            ResolutionCodesAreRequiredEnum = 539,
            
            /// <summary>
            /// Enum RootCauseIsRequiredEnum for RootCauseIsRequired
            /// </summary>
            [EnumMember(Value = "RootCauseIsRequired")]
            RootCauseIsRequiredEnum = 540,
            
            /// <summary>
            /// Enum RootCauseTextIsRequiredEnum for RootCauseTextIsRequired
            /// </summary>
            [EnumMember(Value = "RootCauseTextIsRequired")]
            RootCauseTextIsRequiredEnum = 541,
            
            /// <summary>
            /// Enum NoAccessToSetRootCauseTextEnum for NoAccessToSetRootCauseText
            /// </summary>
            [EnumMember(Value = "NoAccessToSetRootCauseText")]
            NoAccessToSetRootCauseTextEnum = 542,
            
            /// <summary>
            /// Enum RootCauseTextMaxLengthExceededEnum for RootCauseTextMaxLengthExceeded
            /// </summary>
            [EnumMember(Value = "RootCauseTextMaxLengthExceeded")]
            RootCauseTextMaxLengthExceededEnum = 543,
            
            /// <summary>
            /// Enum ResolutionCodeTextIsRequiredEnum for ResolutionCodeTextIsRequired
            /// </summary>
            [EnumMember(Value = "ResolutionCodeTextIsRequired")]
            ResolutionCodeTextIsRequiredEnum = 544,
            
            /// <summary>
            /// Enum NoAccessToSetResolutionCodeTextEnum for NoAccessToSetResolutionCodeText
            /// </summary>
            [EnumMember(Value = "NoAccessToSetResolutionCodeText")]
            NoAccessToSetResolutionCodeTextEnum = 545,
            
            /// <summary>
            /// Enum ResolutionCodeTextMaxLengthExceededEnum for ResolutionCodeTextMaxLengthExceeded
            /// </summary>
            [EnumMember(Value = "ResolutionCodeTextMaxLengthExceeded")]
            ResolutionCodeTextMaxLengthExceededEnum = 546,
            
            /// <summary>
            /// Enum ResolutionCodeTextMustBeUniqueEnum for ResolutionCodeTextMustBeUnique
            /// </summary>
            [EnumMember(Value = "ResolutionCodeTextMustBeUnique")]
            ResolutionCodeTextMustBeUniqueEnum = 547,
            
            /// <summary>
            /// Enum ResolutionCodeWithoutFreeTextMustBeUniqueEnum for ResolutionCodeWithoutFreeTextMustBeUnique
            /// </summary>
            [EnumMember(Value = "ResolutionCodeWithoutFreeTextMustBeUnique")]
            ResolutionCodeWithoutFreeTextMustBeUniqueEnum = 548,
            
            /// <summary>
            /// Enum PendingResCodesStatusCannotBeChangedToInvoiceableBySubscriberEnum for PendingResCodesStatusCannotBeChangedToInvoiceableBySubscriber
            /// </summary>
            [EnumMember(Value = "PendingResCodesStatusCannotBeChangedToInvoiceableBySubscriber")]
            PendingResCodesStatusCannotBeChangedToInvoiceableBySubscriberEnum = 549,
            
            /// <summary>
            /// Enum ResolutionAndRootCauseCodesAreRequiredToMoveToInvoiceableStatusByProviderEnum for ResolutionAndRootCauseCodesAreRequiredToMoveToInvoiceableStatusByProvider
            /// </summary>
            [EnumMember(Value = "ResolutionAndRootCauseCodesAreRequiredToMoveToInvoiceableStatusByProvider")]
            ResolutionAndRootCauseCodesAreRequiredToMoveToInvoiceableStatusByProviderEnum = 550,
            
            /// <summary>
            /// Enum AssetCategoriesLimitExceededEnum for AssetCategoriesLimitExceeded
            /// </summary>
            [EnumMember(Value = "AssetCategoriesLimitExceeded")]
            AssetCategoriesLimitExceededEnum = 551,
            
            /// <summary>
            /// Enum NoAccessToAssetCategoriesEnum for NoAccessToAssetCategories
            /// </summary>
            [EnumMember(Value = "NoAccessToAssetCategories")]
            NoAccessToAssetCategoriesEnum = 552,
            
            /// <summary>
            /// Enum AssetCategoriesAreRequiredEnum for AssetCategoriesAreRequired
            /// </summary>
            [EnumMember(Value = "AssetCategoriesAreRequired")]
            AssetCategoriesAreRequiredEnum = 553,
            
            /// <summary>
            /// Enum InvalidAssetCategoryIdEnum for InvalidAssetCategoryId
            /// </summary>
            [EnumMember(Value = "InvalidAssetCategoryId")]
            InvalidAssetCategoryIdEnum = 554,
            
            /// <summary>
            /// Enum NoAssetCategoriesOnWorkOrderEnum for NoAssetCategoriesOnWorkOrder
            /// </summary>
            [EnumMember(Value = "NoAssetCategoriesOnWorkOrder")]
            NoAssetCategoriesOnWorkOrderEnum = 555,
            
            /// <summary>
            /// Enum RootCausesMustBeForAllWorkOrderAssetCategoriesEnum for RootCausesMustBeForAllWorkOrderAssetCategories
            /// </summary>
            [EnumMember(Value = "RootCausesMustBeForAllWorkOrderAssetCategories")]
            RootCausesMustBeForAllWorkOrderAssetCategoriesEnum = 556,
            
            /// <summary>
            /// Enum RootCauseTextMustBeUniqueEnum for RootCauseTextMustBeUnique
            /// </summary>
            [EnumMember(Value = "RootCauseTextMustBeUnique")]
            RootCauseTextMustBeUniqueEnum = 557,
            
            /// <summary>
            /// Enum AssetCategoryIsRequiredEnum for AssetCategoryIsRequired
            /// </summary>
            [EnumMember(Value = "AssetCategoryIsRequired")]
            AssetCategoryIsRequiredEnum = 558,
            
            /// <summary>
            /// Enum MultipleRootCausesMethodMustBeUsedEnum for MultipleRootCausesMethodMustBeUsed
            /// </summary>
            [EnumMember(Value = "MultipleRootCausesMethodMustBeUsed")]
            MultipleRootCausesMethodMustBeUsedEnum = 559,
            
            /// <summary>
            /// Enum ResolutionCodesMustBeForAllWorkOrderAssetCategoriesEnum for ResolutionCodesMustBeForAllWorkOrderAssetCategories
            /// </summary>
            [EnumMember(Value = "ResolutionCodesMustBeForAllWorkOrderAssetCategories")]
            ResolutionCodesMustBeForAllWorkOrderAssetCategoriesEnum = 560,
            
            /// <summary>
            /// Enum UnknownStoreIdEnum for UnknownStoreId
            /// </summary>
            [EnumMember(Value = "UnknownStoreId")]
            UnknownStoreIdEnum = 561,
            
            /// <summary>
            /// Enum UsesRefrigerantAttributeNotChangedEnum for UsesRefrigerantAttributeNotChanged
            /// </summary>
            [EnumMember(Value = "UsesRefrigerantAttributeNotChanged")]
            UsesRefrigerantAttributeNotChangedEnum = 562,
            
            /// <summary>
            /// Enum AssetTagDuplicateEnum for AssetTagDuplicate
            /// </summary>
            [EnumMember(Value = "AssetTagDuplicate")]
            AssetTagDuplicateEnum = 563,
            
            /// <summary>
            /// Enum AssetTagIdDuplicateEnum for AssetTagIdDuplicate
            /// </summary>
            [EnumMember(Value = "AssetTagIdDuplicate")]
            AssetTagIdDuplicateEnum = 564,
            
            /// <summary>
            /// Enum UnknownEquipmentTypeEnum for UnknownEquipmentType
            /// </summary>
            [EnumMember(Value = "UnknownEquipmentType")]
            UnknownEquipmentTypeEnum = 565,
            
            /// <summary>
            /// Enum ParentIdInOtherLocationEnum for ParentIdInOtherLocation
            /// </summary>
            [EnumMember(Value = "ParentIdInOtherLocation")]
            ParentIdInOtherLocationEnum = 566,
            
            /// <summary>
            /// Enum UnknownBrandNameEnum for UnknownBrandName
            /// </summary>
            [EnumMember(Value = "UnknownBrandName")]
            UnknownBrandNameEnum = 567,
            
            /// <summary>
            /// Enum CARBRequiredManufacturedDateEnum for CARBRequiredManufacturedDate
            /// </summary>
            [EnumMember(Value = "CARBRequiredManufacturedDate")]
            CARBRequiredManufacturedDateEnum = 568,
            
            /// <summary>
            /// Enum CARBRequiredInstallDateEnum for CARBRequiredInstallDate
            /// </summary>
            [EnumMember(Value = "CARBRequiredInstallDate")]
            CARBRequiredInstallDateEnum = 569,
            
            /// <summary>
            /// Enum TradeNotFoundEnum for TradeNotFound
            /// </summary>
            [EnumMember(Value = "TradeNotFound")]
            TradeNotFoundEnum = 570,
            
            /// <summary>
            /// Enum AssetDoesntExistEnum for AssetDoesntExist
            /// </summary>
            [EnumMember(Value = "AssetDoesntExist")]
            AssetDoesntExistEnum = 571,
            
            /// <summary>
            /// Enum AssetIsNotRefrigerantEnum for AssetIsNotRefrigerant
            /// </summary>
            [EnumMember(Value = "AssetIsNotRefrigerant")]
            AssetIsNotRefrigerantEnum = 572,
            
            /// <summary>
            /// Enum AssetCantContainRefrigerantEnum for AssetCantContainRefrigerant
            /// </summary>
            [EnumMember(Value = "AssetCantContainRefrigerant")]
            AssetCantContainRefrigerantEnum = 573,
            
            /// <summary>
            /// Enum OnlyRackAssetsContainingCircuitsEnum for OnlyRackAssetsContainingCircuits
            /// </summary>
            [EnumMember(Value = "OnlyRackAssetsContainingCircuits")]
            OnlyRackAssetsContainingCircuitsEnum = 574,
            
            /// <summary>
            /// Enum ConnectorAssetTagIdCanNotBeChangedEnum for ConnectorAssetTagIdCanNotBeChanged
            /// </summary>
            [EnumMember(Value = "ConnectorAssetTagIdCanNotBeChanged")]
            ConnectorAssetTagIdCanNotBeChangedEnum = 575,
            
            /// <summary>
            /// Enum ConnectorAssetLocationIdCanNotBeChangedEnum for ConnectorAssetLocationIdCanNotBeChanged
            /// </summary>
            [EnumMember(Value = "ConnectorAssetLocationIdCanNotBeChanged")]
            ConnectorAssetLocationIdCanNotBeChangedEnum = 576,
            
            /// <summary>
            /// Enum AssetTagCantBeUpdatedEnum for AssetTagCantBeUpdated
            /// </summary>
            [EnumMember(Value = "AssetTagCantBeUpdated")]
            AssetTagCantBeUpdatedEnum = 577,
            
            /// <summary>
            /// Enum AssetTypeIsNotonfiguredToManageRTAssetsEnum for AssetTypeIsNotСonfiguredToManageRTAssets
            /// </summary>
            [EnumMember(Value = "AssetTypeIsNotСonfiguredToManageRTAssets")]
            AssetTypeIsNotonfiguredToManageRTAssetsEnum = 578,
            
            /// <summary>
            /// Enum RefrigerantTrackingNotAvailableForLocationEnum for RefrigerantTrackingNotAvailableForLocation
            /// </summary>
            [EnumMember(Value = "RefrigerantTrackingNotAvailableForLocation")]
            RefrigerantTrackingNotAvailableForLocationEnum = 579,
            
            /// <summary>
            /// Enum UsesRefrigerantRequiredByAssetTypeSettingsEnum for UsesRefrigerantRequiredByAssetTypeSettings
            /// </summary>
            [EnumMember(Value = "UsesRefrigerantRequiredByAssetTypeSettings")]
            UsesRefrigerantRequiredByAssetTypeSettingsEnum = 580,
            
            /// <summary>
            /// Enum AssetLocationTradeDoesntCorrespondToWOEnum for AssetLocationTradeDoesntCorrespondToWO
            /// </summary>
            [EnumMember(Value = "AssetLocationTradeDoesntCorrespondToWO")]
            AssetLocationTradeDoesntCorrespondToWOEnum = 581,
            
            /// <summary>
            /// Enum AssetLocationSelectedPMmoduleEnum for AssetLocationSelectedPMmodule
            /// </summary>
            [EnumMember(Value = "AssetLocationSelectedPMmodule")]
            AssetLocationSelectedPMmoduleEnum = 582,
            
            /// <summary>
            /// Enum UpdateAssetRepairStatusValidationEnum for UpdateAssetRepairStatusValidation
            /// </summary>
            [EnumMember(Value = "UpdateAssetRepairStatusValidation")]
            UpdateAssetRepairStatusValidationEnum = 583,
            
            /// <summary>
            /// Enum HasCircuitsCantBeChangeEnum for HasCircuitsCantBeChange
            /// </summary>
            [EnumMember(Value = "HasCircuitsCantBeChange")]
            HasCircuitsCantBeChangeEnum = 584,
            
            /// <summary>
            /// Enum HasComponentsCantBeChangeEnum for HasComponentsCantBeChange
            /// </summary>
            [EnumMember(Value = "HasComponentsCantBeChange")]
            HasComponentsCantBeChangeEnum = 585,
            
            /// <summary>
            /// Enum CircuitCanNotBeConnectedToCircuitEnum for CircuitCanNotBeConnectedToCircuit
            /// </summary>
            [EnumMember(Value = "CircuitCanNotBeConnectedToCircuit")]
            CircuitCanNotBeConnectedToCircuitEnum = 586,
            
            /// <summary>
            /// Enum RTCircuitCanNotBeConnectedToNonRTAssetEnum for RTCircuitCanNotBeConnectedToNonRTAsset
            /// </summary>
            [EnumMember(Value = "RTCircuitCanNotBeConnectedToNonRTAsset")]
            RTCircuitCanNotBeConnectedToNonRTAssetEnum = 587,
            
            /// <summary>
            /// Enum RTComponentCanNotBeConnectedToNonRTAssetEnum for RTComponentCanNotBeConnectedToNonRTAsset
            /// </summary>
            [EnumMember(Value = "RTComponentCanNotBeConnectedToNonRTAsset")]
            RTComponentCanNotBeConnectedToNonRTAssetEnum = 588,
            
            /// <summary>
            /// Enum ComponentCanNotBeConnectedToComponentEnum for ComponentCanNotBeConnectedToComponent
            /// </summary>
            [EnumMember(Value = "ComponentCanNotBeConnectedToComponent")]
            ComponentCanNotBeConnectedToComponentEnum = 589,
            
            /// <summary>
            /// Enum NonRTComponentCanNotBeConnectedToRtAssetEnum for NonRTComponentCanNotBeConnectedToRtAsset
            /// </summary>
            [EnumMember(Value = "NonRTComponentCanNotBeConnectedToRtAsset")]
            NonRTComponentCanNotBeConnectedToRtAssetEnum = 590,
            
            /// <summary>
            /// Enum NonRTCircuitCanNotBeConnectedToRtAssetEnum for NonRTCircuitCanNotBeConnectedToRtAsset
            /// </summary>
            [EnumMember(Value = "NonRTCircuitCanNotBeConnectedToRtAsset")]
            NonRTCircuitCanNotBeConnectedToRtAssetEnum = 591,
            
            /// <summary>
            /// Enum ComponentCanNotBeConnectedToCircuitEnum for ComponentCanNotBeConnectedToCircuit
            /// </summary>
            [EnumMember(Value = "ComponentCanNotBeConnectedToCircuit")]
            ComponentCanNotBeConnectedToCircuitEnum = 592,
            
            /// <summary>
            /// Enum ParentAssetShouldHaveEitherComponentsNorCircuitsEnum for ParentAssetShouldHaveEitherComponentsNorCircuits
            /// </summary>
            [EnumMember(Value = "ParentAssetShouldHaveEitherComponentsNorCircuits")]
            ParentAssetShouldHaveEitherComponentsNorCircuitsEnum = 593,
            
            /// <summary>
            /// Enum ParentAssetCantHaveComponentsEnum for ParentAssetCantHaveComponents
            /// </summary>
            [EnumMember(Value = "ParentAssetCantHaveComponents")]
            ParentAssetCantHaveComponentsEnum = 594,
            
            /// <summary>
            /// Enum ParentAssetCantHaveCircuitsEnum for ParentAssetCantHaveCircuits
            /// </summary>
            [EnumMember(Value = "ParentAssetCantHaveCircuits")]
            ParentAssetCantHaveCircuitsEnum = 595,
            
            /// <summary>
            /// Enum MultipleAssetsFoundForTheRequestedTagIdEnum for MultipleAssetsFoundForTheRequestedTagId
            /// </summary>
            [EnumMember(Value = "MultipleAssetsFoundForTheRequestedTagId")]
            MultipleAssetsFoundForTheRequestedTagIdEnum = 596,
            
            /// <summary>
            /// Enum DeclineWorkOrderFailedEnum for DeclineWorkOrderFailed
            /// </summary>
            [EnumMember(Value = "DeclineWorkOrderFailed")]
            DeclineWorkOrderFailedEnum = 597,
            
            /// <summary>
            /// Enum AcceptWorkOrderFailedEnum for AcceptWorkOrderFailed
            /// </summary>
            [EnumMember(Value = "AcceptWorkOrderFailed")]
            AcceptWorkOrderFailedEnum = 598,
            
            /// <summary>
            /// Enum WorkOrderWasAcceptedEnum for WorkOrderWasAccepted
            /// </summary>
            [EnumMember(Value = "WorkOrderWasAccepted")]
            WorkOrderWasAcceptedEnum = 599,
            
            /// <summary>
            /// Enum SaveMliAuditReportSettingEnum for SaveMliAuditReportSetting
            /// </summary>
            [EnumMember(Value = "SaveMliAuditReportSetting")]
            SaveMliAuditReportSettingEnum = 600,
            
            /// <summary>
            /// Enum GetMliAuditReportSettingEnum for GetMliAuditReportSetting
            /// </summary>
            [EnumMember(Value = "GetMliAuditReportSetting")]
            GetMliAuditReportSettingEnum = 601,
            
            /// <summary>
            /// Enum SaveMliAuditReportResultEnum for SaveMliAuditReportResult
            /// </summary>
            [EnumMember(Value = "SaveMliAuditReportResult")]
            SaveMliAuditReportResultEnum = 602,
            
            /// <summary>
            /// Enum SaveMliAuditReportSendEmailStatusEnum for SaveMliAuditReportSendEmailStatus
            /// </summary>
            [EnumMember(Value = "SaveMliAuditReportSendEmailStatus")]
            SaveMliAuditReportSendEmailStatusEnum = 603,
            
            /// <summary>
            /// Enum SaveMliAuditReportFilePathEnum for SaveMliAuditReportFilePath
            /// </summary>
            [EnumMember(Value = "SaveMliAuditReportFilePath")]
            SaveMliAuditReportFilePathEnum = 604,
            
            /// <summary>
            /// Enum GetSubscribersEnabledScheduleEnum for GetSubscribersEnabledSchedule
            /// </summary>
            [EnumMember(Value = "GetSubscribersEnabledSchedule")]
            GetSubscribersEnabledScheduleEnum = 605,
            
            /// <summary>
            /// Enum SaveMliAuditInfoErrorEnum for SaveMliAuditInfoError
            /// </summary>
            [EnumMember(Value = "SaveMliAuditInfoError")]
            SaveMliAuditInfoErrorEnum = 606,
            
            /// <summary>
            /// Enum TaxValidationAddNewCompanySettingsErrorEnum for TaxValidationAddNewCompanySettingsError
            /// </summary>
            [EnumMember(Value = "TaxValidationAddNewCompanySettingsError")]
            TaxValidationAddNewCompanySettingsErrorEnum = 607,
            
            /// <summary>
            /// Enum TaxValidationUpdateCompanySettingsErrorEnum for TaxValidationUpdateCompanySettingsError
            /// </summary>
            [EnumMember(Value = "TaxValidationUpdateCompanySettingsError")]
            TaxValidationUpdateCompanySettingsErrorEnum = 608,
            
            /// <summary>
            /// Enum ProjectAssociationErrorEnum for ProjectAssociationError
            /// </summary>
            [EnumMember(Value = "ProjectAssociationError")]
            ProjectAssociationErrorEnum = 609,
            
            /// <summary>
            /// Enum GetProjectsInvoiceAmountsErrorEnum for GetProjectsInvoiceAmountsError
            /// </summary>
            [EnumMember(Value = "GetProjectsInvoiceAmountsError")]
            GetProjectsInvoiceAmountsErrorEnum = 610,
            
            /// <summary>
            /// Enum TaxCodeNotUniqueErrorEnum for TaxCodeNotUniqueError
            /// </summary>
            [EnumMember(Value = "TaxCodeNotUniqueError")]
            TaxCodeNotUniqueErrorEnum = 611,
            
            /// <summary>
            /// Enum FieldLengthIsTooLongErrorEnum for FieldLengthIsTooLongError
            /// </summary>
            [EnumMember(Value = "FieldLengthIsTooLongError")]
            FieldLengthIsTooLongErrorEnum = 612,
            
            /// <summary>
            /// Enum SetTaxCodesBulkErrorEnum for SetTaxCodesBulkError
            /// </summary>
            [EnumMember(Value = "SetTaxCodesBulkError")]
            SetTaxCodesBulkErrorEnum = 613,
            
            /// <summary>
            /// Enum InvoiceAdditionalApprovalCodeValueErrorEnum for InvoiceAdditionalApprovalCodeValueError
            /// </summary>
            [EnumMember(Value = "InvoiceAdditionalApprovalCodeValueError")]
            InvoiceAdditionalApprovalCodeValueErrorEnum = 614,
            
            /// <summary>
            /// Enum BulkUpdateInvoicePaymentErrorEnum for BulkUpdateInvoicePaymentError
            /// </summary>
            [EnumMember(Value = "BulkUpdateInvoicePaymentError")]
            BulkUpdateInvoicePaymentErrorEnum = 615,
            
            /// <summary>
            /// Enum ContractServiceExistEnum for ContractServiceExist
            /// </summary>
            [EnumMember(Value = "ContractServiceExist")]
            ContractServiceExistEnum = 616,
            
            /// <summary>
            /// Enum ContractServiceCantChangeTradeEnum for ContractServiceCantChangeTrade
            /// </summary>
            [EnumMember(Value = "ContractServiceCantChangeTrade")]
            ContractServiceCantChangeTradeEnum = 617,
            
            /// <summary>
            /// Enum ContractServiceCantChangeCategoryEnum for ContractServiceCantChangeCategory
            /// </summary>
            [EnumMember(Value = "ContractServiceCantChangeCategory")]
            ContractServiceCantChangeCategoryEnum = 618,
            
            /// <summary>
            /// Enum ContractServiceCantChangeProviderEnum for ContractServiceCantChangeProvider
            /// </summary>
            [EnumMember(Value = "ContractServiceCantChangeProvider")]
            ContractServiceCantChangeProviderEnum = 619,
            
            /// <summary>
            /// Enum ContractServicePMServiceCantChangeTradeEnum for ContractServicePMServiceCantChangeTrade
            /// </summary>
            [EnumMember(Value = "ContractServicePMServiceCantChangeTrade")]
            ContractServicePMServiceCantChangeTradeEnum = 620,
            
            /// <summary>
            /// Enum ContractServicePMServiceCantChangeCategoryEnum for ContractServicePMServiceCantChangeCategory
            /// </summary>
            [EnumMember(Value = "ContractServicePMServiceCantChangeCategory")]
            ContractServicePMServiceCantChangeCategoryEnum = 621,
            
            /// <summary>
            /// Enum WorkRequestDescriptionIsRequiredEnum for WorkRequestDescriptionIsRequired
            /// </summary>
            [EnumMember(Value = "WorkRequestDescriptionIsRequired")]
            WorkRequestDescriptionIsRequiredEnum = 622,
            
            /// <summary>
            /// Enum WorkRequestCallDateIsRequiredEnum for WorkRequestCallDateIsRequired
            /// </summary>
            [EnumMember(Value = "WorkRequestCallDateIsRequired")]
            WorkRequestCallDateIsRequiredEnum = 623,
            
            /// <summary>
            /// Enum WorkRequestIssueIsRequiredEnum for WorkRequestIssueIsRequired
            /// </summary>
            [EnumMember(Value = "WorkRequestIssueIsRequired")]
            WorkRequestIssueIsRequiredEnum = 624,
            
            /// <summary>
            /// Enum WorkRequestCallDateHasWrongFormatEnum for WorkRequestCallDateHasWrongFormat
            /// </summary>
            [EnumMember(Value = "WorkRequestCallDateHasWrongFormat")]
            WorkRequestCallDateHasWrongFormatEnum = 625,
            
            /// <summary>
            /// Enum WorkRequestScheduledDateHasWrongFormatEnum for WorkRequestScheduledDateHasWrongFormat
            /// </summary>
            [EnumMember(Value = "WorkRequestScheduledDateHasWrongFormat")]
            WorkRequestScheduledDateHasWrongFormatEnum = 626,
            
            /// <summary>
            /// Enum InvalidWorkRequestStatusEnum for InvalidWorkRequestStatus
            /// </summary>
            [EnumMember(Value = "InvalidWorkRequestStatus")]
            InvalidWorkRequestStatusEnum = 627,
            
            /// <summary>
            /// Enum InvalidWorkRequestExtendedStatusEnum for InvalidWorkRequestExtendedStatus
            /// </summary>
            [EnumMember(Value = "InvalidWorkRequestExtendedStatus")]
            InvalidWorkRequestExtendedStatusEnum = 628,
            
            /// <summary>
            /// Enum InvalidWorkRequestCategoryEnum for InvalidWorkRequestCategory
            /// </summary>
            [EnumMember(Value = "InvalidWorkRequestCategory")]
            InvalidWorkRequestCategoryEnum = 629,
            
            /// <summary>
            /// Enum InvalidWorkRequestPriorityEnum for InvalidWorkRequestPriority
            /// </summary>
            [EnumMember(Value = "InvalidWorkRequestPriority")]
            InvalidWorkRequestPriorityEnum = 630,
            
            /// <summary>
            /// Enum InvalidWorkRequestCurrencyEnum for InvalidWorkRequestCurrency
            /// </summary>
            [EnumMember(Value = "InvalidWorkRequestCurrency")]
            InvalidWorkRequestCurrencyEnum = 631,
            
            /// <summary>
            /// Enum InvalidWorkRequestIssueSetupEnum for InvalidWorkRequestIssueSetup
            /// </summary>
            [EnumMember(Value = "InvalidWorkRequestIssueSetup")]
            InvalidWorkRequestIssueSetupEnum = 632,
            
            /// <summary>
            /// Enum InvalidWorkRequestIssueAreaEnum for InvalidWorkRequestIssueArea
            /// </summary>
            [EnumMember(Value = "InvalidWorkRequestIssueArea")]
            InvalidWorkRequestIssueAreaEnum = 633,
            
            /// <summary>
            /// Enum InvalidWorkRequestAssetEnum for InvalidWorkRequestAsset
            /// </summary>
            [EnumMember(Value = "InvalidWorkRequestAsset")]
            InvalidWorkRequestAssetEnum = 634,
            
            /// <summary>
            /// Enum WorkRequestAttachmentFileNameIsRequiredEnum for WorkRequestAttachmentFileNameIsRequired
            /// </summary>
            [EnumMember(Value = "WorkRequestAttachmentFileNameIsRequired")]
            WorkRequestAttachmentFileNameIsRequiredEnum = 635,
            
            /// <summary>
            /// Enum WorkRequestAttachmentOriginalNameIsRequiredEnum for WorkRequestAttachmentOriginalNameIsRequired
            /// </summary>
            [EnumMember(Value = "WorkRequestAttachmentOriginalNameIsRequired")]
            WorkRequestAttachmentOriginalNameIsRequiredEnum = 636,
            
            /// <summary>
            /// Enum WorkRequestIssueProblemCodeIsRequiredEnum for WorkRequestIssueProblemCodeIsRequired
            /// </summary>
            [EnumMember(Value = "WorkRequestIssueProblemCodeIsRequired")]
            WorkRequestIssueProblemCodeIsRequiredEnum = 637,
            
            /// <summary>
            /// Enum WorkRequestIssueProblemTypeIsRequiredEnum for WorkRequestIssueProblemTypeIsRequired
            /// </summary>
            [EnumMember(Value = "WorkRequestIssueProblemTypeIsRequired")]
            WorkRequestIssueProblemTypeIsRequiredEnum = 638,
            
            /// <summary>
            /// Enum WorkRequestScheduledDateMustBeGreaterThanCallDateEnum for WorkRequestScheduledDateMustBeGreaterThanCallDate
            /// </summary>
            [EnumMember(Value = "WorkRequestScheduledDateMustBeGreaterThanCallDate")]
            WorkRequestScheduledDateMustBeGreaterThanCallDateEnum = 639,
            
            /// <summary>
            /// Enum InvalidWorkRequestIdEnum for InvalidWorkRequestId
            /// </summary>
            [EnumMember(Value = "InvalidWorkRequestId")]
            InvalidWorkRequestIdEnum = 640,
            
            /// <summary>
            /// Enum WorkRequestSearchCallDateFromHasWrongFormatEnum for WorkRequestSearchCallDateFromHasWrongFormat
            /// </summary>
            [EnumMember(Value = "WorkRequestSearchCallDateFromHasWrongFormat")]
            WorkRequestSearchCallDateFromHasWrongFormatEnum = 641,
            
            /// <summary>
            /// Enum WorkRequestSearchCallDateToHasWrongFormatEnum for WorkRequestSearchCallDateToHasWrongFormat
            /// </summary>
            [EnumMember(Value = "WorkRequestSearchCallDateToHasWrongFormat")]
            WorkRequestSearchCallDateToHasWrongFormatEnum = 642,
            
            /// <summary>
            /// Enum WorkRequestSearchScheduledDateFromHasWrongFormatEnum for WorkRequestSearchScheduledDateFromHasWrongFormat
            /// </summary>
            [EnumMember(Value = "WorkRequestSearchScheduledDateFromHasWrongFormat")]
            WorkRequestSearchScheduledDateFromHasWrongFormatEnum = 643,
            
            /// <summary>
            /// Enum WorkRequestSearchScheduledDateToHasWrongFormatEnum for WorkRequestSearchScheduledDateToHasWrongFormat
            /// </summary>
            [EnumMember(Value = "WorkRequestSearchScheduledDateToHasWrongFormat")]
            WorkRequestSearchScheduledDateToHasWrongFormatEnum = 644,
            
            /// <summary>
            /// Enum WorkRequestSearchClosedDateFromHasWrongFormatEnum for WorkRequestSearchClosedDateFromHasWrongFormat
            /// </summary>
            [EnumMember(Value = "WorkRequestSearchClosedDateFromHasWrongFormat")]
            WorkRequestSearchClosedDateFromHasWrongFormatEnum = 645,
            
            /// <summary>
            /// Enum WorkRequestSearchClosedDateToHasWrongFormatEnum for WorkRequestSearchClosedDateToHasWrongFormat
            /// </summary>
            [EnumMember(Value = "WorkRequestSearchClosedDateToHasWrongFormat")]
            WorkRequestSearchClosedDateToHasWrongFormatEnum = 646,
            
            /// <summary>
            /// Enum WorkOrderIsAlreadyCreatedForWorkRequestEnum for WorkOrderIsAlreadyCreatedForWorkRequest
            /// </summary>
            [EnumMember(Value = "WorkOrderIsAlreadyCreatedForWorkRequest")]
            WorkOrderIsAlreadyCreatedForWorkRequestEnum = 647,
            
            /// <summary>
            /// Enum WorkRequestIsClosedEnum for WorkRequestIsClosed
            /// </summary>
            [EnumMember(Value = "WorkRequestIsClosed")]
            WorkRequestIsClosedEnum = 648,
            
            /// <summary>
            /// Enum WorkRequestClosedReasonIsRequiredForClosedStatusEnum for WorkRequestClosedReasonIsRequiredForClosedStatus
            /// </summary>
            [EnumMember(Value = "WorkRequestClosedReasonIsRequiredForClosedStatus")]
            WorkRequestClosedReasonIsRequiredForClosedStatusEnum = 649,
            
            /// <summary>
            /// Enum WorkOrderIdIsRequiredForThisClosedReasonEnum for WorkOrderIdIsRequiredForThisClosedReason
            /// </summary>
            [EnumMember(Value = "WorkOrderIdIsRequiredForThisClosedReason")]
            WorkOrderIdIsRequiredForThisClosedReasonEnum = 650,
            
            /// <summary>
            /// Enum InvalidWorkRequestClosedReasonEnum for InvalidWorkRequestClosedReason
            /// </summary>
            [EnumMember(Value = "InvalidWorkRequestClosedReason")]
            InvalidWorkRequestClosedReasonEnum = 651,
            
            /// <summary>
            /// Enum WorkRequestClosedReasonIsOnlyForClosedStatusEnum for WorkRequestClosedReasonIsOnlyForClosedStatus
            /// </summary>
            [EnumMember(Value = "WorkRequestClosedReasonIsOnlyForClosedStatus")]
            WorkRequestClosedReasonIsOnlyForClosedStatusEnum = 652,
            
            /// <summary>
            /// Enum InvalidWorkRequestWorkOrderIdEnum for InvalidWorkRequestWorkOrderId
            /// </summary>
            [EnumMember(Value = "InvalidWorkRequestWorkOrderId")]
            InvalidWorkRequestWorkOrderIdEnum = 653,
            
            /// <summary>
            /// Enum WorkRequestWorkOrderIdIsOnlyForClosedStatusEnum for WorkRequestWorkOrderIdIsOnlyForClosedStatus
            /// </summary>
            [EnumMember(Value = "WorkRequestWorkOrderIdIsOnlyForClosedStatus")]
            WorkRequestWorkOrderIdIsOnlyForClosedStatusEnum = 654,
            
            /// <summary>
            /// Enum WorkRequestWorkOrderIdIsOnlyForCertainClosedReasonEnum for WorkRequestWorkOrderIdIsOnlyForCertainClosedReason
            /// </summary>
            [EnumMember(Value = "WorkRequestWorkOrderIdIsOnlyForCertainClosedReason")]
            WorkRequestWorkOrderIdIsOnlyForCertainClosedReasonEnum = 655,
            
            /// <summary>
            /// Enum InvalidWorkOrderSourceTypeEnum for InvalidWorkOrderSourceType
            /// </summary>
            [EnumMember(Value = "InvalidWorkOrderSourceType")]
            InvalidWorkOrderSourceTypeEnum = 656,
            
            /// <summary>
            /// Enum DeclineReasonIdIsRequiredEnum for DeclineReasonIdIsRequired
            /// </summary>
            [EnumMember(Value = "DeclineReasonIdIsRequired")]
            DeclineReasonIdIsRequiredEnum = 657,
            
            /// <summary>
            /// Enum DeclineReasonDoesntAllowCustomTextEnum for DeclineReasonDoesntAllowCustomText
            /// </summary>
            [EnumMember(Value = "DeclineReasonDoesntAllowCustomText")]
            DeclineReasonDoesntAllowCustomTextEnum = 658,
            
            /// <summary>
            /// Enum InvalidDeclineReasonIdEnum for InvalidDeclineReasonId
            /// </summary>
            [EnumMember(Value = "InvalidDeclineReasonId")]
            InvalidDeclineReasonIdEnum = 659,
            
            /// <summary>
            /// Enum MultipleWorkOrdersForPurchaseNumberEnum for MultipleWorkOrdersForPurchaseNumber
            /// </summary>
            [EnumMember(Value = "MultipleWorkOrdersForPurchaseNumber")]
            MultipleWorkOrdersForPurchaseNumberEnum = 660,
            
            /// <summary>
            /// Enum InvoiceMaterialMakupInvalidEnum for InvoiceMaterialMakupInvalid
            /// </summary>
            [EnumMember(Value = "InvoiceMaterialMakupInvalid")]
            InvoiceMaterialMakupInvalidEnum = 661,
            
            /// <summary>
            /// Enum MaterialMarkUpDiscrepancyReasonShouldBeStatedEnum for MaterialMarkUpDiscrepancyReasonShouldBeStated
            /// </summary>
            [EnumMember(Value = "MaterialMarkUpDiscrepancyReasonShouldBeStated")]
            MaterialMarkUpDiscrepancyReasonShouldBeStatedEnum = 662,
            
            /// <summary>
            /// Enum MaterialPriceDiscrepancyReasonShouldBeStatedEnum for MaterialPriceDiscrepancyReasonShouldBeStated
            /// </summary>
            [EnumMember(Value = "MaterialPriceDiscrepancyReasonShouldBeStated")]
            MaterialPriceDiscrepancyReasonShouldBeStatedEnum = 663,
            
            /// <summary>
            /// Enum OtherPriceDiscrepancyReasonShouldBeStatedEnum for OtherPriceDiscrepancyReasonShouldBeStated
            /// </summary>
            [EnumMember(Value = "OtherPriceDiscrepancyReasonShouldBeStated")]
            OtherPriceDiscrepancyReasonShouldBeStatedEnum = 664
        }

        /// <summary>
        /// The list of error codes. Go to https://developer.servicechannel.com/basics/general/response-codes/#internal-error-codes-and-messages to map error codes to error reasons.
        /// </summary>
        /// <value>The list of error codes. Go to https://developer.servicechannel.com/basics/general/response-codes/#internal-error-codes-and-messages to map error codes to error reasons.</value>
        [DataMember(Name="ErrorCodes", EmitDefaultValue=false)]
        public List<SCServiceChannelServicesMessagingErrorResponse.ErrorCodesEnum> ErrorCodes { get; set; }


        /// <summary>
        /// The code of the first error found
        /// </summary>
        /// <value>The code of the first error found</value>
        
        public enum ErrorCodeEnum
        {
            
            /// <summary>
            /// Enum NotAllowedEnum for NotAllowed
            /// </summary>
            [EnumMember(Value = "NotAllowed")]
            NotAllowedEnum = 1,
            
            /// <summary>
            /// Enum EmptyProviderEnum for EmptyProvider
            /// </summary>
            [EnumMember(Value = "EmptyProvider")]
            EmptyProviderEnum = 2,
            
            /// <summary>
            /// Enum InvalidProviderIdEnum for InvalidProviderId
            /// </summary>
            [EnumMember(Value = "InvalidProviderId")]
            InvalidProviderIdEnum = 3,
            
            /// <summary>
            /// Enum UnknownProviderEnum for UnknownProvider
            /// </summary>
            [EnumMember(Value = "UnknownProvider")]
            UnknownProviderEnum = 4,
            
            /// <summary>
            /// Enum ProviderAlreadyExistsEnum for ProviderAlreadyExists
            /// </summary>
            [EnumMember(Value = "ProviderAlreadyExists")]
            ProviderAlreadyExistsEnum = 5,
            
            /// <summary>
            /// Enum ProviderIdNotExistsEnum for ProviderIdNotExists
            /// </summary>
            [EnumMember(Value = "ProviderIdNotExists")]
            ProviderIdNotExistsEnum = 6,
            
            /// <summary>
            /// Enum TimeoutExpiredErrorEnum for TimeoutExpiredError
            /// </summary>
            [EnumMember(Value = "TimeoutExpiredError")]
            TimeoutExpiredErrorEnum = 7,
            
            /// <summary>
            /// Enum EmptyContractEnum for EmptyContract
            /// </summary>
            [EnumMember(Value = "EmptyContract")]
            EmptyContractEnum = 8,
            
            /// <summary>
            /// Enum ContractUndefinedEnum for ContractUndefined
            /// </summary>
            [EnumMember(Value = "ContractUndefined")]
            ContractUndefinedEnum = 9,
            
            /// <summary>
            /// Enum EmptySubscriberEnum for EmptySubscriber
            /// </summary>
            [EnumMember(Value = "EmptySubscriber")]
            EmptySubscriberEnum = 10,
            
            /// <summary>
            /// Enum InvalidSubscriberIdEnum for InvalidSubscriberId
            /// </summary>
            [EnumMember(Value = "InvalidSubscriberId")]
            InvalidSubscriberIdEnum = 11,
            
            /// <summary>
            /// Enum UnknownSubscriberEnum for UnknownSubscriber
            /// </summary>
            [EnumMember(Value = "UnknownSubscriber")]
            UnknownSubscriberEnum = 12,
            
            /// <summary>
            /// Enum InactiveSubscriberEnum for InactiveSubscriber
            /// </summary>
            [EnumMember(Value = "InactiveSubscriber")]
            InactiveSubscriberEnum = 13,
            
            /// <summary>
            /// Enum EmptySubscriberIdEnum for EmptySubscriberId
            /// </summary>
            [EnumMember(Value = "EmptySubscriberId")]
            EmptySubscriberIdEnum = 14,
            
            /// <summary>
            /// Enum SubscriberIdNotExistsEnum for SubscriberIdNotExists
            /// </summary>
            [EnumMember(Value = "SubscriberIdNotExists")]
            SubscriberIdNotExistsEnum = 15,
            
            /// <summary>
            /// Enum InternalErrorEnum for InternalError
            /// </summary>
            [EnumMember(Value = "InternalError")]
            InternalErrorEnum = 16,
            
            /// <summary>
            /// Enum DataNotFoundEnum for DataNotFound
            /// </summary>
            [EnumMember(Value = "DataNotFound")]
            DataNotFoundEnum = 17,
            
            /// <summary>
            /// Enum BadRequestEnum for BadRequest
            /// </summary>
            [EnumMember(Value = "BadRequest")]
            BadRequestEnum = 18,
            
            /// <summary>
            /// Enum UnAuthorizedEnum for UnAuthorized
            /// </summary>
            [EnumMember(Value = "UnAuthorized")]
            UnAuthorizedEnum = 19,
            
            /// <summary>
            /// Enum UnSupportedApplicationEnum for UnSupportedApplication
            /// </summary>
            [EnumMember(Value = "UnSupportedApplication")]
            UnSupportedApplicationEnum = 20,
            
            /// <summary>
            /// Enum SubsidiaryUserDisabledEnum for SubsidiaryUserDisabled
            /// </summary>
            [EnumMember(Value = "SubsidiaryUserDisabled")]
            SubsidiaryUserDisabledEnum = 21,
            
            /// <summary>
            /// Enum EmptyLocationEnum for EmptyLocation
            /// </summary>
            [EnumMember(Value = "EmptyLocation")]
            EmptyLocationEnum = 22,
            
            /// <summary>
            /// Enum InvalidLocationIdEnum for InvalidLocationId
            /// </summary>
            [EnumMember(Value = "InvalidLocationId")]
            InvalidLocationIdEnum = 23,
            
            /// <summary>
            /// Enum UnknownLocationEnum for UnknownLocation
            /// </summary>
            [EnumMember(Value = "UnknownLocation")]
            UnknownLocationEnum = 24,
            
            /// <summary>
            /// Enum LocationNotBelongsToSubscriberEnum for LocationNotBelongsToSubscriber
            /// </summary>
            [EnumMember(Value = "LocationNotBelongsToSubscriber")]
            LocationNotBelongsToSubscriberEnum = 25,
            
            /// <summary>
            /// Enum EmptyLocationCountryEnum for EmptyLocationCountry
            /// </summary>
            [EnumMember(Value = "EmptyLocationCountry")]
            EmptyLocationCountryEnum = 26,
            
            /// <summary>
            /// Enum LocationAlreadyExistsEnum for LocationAlreadyExists
            /// </summary>
            [EnumMember(Value = "LocationAlreadyExists")]
            LocationAlreadyExistsEnum = 27,
            
            /// <summary>
            /// Enum InvalidStoreIdEnum for InvalidStoreId
            /// </summary>
            [EnumMember(Value = "InvalidStoreId")]
            InvalidStoreIdEnum = 28,
            
            /// <summary>
            /// Enum LocationEmptyStateEnum for LocationEmptyState
            /// </summary>
            [EnumMember(Value = "LocationEmptyState")]
            LocationEmptyStateEnum = 29,
            
            /// <summary>
            /// Enum NoAccessToLocationEnum for NoAccessToLocation
            /// </summary>
            [EnumMember(Value = "NoAccessToLocation")]
            NoAccessToLocationEnum = 30,
            
            /// <summary>
            /// Enum LocationAddressValidationErrorEnum for LocationAddressValidationError
            /// </summary>
            [EnumMember(Value = "LocationAddressValidationError")]
            LocationAddressValidationErrorEnum = 31,
            
            /// <summary>
            /// Enum LocationAddressRequestValidationErrorEnum for LocationAddressRequestValidationError
            /// </summary>
            [EnumMember(Value = "LocationAddressRequestValidationError")]
            LocationAddressRequestValidationErrorEnum = 32,
            
            /// <summary>
            /// Enum InvalidLocationNoteHeaderEnum for InvalidLocationNoteHeader
            /// </summary>
            [EnumMember(Value = "InvalidLocationNoteHeader")]
            InvalidLocationNoteHeaderEnum = 33,
            
            /// <summary>
            /// Enum NoAccessToUpdateProtectedNoteEnum for NoAccessToUpdateProtectedNote
            /// </summary>
            [EnumMember(Value = "NoAccessToUpdateProtectedNote")]
            NoAccessToUpdateProtectedNoteEnum = 34,
            
            /// <summary>
            /// Enum InvalidBusinessHoursFormatEnum for InvalidBusinessHoursFormat
            /// </summary>
            [EnumMember(Value = "InvalidBusinessHoursFormat")]
            InvalidBusinessHoursFormatEnum = 35,
            
            /// <summary>
            /// Enum WorkingHoursIntersectEnum for WorkingHoursIntersect
            /// </summary>
            [EnumMember(Value = "WorkingHoursIntersect")]
            WorkingHoursIntersectEnum = 36,
            
            /// <summary>
            /// Enum InvalidDayOfWeekEnum for InvalidDayOfWeek
            /// </summary>
            [EnumMember(Value = "InvalidDayOfWeek")]
            InvalidDayOfWeekEnum = 37,
            
            /// <summary>
            /// Enum DuplicateDayOfWeekEnum for DuplicateDayOfWeek
            /// </summary>
            [EnumMember(Value = "DuplicateDayOfWeek")]
            DuplicateDayOfWeekEnum = 38,
            
            /// <summary>
            /// Enum InvalidBusinessHoursInitialSetupEnum for InvalidBusinessHoursInitialSetup
            /// </summary>
            [EnumMember(Value = "InvalidBusinessHoursInitialSetup")]
            InvalidBusinessHoursInitialSetupEnum = 39,
            
            /// <summary>
            /// Enum BusinessHoursIsEmptyEnum for BusinessHoursIsEmpty
            /// </summary>
            [EnumMember(Value = "BusinessHoursIsEmpty")]
            BusinessHoursIsEmptyEnum = 40,
            
            /// <summary>
            /// Enum InvalidHolidayRepeatByTypeEnum for InvalidHolidayRepeatByType
            /// </summary>
            [EnumMember(Value = "InvalidHolidayRepeatByType")]
            InvalidHolidayRepeatByTypeEnum = 41,
            
            /// <summary>
            /// Enum EmptyHolidayListOfDaysEnum for EmptyHolidayListOfDays
            /// </summary>
            [EnumMember(Value = "EmptyHolidayListOfDays")]
            EmptyHolidayListOfDaysEnum = 42,
            
            /// <summary>
            /// Enum EmptyHolidayListOfMonthsEnum for EmptyHolidayListOfMonths
            /// </summary>
            [EnumMember(Value = "EmptyHolidayListOfMonths")]
            EmptyHolidayListOfMonthsEnum = 43,
            
            /// <summary>
            /// Enum InvalidHolidayMonthNameEnum for InvalidHolidayMonthName
            /// </summary>
            [EnumMember(Value = "InvalidHolidayMonthName")]
            InvalidHolidayMonthNameEnum = 44,
            
            /// <summary>
            /// Enum InvalidHolidayNameLengthEnum for InvalidHolidayNameLength
            /// </summary>
            [EnumMember(Value = "InvalidHolidayNameLength")]
            InvalidHolidayNameLengthEnum = 45,
            
            /// <summary>
            /// Enum InvalidHolidayRepeatEveryEnum for InvalidHolidayRepeatEvery
            /// </summary>
            [EnumMember(Value = "InvalidHolidayRepeatEvery")]
            InvalidHolidayRepeatEveryEnum = 46,
            
            /// <summary>
            /// Enum DuplicateMonthEnum for DuplicateMonth
            /// </summary>
            [EnumMember(Value = "DuplicateMonth")]
            DuplicateMonthEnum = 47,
            
            /// <summary>
            /// Enum InvalidHolidayFrequencyEnum for InvalidHolidayFrequency
            /// </summary>
            [EnumMember(Value = "InvalidHolidayFrequency")]
            InvalidHolidayFrequencyEnum = 48,
            
            /// <summary>
            /// Enum InvalidHolidayStartDateEnum for InvalidHolidayStartDate
            /// </summary>
            [EnumMember(Value = "InvalidHolidayStartDate")]
            InvalidHolidayStartDateEnum = 49,
            
            /// <summary>
            /// Enum InvalidCloseAllDayEnum for InvalidCloseAllDay
            /// </summary>
            [EnumMember(Value = "InvalidCloseAllDay")]
            InvalidCloseAllDayEnum = 50,
            
            /// <summary>
            /// Enum HolidayDoesNotExistEnum for HolidayDoesNotExist
            /// </summary>
            [EnumMember(Value = "HolidayDoesNotExist")]
            HolidayDoesNotExistEnum = 51,
            
            /// <summary>
            /// Enum InvalidFormatParameterEnum for InvalidFormatParameter
            /// </summary>
            [EnumMember(Value = "InvalidFormatParameter")]
            InvalidFormatParameterEnum = 52,
            
            /// <summary>
            /// Enum InvalidLocationCityEnum for InvalidLocationCity
            /// </summary>
            [EnumMember(Value = "InvalidLocationCity")]
            InvalidLocationCityEnum = 53,
            
            /// <summary>
            /// Enum InvalidLocationZipEnum for InvalidLocationZip
            /// </summary>
            [EnumMember(Value = "InvalidLocationZip")]
            InvalidLocationZipEnum = 54,
            
            /// <summary>
            /// Enum InvalidLocationLatitudeEnum for InvalidLocationLatitude
            /// </summary>
            [EnumMember(Value = "InvalidLocationLatitude")]
            InvalidLocationLatitudeEnum = 55,
            
            /// <summary>
            /// Enum InvalidLocationLongitudeEnum for InvalidLocationLongitude
            /// </summary>
            [EnumMember(Value = "InvalidLocationLongitude")]
            InvalidLocationLongitudeEnum = 56,
            
            /// <summary>
            /// Enum InvalidLocationEmailEnum for InvalidLocationEmail
            /// </summary>
            [EnumMember(Value = "InvalidLocationEmail")]
            InvalidLocationEmailEnum = 57,
            
            /// <summary>
            /// Enum InvalidLocationNameEnum for InvalidLocationName
            /// </summary>
            [EnumMember(Value = "InvalidLocationName")]
            InvalidLocationNameEnum = 58,
            
            /// <summary>
            /// Enum InvalidLocationStateEnum for InvalidLocationState
            /// </summary>
            [EnumMember(Value = "InvalidLocationState")]
            InvalidLocationStateEnum = 59,
            
            /// <summary>
            /// Enum InvalidLocationAddlAddressEnum for InvalidLocationAddlAddress
            /// </summary>
            [EnumMember(Value = "InvalidLocationAddlAddress")]
            InvalidLocationAddlAddressEnum = 60,
            
            /// <summary>
            /// Enum InvalidLocationMainAddressEnum for InvalidLocationMainAddress
            /// </summary>
            [EnumMember(Value = "InvalidLocationMainAddress")]
            InvalidLocationMainAddressEnum = 61,
            
            /// <summary>
            /// Enum InvalidLocationCountryEnum for InvalidLocationCountry
            /// </summary>
            [EnumMember(Value = "InvalidLocationCountry")]
            InvalidLocationCountryEnum = 62,
            
            /// <summary>
            /// Enum InvalidLocationRegionEnum for InvalidLocationRegion
            /// </summary>
            [EnumMember(Value = "InvalidLocationRegion")]
            InvalidLocationRegionEnum = 63,
            
            /// <summary>
            /// Enum InvalidLocationDistrictEnum for InvalidLocationDistrict
            /// </summary>
            [EnumMember(Value = "InvalidLocationDistrict")]
            InvalidLocationDistrictEnum = 64,
            
            /// <summary>
            /// Enum InvalidLocationPhoneEnum for InvalidLocationPhone
            /// </summary>
            [EnumMember(Value = "InvalidLocationPhone")]
            InvalidLocationPhoneEnum = 65,
            
            /// <summary>
            /// Enum InvalidLocationContactEnum for InvalidLocationContact
            /// </summary>
            [EnumMember(Value = "InvalidLocationContact")]
            InvalidLocationContactEnum = 66,
            
            /// <summary>
            /// Enum InvalidLocationFaxNumberEnum for InvalidLocationFaxNumber
            /// </summary>
            [EnumMember(Value = "InvalidLocationFaxNumber")]
            InvalidLocationFaxNumberEnum = 67,
            
            /// <summary>
            /// Enum LocationCountryNotFoundEnum for LocationCountryNotFound
            /// </summary>
            [EnumMember(Value = "LocationCountryNotFound")]
            LocationCountryNotFoundEnum = 68,
            
            /// <summary>
            /// Enum LocationStateNotFoundEnum for LocationStateNotFound
            /// </summary>
            [EnumMember(Value = "LocationStateNotFound")]
            LocationStateNotFoundEnum = 69,
            
            /// <summary>
            /// Enum LocationCityNotFoundEnum for LocationCityNotFound
            /// </summary>
            [EnumMember(Value = "LocationCityNotFound")]
            LocationCityNotFoundEnum = 70,
            
            /// <summary>
            /// Enum LocationIdNotExistsEnum for LocationIdNotExists
            /// </summary>
            [EnumMember(Value = "LocationIdNotExists")]
            LocationIdNotExistsEnum = 71,
            
            /// <summary>
            /// Enum InvalidLocationEmailLengthEnum for InvalidLocationEmailLength
            /// </summary>
            [EnumMember(Value = "InvalidLocationEmailLength")]
            InvalidLocationEmailLengthEnum = 72,
            
            /// <summary>
            /// Enum LocationStateIdNotFoundEnum for LocationStateIdNotFound
            /// </summary>
            [EnumMember(Value = "LocationStateIdNotFound")]
            LocationStateIdNotFoundEnum = 73,
            
            /// <summary>
            /// Enum IncorrectCombinationStateAndStateIdEnum for IncorrectCombinationStateAndStateId
            /// </summary>
            [EnumMember(Value = "IncorrectCombinationStateAndStateId")]
            IncorrectCombinationStateAndStateIdEnum = 74,
            
            /// <summary>
            /// Enum InvalidSubscriberIdsEnum for InvalidSubscriberIds
            /// </summary>
            [EnumMember(Value = "InvalidSubscriberIds")]
            InvalidSubscriberIdsEnum = 75,
            
            /// <summary>
            /// Enum InvalidLocalizationSettingsEnum for InvalidLocalizationSettings
            /// </summary>
            [EnumMember(Value = "InvalidLocalizationSettings")]
            InvalidLocalizationSettingsEnum = 76,
            
            /// <summary>
            /// Enum LandlordResponsibilityNotFoundEnum for LandlordResponsibilityNotFound
            /// </summary>
            [EnumMember(Value = "LandlordResponsibilityNotFound")]
            LandlordResponsibilityNotFoundEnum = 77,
            
            /// <summary>
            /// Enum LandlordResponsibilityAlreadyExistsEnum for LandlordResponsibilityAlreadyExists
            /// </summary>
            [EnumMember(Value = "LandlordResponsibilityAlreadyExists")]
            LandlordResponsibilityAlreadyExistsEnum = 78,
            
            /// <summary>
            /// Enum EmptyLocationIdsEnum for EmptyLocationIds
            /// </summary>
            [EnumMember(Value = "EmptyLocationIds")]
            EmptyLocationIdsEnum = 79,
            
            /// <summary>
            /// Enum AttachmentNotExistEnum for AttachmentNotExist
            /// </summary>
            [EnumMember(Value = "AttachmentNotExist")]
            AttachmentNotExistEnum = 80,
            
            /// <summary>
            /// Enum InvalidTradeIdEnum for InvalidTradeId
            /// </summary>
            [EnumMember(Value = "InvalidTradeId")]
            InvalidTradeIdEnum = 81,
            
            /// <summary>
            /// Enum InvalidCategoryIdEnum for InvalidCategoryId
            /// </summary>
            [EnumMember(Value = "InvalidCategoryId")]
            InvalidCategoryIdEnum = 82,
            
            /// <summary>
            /// Enum InvalidOverrideCategoryIdEnum for InvalidOverrideCategoryId
            /// </summary>
            [EnumMember(Value = "InvalidOverrideCategoryId")]
            InvalidOverrideCategoryIdEnum = 83,
            
            /// <summary>
            /// Enum InvalidOverridePriorityIdEnum for InvalidOverridePriorityId
            /// </summary>
            [EnumMember(Value = "InvalidOverridePriorityId")]
            InvalidOverridePriorityIdEnum = 84,
            
            /// <summary>
            /// Enum LeaseNoteExceedMaxLengthEnum for LeaseNoteExceedMaxLength
            /// </summary>
            [EnumMember(Value = "LeaseNoteExceedMaxLength")]
            LeaseNoteExceedMaxLengthEnum = 85,
            
            /// <summary>
            /// Enum InvalidOverrideProviderRankEnum for InvalidOverrideProviderRank
            /// </summary>
            [EnumMember(Value = "InvalidOverrideProviderRank")]
            InvalidOverrideProviderRankEnum = 86,
            
            /// <summary>
            /// Enum InvalidOverrideNTEEnum for InvalidOverrideNTE
            /// </summary>
            [EnumMember(Value = "InvalidOverrideNTE")]
            InvalidOverrideNTEEnum = 87,
            
            /// <summary>
            /// Enum EmptyTradeEnum for EmptyTrade
            /// </summary>
            [EnumMember(Value = "EmptyTrade")]
            EmptyTradeEnum = 88,
            
            /// <summary>
            /// Enum InvalidTradeEnum for InvalidTrade
            /// </summary>
            [EnumMember(Value = "InvalidTrade")]
            InvalidTradeEnum = 89,
            
            /// <summary>
            /// Enum TradeNotBelongsToSubscriberEnum for TradeNotBelongsToSubscriber
            /// </summary>
            [EnumMember(Value = "TradeNotBelongsToSubscriber")]
            TradeNotBelongsToSubscriberEnum = 90,
            
            /// <summary>
            /// Enum InvalidPrimaryTradeEnum for InvalidPrimaryTrade
            /// </summary>
            [EnumMember(Value = "InvalidPrimaryTrade")]
            InvalidPrimaryTradeEnum = 91,
            
            /// <summary>
            /// Enum InvalidTradeForSubscriberEnum for InvalidTradeForSubscriber
            /// </summary>
            [EnumMember(Value = "InvalidTradeForSubscriber")]
            InvalidTradeForSubscriberEnum = 92,
            
            /// <summary>
            /// Enum InvalidCategoryForSubscriberEnum for InvalidCategoryForSubscriber
            /// </summary>
            [EnumMember(Value = "InvalidCategoryForSubscriber")]
            InvalidCategoryForSubscriberEnum = 93,
            
            /// <summary>
            /// Enum GlCodeAlreadyExistsEnum for GlCodeAlreadyExists
            /// </summary>
            [EnumMember(Value = "GlCodeAlreadyExists")]
            GlCodeAlreadyExistsEnum = 94,
            
            /// <summary>
            /// Enum GlCodeNotExistsEnum for GlCodeNotExists
            /// </summary>
            [EnumMember(Value = "GlCodeNotExists")]
            GlCodeNotExistsEnum = 95,
            
            /// <summary>
            /// Enum InvalidGlCodeUpdateEnum for InvalidGlCodeUpdate
            /// </summary>
            [EnumMember(Value = "InvalidGlCodeUpdate")]
            InvalidGlCodeUpdateEnum = 96,
            
            /// <summary>
            /// Enum EmptyGlCodeEnum for EmptyGlCode
            /// </summary>
            [EnumMember(Value = "EmptyGlCode")]
            EmptyGlCodeEnum = 97,
            
            /// <summary>
            /// Enum TradeAlreadyExistsEnum for TradeAlreadyExists
            /// </summary>
            [EnumMember(Value = "TradeAlreadyExists")]
            TradeAlreadyExistsEnum = 98,
            
            /// <summary>
            /// Enum InvalidNTETradeEnum for InvalidNTETrade
            /// </summary>
            [EnumMember(Value = "InvalidNTETrade")]
            InvalidNTETradeEnum = 99,
            
            /// <summary>
            /// Enum TradeNotExistsEnum for TradeNotExists
            /// </summary>
            [EnumMember(Value = "TradeNotExists")]
            TradeNotExistsEnum = 100,
            
            /// <summary>
            /// Enum TradeAlreadyInUseEnum for TradeAlreadyInUse
            /// </summary>
            [EnumMember(Value = "TradeAlreadyInUse")]
            TradeAlreadyInUseEnum = 101,
            
            /// <summary>
            /// Enum EmptyUserEnum for EmptyUser
            /// </summary>
            [EnumMember(Value = "EmptyUser")]
            EmptyUserEnum = 102,
            
            /// <summary>
            /// Enum EmptyCreatedByEnum for EmptyCreatedBy
            /// </summary>
            [EnumMember(Value = "EmptyCreatedBy")]
            EmptyCreatedByEnum = 103,
            
            /// <summary>
            /// Enum InvalidUserNameEnum for InvalidUserName
            /// </summary>
            [EnumMember(Value = "InvalidUserName")]
            InvalidUserNameEnum = 104,
            
            /// <summary>
            /// Enum NotProviderUserEnum for NotProviderUser
            /// </summary>
            [EnumMember(Value = "NotProviderUser")]
            NotProviderUserEnum = 105,
            
            /// <summary>
            /// Enum UserHasNoPermissionsEnum for UserHasNoPermissions
            /// </summary>
            [EnumMember(Value = "UserHasNoPermissions")]
            UserHasNoPermissionsEnum = 106,
            
            /// <summary>
            /// Enum RestrictedAccountEnum for RestrictedAccount
            /// </summary>
            [EnumMember(Value = "RestrictedAccount")]
            RestrictedAccountEnum = 107,
            
            /// <summary>
            /// Enum UserAlreadyExistsEnum for UserAlreadyExists
            /// </summary>
            [EnumMember(Value = "UserAlreadyExists")]
            UserAlreadyExistsEnum = 108,
            
            /// <summary>
            /// Enum UserHasNoPermissionsEditWOEnum for UserHasNoPermissionsEditWO
            /// </summary>
            [EnumMember(Value = "UserHasNoPermissionsEditWO")]
            UserHasNoPermissionsEditWOEnum = 109,
            
            /// <summary>
            /// Enum UserEmailAddressIsMissingEnum for UserEmailAddressIsMissing
            /// </summary>
            [EnumMember(Value = "UserEmailAddressIsMissing")]
            UserEmailAddressIsMissingEnum = 110,
            
            /// <summary>
            /// Enum InvalidSubsriberProviderIdEnum for InvalidSubsriberProviderId
            /// </summary>
            [EnumMember(Value = "InvalidSubsriberProviderId")]
            InvalidSubsriberProviderIdEnum = 111,
            
            /// <summary>
            /// Enum LanguageNameNotFoundEnum for LanguageNameNotFound
            /// </summary>
            [EnumMember(Value = "LanguageNameNotFound")]
            LanguageNameNotFoundEnum = 112,
            
            /// <summary>
            /// Enum InvalidLanguageIdEnum for InvalidLanguageId
            /// </summary>
            [EnumMember(Value = "InvalidLanguageId")]
            InvalidLanguageIdEnum = 113,
            
            /// <summary>
            /// Enum LanguageIdNotFoundEnum for LanguageIdNotFound
            /// </summary>
            [EnumMember(Value = "LanguageIdNotFound")]
            LanguageIdNotFoundEnum = 114,
            
            /// <summary>
            /// Enum UseBothSubscriberIdProviderIdEnum for UseBothSubscriberIdProviderId
            /// </summary>
            [EnumMember(Value = "UseBothSubscriberIdProviderId")]
            UseBothSubscriberIdProviderIdEnum = 115,
            
            /// <summary>
            /// Enum EmptyWoProblemEnum for EmptyWoProblem
            /// </summary>
            [EnumMember(Value = "EmptyWoProblem")]
            EmptyWoProblemEnum = 116,
            
            /// <summary>
            /// Enum InvalidWoProblemSourceEnum for InvalidWoProblemSource
            /// </summary>
            [EnumMember(Value = "InvalidWoProblemSource")]
            InvalidWoProblemSourceEnum = 117,
            
            /// <summary>
            /// Enum InvalidWoProblemDescriptionEnum for InvalidWoProblemDescription
            /// </summary>
            [EnumMember(Value = "InvalidWoProblemDescription")]
            InvalidWoProblemDescriptionEnum = 118,
            
            /// <summary>
            /// Enum InvalidWoProblemCodeEnum for InvalidWoProblemCode
            /// </summary>
            [EnumMember(Value = "InvalidWoProblemCode")]
            InvalidWoProblemCodeEnum = 119,
            
            /// <summary>
            /// Enum InvalidWoStatusEnum for InvalidWoStatus
            /// </summary>
            [EnumMember(Value = "InvalidWoStatus")]
            InvalidWoStatusEnum = 120,
            
            /// <summary>
            /// Enum InvalidWoNteEnum for InvalidWoNte
            /// </summary>
            [EnumMember(Value = "InvalidWoNte")]
            InvalidWoNteEnum = 121,
            
            /// <summary>
            /// Enum InvalidWoCallerEnum for InvalidWoCaller
            /// </summary>
            [EnumMember(Value = "InvalidWoCaller")]
            InvalidWoCallerEnum = 122,
            
            /// <summary>
            /// Enum InvalidWoCallDateEnum for InvalidWoCallDate
            /// </summary>
            [EnumMember(Value = "InvalidWoCallDate")]
            InvalidWoCallDateEnum = 123,
            
            /// <summary>
            /// Enum InvalidWoScheduledDateEnum for InvalidWoScheduledDate
            /// </summary>
            [EnumMember(Value = "InvalidWoScheduledDate")]
            InvalidWoScheduledDateEnum = 124,
            
            /// <summary>
            /// Enum InvalidWoScheduledDateGreaterThanMaxAllowedEnum for InvalidWoScheduledDateGreaterThanMaxAllowed
            /// </summary>
            [EnumMember(Value = "InvalidWoScheduledDateGreaterThanMaxAllowed")]
            InvalidWoScheduledDateGreaterThanMaxAllowedEnum = 125,
            
            /// <summary>
            /// Enum EmptyWoCategoryEnum for EmptyWoCategory
            /// </summary>
            [EnumMember(Value = "EmptyWoCategory")]
            EmptyWoCategoryEnum = 126,
            
            /// <summary>
            /// Enum InvalidWoCategoryEnum for InvalidWoCategory
            /// </summary>
            [EnumMember(Value = "InvalidWoCategory")]
            InvalidWoCategoryEnum = 127,
            
            /// <summary>
            /// Enum EmptyWoPriorityEnum for EmptyWoPriority
            /// </summary>
            [EnumMember(Value = "EmptyWoPriority")]
            EmptyWoPriorityEnum = 128,
            
            /// <summary>
            /// Enum InvalidWoPriorityEnum for InvalidWoPriority
            /// </summary>
            [EnumMember(Value = "InvalidWoPriority")]
            InvalidWoPriorityEnum = 129,
            
            /// <summary>
            /// Enum InvalidWoCurrencyEnum for InvalidWoCurrency
            /// </summary>
            [EnumMember(Value = "InvalidWoCurrency")]
            InvalidWoCurrencyEnum = 130,
            
            /// <summary>
            /// Enum InvalidWoSetupIdEnum for InvalidWoSetupId
            /// </summary>
            [EnumMember(Value = "InvalidWoSetupId")]
            InvalidWoSetupIdEnum = 131,
            
            /// <summary>
            /// Enum AttachmentsRequiredEnum for AttachmentsRequired
            /// </summary>
            [EnumMember(Value = "AttachmentsRequired")]
            AttachmentsRequiredEnum = 132,
            
            /// <summary>
            /// Enum InvalidWoIdentifierEnum for InvalidWoIdentifier
            /// </summary>
            [EnumMember(Value = "InvalidWoIdentifier")]
            InvalidWoIdentifierEnum = 133,
            
            /// <summary>
            /// Enum EquipmentRequiredEnum for EquipmentRequired
            /// </summary>
            [EnumMember(Value = "EquipmentRequired")]
            EquipmentRequiredEnum = 134,
            
            /// <summary>
            /// Enum WoNteOverflowEnum for WoNteOverflow
            /// </summary>
            [EnumMember(Value = "WoNteOverflow")]
            WoNteOverflowEnum = 135,
            
            /// <summary>
            /// Enum InvalidWoPurchaseNumberEnum for InvalidWoPurchaseNumber
            /// </summary>
            [EnumMember(Value = "InvalidWoPurchaseNumber")]
            InvalidWoPurchaseNumberEnum = 136,
            
            /// <summary>
            /// Enum InvalidWoStateForUpdateEnum for InvalidWoStateForUpdate
            /// </summary>
            [EnumMember(Value = "InvalidWoStateForUpdate")]
            InvalidWoStateForUpdateEnum = 137,
            
            /// <summary>
            /// Enum InvalidPagingParameterEnum for InvalidPagingParameter
            /// </summary>
            [EnumMember(Value = "InvalidPagingParameter")]
            InvalidPagingParameterEnum = 138,
            
            /// <summary>
            /// Enum InvalidWoNumberEnum for InvalidWoNumber
            /// </summary>
            [EnumMember(Value = "InvalidWoNumber")]
            InvalidWoNumberEnum = 139,
            
            /// <summary>
            /// Enum CheckInDeniedEnum for CheckInDenied
            /// </summary>
            [EnumMember(Value = "CheckInDenied")]
            CheckInDeniedEnum = 140,
            
            /// <summary>
            /// Enum CheckOutDeniedEnum for CheckOutDenied
            /// </summary>
            [EnumMember(Value = "CheckOutDenied")]
            CheckOutDeniedEnum = 141,
            
            /// <summary>
            /// Enum WoScheduledDateLessThenReassignDateEnum for WoScheduledDateLessThenReassignDate
            /// </summary>
            [EnumMember(Value = "WoScheduledDateLessThenReassignDate")]
            WoScheduledDateLessThenReassignDateEnum = 142,
            
            /// <summary>
            /// Enum WoScheduledDateLessThenCallDateEnum for WoScheduledDateLessThenCallDate
            /// </summary>
            [EnumMember(Value = "WoScheduledDateLessThenCallDate")]
            WoScheduledDateLessThenCallDateEnum = 143,
            
            /// <summary>
            /// Enum InvalidWoActionReasonEnum for InvalidWoActionReason
            /// </summary>
            [EnumMember(Value = "InvalidWoActionReason")]
            InvalidWoActionReasonEnum = 144,
            
            /// <summary>
            /// Enum EmptySubscriberPropertyEnum for EmptySubscriberProperty
            /// </summary>
            [EnumMember(Value = "EmptySubscriberProperty")]
            EmptySubscriberPropertyEnum = 145,
            
            /// <summary>
            /// Enum WorkOrderUpdateErrorEnum for WorkOrderUpdateError
            /// </summary>
            [EnumMember(Value = "WorkOrderUpdateError")]
            WorkOrderUpdateErrorEnum = 146,
            
            /// <summary>
            /// Enum MissedWoNteDetailsEnum for MissedWoNteDetails
            /// </summary>
            [EnumMember(Value = "MissedWoNteDetails")]
            MissedWoNteDetailsEnum = 147,
            
            /// <summary>
            /// Enum InvalidLinkedWoIdentifierEnum for InvalidLinkedWoIdentifier
            /// </summary>
            [EnumMember(Value = "InvalidLinkedWoIdentifier")]
            InvalidLinkedWoIdentifierEnum = 148,
            
            /// <summary>
            /// Enum WoIsOnHoldEnum for WoIsOnHold
            /// </summary>
            [EnumMember(Value = "WoIsOnHold")]
            WoIsOnHoldEnum = 149,
            
            /// <summary>
            /// Enum InvalidWoTradeEnum for InvalidWoTrade
            /// </summary>
            [EnumMember(Value = "InvalidWoTrade")]
            InvalidWoTradeEnum = 150,
            
            /// <summary>
            /// Enum InvalidStarScoreEnum for InvalidStarScore
            /// </summary>
            [EnumMember(Value = "InvalidStarScore")]
            InvalidStarScoreEnum = 151,
            
            /// <summary>
            /// Enum WorkOrderAlreadyRatedEnum for WorkOrderAlreadyRated
            /// </summary>
            [EnumMember(Value = "WorkOrderAlreadyRated")]
            WorkOrderAlreadyRatedEnum = 152,
            
            /// <summary>
            /// Enum AttachmentThumbnailNotAvailableEnum for AttachmentThumbnailNotAvailable
            /// </summary>
            [EnumMember(Value = "AttachmentThumbnailNotAvailable")]
            AttachmentThumbnailNotAvailableEnum = 153,
            
            /// <summary>
            /// Enum InvalidWoIdentifierOrPinEnum for InvalidWoIdentifierOrPin
            /// </summary>
            [EnumMember(Value = "InvalidWoIdentifierOrPin")]
            InvalidWoIdentifierOrPinEnum = 154,
            
            /// <summary>
            /// Enum InvalidTimeZoneHeaderEnum for InvalidTimeZoneHeader
            /// </summary>
            [EnumMember(Value = "InvalidTimeZoneHeader")]
            InvalidTimeZoneHeaderEnum = 155,
            
            /// <summary>
            /// Enum RefrigerantWasUsedShouldBeYesOrNoEnum for RefrigerantWasUsedShouldBeYesOrNo
            /// </summary>
            [EnumMember(Value = "RefrigerantWasUsedShouldBeYesOrNo")]
            RefrigerantWasUsedShouldBeYesOrNoEnum = 156,
            
            /// <summary>
            /// Enum CheckInDeniedOutsideGeolocationEnum for CheckInDeniedOutsideGeolocation
            /// </summary>
            [EnumMember(Value = "CheckInDeniedOutsideGeolocation")]
            CheckInDeniedOutsideGeolocationEnum = 157,
            
            /// <summary>
            /// Enum CheckOutDeniedOutsideGeolocationEnum for CheckOutDeniedOutsideGeolocation
            /// </summary>
            [EnumMember(Value = "CheckOutDeniedOutsideGeolocation")]
            CheckOutDeniedOutsideGeolocationEnum = 158,
            
            /// <summary>
            /// Enum LeakDetectorAuditShouldBeCreatedEnum for LeakDetectorAuditShouldBeCreated
            /// </summary>
            [EnumMember(Value = "LeakDetectorAuditShouldBeCreated")]
            LeakDetectorAuditShouldBeCreatedEnum = 159,
            
            /// <summary>
            /// Enum CheckInOutPrematureEnum for CheckInOutPremature
            /// </summary>
            [EnumMember(Value = "CheckInOutPremature")]
            CheckInOutPrematureEnum = 160,
            
            /// <summary>
            /// Enum WorkOrderAttachmentsSizeExceededEnum for WorkOrderAttachmentsSizeExceeded
            /// </summary>
            [EnumMember(Value = "WorkOrderAttachmentsSizeExceeded")]
            WorkOrderAttachmentsSizeExceededEnum = 161,
            
            /// <summary>
            /// Enum WorkOrderNotFoundEnum for WorkOrderNotFound
            /// </summary>
            [EnumMember(Value = "WorkOrderNotFound")]
            WorkOrderNotFoundEnum = 162,
            
            /// <summary>
            /// Enum WorkOrderCreateErrorEnum for WorkOrderCreateError
            /// </summary>
            [EnumMember(Value = "WorkOrderCreateError")]
            WorkOrderCreateErrorEnum = 163,
            
            /// <summary>
            /// Enum InvalidSetupIdEnum for InvalidSetupId
            /// </summary>
            [EnumMember(Value = "InvalidSetupId")]
            InvalidSetupIdEnum = 164,
            
            /// <summary>
            /// Enum IssueListNotFoundEnum for IssueListNotFound
            /// </summary>
            [EnumMember(Value = "IssueListNotFound")]
            IssueListNotFoundEnum = 165,
            
            /// <summary>
            /// Enum InvalidIssueListFieldEnum for InvalidIssueListField
            /// </summary>
            [EnumMember(Value = "InvalidIssueListField")]
            InvalidIssueListFieldEnum = 166,
            
            /// <summary>
            /// Enum InactiveTemplateTypeEnum for InactiveTemplateType
            /// </summary>
            [EnumMember(Value = "InactiveTemplateType")]
            InactiveTemplateTypeEnum = 167,
            
            /// <summary>
            /// Enum SiteAuditNotFoundEnum for SiteAuditNotFound
            /// </summary>
            [EnumMember(Value = "SiteAuditNotFound")]
            SiteAuditNotFoundEnum = 168,
            
            /// <summary>
            /// Enum SiteAuditUpdateErrorEnum for SiteAuditUpdateError
            /// </summary>
            [EnumMember(Value = "SiteAuditUpdateError")]
            SiteAuditUpdateErrorEnum = 169,
            
            /// <summary>
            /// Enum InvalidSiteAuditParametersEnum for InvalidSiteAuditParameters
            /// </summary>
            [EnumMember(Value = "InvalidSiteAuditParameters")]
            InvalidSiteAuditParametersEnum = 170,
            
            /// <summary>
            /// Enum InvalidAdditionalApprovalCodeEnum for InvalidAdditionalApprovalCode
            /// </summary>
            [EnumMember(Value = "InvalidAdditionalApprovalCode")]
            InvalidAdditionalApprovalCodeEnum = 171,
            
            /// <summary>
            /// Enum InvalidAdditionalApprovalCodeValueEnum for InvalidAdditionalApprovalCodeValue
            /// </summary>
            [EnumMember(Value = "InvalidAdditionalApprovalCodeValue")]
            InvalidAdditionalApprovalCodeValueEnum = 172,
            
            /// <summary>
            /// Enum AdditionalApprovalCodeIsDisabledEnum for AdditionalApprovalCodeIsDisabled
            /// </summary>
            [EnumMember(Value = "AdditionalApprovalCodeIsDisabled")]
            AdditionalApprovalCodeIsDisabledEnum = 173,
            
            /// <summary>
            /// Enum InvalidOtherDescEnum for InvalidOtherDesc
            /// </summary>
            [EnumMember(Value = "InvalidOtherDesc")]
            InvalidOtherDescEnum = 174,
            
            /// <summary>
            /// Enum InvalidTax2NameEnum for InvalidTax2Name
            /// </summary>
            [EnumMember(Value = "InvalidTax2Name")]
            InvalidTax2NameEnum = 175,
            
            /// <summary>
            /// Enum InvoiceInconsistentAmountsEnum for InvoiceInconsistentAmounts
            /// </summary>
            [EnumMember(Value = "InvoiceInconsistentAmounts")]
            InvoiceInconsistentAmountsEnum = 176,
            
            /// <summary>
            /// Enum InvoiceInvalidTotalEnum for InvoiceInvalidTotal
            /// </summary>
            [EnumMember(Value = "InvoiceInvalidTotal")]
            InvoiceInvalidTotalEnum = 177,
            
            /// <summary>
            /// Enum InvoiceTotalGreaterNteEnum for InvoiceTotalGreaterNte
            /// </summary>
            [EnumMember(Value = "InvoiceTotalGreaterNte")]
            InvoiceTotalGreaterNteEnum = 178,
            
            /// <summary>
            /// Enum InvoiceExistsEnum for InvoiceExists
            /// </summary>
            [EnumMember(Value = "InvoiceExists")]
            InvoiceExistsEnum = 179,
            
            /// <summary>
            /// Enum CreatingInvoiceErrorEnum for CreatingInvoiceError
            /// </summary>
            [EnumMember(Value = "CreatingInvoiceError")]
            CreatingInvoiceErrorEnum = 180,
            
            /// <summary>
            /// Enum DuplInvNumberEnum for DuplInvNumber
            /// </summary>
            [EnumMember(Value = "DuplInvNumber")]
            DuplInvNumberEnum = 181,
            
            /// <summary>
            /// Enum InvoiceTotalNullEnum for InvoiceTotalNull
            /// </summary>
            [EnumMember(Value = "InvoiceTotalNull")]
            InvoiceTotalNullEnum = 182,
            
            /// <summary>
            /// Enum InvComplDateNullEnum for InvComplDateNull
            /// </summary>
            [EnumMember(Value = "InvComplDateNull")]
            InvComplDateNullEnum = 183,
            
            /// <summary>
            /// Enum InvDateLessComplDateEnum for InvDateLessComplDate
            /// </summary>
            [EnumMember(Value = "InvDateLessComplDate")]
            InvDateLessComplDateEnum = 184,
            
            /// <summary>
            /// Enum InvoiceNotAutoEnum for InvoiceNotAuto
            /// </summary>
            [EnumMember(Value = "InvoiceNotAuto")]
            InvoiceNotAutoEnum = 185,
            
            /// <summary>
            /// Enum ESignatureRequiredEnum for ESignatureRequired
            /// </summary>
            [EnumMember(Value = "ESignatureRequired")]
            ESignatureRequiredEnum = 186,
            
            /// <summary>
            /// Enum InvWoNotFoundEnum for InvWoNotFound
            /// </summary>
            [EnumMember(Value = "InvWoNotFound")]
            InvWoNotFoundEnum = 187,
            
            /// <summary>
            /// Enum InvWrongWoCurrEnum for InvWrongWoCurr
            /// </summary>
            [EnumMember(Value = "InvWrongWoCurr")]
            InvWrongWoCurrEnum = 188,
            
            /// <summary>
            /// Enum InvWoCurrNotFoundEnum for InvWoCurrNotFound
            /// </summary>
            [EnumMember(Value = "InvWoCurrNotFound")]
            InvWoCurrNotFoundEnum = 189,
            
            /// <summary>
            /// Enum InvoicingDisabledEnum for InvoicingDisabled
            /// </summary>
            [EnumMember(Value = "InvoicingDisabled")]
            InvoicingDisabledEnum = 190,
            
            /// <summary>
            /// Enum InvCreationUnexpectedResEnum for InvCreationUnexpectedRes
            /// </summary>
            [EnumMember(Value = "InvCreationUnexpectedRes")]
            InvCreationUnexpectedResEnum = 191,
            
            /// <summary>
            /// Enum InvoiceInvalidLaborAmountEnum for InvoiceInvalidLaborAmount
            /// </summary>
            [EnumMember(Value = "InvoiceInvalidLaborAmount")]
            InvoiceInvalidLaborAmountEnum = 192,
            
            /// <summary>
            /// Enum InvoiceInvalidMaterialAmountEnum for InvoiceInvalidMaterialAmount
            /// </summary>
            [EnumMember(Value = "InvoiceInvalidMaterialAmount")]
            InvoiceInvalidMaterialAmountEnum = 193,
            
            /// <summary>
            /// Enum InvDateOldEnum for InvDateOld
            /// </summary>
            [EnumMember(Value = "InvDateOld")]
            InvDateOldEnum = 194,
            
            /// <summary>
            /// Enum InvDateGreaterEnum for InvDateGreater
            /// </summary>
            [EnumMember(Value = "InvDateGreater")]
            InvDateGreaterEnum = 195,
            
            /// <summary>
            /// Enum InvoiceMaterialDescriptionLengthOverflowEnum for InvoiceMaterialDescriptionLengthOverflow
            /// </summary>
            [EnumMember(Value = "InvoiceMaterialDescriptionLengthOverflow")]
            InvoiceMaterialDescriptionLengthOverflowEnum = 196,
            
            /// <summary>
            /// Enum InvoiceTaxNotValidatedEnum for InvoiceTaxNotValidated
            /// </summary>
            [EnumMember(Value = "InvoiceTaxNotValidated")]
            InvoiceTaxNotValidatedEnum = 197,
            
            /// <summary>
            /// Enum InvoiceMaterialPartNumberLengthOverflowEnum for InvoiceMaterialPartNumberLengthOverflow
            /// </summary>
            [EnumMember(Value = "InvoiceMaterialPartNumberLengthOverflow")]
            InvoiceMaterialPartNumberLengthOverflowEnum = 198,
            
            /// <summary>
            /// Enum TaxValidationErrorEnum for TaxValidationError
            /// </summary>
            [EnumMember(Value = "TaxValidationError")]
            TaxValidationErrorEnum = 199,
            
            /// <summary>
            /// Enum TaxExemptionErrorEnum for TaxExemptionError
            /// </summary>
            [EnumMember(Value = "TaxExemptionError")]
            TaxExemptionErrorEnum = 200,
            
            /// <summary>
            /// Enum InvalidInvoiceNumberEnum for InvalidInvoiceNumber
            /// </summary>
            [EnumMember(Value = "InvalidInvoiceNumber")]
            InvalidInvoiceNumberEnum = 201,
            
            /// <summary>
            /// Enum GetApprovalLevelsErrorEnum for GetApprovalLevelsError
            /// </summary>
            [EnumMember(Value = "GetApprovalLevelsError")]
            GetApprovalLevelsErrorEnum = 202,
            
            /// <summary>
            /// Enum InvoiceAddUsersToMliLevelsErrorEnum for InvoiceAddUsersToMliLevelsError
            /// </summary>
            [EnumMember(Value = "InvoiceAddUsersToMliLevelsError")]
            InvoiceAddUsersToMliLevelsErrorEnum = 203,
            
            /// <summary>
            /// Enum InvoiceAddDeleteLocationsToMliLevelUserErrorEnum for InvoiceAddDeleteLocationsToMliLevelUserError
            /// </summary>
            [EnumMember(Value = "InvoiceAddDeleteLocationsToMliLevelUserError")]
            InvoiceAddDeleteLocationsToMliLevelUserErrorEnum = 204,
            
            /// <summary>
            /// Enum InvoiceUpdateMLiLevelErrorEnum for InvoiceUpdateMLiLevelError
            /// </summary>
            [EnumMember(Value = "InvoiceUpdateMLiLevelError")]
            InvoiceUpdateMLiLevelErrorEnum = 205,
            
            /// <summary>
            /// Enum InvoiceDeleteMliLevelErrorEnum for InvoiceDeleteMliLevelError
            /// </summary>
            [EnumMember(Value = "InvoiceDeleteMliLevelError")]
            InvoiceDeleteMliLevelErrorEnum = 206,
            
            /// <summary>
            /// Enum InvoiceDeleteUsersFromMliLevelErrorEnum for InvoiceDeleteUsersFromMliLevelError
            /// </summary>
            [EnumMember(Value = "InvoiceDeleteUsersFromMliLevelError")]
            InvoiceDeleteUsersFromMliLevelErrorEnum = 207,
            
            /// <summary>
            /// Enum ApprovalLevelNameLengthOverflowEnum for ApprovalLevelNameLengthOverflow
            /// </summary>
            [EnumMember(Value = "ApprovalLevelNameLengthOverflow")]
            ApprovalLevelNameLengthOverflowEnum = 208,
            
            /// <summary>
            /// Enum GstTaxErrorEnum for GstTaxError
            /// </summary>
            [EnumMember(Value = "GstTaxError")]
            GstTaxErrorEnum = 209,
            
            /// <summary>
            /// Enum Tax2ErrorEnum for Tax2Error
            /// </summary>
            [EnumMember(Value = "Tax2Error")]
            Tax2ErrorEnum = 210,
            
            /// <summary>
            /// Enum GetApprovalLevelsAndLocationsByUserErrorEnum for GetApprovalLevelsAndLocationsByUserError
            /// </summary>
            [EnumMember(Value = "GetApprovalLevelsAndLocationsByUserError")]
            GetApprovalLevelsAndLocationsByUserErrorEnum = 211,
            
            /// <summary>
            /// Enum GetAssignedUserShortInfoErrorEnum for GetAssignedUserShortInfoError
            /// </summary>
            [EnumMember(Value = "GetAssignedUserShortInfoError")]
            GetAssignedUserShortInfoErrorEnum = 212,
            
            /// <summary>
            /// Enum AssignAllLocationsToApprovalLevelAndUserErrorEnum for AssignAllLocationsToApprovalLevelAndUserError
            /// </summary>
            [EnumMember(Value = "AssignAllLocationsToApprovalLevelAndUserError")]
            AssignAllLocationsToApprovalLevelAndUserErrorEnum = 213,
            
            /// <summary>
            /// Enum GetLocationsForApprovalLevelAndAssignedUserErrorEnum for GetLocationsForApprovalLevelAndAssignedUserError
            /// </summary>
            [EnumMember(Value = "GetLocationsForApprovalLevelAndAssignedUserError")]
            GetLocationsForApprovalLevelAndAssignedUserErrorEnum = 214,
            
            /// <summary>
            /// Enum GetLocationsBySubscriberErrorEnum for GetLocationsBySubscriberError
            /// </summary>
            [EnumMember(Value = "GetLocationsBySubscriberError")]
            GetLocationsBySubscriberErrorEnum = 215,
            
            /// <summary>
            /// Enum AssignUserWithLocationsToApprovalLevelErrorEnum for AssignUserWithLocationsToApprovalLevelError
            /// </summary>
            [EnumMember(Value = "AssignUserWithLocationsToApprovalLevelError")]
            AssignUserWithLocationsToApprovalLevelErrorEnum = 216,
            
            /// <summary>
            /// Enum ReAssignUserWithLocationsToNewApprovalLevelErrorEnum for ReAssignUserWithLocationsToNewApprovalLevelError
            /// </summary>
            [EnumMember(Value = "ReAssignUserWithLocationsToNewApprovalLevelError")]
            ReAssignUserWithLocationsToNewApprovalLevelErrorEnum = 217,
            
            /// <summary>
            /// Enum ReAssignLocationsToApprovalLevelAndUserErrorEnum for ReAssignLocationsToApprovalLevelAndUserError
            /// </summary>
            [EnumMember(Value = "ReAssignLocationsToApprovalLevelAndUserError")]
            ReAssignLocationsToApprovalLevelAndUserErrorEnum = 218,
            
            /// <summary>
            /// Enum OutstandingBalanceEnum for OutstandingBalance
            /// </summary>
            [EnumMember(Value = "OutstandingBalance")]
            OutstandingBalanceEnum = 219,
            
            /// <summary>
            /// Enum InvoiceTaxDetailsEmptyEnum for InvoiceTaxDetailsEmpty
            /// </summary>
            [EnumMember(Value = "InvoiceTaxDetailsEmpty")]
            InvoiceTaxDetailsEmptyEnum = 220,
            
            /// <summary>
            /// Enum InvoiceTaxDetailsIncorrectSumEnum for InvoiceTaxDetailsIncorrectSum
            /// </summary>
            [EnumMember(Value = "InvoiceTaxDetailsIncorrectSum")]
            InvoiceTaxDetailsIncorrectSumEnum = 221,
            
            /// <summary>
            /// Enum MultipleUsersForLocationIsNotAllowedEnum for MultipleUsersForLocationIsNotAllowed
            /// </summary>
            [EnumMember(Value = "MultipleUsersForLocationIsNotAllowed")]
            MultipleUsersForLocationIsNotAllowedEnum = 222,
            
            /// <summary>
            /// Enum UserAssignedToOtherLevelEnum for UserAssignedToOtherLevel
            /// </summary>
            [EnumMember(Value = "UserAssignedToOtherLevel")]
            UserAssignedToOtherLevelEnum = 223,
            
            /// <summary>
            /// Enum UserDoesNotExistEnum for UserDoesNotExist
            /// </summary>
            [EnumMember(Value = "UserDoesNotExist")]
            UserDoesNotExistEnum = 224,
            
            /// <summary>
            /// Enum LaborLineItemRequiredEnum for LaborLineItemRequired
            /// </summary>
            [EnumMember(Value = "LaborLineItemRequired")]
            LaborLineItemRequiredEnum = 225,
            
            /// <summary>
            /// Enum MaterialLineItemRequiredEnum for MaterialLineItemRequired
            /// </summary>
            [EnumMember(Value = "MaterialLineItemRequired")]
            MaterialLineItemRequiredEnum = 226,
            
            /// <summary>
            /// Enum InvoiceDoesntExistEnum for InvoiceDoesntExist
            /// </summary>
            [EnumMember(Value = "InvoiceDoesntExist")]
            InvoiceDoesntExistEnum = 227,
            
            /// <summary>
            /// Enum InvoiceStarUnstarFailedEnum for InvoiceStarUnstarFailed
            /// </summary>
            [EnumMember(Value = "InvoiceStarUnstarFailed")]
            InvoiceStarUnstarFailedEnum = 228,
            
            /// <summary>
            /// Enum InvoiceBatchUpdateInvalidInvoiceStatusErrorEnum for InvoiceBatchUpdateInvalidInvoiceStatusError
            /// </summary>
            [EnumMember(Value = "InvoiceBatchUpdateInvalidInvoiceStatusError")]
            InvoiceBatchUpdateInvalidInvoiceStatusErrorEnum = 229,
            
            /// <summary>
            /// Enum InvoiceBatchUpdateLimitExceededErrorEnum for InvoiceBatchUpdateLimitExceededError
            /// </summary>
            [EnumMember(Value = "InvoiceBatchUpdateLimitExceededError")]
            InvoiceBatchUpdateLimitExceededErrorEnum = 230,
            
            /// <summary>
            /// Enum InvoiceNotAvailableForCurrentUserEnum for InvoiceNotAvailableForCurrentUser
            /// </summary>
            [EnumMember(Value = "InvoiceNotAvailableForCurrentUser")]
            InvoiceNotAvailableForCurrentUserEnum = 231,
            
            /// <summary>
            /// Enum InvoiceBatchUpdateInvalidRuleSetStructureEnum for InvoiceBatchUpdateInvalidRuleSetStructure
            /// </summary>
            [EnumMember(Value = "InvoiceBatchUpdateInvalidRuleSetStructure")]
            InvoiceBatchUpdateInvalidRuleSetStructureEnum = 232,
            
            /// <summary>
            /// Enum InvoiceBatchUpdateInvalidMliStructureEnum for InvoiceBatchUpdateInvalidMliStructure
            /// </summary>
            [EnumMember(Value = "InvoiceBatchUpdateInvalidMliStructure")]
            InvoiceBatchUpdateInvalidMliStructureEnum = 233,
            
            /// <summary>
            /// Enum InvoiceBatchUpdateStatusErrorEnum for InvoiceBatchUpdateStatusError
            /// </summary>
            [EnumMember(Value = "InvoiceBatchUpdateStatusError")]
            InvoiceBatchUpdateStatusErrorEnum = 234,
            
            /// <summary>
            /// Enum InvoiceMaterialUnitTypeInvalidEnum for InvoiceMaterialUnitTypeInvalid
            /// </summary>
            [EnumMember(Value = "InvoiceMaterialUnitTypeInvalid")]
            InvoiceMaterialUnitTypeInvalidEnum = 235,
            
            /// <summary>
            /// Enum ExistingBatchNumberEnum for ExistingBatchNumber
            /// </summary>
            [EnumMember(Value = "ExistingBatchNumber")]
            ExistingBatchNumberEnum = 236,
            
            /// <summary>
            /// Enum InvoiceResolutionTextRequiredEnum for InvoiceResolutionTextRequired
            /// </summary>
            [EnumMember(Value = "InvoiceResolutionTextRequired")]
            InvoiceResolutionTextRequiredEnum = 237,
            
            /// <summary>
            /// Enum GetInvoiceDefaultApprovalCodesErrorEnum for GetInvoiceDefaultApprovalCodesError
            /// </summary>
            [EnumMember(Value = "GetInvoiceDefaultApprovalCodesError")]
            GetInvoiceDefaultApprovalCodesErrorEnum = 238,
            
            /// <summary>
            /// Enum InvoiceInvalidTravelAmountEnum for InvoiceInvalidTravelAmount
            /// </summary>
            [EnumMember(Value = "InvoiceInvalidTravelAmount")]
            InvoiceInvalidTravelAmountEnum = 239,
            
            /// <summary>
            /// Enum InvoiceTravelDescriptionLengthOverflowEnum for InvoiceTravelDescriptionLengthOverflow
            /// </summary>
            [EnumMember(Value = "InvoiceTravelDescriptionLengthOverflow")]
            InvoiceTravelDescriptionLengthOverflowEnum = 240,
            
            /// <summary>
            /// Enum InvoiceTravelUnitTypeInvalidEnum for InvoiceTravelUnitTypeInvalid
            /// </summary>
            [EnumMember(Value = "InvoiceTravelUnitTypeInvalid")]
            InvoiceTravelUnitTypeInvalidEnum = 241,
            
            /// <summary>
            /// Enum TravelLineItemRequiredEnum for TravelLineItemRequired
            /// </summary>
            [EnumMember(Value = "TravelLineItemRequired")]
            TravelLineItemRequiredEnum = 242,
            
            /// <summary>
            /// Enum TravelDetailsDisabledEnum for TravelDetailsDisabled
            /// </summary>
            [EnumMember(Value = "TravelDetailsDisabled")]
            TravelDetailsDisabledEnum = 243,
            
            /// <summary>
            /// Enum OnOffShoreDisabledEnum for OnOffShoreDisabled
            /// </summary>
            [EnumMember(Value = "OnOffShoreDisabled")]
            OnOffShoreDisabledEnum = 244,
            
            /// <summary>
            /// Enum InvoiceInvalidLaborCountEnum for InvoiceInvalidLaborCount
            /// </summary>
            [EnumMember(Value = "InvoiceInvalidLaborCount")]
            InvoiceInvalidLaborCountEnum = 245,
            
            /// <summary>
            /// Enum InvoiceInvalidMaterialCountEnum for InvoiceInvalidMaterialCount
            /// </summary>
            [EnumMember(Value = "InvoiceInvalidMaterialCount")]
            InvoiceInvalidMaterialCountEnum = 246,
            
            /// <summary>
            /// Enum InvoiceInvalidTravelCountEnum for InvoiceInvalidTravelCount
            /// </summary>
            [EnumMember(Value = "InvoiceInvalidTravelCount")]
            InvoiceInvalidTravelCountEnum = 247,
            
            /// <summary>
            /// Enum SubscriberNotRegisteredForTaxValidationEnum for SubscriberNotRegisteredForTaxValidation
            /// </summary>
            [EnumMember(Value = "SubscriberNotRegisteredForTaxValidation")]
            SubscriberNotRegisteredForTaxValidationEnum = 248,
            
            /// <summary>
            /// Enum ManyDecimalsInAmountErrorEnum for ManyDecimalsInAmountError
            /// </summary>
            [EnumMember(Value = "ManyDecimalsInAmountError")]
            ManyDecimalsInAmountErrorEnum = 249,
            
            /// <summary>
            /// Enum DecimalPartQstTaxErrorEnum for DecimalPartQstTaxError
            /// </summary>
            [EnumMember(Value = "DecimalPartQstTaxError")]
            DecimalPartQstTaxErrorEnum = 250,
            
            /// <summary>
            /// Enum LaborRatesDiscrepancyEnum for LaborRatesDiscrepancy
            /// </summary>
            [EnumMember(Value = "LaborRatesDiscrepancy")]
            LaborRatesDiscrepancyEnum = 251,
            
            /// <summary>
            /// Enum PayInvoicesErrorEnum for PayInvoicesError
            /// </summary>
            [EnumMember(Value = "PayInvoicesError")]
            PayInvoicesErrorEnum = 252,
            
            /// <summary>
            /// Enum InvoiceNumberRequirementsErrorEnum for InvoiceNumberRequirementsError
            /// </summary>
            [EnumMember(Value = "InvoiceNumberRequirementsError")]
            InvoiceNumberRequirementsErrorEnum = 253,
            
            /// <summary>
            /// Enum InvoiceNumberIncorrectEnum for InvoiceNumberIncorrect
            /// </summary>
            [EnumMember(Value = "InvoiceNumberIncorrect")]
            InvoiceNumberIncorrectEnum = 254,
            
            /// <summary>
            /// Enum InvoiceNumberRegExPatternErrorEnum for InvoiceNumberRegExPatternError
            /// </summary>
            [EnumMember(Value = "InvoiceNumberRegExPatternError")]
            InvoiceNumberRegExPatternErrorEnum = 255,
            
            /// <summary>
            /// Enum GetInvoicesPendingApprovalByLocationErrorEnum for GetInvoicesPendingApprovalByLocationError
            /// </summary>
            [EnumMember(Value = "GetInvoicesPendingApprovalByLocationError")]
            GetInvoicesPendingApprovalByLocationErrorEnum = 256,
            
            /// <summary>
            /// Enum ReAssignInvoicesToUsersFailedEnum for ReAssignInvoicesToUsersFailed
            /// </summary>
            [EnumMember(Value = "ReAssignInvoicesToUsersFailed")]
            ReAssignInvoicesToUsersFailedEnum = 257,
            
            /// <summary>
            /// Enum ReAssignInvoicesUsersMatchedEnum for ReAssignInvoicesUsersMatched
            /// </summary>
            [EnumMember(Value = "ReAssignInvoicesUsersMatched")]
            ReAssignInvoicesUsersMatchedEnum = 258,
            
            /// <summary>
            /// Enum GetUsersForReassignInvoiceErrorEnum for GetUsersForReassignInvoiceError
            /// </summary>
            [EnumMember(Value = "GetUsersForReassignInvoiceError")]
            GetUsersForReassignInvoiceErrorEnum = 259,
            
            /// <summary>
            /// Enum InvalidTimeRangeActivityEnum for InvalidTimeRangeActivity
            /// </summary>
            [EnumMember(Value = "InvalidTimeRangeActivity")]
            InvalidTimeRangeActivityEnum = 260,
            
            /// <summary>
            /// Enum OutsourcedSourceInvoiceNotFoundEnum for OutsourcedSourceInvoiceNotFound
            /// </summary>
            [EnumMember(Value = "OutsourcedSourceInvoiceNotFound")]
            OutsourcedSourceInvoiceNotFoundEnum = 261,
            
            /// <summary>
            /// Enum OthersLineItemsDisabledEnum for OthersLineItemsDisabled
            /// </summary>
            [EnumMember(Value = "OthersLineItemsDisabled")]
            OthersLineItemsDisabledEnum = 262,
            
            /// <summary>
            /// Enum InvoiceInvalidOtherAmountEnum for InvoiceInvalidOtherAmount
            /// </summary>
            [EnumMember(Value = "InvoiceInvalidOtherAmount")]
            InvoiceInvalidOtherAmountEnum = 263,
            
            /// <summary>
            /// Enum InvoiceInvalidOtherCountEnum for InvoiceInvalidOtherCount
            /// </summary>
            [EnumMember(Value = "InvoiceInvalidOtherCount")]
            InvoiceInvalidOtherCountEnum = 264,
            
            /// <summary>
            /// Enum InvoiceOtherDescriptionLengthOverflowEnum for InvoiceOtherDescriptionLengthOverflow
            /// </summary>
            [EnumMember(Value = "InvoiceOtherDescriptionLengthOverflow")]
            InvoiceOtherDescriptionLengthOverflowEnum = 265,
            
            /// <summary>
            /// Enum OtherLineItemRequiredEnum for OtherLineItemRequired
            /// </summary>
            [EnumMember(Value = "OtherLineItemRequired")]
            OtherLineItemRequiredEnum = 266,
            
            /// <summary>
            /// Enum OtherLineItemsNotNegativeValueRequiredEnum for OtherLineItemsNotNegativeValueRequired
            /// </summary>
            [EnumMember(Value = "OtherLineItemsNotNegativeValueRequired")]
            OtherLineItemsNotNegativeValueRequiredEnum = 267,
            
            /// <summary>
            /// Enum InvalidLaborSkillLevelEnum for InvalidLaborSkillLevel
            /// </summary>
            [EnumMember(Value = "InvalidLaborSkillLevel")]
            InvalidLaborSkillLevelEnum = 268,
            
            /// <summary>
            /// Enum InvalidLaborTypeEnum for InvalidLaborType
            /// </summary>
            [EnumMember(Value = "InvalidLaborType")]
            InvalidLaborTypeEnum = 269,
            
            /// <summary>
            /// Enum InvalidTechnicianQuantityEnum for InvalidTechnicianQuantity
            /// </summary>
            [EnumMember(Value = "InvalidTechnicianQuantity")]
            InvalidTechnicianQuantityEnum = 270,
            
            /// <summary>
            /// Enum GetInvoicesCommonCategoriesErrorEnum for GetInvoicesCommonCategoriesError
            /// </summary>
            [EnumMember(Value = "GetInvoicesCommonCategoriesError")]
            GetInvoicesCommonCategoriesErrorEnum = 271,
            
            /// <summary>
            /// Enum InvoiceExplainDisputeEmptyEnum for InvoiceExplainDisputeEmpty
            /// </summary>
            [EnumMember(Value = "InvoiceExplainDisputeEmpty")]
            InvoiceExplainDisputeEmptyEnum = 272,
            
            /// <summary>
            /// Enum InvoiceAdditionalApprovalCodeHeaderErrorEnum for InvoiceAdditionalApprovalCodeHeaderError
            /// </summary>
            [EnumMember(Value = "InvoiceAdditionalApprovalCodeHeaderError")]
            InvoiceAdditionalApprovalCodeHeaderErrorEnum = 273,
            
            /// <summary>
            /// Enum TemplateParseSuccessEnum for TemplateParseSuccess
            /// </summary>
            [EnumMember(Value = "TemplateParseSuccess")]
            TemplateParseSuccessEnum = 274,
            
            /// <summary>
            /// Enum TemplateIncorrectHeaderErrorEnum for TemplateIncorrectHeaderError
            /// </summary>
            [EnumMember(Value = "TemplateIncorrectHeaderError")]
            TemplateIncorrectHeaderErrorEnum = 275,
            
            /// <summary>
            /// Enum TemplateEmptyTemplateErrorEnum for TemplateEmptyTemplateError
            /// </summary>
            [EnumMember(Value = "TemplateEmptyTemplateError")]
            TemplateEmptyTemplateErrorEnum = 276,
            
            /// <summary>
            /// Enum TemplateWrongFieldsCountErrorEnum for TemplateWrongFieldsCountError
            /// </summary>
            [EnumMember(Value = "TemplateWrongFieldsCountError")]
            TemplateWrongFieldsCountErrorEnum = 277,
            
            /// <summary>
            /// Enum TemplateFieldNotFoundErrorEnum for TemplateFieldNotFoundError
            /// </summary>
            [EnumMember(Value = "TemplateFieldNotFoundError")]
            TemplateFieldNotFoundErrorEnum = 278,
            
            /// <summary>
            /// Enum TemplateFieldRequiredErrorEnum for TemplateFieldRequiredError
            /// </summary>
            [EnumMember(Value = "TemplateFieldRequiredError")]
            TemplateFieldRequiredErrorEnum = 279,
            
            /// <summary>
            /// Enum TemplateParseIntErrorEnum for TemplateParseIntError
            /// </summary>
            [EnumMember(Value = "TemplateParseIntError")]
            TemplateParseIntErrorEnum = 280,
            
            /// <summary>
            /// Enum TemplateFieldSizeErrorEnum for TemplateFieldSizeError
            /// </summary>
            [EnumMember(Value = "TemplateFieldSizeError")]
            TemplateFieldSizeErrorEnum = 281,
            
            /// <summary>
            /// Enum TemplateInvalidValueErrorEnum for TemplateInvalidValueError
            /// </summary>
            [EnumMember(Value = "TemplateInvalidValueError")]
            TemplateInvalidValueErrorEnum = 282,
            
            /// <summary>
            /// Enum TemplateFieldFormatErrorEnum for TemplateFieldFormatError
            /// </summary>
            [EnumMember(Value = "TemplateFieldFormatError")]
            TemplateFieldFormatErrorEnum = 283,
            
            /// <summary>
            /// Enum TemplateFieldMaxRangeErrorEnum for TemplateFieldMaxRangeError
            /// </summary>
            [EnumMember(Value = "TemplateFieldMaxRangeError")]
            TemplateFieldMaxRangeErrorEnum = 284,
            
            /// <summary>
            /// Enum TemplateFieldMinRangeErrorEnum for TemplateFieldMinRangeError
            /// </summary>
            [EnumMember(Value = "TemplateFieldMinRangeError")]
            TemplateFieldMinRangeErrorEnum = 285,
            
            /// <summary>
            /// Enum TemplateProviderNotEnteredEnum for TemplateProviderNotEntered
            /// </summary>
            [EnumMember(Value = "TemplateProviderNotEntered")]
            TemplateProviderNotEnteredEnum = 286,
            
            /// <summary>
            /// Enum TemplateInvalidSubscriberErrorEnum for TemplateInvalidSubscriberError
            /// </summary>
            [EnumMember(Value = "TemplateInvalidSubscriberError")]
            TemplateInvalidSubscriberErrorEnum = 287,
            
            /// <summary>
            /// Enum TemplateVendorNotFoundErrorEnum for TemplateVendorNotFoundError
            /// </summary>
            [EnumMember(Value = "TemplateVendorNotFoundError")]
            TemplateVendorNotFoundErrorEnum = 288,
            
            /// <summary>
            /// Enum TemplateMissedProviderErrorEnum for TemplateMissedProviderError
            /// </summary>
            [EnumMember(Value = "TemplateMissedProviderError")]
            TemplateMissedProviderErrorEnum = 289,
            
            /// <summary>
            /// Enum TemplateProviderNotFoundErrorEnum for TemplateProviderNotFoundError
            /// </summary>
            [EnumMember(Value = "TemplateProviderNotFoundError")]
            TemplateProviderNotFoundErrorEnum = 290,
            
            /// <summary>
            /// Enum TemplateProviderSubsccriberLinkErrorEnum for TemplateProviderSubsccriberLinkError
            /// </summary>
            [EnumMember(Value = "TemplateProviderSubsccriberLinkError")]
            TemplateProviderSubsccriberLinkErrorEnum = 291,
            
            /// <summary>
            /// Enum TemplateTradeDispatchRankErrorEnum for TemplateTradeDispatchRankError
            /// </summary>
            [EnumMember(Value = "TemplateTradeDispatchRankError")]
            TemplateTradeDispatchRankErrorEnum = 292,
            
            /// <summary>
            /// Enum TemplateInvalidTradeForSubscriberErrorEnum for TemplateInvalidTradeForSubscriberError
            /// </summary>
            [EnumMember(Value = "TemplateInvalidTradeForSubscriberError")]
            TemplateInvalidTradeForSubscriberErrorEnum = 293,
            
            /// <summary>
            /// Enum TemplateStoreNotFoundErrorEnum for TemplateStoreNotFoundError
            /// </summary>
            [EnumMember(Value = "TemplateStoreNotFoundError")]
            TemplateStoreNotFoundErrorEnum = 294,
            
            /// <summary>
            /// Enum TemplateNotStoresForStateErrorEnum for TemplateNotStoresForStateError
            /// </summary>
            [EnumMember(Value = "TemplateNotStoresForStateError")]
            TemplateNotStoresForStateErrorEnum = 295,
            
            /// <summary>
            /// Enum TemplateNotStoresForCountryErrorEnum for TemplateNotStoresForCountryError
            /// </summary>
            [EnumMember(Value = "TemplateNotStoresForCountryError")]
            TemplateNotStoresForCountryErrorEnum = 296,
            
            /// <summary>
            /// Enum TemplateNotStoresForDistrictErrorEnum for TemplateNotStoresForDistrictError
            /// </summary>
            [EnumMember(Value = "TemplateNotStoresForDistrictError")]
            TemplateNotStoresForDistrictErrorEnum = 297,
            
            /// <summary>
            /// Enum TemplateNotStoresForRegionErrorEnum for TemplateNotStoresForRegionError
            /// </summary>
            [EnumMember(Value = "TemplateNotStoresForRegionError")]
            TemplateNotStoresForRegionErrorEnum = 298,
            
            /// <summary>
            /// Enum TemplateMultiplePimaryProvidersForTradeStoreErrorEnum for TemplateMultiplePimaryProvidersForTradeStoreError
            /// </summary>
            [EnumMember(Value = "TemplateMultiplePimaryProvidersForTradeStoreError")]
            TemplateMultiplePimaryProvidersForTradeStoreErrorEnum = 299,
            
            /// <summary>
            /// Enum TemplateDuplicatePrimaryRelationshipErrorEnum for TemplateDuplicatePrimaryRelationshipError
            /// </summary>
            [EnumMember(Value = "TemplateDuplicatePrimaryRelationshipError")]
            TemplateDuplicatePrimaryRelationshipErrorEnum = 300,
            
            /// <summary>
            /// Enum TemplateAmbiguousDataErrorEnum for TemplateAmbiguousDataError
            /// </summary>
            [EnumMember(Value = "TemplateAmbiguousDataError")]
            TemplateAmbiguousDataErrorEnum = 301,
            
            /// <summary>
            /// Enum TemplateIncorrectSubscriberEnum for TemplateIncorrectSubscriber
            /// </summary>
            [EnumMember(Value = "TemplateIncorrectSubscriber")]
            TemplateIncorrectSubscriberEnum = 302,
            
            /// <summary>
            /// Enum TemplateDuplicateRankingEnum for TemplateDuplicateRanking
            /// </summary>
            [EnumMember(Value = "TemplateDuplicateRanking")]
            TemplateDuplicateRankingEnum = 303,
            
            /// <summary>
            /// Enum TemplateLongitudeRangeErrorEnum for TemplateLongitudeRangeError
            /// </summary>
            [EnumMember(Value = "TemplateLongitudeRangeError")]
            TemplateLongitudeRangeErrorEnum = 304,
            
            /// <summary>
            /// Enum TemplateLatitudeRangeErrorEnum for TemplateLatitudeRangeError
            /// </summary>
            [EnumMember(Value = "TemplateLatitudeRangeError")]
            TemplateLatitudeRangeErrorEnum = 305,
            
            /// <summary>
            /// Enum TemplateInvalidStateErrorEnum for TemplateInvalidStateError
            /// </summary>
            [EnumMember(Value = "TemplateInvalidStateError")]
            TemplateInvalidStateErrorEnum = 306,
            
            /// <summary>
            /// Enum TemplateMissedSubscriberErrorEnum for TemplateMissedSubscriberError
            /// </summary>
            [EnumMember(Value = "TemplateMissedSubscriberError")]
            TemplateMissedSubscriberErrorEnum = 307,
            
            /// <summary>
            /// Enum TemplateMissedStoreIdErrorEnum for TemplateMissedStoreIdError
            /// </summary>
            [EnumMember(Value = "TemplateMissedStoreIdError")]
            TemplateMissedStoreIdErrorEnum = 308,
            
            /// <summary>
            /// Enum TemplateInvalidSubscriberIdErrorEnum for TemplateInvalidSubscriberIdError
            /// </summary>
            [EnumMember(Value = "TemplateInvalidSubscriberIdError")]
            TemplateInvalidSubscriberIdErrorEnum = 309,
            
            /// <summary>
            /// Enum TemplateOpenCloseDateErrorEnum for TemplateOpenCloseDateError
            /// </summary>
            [EnumMember(Value = "TemplateOpenCloseDateError")]
            TemplateOpenCloseDateErrorEnum = 310,
            
            /// <summary>
            /// Enum TemplateInvalidCountryErrorEnum for TemplateInvalidCountryError
            /// </summary>
            [EnumMember(Value = "TemplateInvalidCountryError")]
            TemplateInvalidCountryErrorEnum = 311,
            
            /// <summary>
            /// Enum TemplateInvalidStateForCountryErrorEnum for TemplateInvalidStateForCountryError
            /// </summary>
            [EnumMember(Value = "TemplateInvalidStateForCountryError")]
            TemplateInvalidStateForCountryErrorEnum = 312,
            
            /// <summary>
            /// Enum TemplateInvalidLocationTypeErrorEnum for TemplateInvalidLocationTypeError
            /// </summary>
            [EnumMember(Value = "TemplateInvalidLocationTypeError")]
            TemplateInvalidLocationTypeErrorEnum = 313,
            
            /// <summary>
            /// Enum TemplateMissingFullAndShortNameErrorEnum for TemplateMissingFullAndShortNameError
            /// </summary>
            [EnumMember(Value = "TemplateMissingFullAndShortNameError")]
            TemplateMissingFullAndShortNameErrorEnum = 314,
            
            /// <summary>
            /// Enum TemplateMissingCountryErrorEnum for TemplateMissingCountryError
            /// </summary>
            [EnumMember(Value = "TemplateMissingCountryError")]
            TemplateMissingCountryErrorEnum = 315,
            
            /// <summary>
            /// Enum TemplateDuplicatedDataErrorEnum for TemplateDuplicatedDataError
            /// </summary>
            [EnumMember(Value = "TemplateDuplicatedDataError")]
            TemplateDuplicatedDataErrorEnum = 316,
            
            /// <summary>
            /// Enum TemplateParentLocationNotFoundErrorEnum for TemplateParentLocationNotFoundError
            /// </summary>
            [EnumMember(Value = "TemplateParentLocationNotFoundError")]
            TemplateParentLocationNotFoundErrorEnum = 317,
            
            /// <summary>
            /// Enum TemplateParseDateTimeErrorEnum for TemplateParseDateTimeError
            /// </summary>
            [EnumMember(Value = "TemplateParseDateTimeError")]
            TemplateParseDateTimeErrorEnum = 318,
            
            /// <summary>
            /// Enum TemplateParseDecimalErrorEnum for TemplateParseDecimalError
            /// </summary>
            [EnumMember(Value = "TemplateParseDecimalError")]
            TemplateParseDecimalErrorEnum = 319,
            
            /// <summary>
            /// Enum TemplateSquareValueRangeErrorEnum for TemplateSquareValueRangeError
            /// </summary>
            [EnumMember(Value = "TemplateSquareValueRangeError")]
            TemplateSquareValueRangeErrorEnum = 320,
            
            /// <summary>
            /// Enum TemplateInvalidSquareMeasureErrorEnum for TemplateInvalidSquareMeasureError
            /// </summary>
            [EnumMember(Value = "TemplateInvalidSquareMeasureError")]
            TemplateInvalidSquareMeasureErrorEnum = 321,
            
            /// <summary>
            /// Enum TemplateTypeLabelCanNotBeUpdatedErrorEnum for TemplateTypeLabelCanNotBeUpdatedError
            /// </summary>
            [EnumMember(Value = "TemplateTypeLabelCanNotBeUpdatedError")]
            TemplateTypeLabelCanNotBeUpdatedErrorEnum = 322,
            
            /// <summary>
            /// Enum TemplateTypeLabelHaveToBeLocationForNotInventoryEnum for TemplateTypeLabelHaveToBeLocationForNotInventory
            /// </summary>
            [EnumMember(Value = "TemplateTypeLabelHaveToBeLocationForNotInventory")]
            TemplateTypeLabelHaveToBeLocationForNotInventoryEnum = 323,
            
            /// <summary>
            /// Enum TemplateInvalidPrimarySupplyLocationEnum for TemplateInvalidPrimarySupplyLocation
            /// </summary>
            [EnumMember(Value = "TemplateInvalidPrimarySupplyLocation")]
            TemplateInvalidPrimarySupplyLocationEnum = 324,
            
            /// <summary>
            /// Enum TemplateInvalidHomestoreLocationNumberEnum for TemplateInvalidHomestoreLocationNumber
            /// </summary>
            [EnumMember(Value = "TemplateInvalidHomestoreLocationNumber")]
            TemplateInvalidHomestoreLocationNumberEnum = 325,
            
            /// <summary>
            /// Enum TemplateErrorDuringCreationEnum for TemplateErrorDuringCreation
            /// </summary>
            [EnumMember(Value = "TemplateErrorDuringCreation")]
            TemplateErrorDuringCreationEnum = 326,
            
            /// <summary>
            /// Enum TemplateLocationNotFoundErrorEnum for TemplateLocationNotFoundError
            /// </summary>
            [EnumMember(Value = "TemplateLocationNotFoundError")]
            TemplateLocationNotFoundErrorEnum = 327,
            
            /// <summary>
            /// Enum TemplateDuplicatedLocationFoundErrorEnum for TemplateDuplicatedLocationFoundError
            /// </summary>
            [EnumMember(Value = "TemplateDuplicatedLocationFoundError")]
            TemplateDuplicatedLocationFoundErrorEnum = 328,
            
            /// <summary>
            /// Enum TemplateInvalidLocationHeaderErrorEnum for TemplateInvalidLocationHeaderError
            /// </summary>
            [EnumMember(Value = "TemplateInvalidLocationHeaderError")]
            TemplateInvalidLocationHeaderErrorEnum = 329,
            
            /// <summary>
            /// Enum TemplateDuplicatedLocationHeaderErrorEnum for TemplateDuplicatedLocationHeaderError
            /// </summary>
            [EnumMember(Value = "TemplateDuplicatedLocationHeaderError")]
            TemplateDuplicatedLocationHeaderErrorEnum = 330,
            
            /// <summary>
            /// Enum TemplateHeaderContainsEmptyFieldsErrorEnum for TemplateHeaderContainsEmptyFieldsError
            /// </summary>
            [EnumMember(Value = "TemplateHeaderContainsEmptyFieldsError")]
            TemplateHeaderContainsEmptyFieldsErrorEnum = 331,
            
            /// <summary>
            /// Enum TemplateLocHeadersShortHeaderErrorEnum for TemplateLocHeadersShortHeaderError
            /// </summary>
            [EnumMember(Value = "TemplateLocHeadersShortHeaderError")]
            TemplateLocHeadersShortHeaderErrorEnum = 332,
            
            /// <summary>
            /// Enum TemplateHeaderContainsDuplicatesErrorEnum for TemplateHeaderContainsDuplicatesError
            /// </summary>
            [EnumMember(Value = "TemplateHeaderContainsDuplicatesError")]
            TemplateHeaderContainsDuplicatesErrorEnum = 333,
            
            /// <summary>
            /// Enum TemplateLocationNotesStoreIdFieldLengthErrorEnum for TemplateLocationNotesStoreIdFieldLengthError
            /// </summary>
            [EnumMember(Value = "TemplateLocationNotesStoreIdFieldLengthError")]
            TemplateLocationNotesStoreIdFieldLengthErrorEnum = 334,
            
            /// <summary>
            /// Enum TemplateLocationNotesNoteValueFieldLengthErrorEnum for TemplateLocationNotesNoteValueFieldLengthError
            /// </summary>
            [EnumMember(Value = "TemplateLocationNotesNoteValueFieldLengthError")]
            TemplateLocationNotesNoteValueFieldLengthErrorEnum = 335,
            
            /// <summary>
            /// Enum TemplateErrorInvalidZipCodeEnum for TemplateErrorInvalidZipCode
            /// </summary>
            [EnumMember(Value = "TemplateErrorInvalidZipCode")]
            TemplateErrorInvalidZipCodeEnum = 336,
            
            /// <summary>
            /// Enum TemplateMissingLocationNoteHeaderEnum for TemplateMissingLocationNoteHeader
            /// </summary>
            [EnumMember(Value = "TemplateMissingLocationNoteHeader")]
            TemplateMissingLocationNoteHeaderEnum = 337,
            
            /// <summary>
            /// Enum TemplateMissingLocationNoteIdHeaderEnum for TemplateMissingLocationNoteIdHeader
            /// </summary>
            [EnumMember(Value = "TemplateMissingLocationNoteIdHeader")]
            TemplateMissingLocationNoteIdHeaderEnum = 338,
            
            /// <summary>
            /// Enum TemplateInvalidSecondarySupplyLocationEnum for TemplateInvalidSecondarySupplyLocation
            /// </summary>
            [EnumMember(Value = "TemplateInvalidSecondarySupplyLocation")]
            TemplateInvalidSecondarySupplyLocationEnum = 339,
            
            /// <summary>
            /// Enum TemplateLocationWasNotCreatedEnum for TemplateLocationWasNotCreated
            /// </summary>
            [EnumMember(Value = "TemplateLocationWasNotCreated")]
            TemplateLocationWasNotCreatedEnum = 340,
            
            /// <summary>
            /// Enum TemplateTruckNameIsEmptyEnum for TemplateTruckNameIsEmpty
            /// </summary>
            [EnumMember(Value = "TemplateTruckNameIsEmpty")]
            TemplateTruckNameIsEmptyEnum = 341,
            
            /// <summary>
            /// Enum TemplateWrongFormatEnum for TemplateWrongFormat
            /// </summary>
            [EnumMember(Value = "TemplateWrongFormat")]
            TemplateWrongFormatEnum = 342,
            
            /// <summary>
            /// Enum TemplateSubscriberNotFoundEnum for TemplateSubscriberNotFound
            /// </summary>
            [EnumMember(Value = "TemplateSubscriberNotFound")]
            TemplateSubscriberNotFoundEnum = 343,
            
            /// <summary>
            /// Enum TemplateDuplicatedLocationHeadersEnum for TemplateDuplicatedLocationHeaders
            /// </summary>
            [EnumMember(Value = "TemplateDuplicatedLocationHeaders")]
            TemplateDuplicatedLocationHeadersEnum = 344,
            
            /// <summary>
            /// Enum TemplateInvalidHeadersEnum for TemplateInvalidHeaders
            /// </summary>
            [EnumMember(Value = "TemplateInvalidHeaders")]
            TemplateInvalidHeadersEnum = 345,
            
            /// <summary>
            /// Enum TemplateInvalidPhoneErrorEnum for TemplateInvalidPhoneError
            /// </summary>
            [EnumMember(Value = "TemplateInvalidPhoneError")]
            TemplateInvalidPhoneErrorEnum = 346,
            
            /// <summary>
            /// Enum TemplateDuplicateTelecomRecordErrorEnum for TemplateDuplicateTelecomRecordError
            /// </summary>
            [EnumMember(Value = "TemplateDuplicateTelecomRecordError")]
            TemplateDuplicateTelecomRecordErrorEnum = 347,
            
            /// <summary>
            /// Enum TemplateTelecomRecordExistsErrorEnum for TemplateTelecomRecordExistsError
            /// </summary>
            [EnumMember(Value = "TemplateTelecomRecordExistsError")]
            TemplateTelecomRecordExistsErrorEnum = 348,
            
            /// <summary>
            /// Enum TemplateInvalidCategoryEnum for TemplateInvalidCategory
            /// </summary>
            [EnumMember(Value = "TemplateInvalidCategory")]
            TemplateInvalidCategoryEnum = 349,
            
            /// <summary>
            /// Enum TemplateDifferentRanksForProviderAssignmentsEnum for TemplateDifferentRanksForProviderAssignments
            /// </summary>
            [EnumMember(Value = "TemplateDifferentRanksForProviderAssignments")]
            TemplateDifferentRanksForProviderAssignmentsEnum = 350,
            
            /// <summary>
            /// Enum TemplateDuplicateRankErrorEnum for TemplateDuplicateRankError
            /// </summary>
            [EnumMember(Value = "TemplateDuplicateRankError")]
            TemplateDuplicateRankErrorEnum = 351,
            
            /// <summary>
            /// Enum TemplateProviderNonCompliantEnum for TemplateProviderNonCompliant
            /// </summary>
            [EnumMember(Value = "TemplateProviderNonCompliant")]
            TemplateProviderNonCompliantEnum = 352,
            
            /// <summary>
            /// Enum TemplateLocationIsClosedEnum for TemplateLocationIsClosed
            /// </summary>
            [EnumMember(Value = "TemplateLocationIsClosed")]
            TemplateLocationIsClosedEnum = 353,
            
            /// <summary>
            /// Enum TemplateProviderWarningEnum for TemplateProviderWarning
            /// </summary>
            [EnumMember(Value = "TemplateProviderWarning")]
            TemplateProviderWarningEnum = 354,
            
            /// <summary>
            /// Enum EmptyRequestEnum for EmptyRequest
            /// </summary>
            [EnumMember(Value = "EmptyRequest")]
            EmptyRequestEnum = 355,
            
            /// <summary>
            /// Enum InvoiceOtherUnitTypeInvalidEnum for InvoiceOtherUnitTypeInvalid
            /// </summary>
            [EnumMember(Value = "InvoiceOtherUnitTypeInvalid")]
            InvoiceOtherUnitTypeInvalidEnum = 356,
            
            /// <summary>
            /// Enum InvalidNumberOfParametersEnum for InvalidNumberOfParameters
            /// </summary>
            [EnumMember(Value = "InvalidNumberOfParameters")]
            InvalidNumberOfParametersEnum = 357,
            
            /// <summary>
            /// Enum EmptyLocationOrTradeListEnum for EmptyLocationOrTradeList
            /// </summary>
            [EnumMember(Value = "EmptyLocationOrTradeList")]
            EmptyLocationOrTradeListEnum = 358,
            
            /// <summary>
            /// Enum StoreIdRequiredErrorEnum for StoreIdRequiredError
            /// </summary>
            [EnumMember(Value = "StoreIdRequiredError")]
            StoreIdRequiredErrorEnum = 359,
            
            /// <summary>
            /// Enum InvalidUserIdErrorEnum for InvalidUserIdError
            /// </summary>
            [EnumMember(Value = "InvalidUserIdError")]
            InvalidUserIdErrorEnum = 360,
            
            /// <summary>
            /// Enum InvalidStoreIdErrorEnum for InvalidStoreIdError
            /// </summary>
            [EnumMember(Value = "InvalidStoreIdError")]
            InvalidStoreIdErrorEnum = 361,
            
            /// <summary>
            /// Enum AmbigiousErrorEnum for AmbigiousError
            /// </summary>
            [EnumMember(Value = "AmbigiousError")]
            AmbigiousErrorEnum = 362,
            
            /// <summary>
            /// Enum MliHierarchyFiledsCountErrorEnum for MliHierarchyFiledsCountError
            /// </summary>
            [EnumMember(Value = "MliHierarchyFiledsCountError")]
            MliHierarchyFiledsCountErrorEnum = 363,
            
            /// <summary>
            /// Enum MliHierarchyMaxUserNameErrorEnum for MliHierarchyMaxUserNameError
            /// </summary>
            [EnumMember(Value = "MliHierarchyMaxUserNameError")]
            MliHierarchyMaxUserNameErrorEnum = 364,
            
            /// <summary>
            /// Enum MliHierarchyDuplicateUserErrorEnum for MliHierarchyDuplicateUserError
            /// </summary>
            [EnumMember(Value = "MliHierarchyDuplicateUserError")]
            MliHierarchyDuplicateUserErrorEnum = 365,
            
            /// <summary>
            /// Enum MLiHirarchyUserExistInOtherLevelErrorEnum for MLiHirarchyUserExistInOtherLevelError
            /// </summary>
            [EnumMember(Value = "MLiHirarchyUserExistInOtherLevelError")]
            MLiHirarchyUserExistInOtherLevelErrorEnum = 366,
            
            /// <summary>
            /// Enum MissingLevelsErrorEnum for MissingLevelsError
            /// </summary>
            [EnumMember(Value = "MissingLevelsError")]
            MissingLevelsErrorEnum = 367,
            
            /// <summary>
            /// Enum DuplicateApprovalLevelsErrorEnum for DuplicateApprovalLevelsError
            /// </summary>
            [EnumMember(Value = "DuplicateApprovalLevelsError")]
            DuplicateApprovalLevelsErrorEnum = 368,
            
            /// <summary>
            /// Enum InvalidMliLocationsEnum for InvalidMliLocations
            /// </summary>
            [EnumMember(Value = "InvalidMliLocations")]
            InvalidMliLocationsEnum = 369,
            
            /// <summary>
            /// Enum InvalidMlpLocationsEnum for InvalidMlpLocations
            /// </summary>
            [EnumMember(Value = "InvalidMlpLocations")]
            InvalidMlpLocationsEnum = 370,
            
            /// <summary>
            /// Enum ApprovalLevelUsedInRulsetErrorEnum for ApprovalLevelUsedInRulsetError
            /// </summary>
            [EnumMember(Value = "ApprovalLevelUsedInRulsetError")]
            ApprovalLevelUsedInRulsetErrorEnum = 371,
            
            /// <summary>
            /// Enum GLCodeAmbiguousEnum for GLCodeAmbiguous
            /// </summary>
            [EnumMember(Value = "GLCodeAmbiguous")]
            GLCodeAmbiguousEnum = 372,
            
            /// <summary>
            /// Enum GlCodeInvalidResponceEnum for GlCodeInvalidResponce
            /// </summary>
            [EnumMember(Value = "GlCodeInvalidResponce")]
            GlCodeInvalidResponceEnum = 373,
            
            /// <summary>
            /// Enum GetRuleSetListErrorEnum for GetRuleSetListError
            /// </summary>
            [EnumMember(Value = "GetRuleSetListError")]
            GetRuleSetListErrorEnum = 374,
            
            /// <summary>
            /// Enum RuleSetDuplicateNameErrorEnum for RuleSetDuplicateNameError
            /// </summary>
            [EnumMember(Value = "RuleSetDuplicateNameError")]
            RuleSetDuplicateNameErrorEnum = 375,
            
            /// <summary>
            /// Enum RuleSetDuplicateActionErrorEnum for RuleSetDuplicateActionError
            /// </summary>
            [EnumMember(Value = "RuleSetDuplicateActionError")]
            RuleSetDuplicateActionErrorEnum = 376,
            
            /// <summary>
            /// Enum RuleSetConflictedActionErrorEnum for RuleSetConflictedActionError
            /// </summary>
            [EnumMember(Value = "RuleSetConflictedActionError")]
            RuleSetConflictedActionErrorEnum = 377,
            
            /// <summary>
            /// Enum RuleSetRuleSetDoesNotExistsErrorEnum for RuleSetRuleSetDoesNotExistsError
            /// </summary>
            [EnumMember(Value = "RuleSetRuleSetDoesNotExistsError")]
            RuleSetRuleSetDoesNotExistsErrorEnum = 378,
            
            /// <summary>
            /// Enum RuleSetTradeDoesNotExistErrorEnum for RuleSetTradeDoesNotExistError
            /// </summary>
            [EnumMember(Value = "RuleSetTradeDoesNotExistError")]
            RuleSetTradeDoesNotExistErrorEnum = 379,
            
            /// <summary>
            /// Enum RuleSetCategoryDoesNotExistErrorEnum for RuleSetCategoryDoesNotExistError
            /// </summary>
            [EnumMember(Value = "RuleSetCategoryDoesNotExistError")]
            RuleSetCategoryDoesNotExistErrorEnum = 380,
            
            /// <summary>
            /// Enum RuleSetMliLevelDoesNotExistErrorEnum for RuleSetMliLevelDoesNotExistError
            /// </summary>
            [EnumMember(Value = "RuleSetMliLevelDoesNotExistError")]
            RuleSetMliLevelDoesNotExistErrorEnum = 381,
            
            /// <summary>
            /// Enum GetRuleSetEnum for GetRuleSet
            /// </summary>
            [EnumMember(Value = "GetRuleSet")]
            GetRuleSetEnum = 382,
            
            /// <summary>
            /// Enum CreateUpdateRuleSetErrorEnum for CreateUpdateRuleSetError
            /// </summary>
            [EnumMember(Value = "CreateUpdateRuleSetError")]
            CreateUpdateRuleSetErrorEnum = 383,
            
            /// <summary>
            /// Enum DeleteRuleSetEnum for DeleteRuleSet
            /// </summary>
            [EnumMember(Value = "DeleteRuleSet")]
            DeleteRuleSetEnum = 384,
            
            /// <summary>
            /// Enum GetRuleSetCategoriesTradesCountErrorEnum for GetRuleSetCategoriesTradesCountError
            /// </summary>
            [EnumMember(Value = "GetRuleSetCategoriesTradesCountError")]
            GetRuleSetCategoriesTradesCountErrorEnum = 385,
            
            /// <summary>
            /// Enum GetRuleSetByInvoiceEnum for GetRuleSetByInvoice
            /// </summary>
            [EnumMember(Value = "GetRuleSetByInvoice")]
            GetRuleSetByInvoiceEnum = 386,
            
            /// <summary>
            /// Enum GetCategoryTradeIdsAreSelectedErrorEnum for GetCategoryTradeIdsAreSelectedError
            /// </summary>
            [EnumMember(Value = "GetCategoryTradeIdsAreSelectedError")]
            GetCategoryTradeIdsAreSelectedErrorEnum = 387,
            
            /// <summary>
            /// Enum ProposalAboveMlpLimitErrorEnum for ProposalAboveMlpLimitError
            /// </summary>
            [EnumMember(Value = "ProposalAboveMlpLimitError")]
            ProposalAboveMlpLimitErrorEnum = 388,
            
            /// <summary>
            /// Enum ProposalNextLevelHasNoAvailableActionsErrorEnum for ProposalNextLevelHasNoAvailableActionsError
            /// </summary>
            [EnumMember(Value = "ProposalNextLevelHasNoAvailableActionsError")]
            ProposalNextLevelHasNoAvailableActionsErrorEnum = 389,
            
            /// <summary>
            /// Enum DefaultRuleSetErrorEnum for DefaultRuleSetError
            /// </summary>
            [EnumMember(Value = "DefaultRuleSetError")]
            DefaultRuleSetErrorEnum = 390,
            
            /// <summary>
            /// Enum UserFilterGetErrorEnum for UserFilterGetError
            /// </summary>
            [EnumMember(Value = "UserFilterGetError")]
            UserFilterGetErrorEnum = 391,
            
            /// <summary>
            /// Enum UserFilterCreateUpdateErrorEnum for UserFilterCreateUpdateError
            /// </summary>
            [EnumMember(Value = "UserFilterCreateUpdateError")]
            UserFilterCreateUpdateErrorEnum = 392,
            
            /// <summary>
            /// Enum UserFilterDeleteErrorEnum for UserFilterDeleteError
            /// </summary>
            [EnumMember(Value = "UserFilterDeleteError")]
            UserFilterDeleteErrorEnum = 393,
            
            /// <summary>
            /// Enum UserFilterSetAsDefaultErrorEnum for UserFilterSetAsDefaultError
            /// </summary>
            [EnumMember(Value = "UserFilterSetAsDefaultError")]
            UserFilterSetAsDefaultErrorEnum = 394,
            
            /// <summary>
            /// Enum InvoiceFilterFromAlpProviderErrorEnum for InvoiceFilterFromAlpProviderError
            /// </summary>
            [EnumMember(Value = "InvoiceFilterFromAlpProviderError")]
            InvoiceFilterFromAlpProviderErrorEnum = 395,
            
            /// <summary>
            /// Enum PaymenowScProviderIdOrFbCompanyIdMustBeProvidedEnum for PaymenowScProviderIdOrFbCompanyIdMustBeProvided
            /// </summary>
            [EnumMember(Value = "PaymenowScProviderIdOrFbCompanyIdMustBeProvided")]
            PaymenowScProviderIdOrFbCompanyIdMustBeProvidedEnum = 396,
            
            /// <summary>
            /// Enum PaymenowBannersForProvidersOnlyEnum for PaymenowBannersForProvidersOnly
            /// </summary>
            [EnumMember(Value = "PaymenowBannersForProvidersOnly")]
            PaymenowBannersForProvidersOnlyEnum = 397,
            
            /// <summary>
            /// Enum PaymenowFeatureDisabledEnum for PaymenowFeatureDisabled
            /// </summary>
            [EnumMember(Value = "PaymenowFeatureDisabled")]
            PaymenowFeatureDisabledEnum = 398,
            
            /// <summary>
            /// Enum PaymenowBannerInfoNotFoundEnum for PaymenowBannerInfoNotFound
            /// </summary>
            [EnumMember(Value = "PaymenowBannerInfoNotFound")]
            PaymenowBannerInfoNotFoundEnum = 399,
            
            /// <summary>
            /// Enum PaymenowBannerInvalidNavigationUrlEnum for PaymenowBannerInvalidNavigationUrl
            /// </summary>
            [EnumMember(Value = "PaymenowBannerInvalidNavigationUrl")]
            PaymenowBannerInvalidNavigationUrlEnum = 400,
            
            /// <summary>
            /// Enum PaymenowRequestedProvidersIsNotAssignedEnum for PaymenowRequestedProvidersIsNotAssigned
            /// </summary>
            [EnumMember(Value = "PaymenowRequestedProvidersIsNotAssigned")]
            PaymenowRequestedProvidersIsNotAssignedEnum = 401,
            
            /// <summary>
            /// Enum PaymenowEmptyRequestedProvidersEnum for PaymenowEmptyRequestedProviders
            /// </summary>
            [EnumMember(Value = "PaymenowEmptyRequestedProviders")]
            PaymenowEmptyRequestedProvidersEnum = 402,
            
            /// <summary>
            /// Enum PaymentManagerFeatureDisabledEnum for PaymentManagerFeatureDisabled
            /// </summary>
            [EnumMember(Value = "PaymentManagerFeatureDisabled")]
            PaymentManagerFeatureDisabledEnum = 403,
            
            /// <summary>
            /// Enum PaymentManagerFeatureDisabledForSubscriberEnum for PaymentManagerFeatureDisabledForSubscriber
            /// </summary>
            [EnumMember(Value = "PaymentManagerFeatureDisabledForSubscriber")]
            PaymentManagerFeatureDisabledForSubscriberEnum = 404,
            
            /// <summary>
            /// Enum PaymentSystemCurrentlyUnavailableEnum for PaymentSystemCurrentlyUnavailable
            /// </summary>
            [EnumMember(Value = "PaymentSystemCurrentlyUnavailable")]
            PaymentSystemCurrentlyUnavailableEnum = 405,
            
            /// <summary>
            /// Enum CurrencyNotSupportedEnum for CurrencyNotSupported
            /// </summary>
            [EnumMember(Value = "CurrencyNotSupported")]
            CurrencyNotSupportedEnum = 406,
            
            /// <summary>
            /// Enum PaymentSystemAccountNotFoundEnum for PaymentSystemAccountNotFound
            /// </summary>
            [EnumMember(Value = "PaymentSystemAccountNotFound")]
            PaymentSystemAccountNotFoundEnum = 407,
            
            /// <summary>
            /// Enum FeatureIsOffEnum for FeatureIsOff
            /// </summary>
            [EnumMember(Value = "FeatureIsOff")]
            FeatureIsOffEnum = 408,
            
            /// <summary>
            /// Enum EarlyPayFeatureWithoutPaymentManagetFeatureErrorEnum for EarlyPayFeatureWithoutPaymentManagetFeatureError
            /// </summary>
            [EnumMember(Value = "EarlyPayFeatureWithoutPaymentManagetFeatureError")]
            EarlyPayFeatureWithoutPaymentManagetFeatureErrorEnum = 409,
            
            /// <summary>
            /// Enum FtpTestErrorEnum for FtpTestError
            /// </summary>
            [EnumMember(Value = "FtpTestError")]
            FtpTestErrorEnum = 410,
            
            /// <summary>
            /// Enum AcceptTermsAndConditionsRequestInvalidEnum for AcceptTermsAndConditionsRequestInvalid
            /// </summary>
            [EnumMember(Value = "AcceptTermsAndConditionsRequestInvalid")]
            AcceptTermsAndConditionsRequestInvalidEnum = 411,
            
            /// <summary>
            /// Enum PaymentSystemAccountErrorEnum for PaymentSystemAccountError
            /// </summary>
            [EnumMember(Value = "PaymentSystemAccountError")]
            PaymentSystemAccountErrorEnum = 412,
            
            /// <summary>
            /// Enum SendReportToFTPEnum for SendReportToFTP
            /// </summary>
            [EnumMember(Value = "SendReportToFTP")]
            SendReportToFTPEnum = 413,
            
            /// <summary>
            /// Enum SchedulingErrorEnum for SchedulingError
            /// </summary>
            [EnumMember(Value = "SchedulingError")]
            SchedulingErrorEnum = 414,
            
            /// <summary>
            /// Enum BadPaymentDataEnum for BadPaymentData
            /// </summary>
            [EnumMember(Value = "BadPaymentData")]
            BadPaymentDataEnum = 415,
            
            /// <summary>
            /// Enum InvoicesCanNotBeRepaidEnum for InvoicesCanNotBeRepaid
            /// </summary>
            [EnumMember(Value = "InvoicesCanNotBeRepaid")]
            InvoicesCanNotBeRepaidEnum = 416,
            
            /// <summary>
            /// Enum InvoicesCanNotBeRescheduledEnum for InvoicesCanNotBeRescheduled
            /// </summary>
            [EnumMember(Value = "InvoicesCanNotBeRescheduled")]
            InvoicesCanNotBeRescheduledEnum = 417,
            
            /// <summary>
            /// Enum InvalidBillingAddressEnum for InvalidBillingAddress
            /// </summary>
            [EnumMember(Value = "InvalidBillingAddress")]
            InvalidBillingAddressEnum = 418,
            
            /// <summary>
            /// Enum PaymentManagerGeneralSettingsNotFoundEnum for PaymentManagerGeneralSettingsNotFound
            /// </summary>
            [EnumMember(Value = "PaymentManagerGeneralSettingsNotFound")]
            PaymentManagerGeneralSettingsNotFoundEnum = 419,
            
            /// <summary>
            /// Enum PaymentManagerEInvoiceSettingsNotFoundEnum for PaymentManagerEInvoiceSettingsNotFound
            /// </summary>
            [EnumMember(Value = "PaymentManagerEInvoiceSettingsNotFound")]
            PaymentManagerEInvoiceSettingsNotFoundEnum = 420,
            
            /// <summary>
            /// Enum BadgeVerificationFailedEnum for BadgeVerificationFailed
            /// </summary>
            [EnumMember(Value = "BadgeVerificationFailed")]
            BadgeVerificationFailedEnum = 421,
            
            /// <summary>
            /// Enum BadgeTempPassEmptyEnum for BadgeTempPassEmpty
            /// </summary>
            [EnumMember(Value = "BadgeTempPassEmpty")]
            BadgeTempPassEmptyEnum = 422,
            
            /// <summary>
            /// Enum BadgeScanRequiredEnum for BadgeScanRequired
            /// </summary>
            [EnumMember(Value = "BadgeScanRequired")]
            BadgeScanRequiredEnum = 423,
            
            /// <summary>
            /// Enum SolvedIssueSubmitFailedEnum for SolvedIssueSubmitFailed
            /// </summary>
            [EnumMember(Value = "SolvedIssueSubmitFailed")]
            SolvedIssueSubmitFailedEnum = 424,
            
            /// <summary>
            /// Enum SolvedIssueInvalidLocationIdEnum for SolvedIssueInvalidLocationId
            /// </summary>
            [EnumMember(Value = "SolvedIssueInvalidLocationId")]
            SolvedIssueInvalidLocationIdEnum = 425,
            
            /// <summary>
            /// Enum SolvedIssueInvalidCategoryIdEnum for SolvedIssueInvalidCategoryId
            /// </summary>
            [EnumMember(Value = "SolvedIssueInvalidCategoryId")]
            SolvedIssueInvalidCategoryIdEnum = 426,
            
            /// <summary>
            /// Enum SolvedIssueInvalidTradeIdEnum for SolvedIssueInvalidTradeId
            /// </summary>
            [EnumMember(Value = "SolvedIssueInvalidTradeId")]
            SolvedIssueInvalidTradeIdEnum = 427,
            
            /// <summary>
            /// Enum SolvedIssueInvalidPriorityIdEnum for SolvedIssueInvalidPriorityId
            /// </summary>
            [EnumMember(Value = "SolvedIssueInvalidPriorityId")]
            SolvedIssueInvalidPriorityIdEnum = 428,
            
            /// <summary>
            /// Enum SolvedIssueInvalidSourceEnum for SolvedIssueInvalidSource
            /// </summary>
            [EnumMember(Value = "SolvedIssueInvalidSource")]
            SolvedIssueInvalidSourceEnum = 429,
            
            /// <summary>
            /// Enum SolvedIssueInvalidProblemCodeEnum for SolvedIssueInvalidProblemCode
            /// </summary>
            [EnumMember(Value = "SolvedIssueInvalidProblemCode")]
            SolvedIssueInvalidProblemCodeEnum = 430,
            
            /// <summary>
            /// Enum SolvedIssueInvalidTypeEnum for SolvedIssueInvalidType
            /// </summary>
            [EnumMember(Value = "SolvedIssueInvalidType")]
            SolvedIssueInvalidTypeEnum = 431,
            
            /// <summary>
            /// Enum SubmitFeedbackErrorWoStatusEnum for SubmitFeedbackErrorWoStatus
            /// </summary>
            [EnumMember(Value = "SubmitFeedbackErrorWoStatus")]
            SubmitFeedbackErrorWoStatusEnum = 432,
            
            /// <summary>
            /// Enum SubmitFeedbackInvalidAnswerEnum for SubmitFeedbackInvalidAnswer
            /// </summary>
            [EnumMember(Value = "SubmitFeedbackInvalidAnswer")]
            SubmitFeedbackInvalidAnswerEnum = 433,
            
            /// <summary>
            /// Enum SubmitFeedbackInvalidTrackingNumberEnum for SubmitFeedbackInvalidTrackingNumber
            /// </summary>
            [EnumMember(Value = "SubmitFeedbackInvalidTrackingNumber")]
            SubmitFeedbackInvalidTrackingNumberEnum = 434,
            
            /// <summary>
            /// Enum SubmitFeedbackInvalidSubscriberEnum for SubmitFeedbackInvalidSubscriber
            /// </summary>
            [EnumMember(Value = "SubmitFeedbackInvalidSubscriber")]
            SubmitFeedbackInvalidSubscriberEnum = 435,
            
            /// <summary>
            /// Enum SubmitFeedbackInvalidScoreEnum for SubmitFeedbackInvalidScore
            /// </summary>
            [EnumMember(Value = "SubmitFeedbackInvalidScore")]
            SubmitFeedbackInvalidScoreEnum = 436,
            
            /// <summary>
            /// Enum SubmitFeedbackUnsatisfactoryCommentRequiredEnum for SubmitFeedbackUnsatisfactoryCommentRequired
            /// </summary>
            [EnumMember(Value = "SubmitFeedbackUnsatisfactoryCommentRequired")]
            SubmitFeedbackUnsatisfactoryCommentRequiredEnum = 437,
            
            /// <summary>
            /// Enum SubmitFeedbackInvalidReviewIdEnum for SubmitFeedbackInvalidReviewId
            /// </summary>
            [EnumMember(Value = "SubmitFeedbackInvalidReviewId")]
            SubmitFeedbackInvalidReviewIdEnum = 438,
            
            /// <summary>
            /// Enum SubmitFeedbackInvalidSetupIdEnum for SubmitFeedbackInvalidSetupId
            /// </summary>
            [EnumMember(Value = "SubmitFeedbackInvalidSetupId")]
            SubmitFeedbackInvalidSetupIdEnum = 439,
            
            /// <summary>
            /// Enum FeedbackSetupInvalidSetupIdEnum for FeedbackSetupInvalidSetupId
            /// </summary>
            [EnumMember(Value = "FeedbackSetupInvalidSetupId")]
            FeedbackSetupInvalidSetupIdEnum = 440,
            
            /// <summary>
            /// Enum S3SaveErrorEnum for S3SaveError
            /// </summary>
            [EnumMember(Value = "S3SaveError")]
            S3SaveErrorEnum = 441,
            
            /// <summary>
            /// Enum AbsSaveErrorEnum for AbsSaveError
            /// </summary>
            [EnumMember(Value = "AbsSaveError")]
            AbsSaveErrorEnum = 442,
            
            /// <summary>
            /// Enum GoodDataLoginFailedEnum for GoodDataLoginFailed
            /// </summary>
            [EnumMember(Value = "GoodDataLoginFailed")]
            GoodDataLoginFailedEnum = 443,
            
            /// <summary>
            /// Enum GoodDataElementUriErrorEnum for GoodDataElementUriError
            /// </summary>
            [EnumMember(Value = "GoodDataElementUriError")]
            GoodDataElementUriErrorEnum = 444,
            
            /// <summary>
            /// Enum GoodDataReportResultUriErrorEnum for GoodDataReportResultUriError
            /// </summary>
            [EnumMember(Value = "GoodDataReportResultUriError")]
            GoodDataReportResultUriErrorEnum = 445,
            
            /// <summary>
            /// Enum GoodDataReportResultEmptyEnum for GoodDataReportResultEmpty
            /// </summary>
            [EnumMember(Value = "GoodDataReportResultEmpty")]
            GoodDataReportResultEmptyEnum = 446,
            
            /// <summary>
            /// Enum GoodDataDesReportResCountErrorEnum for GoodDataDesReportResCountError
            /// </summary>
            [EnumMember(Value = "GoodDataDesReportResCountError")]
            GoodDataDesReportResCountErrorEnum = 447,
            
            /// <summary>
            /// Enum GoodDataDesReportResConvertErrorEnum for GoodDataDesReportResConvertError
            /// </summary>
            [EnumMember(Value = "GoodDataDesReportResConvertError")]
            GoodDataDesReportResConvertErrorEnum = 448,
            
            /// <summary>
            /// Enum GoodDataDesDisplayFormAttributeEmptyEnum for GoodDataDesDisplayFormAttributeEmpty
            /// </summary>
            [EnumMember(Value = "GoodDataDesDisplayFormAttributeEmpty")]
            GoodDataDesDisplayFormAttributeEmptyEnum = 449,
            
            /// <summary>
            /// Enum InvalidProposalAmountLimitEnum for InvalidProposalAmountLimit
            /// </summary>
            [EnumMember(Value = "InvalidProposalAmountLimit")]
            InvalidProposalAmountLimitEnum = 450,
            
            /// <summary>
            /// Enum GetApprovalProposalReasonsErrorEnum for GetApprovalProposalReasonsError
            /// </summary>
            [EnumMember(Value = "GetApprovalProposalReasonsError")]
            GetApprovalProposalReasonsErrorEnum = 451,
            
            /// <summary>
            /// Enum GetEmailRecipientsErrorEnum for GetEmailRecipientsError
            /// </summary>
            [EnumMember(Value = "GetEmailRecipientsError")]
            GetEmailRecipientsErrorEnum = 452,
            
            /// <summary>
            /// Enum GetAssignProposalReasonsErrorEnum for GetAssignProposalReasonsError
            /// </summary>
            [EnumMember(Value = "GetAssignProposalReasonsError")]
            GetAssignProposalReasonsErrorEnum = 453,
            
            /// <summary>
            /// Enum AssetTypeDuplicateNameErrorEnum for AssetTypeDuplicateNameError
            /// </summary>
            [EnumMember(Value = "AssetTypeDuplicateNameError")]
            AssetTypeDuplicateNameErrorEnum = 454,
            
            /// <summary>
            /// Enum AssetTypeDoesntExistErrorEnum for AssetTypeDoesntExistError
            /// </summary>
            [EnumMember(Value = "AssetTypeDoesntExistError")]
            AssetTypeDoesntExistErrorEnum = 455,
            
            /// <summary>
            /// Enum AssetTypeFailUpdateRefrigerantPurposeEnum for AssetTypeFailUpdateRefrigerantPurpose
            /// </summary>
            [EnumMember(Value = "AssetTypeFailUpdateRefrigerantPurpose")]
            AssetTypeFailUpdateRefrigerantPurposeEnum = 456,
            
            /// <summary>
            /// Enum AssetTypeDeleteFailedEnum for AssetTypeDeleteFailed
            /// </summary>
            [EnumMember(Value = "AssetTypeDeleteFailed")]
            AssetTypeDeleteFailedEnum = 457,
            
            /// <summary>
            /// Enum ExistingAssetsFoundForAssetTypeEnum for ExistingAssetsFoundForAssetType
            /// </summary>
            [EnumMember(Value = "ExistingAssetsFoundForAssetType")]
            ExistingAssetsFoundForAssetTypeEnum = 458,
            
            /// <summary>
            /// Enum CantModifyAssetTypeParentIdEnum for CantModifyAssetTypeParentId
            /// </summary>
            [EnumMember(Value = "CantModifyAssetTypeParentId")]
            CantModifyAssetTypeParentIdEnum = 459,
            
            /// <summary>
            /// Enum InvalidAssetTypeNameEnum for InvalidAssetTypeName
            /// </summary>
            [EnumMember(Value = "InvalidAssetTypeName")]
            InvalidAssetTypeNameEnum = 460,
            
            /// <summary>
            /// Enum AssetTypeInheritanceErrorEnum for AssetTypeInheritanceError
            /// </summary>
            [EnumMember(Value = "AssetTypeInheritanceError")]
            AssetTypeInheritanceErrorEnum = 461,
            
            /// <summary>
            /// Enum ExistingProposalsFoundForAssetTypeEnum for ExistingProposalsFoundForAssetType
            /// </summary>
            [EnumMember(Value = "ExistingProposalsFoundForAssetType")]
            ExistingProposalsFoundForAssetTypeEnum = 462,
            
            /// <summary>
            /// Enum InstallPurchaseDateOverflowEnum for InstallPurchaseDateOverflow
            /// </summary>
            [EnumMember(Value = "InstallPurchaseDateOverflow")]
            InstallPurchaseDateOverflowEnum = 463,
            
            /// <summary>
            /// Enum WOexistsWithSomeAssetsEnum for WOexistsWithSomeAssets
            /// </summary>
            [EnumMember(Value = "WOexistsWithSomeAssets")]
            WOexistsWithSomeAssetsEnum = 464,
            
            /// <summary>
            /// Enum PartsChangeFailedEnum for PartsChangeFailed
            /// </summary>
            [EnumMember(Value = "PartsChangeFailed")]
            PartsChangeFailedEnum = 465,
            
            /// <summary>
            /// Enum PartsReasonCodeErrorEnum for PartsReasonCodeError
            /// </summary>
            [EnumMember(Value = "PartsReasonCodeError")]
            PartsReasonCodeErrorEnum = 466,
            
            /// <summary>
            /// Enum PartsUseDateErrorEnum for PartsUseDateError
            /// </summary>
            [EnumMember(Value = "PartsUseDateError")]
            PartsUseDateErrorEnum = 467,
            
            /// <summary>
            /// Enum PartsRefrigerantAlreadyExistsEnum for PartsRefrigerantAlreadyExists
            /// </summary>
            [EnumMember(Value = "PartsRefrigerantAlreadyExists")]
            PartsRefrigerantAlreadyExistsEnum = 468,
            
            /// <summary>
            /// Enum PartsChargeHistoryAlreadyExistsEnum for PartsChargeHistoryAlreadyExists
            /// </summary>
            [EnumMember(Value = "PartsChargeHistoryAlreadyExists")]
            PartsChargeHistoryAlreadyExistsEnum = 469,
            
            /// <summary>
            /// Enum PartsNotFoundEnum for PartsNotFound
            /// </summary>
            [EnumMember(Value = "PartsNotFound")]
            PartsNotFoundEnum = 470,
            
            /// <summary>
            /// Enum BulkPartUseIncorrectWorkOrderEnum for BulkPartUseIncorrectWorkOrder
            /// </summary>
            [EnumMember(Value = "BulkPartUseIncorrectWorkOrder")]
            BulkPartUseIncorrectWorkOrderEnum = 471,
            
            /// <summary>
            /// Enum BulkPartsByIdsNotFoundEnum for BulkPartsByIdsNotFound
            /// </summary>
            [EnumMember(Value = "BulkPartsByIdsNotFound")]
            BulkPartsByIdsNotFoundEnum = 472,
            
            /// <summary>
            /// Enum BulkPartsMultipleWosErrorEnum for BulkPartsMultipleWosError
            /// </summary>
            [EnumMember(Value = "BulkPartsMultipleWosError")]
            BulkPartsMultipleWosErrorEnum = 473,
            
            /// <summary>
            /// Enum BulkPartsIncorrectIsRefrigerantParamEnum for BulkPartsIncorrectIsRefrigerantParam
            /// </summary>
            [EnumMember(Value = "BulkPartsIncorrectIsRefrigerantParam")]
            BulkPartsIncorrectIsRefrigerantParamEnum = 474,
            
            /// <summary>
            /// Enum BulkPartsIsRefrigerantCanNotbeChangedEnum for BulkPartsIsRefrigerantCanNotbeChanged
            /// </summary>
            [EnumMember(Value = "BulkPartsIsRefrigerantCanNotbeChanged")]
            BulkPartsIsRefrigerantCanNotbeChangedEnum = 475,
            
            /// <summary>
            /// Enum BulkPartsReasonCodeChangeErrorEnum for BulkPartsReasonCodeChangeError
            /// </summary>
            [EnumMember(Value = "BulkPartsReasonCodeChangeError")]
            BulkPartsReasonCodeChangeErrorEnum = 476,
            
            /// <summary>
            /// Enum BulkPartsInvalidAssetAndReasonCodeParamsEnum for BulkPartsInvalidAssetAndReasonCodeParams
            /// </summary>
            [EnumMember(Value = "BulkPartsInvalidAssetAndReasonCodeParams")]
            BulkPartsInvalidAssetAndReasonCodeParamsEnum = 477,
            
            /// <summary>
            /// Enum BulkPartsInvalidAssetIdEnum for BulkPartsInvalidAssetId
            /// </summary>
            [EnumMember(Value = "BulkPartsInvalidAssetId")]
            BulkPartsInvalidAssetIdEnum = 478,
            
            /// <summary>
            /// Enum BulkPartsInvalidInitialChargeCodeEnum for BulkPartsInvalidInitialChargeCode
            /// </summary>
            [EnumMember(Value = "BulkPartsInvalidInitialChargeCode")]
            BulkPartsInvalidInitialChargeCodeEnum = 479,
            
            /// <summary>
            /// Enum BulkPartsAssetDoesntContainChargeEnum for BulkPartsAssetDoesntContainCharge
            /// </summary>
            [EnumMember(Value = "BulkPartsAssetDoesntContainCharge")]
            BulkPartsAssetDoesntContainChargeEnum = 480,
            
            /// <summary>
            /// Enum BulkPartsIsInventoryFlagErrorEnum for BulkPartsIsInventoryFlagError
            /// </summary>
            [EnumMember(Value = "BulkPartsIsInventoryFlagError")]
            BulkPartsIsInventoryFlagErrorEnum = 481,
            
            /// <summary>
            /// Enum BulkPartsLeakAlreadyInProcessErrorEnum for BulkPartsLeakAlreadyInProcessError
            /// </summary>
            [EnumMember(Value = "BulkPartsLeakAlreadyInProcessError")]
            BulkPartsLeakAlreadyInProcessErrorEnum = 482,
            
            /// <summary>
            /// Enum BulkPartsInvalidDateRangeErrorEnum for BulkPartsInvalidDateRangeError
            /// </summary>
            [EnumMember(Value = "BulkPartsInvalidDateRangeError")]
            BulkPartsInvalidDateRangeErrorEnum = 483,
            
            /// <summary>
            /// Enum BulkPartsMoeNumberRequiredErrorEnum for BulkPartsMoeNumberRequiredError
            /// </summary>
            [EnumMember(Value = "BulkPartsMoeNumberRequiredError")]
            BulkPartsMoeNumberRequiredErrorEnum = 484,
            
            /// <summary>
            /// Enum BulkPartsSystemChargeExceededEnum for BulkPartsSystemChargeExceeded
            /// </summary>
            [EnumMember(Value = "BulkPartsSystemChargeExceeded")]
            BulkPartsSystemChargeExceededEnum = 485,
            
            /// <summary>
            /// Enum BulkRefrigerantuUageBlockedEnum for BulkRefrigerantuUageBlocked
            /// </summary>
            [EnumMember(Value = "BulkRefrigerantuUageBlocked")]
            BulkRefrigerantuUageBlockedEnum = 486,
            
            /// <summary>
            /// Enum BulkIDsNotBeNullEnum for BulkIDsNotBeNull
            /// </summary>
            [EnumMember(Value = "BulkIDsNotBeNull")]
            BulkIDsNotBeNullEnum = 487,
            
            /// <summary>
            /// Enum BulkPartRemovalNotAllowedOnRetrofitRetireWOEnum for BulkPartRemovalNotAllowedOnRetrofitRetireWO
            /// </summary>
            [EnumMember(Value = "BulkPartRemovalNotAllowedOnRetrofitRetireWO")]
            BulkPartRemovalNotAllowedOnRetrofitRetireWOEnum = 488,
            
            /// <summary>
            /// Enum BulkAddPartUsagesNotAllowedAfterRetrofitRetireCreationEnum for BulkAddPartUsagesNotAllowedAfterRetrofitRetireCreation
            /// </summary>
            [EnumMember(Value = "BulkAddPartUsagesNotAllowedAfterRetrofitRetireCreation")]
            BulkAddPartUsagesNotAllowedAfterRetrofitRetireCreationEnum = 489,
            
            /// <summary>
            /// Enum BulkRetrofitRetireRefrigerantUsageReasonCanNotChangedEnum for BulkRetrofitRetireRefrigerantUsageReasonCanNotChanged
            /// </summary>
            [EnumMember(Value = "BulkRetrofitRetireRefrigerantUsageReasonCanNotChanged")]
            BulkRetrofitRetireRefrigerantUsageReasonCanNotChangedEnum = 490,
            
            /// <summary>
            /// Enum BulkInitialChargeSystemExpansionNotAllowedEnum for BulkInitialChargeSystemExpansionNotAllowed
            /// </summary>
            [EnumMember(Value = "BulkInitialChargeSystemExpansionNotAllowed")]
            BulkInitialChargeSystemExpansionNotAllowedEnum = 491,
            
            /// <summary>
            /// Enum BulkInventoryPartIdCanNotBeChangedEnum for BulkInventoryPartIdCanNotBeChanged
            /// </summary>
            [EnumMember(Value = "BulkInventoryPartIdCanNotBeChanged")]
            BulkInventoryPartIdCanNotBeChangedEnum = 492,
            
            /// <summary>
            /// Enum BulkInventoryLocationIdCanNotBeChangedEnum for BulkInventoryLocationIdCanNotBeChanged
            /// </summary>
            [EnumMember(Value = "BulkInventoryLocationIdCanNotBeChanged")]
            BulkInventoryLocationIdCanNotBeChangedEnum = 493,
            
            /// <summary>
            /// Enum BulkPartsDuplicatedRequestEnum for BulkPartsDuplicatedRequest
            /// </summary>
            [EnumMember(Value = "BulkPartsDuplicatedRequest")]
            BulkPartsDuplicatedRequestEnum = 494,
            
            /// <summary>
            /// Enum BulkChangePartsIncorrectRefrigerantTypeEnum for BulkChangePartsIncorrectRefrigerantType
            /// </summary>
            [EnumMember(Value = "BulkChangePartsIncorrectRefrigerantType")]
            BulkChangePartsIncorrectRefrigerantTypeEnum = 495,
            
            /// <summary>
            /// Enum BulkPartsWorkOrderInProcessingEnum for BulkPartsWorkOrderInProcessing
            /// </summary>
            [EnumMember(Value = "BulkPartsWorkOrderInProcessing")]
            BulkPartsWorkOrderInProcessingEnum = 496,
            
            /// <summary>
            /// Enum BulkPartsRetroRetireIsInProgressOnThisDateEnum for BulkPartsRetroRetireIsInProgressOnThisDate
            /// </summary>
            [EnumMember(Value = "BulkPartsRetroRetireIsInProgressOnThisDate")]
            BulkPartsRetroRetireIsInProgressOnThisDateEnum = 497,
            
            /// <summary>
            /// Enum BulkPartsCanNotAttachRefrigerantUsageToPlanLeakRecordEnum for BulkPartsCanNotAttachRefrigerantUsageToPlanLeakRecord
            /// </summary>
            [EnumMember(Value = "BulkPartsCanNotAttachRefrigerantUsageToPlanLeakRecord")]
            BulkPartsCanNotAttachRefrigerantUsageToPlanLeakRecordEnum = 498,
            
            /// <summary>
            /// Enum RetrofitRetireCanNotBeRemovedEnum for RetrofitRetireCanNotBeRemoved
            /// </summary>
            [EnumMember(Value = "RetrofitRetireCanNotBeRemoved")]
            RetrofitRetireCanNotBeRemovedEnum = 499,
            
            /// <summary>
            /// Enum RetroRetirePartsCantbeChangedEnum for RetroRetirePartsCantbeChanged
            /// </summary>
            [EnumMember(Value = "RetroRetirePartsCantbeChanged")]
            RetroRetirePartsCantbeChangedEnum = 500,
            
            /// <summary>
            /// Enum BulkPartsInventoryApiFailedEnum for BulkPartsInventoryApiFailed
            /// </summary>
            [EnumMember(Value = "BulkPartsInventoryApiFailed")]
            BulkPartsInventoryApiFailedEnum = 501,
            
            /// <summary>
            /// Enum BadNotificationSubscriptionEventTypeEnum for BadNotificationSubscriptionEventType
            /// </summary>
            [EnumMember(Value = "BadNotificationSubscriptionEventType")]
            BadNotificationSubscriptionEventTypeEnum = 502,
            
            /// <summary>
            /// Enum RefrigerantUseDateOutOfTheLeakProcessDateRangeEnum for RefrigerantUseDateOutOfTheLeakProcessDateRange
            /// </summary>
            [EnumMember(Value = "RefrigerantUseDateOutOfTheLeakProcessDateRange")]
            RefrigerantUseDateOutOfTheLeakProcessDateRangeEnum = 503,
            
            /// <summary>
            /// Enum InventoryUsageNotAllowedOnRTrackingConnectedSubAndSubcontractorsEnum for InventoryUsageNotAllowedOnRTrackingConnectedSubAndSubcontractors
            /// </summary>
            [EnumMember(Value = "InventoryUsageNotAllowedOnRTrackingConnectedSubAndSubcontractors")]
            InventoryUsageNotAllowedOnRTrackingConnectedSubAndSubcontractorsEnum = 504,
            
            /// <summary>
            /// Enum BulkExternalWoCurrentlyDoesntExistsEnum for BulkExternalWoCurrentlyDoesntExists
            /// </summary>
            [EnumMember(Value = "BulkExternalWoCurrentlyDoesntExists")]
            BulkExternalWoCurrentlyDoesntExistsEnum = 505,
            
            /// <summary>
            /// Enum BulkConnectorOnlyExternalClientAssetsCanBeProcessedEnum for BulkConnectorOnlyExternalClientAssetsCanBeProcessed
            /// </summary>
            [EnumMember(Value = "BulkConnectorOnlyExternalClientAssetsCanBeProcessed")]
            BulkConnectorOnlyExternalClientAssetsCanBeProcessedEnum = 506,
            
            /// <summary>
            /// Enum BulkConnectorOnlyClientAssetsCouldBeProcessedEnum for BulkConnectorOnlyClientAssetsCouldBeProcessed
            /// </summary>
            [EnumMember(Value = "BulkConnectorOnlyClientAssetsCouldBeProcessed")]
            BulkConnectorOnlyClientAssetsCouldBeProcessedEnum = 507,
            
            /// <summary>
            /// Enum LeakRecordHasWrongDateValueEnum for LeakRecordHasWrongDateValue
            /// </summary>
            [EnumMember(Value = "LeakRecordHasWrongDateValue")]
            LeakRecordHasWrongDateValueEnum = 508,
            
            /// <summary>
            /// Enum HasUncompliedLeakRecordInAnoutherWOEnum for HasUncompliedLeakRecordInAnoutherWO
            /// </summary>
            [EnumMember(Value = "HasUncompliedLeakRecordInAnoutherWO")]
            HasUncompliedLeakRecordInAnoutherWOEnum = 509,
            
            /// <summary>
            /// Enum HasUncompletedWOOnAnotherLeakRecordEnum for HasUncompletedWOOnAnotherLeakRecord
            /// </summary>
            [EnumMember(Value = "HasUncompletedWOOnAnotherLeakRecord")]
            HasUncompletedWOOnAnotherLeakRecordEnum = 510,
            
            /// <summary>
            /// Enum OnlyOneAssetWorkOrderPairEnum for OnlyOneAssetWorkOrderPair
            /// </summary>
            [EnumMember(Value = "OnlyOneAssetWorkOrderPair")]
            OnlyOneAssetWorkOrderPairEnum = 511,
            
            /// <summary>
            /// Enum OneLeakRecordMustBeOnCompletedWOEnum for OneLeakRecordMustBeOnCompletedWO
            /// </summary>
            [EnumMember(Value = "OneLeakRecordMustBeOnCompletedWO")]
            OneLeakRecordMustBeOnCompletedWOEnum = 512,
            
            /// <summary>
            /// Enum LeakRecordNotFaundEnum for LeakRecordNotFaund
            /// </summary>
            [EnumMember(Value = "LeakRecordNotFaund")]
            LeakRecordNotFaundEnum = 513,
            
            /// <summary>
            /// Enum AssetIDWoIdIsRequiredEnum for AssetIDWoIdIsRequired
            /// </summary>
            [EnumMember(Value = "AssetIDWoIdIsRequired")]
            AssetIDWoIdIsRequiredEnum = 514,
            
            /// <summary>
            /// Enum BulkPartsReasonCodeRetrofitEnum for BulkPartsReasonCodeRetrofit
            /// </summary>
            [EnumMember(Value = "BulkPartsReasonCodeRetrofit")]
            BulkPartsReasonCodeRetrofitEnum = 515,
            
            /// <summary>
            /// Enum MlpImportLevelErrorEnum for MlpImportLevelError
            /// </summary>
            [EnumMember(Value = "MlpImportLevelError")]
            MlpImportLevelErrorEnum = 516,
            
            /// <summary>
            /// Enum UpdateMlpUserLevelErrorEnum for UpdateMlpUserLevelError
            /// </summary>
            [EnumMember(Value = "UpdateMlpUserLevelError")]
            UpdateMlpUserLevelErrorEnum = 517,
            
            /// <summary>
            /// Enum InvalidHolidayNameEnum for InvalidHolidayName
            /// </summary>
            [EnumMember(Value = "InvalidHolidayName")]
            InvalidHolidayNameEnum = 518,
            
            /// <summary>
            /// Enum DuplicateHolidayNameEnum for DuplicateHolidayName
            /// </summary>
            [EnumMember(Value = "DuplicateHolidayName")]
            DuplicateHolidayNameEnum = 519,
            
            /// <summary>
            /// Enum HolidaysDeleteFailedEnum for HolidaysDeleteFailed
            /// </summary>
            [EnumMember(Value = "HolidaysDeleteFailed")]
            HolidaysDeleteFailedEnum = 520,
            
            /// <summary>
            /// Enum HolidaysExcludeInsertFailedEnum for HolidaysExcludeInsertFailed
            /// </summary>
            [EnumMember(Value = "HolidaysExcludeInsertFailed")]
            HolidaysExcludeInsertFailedEnum = 521,
            
            /// <summary>
            /// Enum HolidaysUpdateFailedEnum for HolidaysUpdateFailed
            /// </summary>
            [EnumMember(Value = "HolidaysUpdateFailed")]
            HolidaysUpdateFailedEnum = 522,
            
            /// <summary>
            /// Enum HolidaysInsertFailedEnum for HolidaysInsertFailed
            /// </summary>
            [EnumMember(Value = "HolidaysInsertFailed")]
            HolidaysInsertFailedEnum = 523,
            
            /// <summary>
            /// Enum HolidaysExcludeDeleteFailedEnum for HolidaysExcludeDeleteFailed
            /// </summary>
            [EnumMember(Value = "HolidaysExcludeDeleteFailed")]
            HolidaysExcludeDeleteFailedEnum = 524,
            
            /// <summary>
            /// Enum BusinessHoursDeleteFailedEnum for BusinessHoursDeleteFailed
            /// </summary>
            [EnumMember(Value = "BusinessHoursDeleteFailed")]
            BusinessHoursDeleteFailedEnum = 525,
            
            /// <summary>
            /// Enum BusinessHoursUpdateFailedEnum for BusinessHoursUpdateFailed
            /// </summary>
            [EnumMember(Value = "BusinessHoursUpdateFailed")]
            BusinessHoursUpdateFailedEnum = 526,
            
            /// <summary>
            /// Enum BusinessHoursInsertFailedEnum for BusinessHoursInsertFailed
            /// </summary>
            [EnumMember(Value = "BusinessHoursInsertFailed")]
            BusinessHoursInsertFailedEnum = 527,
            
            /// <summary>
            /// Enum InvalidTimeEnum for InvalidTime
            /// </summary>
            [EnumMember(Value = "InvalidTime")]
            InvalidTimeEnum = 528,
            
            /// <summary>
            /// Enum HolidayForDeleteNotFoundEnum for HolidayForDeleteNotFound
            /// </summary>
            [EnumMember(Value = "HolidayForDeleteNotFound")]
            HolidayForDeleteNotFoundEnum = 529,
            
            /// <summary>
            /// Enum InvalidChecklistIdEnum for InvalidChecklistId
            /// </summary>
            [EnumMember(Value = "InvalidChecklistId")]
            InvalidChecklistIdEnum = 530,
            
            /// <summary>
            /// Enum NoLinkBetweenSubscriberAndProviderEnum for NoLinkBetweenSubscriberAndProvider
            /// </summary>
            [EnumMember(Value = "NoLinkBetweenSubscriberAndProvider")]
            NoLinkBetweenSubscriberAndProviderEnum = 531,
            
            /// <summary>
            /// Enum WorkforceCreateContractorErrorEnum for WorkforceCreateContractorError
            /// </summary>
            [EnumMember(Value = "WorkforceCreateContractorError")]
            WorkforceCreateContractorErrorEnum = 532,
            
            /// <summary>
            /// Enum InvalidCertificateIdEnum for InvalidCertificateId
            /// </summary>
            [EnumMember(Value = "InvalidCertificateId")]
            InvalidCertificateIdEnum = 533,
            
            /// <summary>
            /// Enum MaxThresholdExceededEnum for MaxThresholdExceeded
            /// </summary>
            [EnumMember(Value = "MaxThresholdExceeded")]
            MaxThresholdExceededEnum = 534,
            
            /// <summary>
            /// Enum MaxTriggerRateExceededEnum for MaxTriggerRateExceeded
            /// </summary>
            [EnumMember(Value = "MaxTriggerRateExceeded")]
            MaxTriggerRateExceededEnum = 535,
            
            /// <summary>
            /// Enum LeakPriorityIsRequiredEnum for LeakPriorityIsRequired
            /// </summary>
            [EnumMember(Value = "LeakPriorityIsRequired")]
            LeakPriorityIsRequiredEnum = 536,
            
            /// <summary>
            /// Enum MissingRTSettingsEnum for MissingRTSettings
            /// </summary>
            [EnumMember(Value = "MissingRTSettings")]
            MissingRTSettingsEnum = 537,
            
            /// <summary>
            /// Enum ResolutionCodesLimitExceededEnum for ResolutionCodesLimitExceeded
            /// </summary>
            [EnumMember(Value = "ResolutionCodesLimitExceeded")]
            ResolutionCodesLimitExceededEnum = 538,
            
            /// <summary>
            /// Enum ResolutionCodesAreRequiredEnum for ResolutionCodesAreRequired
            /// </summary>
            [EnumMember(Value = "ResolutionCodesAreRequired")]
            ResolutionCodesAreRequiredEnum = 539,
            
            /// <summary>
            /// Enum RootCauseIsRequiredEnum for RootCauseIsRequired
            /// </summary>
            [EnumMember(Value = "RootCauseIsRequired")]
            RootCauseIsRequiredEnum = 540,
            
            /// <summary>
            /// Enum RootCauseTextIsRequiredEnum for RootCauseTextIsRequired
            /// </summary>
            [EnumMember(Value = "RootCauseTextIsRequired")]
            RootCauseTextIsRequiredEnum = 541,
            
            /// <summary>
            /// Enum NoAccessToSetRootCauseTextEnum for NoAccessToSetRootCauseText
            /// </summary>
            [EnumMember(Value = "NoAccessToSetRootCauseText")]
            NoAccessToSetRootCauseTextEnum = 542,
            
            /// <summary>
            /// Enum RootCauseTextMaxLengthExceededEnum for RootCauseTextMaxLengthExceeded
            /// </summary>
            [EnumMember(Value = "RootCauseTextMaxLengthExceeded")]
            RootCauseTextMaxLengthExceededEnum = 543,
            
            /// <summary>
            /// Enum ResolutionCodeTextIsRequiredEnum for ResolutionCodeTextIsRequired
            /// </summary>
            [EnumMember(Value = "ResolutionCodeTextIsRequired")]
            ResolutionCodeTextIsRequiredEnum = 544,
            
            /// <summary>
            /// Enum NoAccessToSetResolutionCodeTextEnum for NoAccessToSetResolutionCodeText
            /// </summary>
            [EnumMember(Value = "NoAccessToSetResolutionCodeText")]
            NoAccessToSetResolutionCodeTextEnum = 545,
            
            /// <summary>
            /// Enum ResolutionCodeTextMaxLengthExceededEnum for ResolutionCodeTextMaxLengthExceeded
            /// </summary>
            [EnumMember(Value = "ResolutionCodeTextMaxLengthExceeded")]
            ResolutionCodeTextMaxLengthExceededEnum = 546,
            
            /// <summary>
            /// Enum ResolutionCodeTextMustBeUniqueEnum for ResolutionCodeTextMustBeUnique
            /// </summary>
            [EnumMember(Value = "ResolutionCodeTextMustBeUnique")]
            ResolutionCodeTextMustBeUniqueEnum = 547,
            
            /// <summary>
            /// Enum ResolutionCodeWithoutFreeTextMustBeUniqueEnum for ResolutionCodeWithoutFreeTextMustBeUnique
            /// </summary>
            [EnumMember(Value = "ResolutionCodeWithoutFreeTextMustBeUnique")]
            ResolutionCodeWithoutFreeTextMustBeUniqueEnum = 548,
            
            /// <summary>
            /// Enum PendingResCodesStatusCannotBeChangedToInvoiceableBySubscriberEnum for PendingResCodesStatusCannotBeChangedToInvoiceableBySubscriber
            /// </summary>
            [EnumMember(Value = "PendingResCodesStatusCannotBeChangedToInvoiceableBySubscriber")]
            PendingResCodesStatusCannotBeChangedToInvoiceableBySubscriberEnum = 549,
            
            /// <summary>
            /// Enum ResolutionAndRootCauseCodesAreRequiredToMoveToInvoiceableStatusByProviderEnum for ResolutionAndRootCauseCodesAreRequiredToMoveToInvoiceableStatusByProvider
            /// </summary>
            [EnumMember(Value = "ResolutionAndRootCauseCodesAreRequiredToMoveToInvoiceableStatusByProvider")]
            ResolutionAndRootCauseCodesAreRequiredToMoveToInvoiceableStatusByProviderEnum = 550,
            
            /// <summary>
            /// Enum AssetCategoriesLimitExceededEnum for AssetCategoriesLimitExceeded
            /// </summary>
            [EnumMember(Value = "AssetCategoriesLimitExceeded")]
            AssetCategoriesLimitExceededEnum = 551,
            
            /// <summary>
            /// Enum NoAccessToAssetCategoriesEnum for NoAccessToAssetCategories
            /// </summary>
            [EnumMember(Value = "NoAccessToAssetCategories")]
            NoAccessToAssetCategoriesEnum = 552,
            
            /// <summary>
            /// Enum AssetCategoriesAreRequiredEnum for AssetCategoriesAreRequired
            /// </summary>
            [EnumMember(Value = "AssetCategoriesAreRequired")]
            AssetCategoriesAreRequiredEnum = 553,
            
            /// <summary>
            /// Enum InvalidAssetCategoryIdEnum for InvalidAssetCategoryId
            /// </summary>
            [EnumMember(Value = "InvalidAssetCategoryId")]
            InvalidAssetCategoryIdEnum = 554,
            
            /// <summary>
            /// Enum NoAssetCategoriesOnWorkOrderEnum for NoAssetCategoriesOnWorkOrder
            /// </summary>
            [EnumMember(Value = "NoAssetCategoriesOnWorkOrder")]
            NoAssetCategoriesOnWorkOrderEnum = 555,
            
            /// <summary>
            /// Enum RootCausesMustBeForAllWorkOrderAssetCategoriesEnum for RootCausesMustBeForAllWorkOrderAssetCategories
            /// </summary>
            [EnumMember(Value = "RootCausesMustBeForAllWorkOrderAssetCategories")]
            RootCausesMustBeForAllWorkOrderAssetCategoriesEnum = 556,
            
            /// <summary>
            /// Enum RootCauseTextMustBeUniqueEnum for RootCauseTextMustBeUnique
            /// </summary>
            [EnumMember(Value = "RootCauseTextMustBeUnique")]
            RootCauseTextMustBeUniqueEnum = 557,
            
            /// <summary>
            /// Enum AssetCategoryIsRequiredEnum for AssetCategoryIsRequired
            /// </summary>
            [EnumMember(Value = "AssetCategoryIsRequired")]
            AssetCategoryIsRequiredEnum = 558,
            
            /// <summary>
            /// Enum MultipleRootCausesMethodMustBeUsedEnum for MultipleRootCausesMethodMustBeUsed
            /// </summary>
            [EnumMember(Value = "MultipleRootCausesMethodMustBeUsed")]
            MultipleRootCausesMethodMustBeUsedEnum = 559,
            
            /// <summary>
            /// Enum ResolutionCodesMustBeForAllWorkOrderAssetCategoriesEnum for ResolutionCodesMustBeForAllWorkOrderAssetCategories
            /// </summary>
            [EnumMember(Value = "ResolutionCodesMustBeForAllWorkOrderAssetCategories")]
            ResolutionCodesMustBeForAllWorkOrderAssetCategoriesEnum = 560,
            
            /// <summary>
            /// Enum UnknownStoreIdEnum for UnknownStoreId
            /// </summary>
            [EnumMember(Value = "UnknownStoreId")]
            UnknownStoreIdEnum = 561,
            
            /// <summary>
            /// Enum UsesRefrigerantAttributeNotChangedEnum for UsesRefrigerantAttributeNotChanged
            /// </summary>
            [EnumMember(Value = "UsesRefrigerantAttributeNotChanged")]
            UsesRefrigerantAttributeNotChangedEnum = 562,
            
            /// <summary>
            /// Enum AssetTagDuplicateEnum for AssetTagDuplicate
            /// </summary>
            [EnumMember(Value = "AssetTagDuplicate")]
            AssetTagDuplicateEnum = 563,
            
            /// <summary>
            /// Enum AssetTagIdDuplicateEnum for AssetTagIdDuplicate
            /// </summary>
            [EnumMember(Value = "AssetTagIdDuplicate")]
            AssetTagIdDuplicateEnum = 564,
            
            /// <summary>
            /// Enum UnknownEquipmentTypeEnum for UnknownEquipmentType
            /// </summary>
            [EnumMember(Value = "UnknownEquipmentType")]
            UnknownEquipmentTypeEnum = 565,
            
            /// <summary>
            /// Enum ParentIdInOtherLocationEnum for ParentIdInOtherLocation
            /// </summary>
            [EnumMember(Value = "ParentIdInOtherLocation")]
            ParentIdInOtherLocationEnum = 566,
            
            /// <summary>
            /// Enum UnknownBrandNameEnum for UnknownBrandName
            /// </summary>
            [EnumMember(Value = "UnknownBrandName")]
            UnknownBrandNameEnum = 567,
            
            /// <summary>
            /// Enum CARBRequiredManufacturedDateEnum for CARBRequiredManufacturedDate
            /// </summary>
            [EnumMember(Value = "CARBRequiredManufacturedDate")]
            CARBRequiredManufacturedDateEnum = 568,
            
            /// <summary>
            /// Enum CARBRequiredInstallDateEnum for CARBRequiredInstallDate
            /// </summary>
            [EnumMember(Value = "CARBRequiredInstallDate")]
            CARBRequiredInstallDateEnum = 569,
            
            /// <summary>
            /// Enum TradeNotFoundEnum for TradeNotFound
            /// </summary>
            [EnumMember(Value = "TradeNotFound")]
            TradeNotFoundEnum = 570,
            
            /// <summary>
            /// Enum AssetDoesntExistEnum for AssetDoesntExist
            /// </summary>
            [EnumMember(Value = "AssetDoesntExist")]
            AssetDoesntExistEnum = 571,
            
            /// <summary>
            /// Enum AssetIsNotRefrigerantEnum for AssetIsNotRefrigerant
            /// </summary>
            [EnumMember(Value = "AssetIsNotRefrigerant")]
            AssetIsNotRefrigerantEnum = 572,
            
            /// <summary>
            /// Enum AssetCantContainRefrigerantEnum for AssetCantContainRefrigerant
            /// </summary>
            [EnumMember(Value = "AssetCantContainRefrigerant")]
            AssetCantContainRefrigerantEnum = 573,
            
            /// <summary>
            /// Enum OnlyRackAssetsContainingCircuitsEnum for OnlyRackAssetsContainingCircuits
            /// </summary>
            [EnumMember(Value = "OnlyRackAssetsContainingCircuits")]
            OnlyRackAssetsContainingCircuitsEnum = 574,
            
            /// <summary>
            /// Enum ConnectorAssetTagIdCanNotBeChangedEnum for ConnectorAssetTagIdCanNotBeChanged
            /// </summary>
            [EnumMember(Value = "ConnectorAssetTagIdCanNotBeChanged")]
            ConnectorAssetTagIdCanNotBeChangedEnum = 575,
            
            /// <summary>
            /// Enum ConnectorAssetLocationIdCanNotBeChangedEnum for ConnectorAssetLocationIdCanNotBeChanged
            /// </summary>
            [EnumMember(Value = "ConnectorAssetLocationIdCanNotBeChanged")]
            ConnectorAssetLocationIdCanNotBeChangedEnum = 576,
            
            /// <summary>
            /// Enum AssetTagCantBeUpdatedEnum for AssetTagCantBeUpdated
            /// </summary>
            [EnumMember(Value = "AssetTagCantBeUpdated")]
            AssetTagCantBeUpdatedEnum = 577,
            
            /// <summary>
            /// Enum AssetTypeIsNotonfiguredToManageRTAssetsEnum for AssetTypeIsNotСonfiguredToManageRTAssets
            /// </summary>
            [EnumMember(Value = "AssetTypeIsNotСonfiguredToManageRTAssets")]
            AssetTypeIsNotonfiguredToManageRTAssetsEnum = 578,
            
            /// <summary>
            /// Enum RefrigerantTrackingNotAvailableForLocationEnum for RefrigerantTrackingNotAvailableForLocation
            /// </summary>
            [EnumMember(Value = "RefrigerantTrackingNotAvailableForLocation")]
            RefrigerantTrackingNotAvailableForLocationEnum = 579,
            
            /// <summary>
            /// Enum UsesRefrigerantRequiredByAssetTypeSettingsEnum for UsesRefrigerantRequiredByAssetTypeSettings
            /// </summary>
            [EnumMember(Value = "UsesRefrigerantRequiredByAssetTypeSettings")]
            UsesRefrigerantRequiredByAssetTypeSettingsEnum = 580,
            
            /// <summary>
            /// Enum AssetLocationTradeDoesntCorrespondToWOEnum for AssetLocationTradeDoesntCorrespondToWO
            /// </summary>
            [EnumMember(Value = "AssetLocationTradeDoesntCorrespondToWO")]
            AssetLocationTradeDoesntCorrespondToWOEnum = 581,
            
            /// <summary>
            /// Enum AssetLocationSelectedPMmoduleEnum for AssetLocationSelectedPMmodule
            /// </summary>
            [EnumMember(Value = "AssetLocationSelectedPMmodule")]
            AssetLocationSelectedPMmoduleEnum = 582,
            
            /// <summary>
            /// Enum UpdateAssetRepairStatusValidationEnum for UpdateAssetRepairStatusValidation
            /// </summary>
            [EnumMember(Value = "UpdateAssetRepairStatusValidation")]
            UpdateAssetRepairStatusValidationEnum = 583,
            
            /// <summary>
            /// Enum HasCircuitsCantBeChangeEnum for HasCircuitsCantBeChange
            /// </summary>
            [EnumMember(Value = "HasCircuitsCantBeChange")]
            HasCircuitsCantBeChangeEnum = 584,
            
            /// <summary>
            /// Enum HasComponentsCantBeChangeEnum for HasComponentsCantBeChange
            /// </summary>
            [EnumMember(Value = "HasComponentsCantBeChange")]
            HasComponentsCantBeChangeEnum = 585,
            
            /// <summary>
            /// Enum CircuitCanNotBeConnectedToCircuitEnum for CircuitCanNotBeConnectedToCircuit
            /// </summary>
            [EnumMember(Value = "CircuitCanNotBeConnectedToCircuit")]
            CircuitCanNotBeConnectedToCircuitEnum = 586,
            
            /// <summary>
            /// Enum RTCircuitCanNotBeConnectedToNonRTAssetEnum for RTCircuitCanNotBeConnectedToNonRTAsset
            /// </summary>
            [EnumMember(Value = "RTCircuitCanNotBeConnectedToNonRTAsset")]
            RTCircuitCanNotBeConnectedToNonRTAssetEnum = 587,
            
            /// <summary>
            /// Enum RTComponentCanNotBeConnectedToNonRTAssetEnum for RTComponentCanNotBeConnectedToNonRTAsset
            /// </summary>
            [EnumMember(Value = "RTComponentCanNotBeConnectedToNonRTAsset")]
            RTComponentCanNotBeConnectedToNonRTAssetEnum = 588,
            
            /// <summary>
            /// Enum ComponentCanNotBeConnectedToComponentEnum for ComponentCanNotBeConnectedToComponent
            /// </summary>
            [EnumMember(Value = "ComponentCanNotBeConnectedToComponent")]
            ComponentCanNotBeConnectedToComponentEnum = 589,
            
            /// <summary>
            /// Enum NonRTComponentCanNotBeConnectedToRtAssetEnum for NonRTComponentCanNotBeConnectedToRtAsset
            /// </summary>
            [EnumMember(Value = "NonRTComponentCanNotBeConnectedToRtAsset")]
            NonRTComponentCanNotBeConnectedToRtAssetEnum = 590,
            
            /// <summary>
            /// Enum NonRTCircuitCanNotBeConnectedToRtAssetEnum for NonRTCircuitCanNotBeConnectedToRtAsset
            /// </summary>
            [EnumMember(Value = "NonRTCircuitCanNotBeConnectedToRtAsset")]
            NonRTCircuitCanNotBeConnectedToRtAssetEnum = 591,
            
            /// <summary>
            /// Enum ComponentCanNotBeConnectedToCircuitEnum for ComponentCanNotBeConnectedToCircuit
            /// </summary>
            [EnumMember(Value = "ComponentCanNotBeConnectedToCircuit")]
            ComponentCanNotBeConnectedToCircuitEnum = 592,
            
            /// <summary>
            /// Enum ParentAssetShouldHaveEitherComponentsNorCircuitsEnum for ParentAssetShouldHaveEitherComponentsNorCircuits
            /// </summary>
            [EnumMember(Value = "ParentAssetShouldHaveEitherComponentsNorCircuits")]
            ParentAssetShouldHaveEitherComponentsNorCircuitsEnum = 593,
            
            /// <summary>
            /// Enum ParentAssetCantHaveComponentsEnum for ParentAssetCantHaveComponents
            /// </summary>
            [EnumMember(Value = "ParentAssetCantHaveComponents")]
            ParentAssetCantHaveComponentsEnum = 594,
            
            /// <summary>
            /// Enum ParentAssetCantHaveCircuitsEnum for ParentAssetCantHaveCircuits
            /// </summary>
            [EnumMember(Value = "ParentAssetCantHaveCircuits")]
            ParentAssetCantHaveCircuitsEnum = 595,
            
            /// <summary>
            /// Enum MultipleAssetsFoundForTheRequestedTagIdEnum for MultipleAssetsFoundForTheRequestedTagId
            /// </summary>
            [EnumMember(Value = "MultipleAssetsFoundForTheRequestedTagId")]
            MultipleAssetsFoundForTheRequestedTagIdEnum = 596,
            
            /// <summary>
            /// Enum DeclineWorkOrderFailedEnum for DeclineWorkOrderFailed
            /// </summary>
            [EnumMember(Value = "DeclineWorkOrderFailed")]
            DeclineWorkOrderFailedEnum = 597,
            
            /// <summary>
            /// Enum AcceptWorkOrderFailedEnum for AcceptWorkOrderFailed
            /// </summary>
            [EnumMember(Value = "AcceptWorkOrderFailed")]
            AcceptWorkOrderFailedEnum = 598,
            
            /// <summary>
            /// Enum WorkOrderWasAcceptedEnum for WorkOrderWasAccepted
            /// </summary>
            [EnumMember(Value = "WorkOrderWasAccepted")]
            WorkOrderWasAcceptedEnum = 599,
            
            /// <summary>
            /// Enum SaveMliAuditReportSettingEnum for SaveMliAuditReportSetting
            /// </summary>
            [EnumMember(Value = "SaveMliAuditReportSetting")]
            SaveMliAuditReportSettingEnum = 600,
            
            /// <summary>
            /// Enum GetMliAuditReportSettingEnum for GetMliAuditReportSetting
            /// </summary>
            [EnumMember(Value = "GetMliAuditReportSetting")]
            GetMliAuditReportSettingEnum = 601,
            
            /// <summary>
            /// Enum SaveMliAuditReportResultEnum for SaveMliAuditReportResult
            /// </summary>
            [EnumMember(Value = "SaveMliAuditReportResult")]
            SaveMliAuditReportResultEnum = 602,
            
            /// <summary>
            /// Enum SaveMliAuditReportSendEmailStatusEnum for SaveMliAuditReportSendEmailStatus
            /// </summary>
            [EnumMember(Value = "SaveMliAuditReportSendEmailStatus")]
            SaveMliAuditReportSendEmailStatusEnum = 603,
            
            /// <summary>
            /// Enum SaveMliAuditReportFilePathEnum for SaveMliAuditReportFilePath
            /// </summary>
            [EnumMember(Value = "SaveMliAuditReportFilePath")]
            SaveMliAuditReportFilePathEnum = 604,
            
            /// <summary>
            /// Enum GetSubscribersEnabledScheduleEnum for GetSubscribersEnabledSchedule
            /// </summary>
            [EnumMember(Value = "GetSubscribersEnabledSchedule")]
            GetSubscribersEnabledScheduleEnum = 605,
            
            /// <summary>
            /// Enum SaveMliAuditInfoErrorEnum for SaveMliAuditInfoError
            /// </summary>
            [EnumMember(Value = "SaveMliAuditInfoError")]
            SaveMliAuditInfoErrorEnum = 606,
            
            /// <summary>
            /// Enum TaxValidationAddNewCompanySettingsErrorEnum for TaxValidationAddNewCompanySettingsError
            /// </summary>
            [EnumMember(Value = "TaxValidationAddNewCompanySettingsError")]
            TaxValidationAddNewCompanySettingsErrorEnum = 607,
            
            /// <summary>
            /// Enum TaxValidationUpdateCompanySettingsErrorEnum for TaxValidationUpdateCompanySettingsError
            /// </summary>
            [EnumMember(Value = "TaxValidationUpdateCompanySettingsError")]
            TaxValidationUpdateCompanySettingsErrorEnum = 608,
            
            /// <summary>
            /// Enum ProjectAssociationErrorEnum for ProjectAssociationError
            /// </summary>
            [EnumMember(Value = "ProjectAssociationError")]
            ProjectAssociationErrorEnum = 609,
            
            /// <summary>
            /// Enum GetProjectsInvoiceAmountsErrorEnum for GetProjectsInvoiceAmountsError
            /// </summary>
            [EnumMember(Value = "GetProjectsInvoiceAmountsError")]
            GetProjectsInvoiceAmountsErrorEnum = 610,
            
            /// <summary>
            /// Enum TaxCodeNotUniqueErrorEnum for TaxCodeNotUniqueError
            /// </summary>
            [EnumMember(Value = "TaxCodeNotUniqueError")]
            TaxCodeNotUniqueErrorEnum = 611,
            
            /// <summary>
            /// Enum FieldLengthIsTooLongErrorEnum for FieldLengthIsTooLongError
            /// </summary>
            [EnumMember(Value = "FieldLengthIsTooLongError")]
            FieldLengthIsTooLongErrorEnum = 612,
            
            /// <summary>
            /// Enum SetTaxCodesBulkErrorEnum for SetTaxCodesBulkError
            /// </summary>
            [EnumMember(Value = "SetTaxCodesBulkError")]
            SetTaxCodesBulkErrorEnum = 613,
            
            /// <summary>
            /// Enum InvoiceAdditionalApprovalCodeValueErrorEnum for InvoiceAdditionalApprovalCodeValueError
            /// </summary>
            [EnumMember(Value = "InvoiceAdditionalApprovalCodeValueError")]
            InvoiceAdditionalApprovalCodeValueErrorEnum = 614,
            
            /// <summary>
            /// Enum BulkUpdateInvoicePaymentErrorEnum for BulkUpdateInvoicePaymentError
            /// </summary>
            [EnumMember(Value = "BulkUpdateInvoicePaymentError")]
            BulkUpdateInvoicePaymentErrorEnum = 615,
            
            /// <summary>
            /// Enum ContractServiceExistEnum for ContractServiceExist
            /// </summary>
            [EnumMember(Value = "ContractServiceExist")]
            ContractServiceExistEnum = 616,
            
            /// <summary>
            /// Enum ContractServiceCantChangeTradeEnum for ContractServiceCantChangeTrade
            /// </summary>
            [EnumMember(Value = "ContractServiceCantChangeTrade")]
            ContractServiceCantChangeTradeEnum = 617,
            
            /// <summary>
            /// Enum ContractServiceCantChangeCategoryEnum for ContractServiceCantChangeCategory
            /// </summary>
            [EnumMember(Value = "ContractServiceCantChangeCategory")]
            ContractServiceCantChangeCategoryEnum = 618,
            
            /// <summary>
            /// Enum ContractServiceCantChangeProviderEnum for ContractServiceCantChangeProvider
            /// </summary>
            [EnumMember(Value = "ContractServiceCantChangeProvider")]
            ContractServiceCantChangeProviderEnum = 619,
            
            /// <summary>
            /// Enum ContractServicePMServiceCantChangeTradeEnum for ContractServicePMServiceCantChangeTrade
            /// </summary>
            [EnumMember(Value = "ContractServicePMServiceCantChangeTrade")]
            ContractServicePMServiceCantChangeTradeEnum = 620,
            
            /// <summary>
            /// Enum ContractServicePMServiceCantChangeCategoryEnum for ContractServicePMServiceCantChangeCategory
            /// </summary>
            [EnumMember(Value = "ContractServicePMServiceCantChangeCategory")]
            ContractServicePMServiceCantChangeCategoryEnum = 621,
            
            /// <summary>
            /// Enum WorkRequestDescriptionIsRequiredEnum for WorkRequestDescriptionIsRequired
            /// </summary>
            [EnumMember(Value = "WorkRequestDescriptionIsRequired")]
            WorkRequestDescriptionIsRequiredEnum = 622,
            
            /// <summary>
            /// Enum WorkRequestCallDateIsRequiredEnum for WorkRequestCallDateIsRequired
            /// </summary>
            [EnumMember(Value = "WorkRequestCallDateIsRequired")]
            WorkRequestCallDateIsRequiredEnum = 623,
            
            /// <summary>
            /// Enum WorkRequestIssueIsRequiredEnum for WorkRequestIssueIsRequired
            /// </summary>
            [EnumMember(Value = "WorkRequestIssueIsRequired")]
            WorkRequestIssueIsRequiredEnum = 624,
            
            /// <summary>
            /// Enum WorkRequestCallDateHasWrongFormatEnum for WorkRequestCallDateHasWrongFormat
            /// </summary>
            [EnumMember(Value = "WorkRequestCallDateHasWrongFormat")]
            WorkRequestCallDateHasWrongFormatEnum = 625,
            
            /// <summary>
            /// Enum WorkRequestScheduledDateHasWrongFormatEnum for WorkRequestScheduledDateHasWrongFormat
            /// </summary>
            [EnumMember(Value = "WorkRequestScheduledDateHasWrongFormat")]
            WorkRequestScheduledDateHasWrongFormatEnum = 626,
            
            /// <summary>
            /// Enum InvalidWorkRequestStatusEnum for InvalidWorkRequestStatus
            /// </summary>
            [EnumMember(Value = "InvalidWorkRequestStatus")]
            InvalidWorkRequestStatusEnum = 627,
            
            /// <summary>
            /// Enum InvalidWorkRequestExtendedStatusEnum for InvalidWorkRequestExtendedStatus
            /// </summary>
            [EnumMember(Value = "InvalidWorkRequestExtendedStatus")]
            InvalidWorkRequestExtendedStatusEnum = 628,
            
            /// <summary>
            /// Enum InvalidWorkRequestCategoryEnum for InvalidWorkRequestCategory
            /// </summary>
            [EnumMember(Value = "InvalidWorkRequestCategory")]
            InvalidWorkRequestCategoryEnum = 629,
            
            /// <summary>
            /// Enum InvalidWorkRequestPriorityEnum for InvalidWorkRequestPriority
            /// </summary>
            [EnumMember(Value = "InvalidWorkRequestPriority")]
            InvalidWorkRequestPriorityEnum = 630,
            
            /// <summary>
            /// Enum InvalidWorkRequestCurrencyEnum for InvalidWorkRequestCurrency
            /// </summary>
            [EnumMember(Value = "InvalidWorkRequestCurrency")]
            InvalidWorkRequestCurrencyEnum = 631,
            
            /// <summary>
            /// Enum InvalidWorkRequestIssueSetupEnum for InvalidWorkRequestIssueSetup
            /// </summary>
            [EnumMember(Value = "InvalidWorkRequestIssueSetup")]
            InvalidWorkRequestIssueSetupEnum = 632,
            
            /// <summary>
            /// Enum InvalidWorkRequestIssueAreaEnum for InvalidWorkRequestIssueArea
            /// </summary>
            [EnumMember(Value = "InvalidWorkRequestIssueArea")]
            InvalidWorkRequestIssueAreaEnum = 633,
            
            /// <summary>
            /// Enum InvalidWorkRequestAssetEnum for InvalidWorkRequestAsset
            /// </summary>
            [EnumMember(Value = "InvalidWorkRequestAsset")]
            InvalidWorkRequestAssetEnum = 634,
            
            /// <summary>
            /// Enum WorkRequestAttachmentFileNameIsRequiredEnum for WorkRequestAttachmentFileNameIsRequired
            /// </summary>
            [EnumMember(Value = "WorkRequestAttachmentFileNameIsRequired")]
            WorkRequestAttachmentFileNameIsRequiredEnum = 635,
            
            /// <summary>
            /// Enum WorkRequestAttachmentOriginalNameIsRequiredEnum for WorkRequestAttachmentOriginalNameIsRequired
            /// </summary>
            [EnumMember(Value = "WorkRequestAttachmentOriginalNameIsRequired")]
            WorkRequestAttachmentOriginalNameIsRequiredEnum = 636,
            
            /// <summary>
            /// Enum WorkRequestIssueProblemCodeIsRequiredEnum for WorkRequestIssueProblemCodeIsRequired
            /// </summary>
            [EnumMember(Value = "WorkRequestIssueProblemCodeIsRequired")]
            WorkRequestIssueProblemCodeIsRequiredEnum = 637,
            
            /// <summary>
            /// Enum WorkRequestIssueProblemTypeIsRequiredEnum for WorkRequestIssueProblemTypeIsRequired
            /// </summary>
            [EnumMember(Value = "WorkRequestIssueProblemTypeIsRequired")]
            WorkRequestIssueProblemTypeIsRequiredEnum = 638,
            
            /// <summary>
            /// Enum WorkRequestScheduledDateMustBeGreaterThanCallDateEnum for WorkRequestScheduledDateMustBeGreaterThanCallDate
            /// </summary>
            [EnumMember(Value = "WorkRequestScheduledDateMustBeGreaterThanCallDate")]
            WorkRequestScheduledDateMustBeGreaterThanCallDateEnum = 639,
            
            /// <summary>
            /// Enum InvalidWorkRequestIdEnum for InvalidWorkRequestId
            /// </summary>
            [EnumMember(Value = "InvalidWorkRequestId")]
            InvalidWorkRequestIdEnum = 640,
            
            /// <summary>
            /// Enum WorkRequestSearchCallDateFromHasWrongFormatEnum for WorkRequestSearchCallDateFromHasWrongFormat
            /// </summary>
            [EnumMember(Value = "WorkRequestSearchCallDateFromHasWrongFormat")]
            WorkRequestSearchCallDateFromHasWrongFormatEnum = 641,
            
            /// <summary>
            /// Enum WorkRequestSearchCallDateToHasWrongFormatEnum for WorkRequestSearchCallDateToHasWrongFormat
            /// </summary>
            [EnumMember(Value = "WorkRequestSearchCallDateToHasWrongFormat")]
            WorkRequestSearchCallDateToHasWrongFormatEnum = 642,
            
            /// <summary>
            /// Enum WorkRequestSearchScheduledDateFromHasWrongFormatEnum for WorkRequestSearchScheduledDateFromHasWrongFormat
            /// </summary>
            [EnumMember(Value = "WorkRequestSearchScheduledDateFromHasWrongFormat")]
            WorkRequestSearchScheduledDateFromHasWrongFormatEnum = 643,
            
            /// <summary>
            /// Enum WorkRequestSearchScheduledDateToHasWrongFormatEnum for WorkRequestSearchScheduledDateToHasWrongFormat
            /// </summary>
            [EnumMember(Value = "WorkRequestSearchScheduledDateToHasWrongFormat")]
            WorkRequestSearchScheduledDateToHasWrongFormatEnum = 644,
            
            /// <summary>
            /// Enum WorkRequestSearchClosedDateFromHasWrongFormatEnum for WorkRequestSearchClosedDateFromHasWrongFormat
            /// </summary>
            [EnumMember(Value = "WorkRequestSearchClosedDateFromHasWrongFormat")]
            WorkRequestSearchClosedDateFromHasWrongFormatEnum = 645,
            
            /// <summary>
            /// Enum WorkRequestSearchClosedDateToHasWrongFormatEnum for WorkRequestSearchClosedDateToHasWrongFormat
            /// </summary>
            [EnumMember(Value = "WorkRequestSearchClosedDateToHasWrongFormat")]
            WorkRequestSearchClosedDateToHasWrongFormatEnum = 646,
            
            /// <summary>
            /// Enum WorkOrderIsAlreadyCreatedForWorkRequestEnum for WorkOrderIsAlreadyCreatedForWorkRequest
            /// </summary>
            [EnumMember(Value = "WorkOrderIsAlreadyCreatedForWorkRequest")]
            WorkOrderIsAlreadyCreatedForWorkRequestEnum = 647,
            
            /// <summary>
            /// Enum WorkRequestIsClosedEnum for WorkRequestIsClosed
            /// </summary>
            [EnumMember(Value = "WorkRequestIsClosed")]
            WorkRequestIsClosedEnum = 648,
            
            /// <summary>
            /// Enum WorkRequestClosedReasonIsRequiredForClosedStatusEnum for WorkRequestClosedReasonIsRequiredForClosedStatus
            /// </summary>
            [EnumMember(Value = "WorkRequestClosedReasonIsRequiredForClosedStatus")]
            WorkRequestClosedReasonIsRequiredForClosedStatusEnum = 649,
            
            /// <summary>
            /// Enum WorkOrderIdIsRequiredForThisClosedReasonEnum for WorkOrderIdIsRequiredForThisClosedReason
            /// </summary>
            [EnumMember(Value = "WorkOrderIdIsRequiredForThisClosedReason")]
            WorkOrderIdIsRequiredForThisClosedReasonEnum = 650,
            
            /// <summary>
            /// Enum InvalidWorkRequestClosedReasonEnum for InvalidWorkRequestClosedReason
            /// </summary>
            [EnumMember(Value = "InvalidWorkRequestClosedReason")]
            InvalidWorkRequestClosedReasonEnum = 651,
            
            /// <summary>
            /// Enum WorkRequestClosedReasonIsOnlyForClosedStatusEnum for WorkRequestClosedReasonIsOnlyForClosedStatus
            /// </summary>
            [EnumMember(Value = "WorkRequestClosedReasonIsOnlyForClosedStatus")]
            WorkRequestClosedReasonIsOnlyForClosedStatusEnum = 652,
            
            /// <summary>
            /// Enum InvalidWorkRequestWorkOrderIdEnum for InvalidWorkRequestWorkOrderId
            /// </summary>
            [EnumMember(Value = "InvalidWorkRequestWorkOrderId")]
            InvalidWorkRequestWorkOrderIdEnum = 653,
            
            /// <summary>
            /// Enum WorkRequestWorkOrderIdIsOnlyForClosedStatusEnum for WorkRequestWorkOrderIdIsOnlyForClosedStatus
            /// </summary>
            [EnumMember(Value = "WorkRequestWorkOrderIdIsOnlyForClosedStatus")]
            WorkRequestWorkOrderIdIsOnlyForClosedStatusEnum = 654,
            
            /// <summary>
            /// Enum WorkRequestWorkOrderIdIsOnlyForCertainClosedReasonEnum for WorkRequestWorkOrderIdIsOnlyForCertainClosedReason
            /// </summary>
            [EnumMember(Value = "WorkRequestWorkOrderIdIsOnlyForCertainClosedReason")]
            WorkRequestWorkOrderIdIsOnlyForCertainClosedReasonEnum = 655,
            
            /// <summary>
            /// Enum InvalidWorkOrderSourceTypeEnum for InvalidWorkOrderSourceType
            /// </summary>
            [EnumMember(Value = "InvalidWorkOrderSourceType")]
            InvalidWorkOrderSourceTypeEnum = 656,
            
            /// <summary>
            /// Enum DeclineReasonIdIsRequiredEnum for DeclineReasonIdIsRequired
            /// </summary>
            [EnumMember(Value = "DeclineReasonIdIsRequired")]
            DeclineReasonIdIsRequiredEnum = 657,
            
            /// <summary>
            /// Enum DeclineReasonDoesntAllowCustomTextEnum for DeclineReasonDoesntAllowCustomText
            /// </summary>
            [EnumMember(Value = "DeclineReasonDoesntAllowCustomText")]
            DeclineReasonDoesntAllowCustomTextEnum = 658,
            
            /// <summary>
            /// Enum InvalidDeclineReasonIdEnum for InvalidDeclineReasonId
            /// </summary>
            [EnumMember(Value = "InvalidDeclineReasonId")]
            InvalidDeclineReasonIdEnum = 659,
            
            /// <summary>
            /// Enum MultipleWorkOrdersForPurchaseNumberEnum for MultipleWorkOrdersForPurchaseNumber
            /// </summary>
            [EnumMember(Value = "MultipleWorkOrdersForPurchaseNumber")]
            MultipleWorkOrdersForPurchaseNumberEnum = 660,
            
            /// <summary>
            /// Enum InvoiceMaterialMakupInvalidEnum for InvoiceMaterialMakupInvalid
            /// </summary>
            [EnumMember(Value = "InvoiceMaterialMakupInvalid")]
            InvoiceMaterialMakupInvalidEnum = 661,
            
            /// <summary>
            /// Enum MaterialMarkUpDiscrepancyReasonShouldBeStatedEnum for MaterialMarkUpDiscrepancyReasonShouldBeStated
            /// </summary>
            [EnumMember(Value = "MaterialMarkUpDiscrepancyReasonShouldBeStated")]
            MaterialMarkUpDiscrepancyReasonShouldBeStatedEnum = 662,
            
            /// <summary>
            /// Enum MaterialPriceDiscrepancyReasonShouldBeStatedEnum for MaterialPriceDiscrepancyReasonShouldBeStated
            /// </summary>
            [EnumMember(Value = "MaterialPriceDiscrepancyReasonShouldBeStated")]
            MaterialPriceDiscrepancyReasonShouldBeStatedEnum = 663,
            
            /// <summary>
            /// Enum OtherPriceDiscrepancyReasonShouldBeStatedEnum for OtherPriceDiscrepancyReasonShouldBeStated
            /// </summary>
            [EnumMember(Value = "OtherPriceDiscrepancyReasonShouldBeStated")]
            OtherPriceDiscrepancyReasonShouldBeStatedEnum = 664
        }

        /// <summary>
        /// The code of the first error found
        /// </summary>
        /// <value>The code of the first error found</value>
        [DataMember(Name="ErrorCode", EmitDefaultValue=true)]
        public ErrorCodeEnum ErrorCode { get; set; }

        /// <summary>
        /// The description of all errors.
        /// </summary>
        /// <value>The description of all errors.</value>
        [DataMember(Name="ErrorMessage", EmitDefaultValue=false)]
        public string ErrorMessage { get; set; }

        /// <summary>
        /// Gets or Sets Data
        /// </summary>
        [DataMember(Name="Data", EmitDefaultValue=false)]
        public Object Data { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class SCServiceChannelServicesMessagingErrorResponse {\n");
            sb.Append("  ErrorCodes: ").Append(ErrorCodes).Append("\n");
            sb.Append("  ErrorCode: ").Append(ErrorCode).Append("\n");
            sb.Append("  ErrorMessage: ").Append(ErrorMessage).Append("\n");
            sb.Append("  Data: ").Append(Data).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            var options = new JsonSerializerOptions
            {
                WriteIndented = true
            };

            return JsonSerializer.Serialize(this, options);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (obj is null) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((SCServiceChannelServicesMessagingErrorResponse)obj);
        }

        /// <summary>
        /// Returns true if SCServiceChannelServicesMessagingErrorResponse instances are equal
        /// </summary>
        /// <param name="other">Instance of SCServiceChannelServicesMessagingErrorResponse to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(SCServiceChannelServicesMessagingErrorResponse other)
        {
            if (other is null) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    ErrorCodes == other.ErrorCodes ||
                    ErrorCodes != null &&
                    other.ErrorCodes != null &&
                    ErrorCodes.SequenceEqual(other.ErrorCodes)
                ) && 
                (
                    ErrorCode == other.ErrorCode ||
                    
                    ErrorCode.Equals(other.ErrorCode)
                ) && 
                (
                    ErrorMessage == other.ErrorMessage ||
                    ErrorMessage != null &&
                    ErrorMessage.Equals(other.ErrorMessage)
                ) && 
                (
                    Data == other.Data ||
                    Data != null &&
                    Data.Equals(other.Data)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    if (ErrorCodes != null)
                    hashCode = hashCode * 59 + ErrorCodes.GetHashCode();
                    
                    hashCode = hashCode * 59 + ErrorCode.GetHashCode();
                    if (ErrorMessage != null)
                    hashCode = hashCode * 59 + ErrorMessage.GetHashCode();
                    if (Data != null)
                    hashCode = hashCode * 59 + Data.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(SCServiceChannelServicesMessagingErrorResponse left, SCServiceChannelServicesMessagingErrorResponse right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(SCServiceChannelServicesMessagingErrorResponse left, SCServiceChannelServicesMessagingErrorResponse right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}
