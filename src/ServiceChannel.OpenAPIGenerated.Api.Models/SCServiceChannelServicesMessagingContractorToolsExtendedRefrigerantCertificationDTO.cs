/*
 * ServiceChannel API - v.3
 *
 * The ServiceChannel API is a RESTful and stateless API. It accepts standard HTTP verbs and supports OAuth 2.0 for authorizing requests.      Our API returns common HTTP status codes as well as JSON encapsulated data.      See [API Overview](https://developer.servicechannel.com/basics/introduction/overview/) for the intro to ServiceChannel API.<br>      <h3>Authentication and Authorization</h3>You should have a ServiceChannel account, register your application, and obtain `access_token` to integrate with our API.      See [Authentication and Authorization](https://developer.servicechannel.com/basics/general/authentication/) for more information.      To use this API playground, click **Authorize** and sign in to ServiceChannel.<br>      <h3>Environment</h3> All calls in this API Reference point to the **SB2 environment**.      See [Environments](https://developer.servicechannel.com/basics/general/environments/) for more information.<br>      <h3>API Version</h3>The current stable version of the ServiceChannel API is `v3`. In the request URL, `v3` is a version prefix that should be present.      When you omit the version prefix, calls point to the minimum supported version of the API.      We recommend you to always specify the API version to avoid possible errors.
 *
 * The version of the OpenAPI document: 3
 * 
 * Generated by: https://openapi-generator.tech
 */

using System;
using System.Linq;
using System.Text;
using System.Collections.Generic;
using System.ComponentModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using System.Text.Json;
using ServiceChannel.OpenAPIGenerated.Api.Converters;

namespace ServiceChannel.OpenAPIGenerated.Api.Models
{ 
    /// <summary>
    /// Object containing the details of a refrigerant certification.
    /// </summary>
    [DataContract]
    public class SCServiceChannelServicesMessagingContractorToolsExtendedRefrigerantCertificationDTO : IEquatable<SCServiceChannelServicesMessagingContractorToolsExtendedRefrigerantCertificationDTO>
    {
        /// <summary>
        /// Numeric identifier of the certificate in the system.
        /// </summary>
        /// <value>Numeric identifier of the certificate in the system.</value>
        [DataMember(Name="Id", EmitDefaultValue=true)]
        public int Id { get; set; }

        /// <summary>
        /// Unique certificate number given by the party that granted the certificate.
        /// </summary>
        /// <value>Unique certificate number given by the party that granted the certificate.</value>
        [DataMember(Name="CertificationNumber", EmitDefaultValue=false)]
        public string CertificationNumber { get; set; }

        /// <summary>
        /// Date and time when the certificate expires.
        /// </summary>
        /// <value>Date and time when the certificate expires.</value>
        [DataMember(Name="CertificationExpirationDateTime", EmitDefaultValue=false)]
        public DateTime CertificationExpirationDateTime { get; set; }

        /// <summary>
        /// Comment added to the attached file.
        /// </summary>
        /// <value>Comment added to the attached file.</value>
        [DataMember(Name="Description", EmitDefaultValue=false)]
        public string Description { get; set; }

        /// <summary>
        /// Path of the attached file.
        /// </summary>
        /// <value>Path of the attached file.</value>
        [DataMember(Name="FileUrl", EmitDefaultValue=false)]
        public string FileUrl { get; set; }

        /// <summary>
        /// Name of the attached file.
        /// </summary>
        /// <value>Name of the attached file.</value>
        [DataMember(Name="FileName", EmitDefaultValue=false)]
        public string FileName { get; set; }

        /// <summary>
        /// First and last name of the technician who received the refrigerant certification.
        /// </summary>
        /// <value>First and last name of the technician who received the refrigerant certification.</value>
        [DataMember(Name="TechnicianFullName", EmitDefaultValue=false)]
        public string TechnicianFullName { get; set; }

        /// <summary>
        /// Single sign-on (SSO) ID of the technician who received the refrigerant certification.
        /// </summary>
        /// <value>Single sign-on (SSO) ID of the technician who received the refrigerant certification.</value>
        [DataMember(Name="AuthUserId", EmitDefaultValue=true)]
        public long AuthUserId { get; set; }

        /// <summary>
        /// Date and time when the refrigerant certification becomes valid.
        /// </summary>
        /// <value>Date and time when the refrigerant certification becomes valid.</value>
        [DataMember(Name="CertificationDateTime", EmitDefaultValue=false)]
        public DateTime CertificationDateTime { get; set; }

        /// <summary>
        /// Type ID of EPA 608 Technician Certification. Possible values: 1 - Type I, 2 - Type II , 3 - Type III, 4 - Universal.
        /// </summary>
        /// <value>Type ID of EPA 608 Technician Certification. Possible values: 1 - Type I, 2 - Type II , 3 - Type III, 4 - Universal.</value>
        [DataMember(Name="CertificationLevelId", EmitDefaultValue=true)]
        public int CertificationLevelId { get; set; }

        /// <summary>
        /// Type of EPA Section 608 Technician Certification. Possible values: Type Ⅰ - service of small appliances containing 5 lbs or less of refrigerant; Type Ⅱ - service or disposal of high- or very high-pressure appliances (containing more than 5 lbs of refrigerant); Type Ⅲ - service or disposal of low-pressure appliances; Universal - service of refrigerated appliances of all types.
        /// </summary>
        /// <value>Type of EPA Section 608 Technician Certification. Possible values: Type Ⅰ - service of small appliances containing 5 lbs or less of refrigerant; Type Ⅱ - service or disposal of high- or very high-pressure appliances (containing more than 5 lbs of refrigerant); Type Ⅲ - service or disposal of low-pressure appliances; Universal - service of refrigerated appliances of all types.</value>
        [DataMember(Name="CertificationLevel", EmitDefaultValue=false)]
        public string CertificationLevel { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class SCServiceChannelServicesMessagingContractorToolsExtendedRefrigerantCertificationDTO {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  CertificationNumber: ").Append(CertificationNumber).Append("\n");
            sb.Append("  CertificationExpirationDateTime: ").Append(CertificationExpirationDateTime).Append("\n");
            sb.Append("  Description: ").Append(Description).Append("\n");
            sb.Append("  FileUrl: ").Append(FileUrl).Append("\n");
            sb.Append("  FileName: ").Append(FileName).Append("\n");
            sb.Append("  TechnicianFullName: ").Append(TechnicianFullName).Append("\n");
            sb.Append("  AuthUserId: ").Append(AuthUserId).Append("\n");
            sb.Append("  CertificationDateTime: ").Append(CertificationDateTime).Append("\n");
            sb.Append("  CertificationLevelId: ").Append(CertificationLevelId).Append("\n");
            sb.Append("  CertificationLevel: ").Append(CertificationLevel).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            var options = new JsonSerializerOptions
            {
                WriteIndented = true
            };

            return JsonSerializer.Serialize(this, options);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (obj is null) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((SCServiceChannelServicesMessagingContractorToolsExtendedRefrigerantCertificationDTO)obj);
        }

        /// <summary>
        /// Returns true if SCServiceChannelServicesMessagingContractorToolsExtendedRefrigerantCertificationDTO instances are equal
        /// </summary>
        /// <param name="other">Instance of SCServiceChannelServicesMessagingContractorToolsExtendedRefrigerantCertificationDTO to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(SCServiceChannelServicesMessagingContractorToolsExtendedRefrigerantCertificationDTO other)
        {
            if (other is null) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    Id == other.Id ||
                    
                    Id.Equals(other.Id)
                ) && 
                (
                    CertificationNumber == other.CertificationNumber ||
                    CertificationNumber != null &&
                    CertificationNumber.Equals(other.CertificationNumber)
                ) && 
                (
                    CertificationExpirationDateTime == other.CertificationExpirationDateTime ||
                    CertificationExpirationDateTime != null &&
                    CertificationExpirationDateTime.Equals(other.CertificationExpirationDateTime)
                ) && 
                (
                    Description == other.Description ||
                    Description != null &&
                    Description.Equals(other.Description)
                ) && 
                (
                    FileUrl == other.FileUrl ||
                    FileUrl != null &&
                    FileUrl.Equals(other.FileUrl)
                ) && 
                (
                    FileName == other.FileName ||
                    FileName != null &&
                    FileName.Equals(other.FileName)
                ) && 
                (
                    TechnicianFullName == other.TechnicianFullName ||
                    TechnicianFullName != null &&
                    TechnicianFullName.Equals(other.TechnicianFullName)
                ) && 
                (
                    AuthUserId == other.AuthUserId ||
                    
                    AuthUserId.Equals(other.AuthUserId)
                ) && 
                (
                    CertificationDateTime == other.CertificationDateTime ||
                    CertificationDateTime != null &&
                    CertificationDateTime.Equals(other.CertificationDateTime)
                ) && 
                (
                    CertificationLevelId == other.CertificationLevelId ||
                    
                    CertificationLevelId.Equals(other.CertificationLevelId)
                ) && 
                (
                    CertificationLevel == other.CertificationLevel ||
                    CertificationLevel != null &&
                    CertificationLevel.Equals(other.CertificationLevel)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    
                    hashCode = hashCode * 59 + Id.GetHashCode();
                    if (CertificationNumber != null)
                    hashCode = hashCode * 59 + CertificationNumber.GetHashCode();
                    if (CertificationExpirationDateTime != null)
                    hashCode = hashCode * 59 + CertificationExpirationDateTime.GetHashCode();
                    if (Description != null)
                    hashCode = hashCode * 59 + Description.GetHashCode();
                    if (FileUrl != null)
                    hashCode = hashCode * 59 + FileUrl.GetHashCode();
                    if (FileName != null)
                    hashCode = hashCode * 59 + FileName.GetHashCode();
                    if (TechnicianFullName != null)
                    hashCode = hashCode * 59 + TechnicianFullName.GetHashCode();
                    
                    hashCode = hashCode * 59 + AuthUserId.GetHashCode();
                    if (CertificationDateTime != null)
                    hashCode = hashCode * 59 + CertificationDateTime.GetHashCode();
                    
                    hashCode = hashCode * 59 + CertificationLevelId.GetHashCode();
                    if (CertificationLevel != null)
                    hashCode = hashCode * 59 + CertificationLevel.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(SCServiceChannelServicesMessagingContractorToolsExtendedRefrigerantCertificationDTO left, SCServiceChannelServicesMessagingContractorToolsExtendedRefrigerantCertificationDTO right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(SCServiceChannelServicesMessagingContractorToolsExtendedRefrigerantCertificationDTO left, SCServiceChannelServicesMessagingContractorToolsExtendedRefrigerantCertificationDTO right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}
