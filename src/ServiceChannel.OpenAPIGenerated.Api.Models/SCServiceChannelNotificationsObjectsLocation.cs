/*
 * ServiceChannel API - v.3
 *
 * The ServiceChannel API is a RESTful and stateless API. It accepts standard HTTP verbs and supports OAuth 2.0 for authorizing requests.      Our API returns common HTTP status codes as well as JSON encapsulated data.      See [API Overview](https://developer.servicechannel.com/basics/introduction/overview/) for the intro to ServiceChannel API.<br>      <h3>Authentication and Authorization</h3>You should have a ServiceChannel account, register your application, and obtain `access_token` to integrate with our API.      See [Authentication and Authorization](https://developer.servicechannel.com/basics/general/authentication/) for more information.      To use this API playground, click **Authorize** and sign in to ServiceChannel.<br>      <h3>Environment</h3> All calls in this API Reference point to the **SB2 environment**.      See [Environments](https://developer.servicechannel.com/basics/general/environments/) for more information.<br>      <h3>API Version</h3>The current stable version of the ServiceChannel API is `v3`. In the request URL, `v3` is a version prefix that should be present.      When you omit the version prefix, calls point to the minimum supported version of the API.      We recommend you to always specify the API version to avoid possible errors.
 *
 * The version of the OpenAPI document: 3
 * 
 * Generated by: https://openapi-generator.tech
 */

using System;
using System.Linq;
using System.Text;
using System.Collections.Generic;
using System.ComponentModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using System.Text.Json;
using ServiceChannel.OpenAPIGenerated.Api.Converters;

namespace ServiceChannel.OpenAPIGenerated.Api.Models
{ 
    /// <summary>
    /// 
    /// </summary>
    [DataContract]
    public class SCServiceChannelNotificationsObjectsLocation : IEquatable<SCServiceChannelNotificationsObjectsLocation>
    {
        /// <summary>
        /// Gets or Sets StoreId
        /// </summary>
        [DataMember(Name="StoreId", EmitDefaultValue=false)]
        public string StoreId { get; set; }

        /// <summary>
        /// Gets or Sets Id
        /// </summary>
        [DataMember(Name="Id", EmitDefaultValue=true)]
        public int Id { get; set; }

        /// <summary>
        /// Gets or Sets SubscriberId
        /// </summary>
        [DataMember(Name="SubscriberId", EmitDefaultValue=true)]
        public int SubscriberId { get; set; }

        /// <summary>
        /// Gets or Sets ShortName
        /// </summary>
        [DataMember(Name="ShortName", EmitDefaultValue=false)]
        public string ShortName { get; set; }

        /// <summary>
        /// Gets or Sets FullName
        /// </summary>
        [DataMember(Name="FullName", EmitDefaultValue=false)]
        public string FullName { get; set; }

        /// <summary>
        /// Gets or Sets Address1
        /// </summary>
        [DataMember(Name="Address1", EmitDefaultValue=false)]
        public string Address1 { get; set; }

        /// <summary>
        /// Gets or Sets Address2
        /// </summary>
        [DataMember(Name="Address2", EmitDefaultValue=false)]
        public string Address2 { get; set; }

        /// <summary>
        /// Gets or Sets Region
        /// </summary>
        [DataMember(Name="Region", EmitDefaultValue=false)]
        public string Region { get; set; }

        /// <summary>
        /// Gets or Sets District
        /// </summary>
        [DataMember(Name="District", EmitDefaultValue=false)]
        public string District { get; set; }

        /// <summary>
        /// Gets or Sets City
        /// </summary>
        [DataMember(Name="City", EmitDefaultValue=false)]
        public string City { get; set; }

        /// <summary>
        /// Gets or Sets State
        /// </summary>
        [DataMember(Name="State", EmitDefaultValue=false)]
        public string State { get; set; }

        /// <summary>
        /// Gets or Sets Country
        /// </summary>
        [DataMember(Name="Country", EmitDefaultValue=false)]
        public string Country { get; set; }

        /// <summary>
        /// Gets or Sets StoreOpen
        /// </summary>
        [DataMember(Name="StoreOpen", EmitDefaultValue=false)]
        public DateTime StoreOpen { get; set; }

        /// <summary>
        /// Gets or Sets StoreClose
        /// </summary>
        [DataMember(Name="StoreClose", EmitDefaultValue=false)]
        public DateTime StoreClose { get; set; }

        /// <summary>
        /// Gets or Sets Zip
        /// </summary>
        [DataMember(Name="Zip", EmitDefaultValue=false)]
        public string Zip { get; set; }

        /// <summary>
        /// Gets or Sets MainContact
        /// </summary>
        [DataMember(Name="MainContact", EmitDefaultValue=false)]
        public string MainContact { get; set; }

        /// <summary>
        /// Gets or Sets PhoneNumber
        /// </summary>
        [DataMember(Name="PhoneNumber", EmitDefaultValue=false)]
        public string PhoneNumber { get; set; }

        /// <summary>
        /// Gets or Sets FaxNumber
        /// </summary>
        [DataMember(Name="FaxNumber", EmitDefaultValue=false)]
        public string FaxNumber { get; set; }

        /// <summary>
        /// Gets or Sets FacilityManager
        /// </summary>
        [DataMember(Name="FacilityManager", EmitDefaultValue=false)]
        public string FacilityManager { get; set; }

        /// <summary>
        /// Gets or Sets Email
        /// </summary>
        [DataMember(Name="Email", EmitDefaultValue=false)]
        public string Email { get; set; }

        /// <summary>
        /// Gets or Sets NotesCount
        /// </summary>
        [DataMember(Name="NotesCount", EmitDefaultValue=true)]
        public int NotesCount { get; set; }

        /// <summary>
        /// Gets or Sets LocationTypeId
        /// </summary>
        [DataMember(Name="LocationTypeId", EmitDefaultValue=true)]
        public int LocationTypeId { get; set; }

        /// <summary>
        /// Gets or Sets LocationType
        /// </summary>
        [DataMember(Name="LocationType", EmitDefaultValue=false)]
        public string LocationType { get; set; }

        /// <summary>
        /// Gets or Sets Latitude
        /// </summary>
        [DataMember(Name="Latitude", EmitDefaultValue=true)]
        public double Latitude { get; set; }

        /// <summary>
        /// Gets or Sets Longitude
        /// </summary>
        [DataMember(Name="Longitude", EmitDefaultValue=true)]
        public double Longitude { get; set; }

        /// <summary>
        /// Gets or Sets TimeZoneId
        /// </summary>
        [DataMember(Name="TimeZoneId", EmitDefaultValue=false)]
        public string TimeZoneId { get; set; }

        /// <summary>
        /// Gets or Sets RetiredAllProvidersDate
        /// </summary>
        [DataMember(Name="RetiredAllProvidersDate", EmitDefaultValue=false)]
        public DateTime RetiredAllProvidersDate { get; set; }

        /// <summary>
        /// Gets or Sets RetiredLogin
        /// </summary>
        [DataMember(Name="RetiredLogin", EmitDefaultValue=false)]
        public string RetiredLogin { get; set; }

        /// <summary>
        /// Gets or Sets UpdatedUserName
        /// </summary>
        [DataMember(Name="UpdatedUserName", EmitDefaultValue=false)]
        public string UpdatedUserName { get; set; }

        /// <summary>
        /// Gets or Sets UpdatedDate
        /// </summary>
        [DataMember(Name="UpdatedDate", EmitDefaultValue=false)]
        public DateTime UpdatedDate { get; set; }

        /// <summary>
        /// Gets or Sets UpdatedLocationNotesUserName
        /// </summary>
        [DataMember(Name="UpdatedLocationNotesUserName", EmitDefaultValue=false)]
        public string UpdatedLocationNotesUserName { get; set; }

        /// <summary>
        /// Gets or Sets UpdatedLocationNotesDate
        /// </summary>
        [DataMember(Name="UpdatedLocationNotesDate", EmitDefaultValue=false)]
        public DateTime UpdatedLocationNotesDate { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class SCServiceChannelNotificationsObjectsLocation {\n");
            sb.Append("  StoreId: ").Append(StoreId).Append("\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  SubscriberId: ").Append(SubscriberId).Append("\n");
            sb.Append("  ShortName: ").Append(ShortName).Append("\n");
            sb.Append("  FullName: ").Append(FullName).Append("\n");
            sb.Append("  Address1: ").Append(Address1).Append("\n");
            sb.Append("  Address2: ").Append(Address2).Append("\n");
            sb.Append("  Region: ").Append(Region).Append("\n");
            sb.Append("  District: ").Append(District).Append("\n");
            sb.Append("  City: ").Append(City).Append("\n");
            sb.Append("  State: ").Append(State).Append("\n");
            sb.Append("  Country: ").Append(Country).Append("\n");
            sb.Append("  StoreOpen: ").Append(StoreOpen).Append("\n");
            sb.Append("  StoreClose: ").Append(StoreClose).Append("\n");
            sb.Append("  Zip: ").Append(Zip).Append("\n");
            sb.Append("  MainContact: ").Append(MainContact).Append("\n");
            sb.Append("  PhoneNumber: ").Append(PhoneNumber).Append("\n");
            sb.Append("  FaxNumber: ").Append(FaxNumber).Append("\n");
            sb.Append("  FacilityManager: ").Append(FacilityManager).Append("\n");
            sb.Append("  Email: ").Append(Email).Append("\n");
            sb.Append("  NotesCount: ").Append(NotesCount).Append("\n");
            sb.Append("  LocationTypeId: ").Append(LocationTypeId).Append("\n");
            sb.Append("  LocationType: ").Append(LocationType).Append("\n");
            sb.Append("  Latitude: ").Append(Latitude).Append("\n");
            sb.Append("  Longitude: ").Append(Longitude).Append("\n");
            sb.Append("  TimeZoneId: ").Append(TimeZoneId).Append("\n");
            sb.Append("  RetiredAllProvidersDate: ").Append(RetiredAllProvidersDate).Append("\n");
            sb.Append("  RetiredLogin: ").Append(RetiredLogin).Append("\n");
            sb.Append("  UpdatedUserName: ").Append(UpdatedUserName).Append("\n");
            sb.Append("  UpdatedDate: ").Append(UpdatedDate).Append("\n");
            sb.Append("  UpdatedLocationNotesUserName: ").Append(UpdatedLocationNotesUserName).Append("\n");
            sb.Append("  UpdatedLocationNotesDate: ").Append(UpdatedLocationNotesDate).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            var options = new JsonSerializerOptions
            {
                WriteIndented = true
            };

            return JsonSerializer.Serialize(this, options);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (obj is null) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((SCServiceChannelNotificationsObjectsLocation)obj);
        }

        /// <summary>
        /// Returns true if SCServiceChannelNotificationsObjectsLocation instances are equal
        /// </summary>
        /// <param name="other">Instance of SCServiceChannelNotificationsObjectsLocation to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(SCServiceChannelNotificationsObjectsLocation other)
        {
            if (other is null) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    StoreId == other.StoreId ||
                    StoreId != null &&
                    StoreId.Equals(other.StoreId)
                ) && 
                (
                    Id == other.Id ||
                    
                    Id.Equals(other.Id)
                ) && 
                (
                    SubscriberId == other.SubscriberId ||
                    
                    SubscriberId.Equals(other.SubscriberId)
                ) && 
                (
                    ShortName == other.ShortName ||
                    ShortName != null &&
                    ShortName.Equals(other.ShortName)
                ) && 
                (
                    FullName == other.FullName ||
                    FullName != null &&
                    FullName.Equals(other.FullName)
                ) && 
                (
                    Address1 == other.Address1 ||
                    Address1 != null &&
                    Address1.Equals(other.Address1)
                ) && 
                (
                    Address2 == other.Address2 ||
                    Address2 != null &&
                    Address2.Equals(other.Address2)
                ) && 
                (
                    Region == other.Region ||
                    Region != null &&
                    Region.Equals(other.Region)
                ) && 
                (
                    District == other.District ||
                    District != null &&
                    District.Equals(other.District)
                ) && 
                (
                    City == other.City ||
                    City != null &&
                    City.Equals(other.City)
                ) && 
                (
                    State == other.State ||
                    State != null &&
                    State.Equals(other.State)
                ) && 
                (
                    Country == other.Country ||
                    Country != null &&
                    Country.Equals(other.Country)
                ) && 
                (
                    StoreOpen == other.StoreOpen ||
                    StoreOpen != null &&
                    StoreOpen.Equals(other.StoreOpen)
                ) && 
                (
                    StoreClose == other.StoreClose ||
                    StoreClose != null &&
                    StoreClose.Equals(other.StoreClose)
                ) && 
                (
                    Zip == other.Zip ||
                    Zip != null &&
                    Zip.Equals(other.Zip)
                ) && 
                (
                    MainContact == other.MainContact ||
                    MainContact != null &&
                    MainContact.Equals(other.MainContact)
                ) && 
                (
                    PhoneNumber == other.PhoneNumber ||
                    PhoneNumber != null &&
                    PhoneNumber.Equals(other.PhoneNumber)
                ) && 
                (
                    FaxNumber == other.FaxNumber ||
                    FaxNumber != null &&
                    FaxNumber.Equals(other.FaxNumber)
                ) && 
                (
                    FacilityManager == other.FacilityManager ||
                    FacilityManager != null &&
                    FacilityManager.Equals(other.FacilityManager)
                ) && 
                (
                    Email == other.Email ||
                    Email != null &&
                    Email.Equals(other.Email)
                ) && 
                (
                    NotesCount == other.NotesCount ||
                    
                    NotesCount.Equals(other.NotesCount)
                ) && 
                (
                    LocationTypeId == other.LocationTypeId ||
                    
                    LocationTypeId.Equals(other.LocationTypeId)
                ) && 
                (
                    LocationType == other.LocationType ||
                    LocationType != null &&
                    LocationType.Equals(other.LocationType)
                ) && 
                (
                    Latitude == other.Latitude ||
                    
                    Latitude.Equals(other.Latitude)
                ) && 
                (
                    Longitude == other.Longitude ||
                    
                    Longitude.Equals(other.Longitude)
                ) && 
                (
                    TimeZoneId == other.TimeZoneId ||
                    TimeZoneId != null &&
                    TimeZoneId.Equals(other.TimeZoneId)
                ) && 
                (
                    RetiredAllProvidersDate == other.RetiredAllProvidersDate ||
                    RetiredAllProvidersDate != null &&
                    RetiredAllProvidersDate.Equals(other.RetiredAllProvidersDate)
                ) && 
                (
                    RetiredLogin == other.RetiredLogin ||
                    RetiredLogin != null &&
                    RetiredLogin.Equals(other.RetiredLogin)
                ) && 
                (
                    UpdatedUserName == other.UpdatedUserName ||
                    UpdatedUserName != null &&
                    UpdatedUserName.Equals(other.UpdatedUserName)
                ) && 
                (
                    UpdatedDate == other.UpdatedDate ||
                    UpdatedDate != null &&
                    UpdatedDate.Equals(other.UpdatedDate)
                ) && 
                (
                    UpdatedLocationNotesUserName == other.UpdatedLocationNotesUserName ||
                    UpdatedLocationNotesUserName != null &&
                    UpdatedLocationNotesUserName.Equals(other.UpdatedLocationNotesUserName)
                ) && 
                (
                    UpdatedLocationNotesDate == other.UpdatedLocationNotesDate ||
                    UpdatedLocationNotesDate != null &&
                    UpdatedLocationNotesDate.Equals(other.UpdatedLocationNotesDate)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    if (StoreId != null)
                    hashCode = hashCode * 59 + StoreId.GetHashCode();
                    
                    hashCode = hashCode * 59 + Id.GetHashCode();
                    
                    hashCode = hashCode * 59 + SubscriberId.GetHashCode();
                    if (ShortName != null)
                    hashCode = hashCode * 59 + ShortName.GetHashCode();
                    if (FullName != null)
                    hashCode = hashCode * 59 + FullName.GetHashCode();
                    if (Address1 != null)
                    hashCode = hashCode * 59 + Address1.GetHashCode();
                    if (Address2 != null)
                    hashCode = hashCode * 59 + Address2.GetHashCode();
                    if (Region != null)
                    hashCode = hashCode * 59 + Region.GetHashCode();
                    if (District != null)
                    hashCode = hashCode * 59 + District.GetHashCode();
                    if (City != null)
                    hashCode = hashCode * 59 + City.GetHashCode();
                    if (State != null)
                    hashCode = hashCode * 59 + State.GetHashCode();
                    if (Country != null)
                    hashCode = hashCode * 59 + Country.GetHashCode();
                    if (StoreOpen != null)
                    hashCode = hashCode * 59 + StoreOpen.GetHashCode();
                    if (StoreClose != null)
                    hashCode = hashCode * 59 + StoreClose.GetHashCode();
                    if (Zip != null)
                    hashCode = hashCode * 59 + Zip.GetHashCode();
                    if (MainContact != null)
                    hashCode = hashCode * 59 + MainContact.GetHashCode();
                    if (PhoneNumber != null)
                    hashCode = hashCode * 59 + PhoneNumber.GetHashCode();
                    if (FaxNumber != null)
                    hashCode = hashCode * 59 + FaxNumber.GetHashCode();
                    if (FacilityManager != null)
                    hashCode = hashCode * 59 + FacilityManager.GetHashCode();
                    if (Email != null)
                    hashCode = hashCode * 59 + Email.GetHashCode();
                    
                    hashCode = hashCode * 59 + NotesCount.GetHashCode();
                    
                    hashCode = hashCode * 59 + LocationTypeId.GetHashCode();
                    if (LocationType != null)
                    hashCode = hashCode * 59 + LocationType.GetHashCode();
                    
                    hashCode = hashCode * 59 + Latitude.GetHashCode();
                    
                    hashCode = hashCode * 59 + Longitude.GetHashCode();
                    if (TimeZoneId != null)
                    hashCode = hashCode * 59 + TimeZoneId.GetHashCode();
                    if (RetiredAllProvidersDate != null)
                    hashCode = hashCode * 59 + RetiredAllProvidersDate.GetHashCode();
                    if (RetiredLogin != null)
                    hashCode = hashCode * 59 + RetiredLogin.GetHashCode();
                    if (UpdatedUserName != null)
                    hashCode = hashCode * 59 + UpdatedUserName.GetHashCode();
                    if (UpdatedDate != null)
                    hashCode = hashCode * 59 + UpdatedDate.GetHashCode();
                    if (UpdatedLocationNotesUserName != null)
                    hashCode = hashCode * 59 + UpdatedLocationNotesUserName.GetHashCode();
                    if (UpdatedLocationNotesDate != null)
                    hashCode = hashCode * 59 + UpdatedLocationNotesDate.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(SCServiceChannelNotificationsObjectsLocation left, SCServiceChannelNotificationsObjectsLocation right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(SCServiceChannelNotificationsObjectsLocation left, SCServiceChannelNotificationsObjectsLocation right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}
