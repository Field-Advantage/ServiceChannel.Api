/*
 * ServiceChannel API - v.3
 *
 * The ServiceChannel API is a RESTful and stateless API. It accepts standard HTTP verbs and supports OAuth 2.0 for authorizing requests.      Our API returns common HTTP status codes as well as JSON encapsulated data.      See [API Overview](https://developer.servicechannel.com/basics/introduction/overview/) for the intro to ServiceChannel API.<br>      <h3>Authentication and Authorization</h3>You should have a ServiceChannel account, register your application, and obtain `access_token` to integrate with our API.      See [Authentication and Authorization](https://developer.servicechannel.com/basics/general/authentication/) for more information.      To use this API playground, click **Authorize** and sign in to ServiceChannel.<br>      <h3>Environment</h3> All calls in this API Reference point to the **SB2 environment**.      See [Environments](https://developer.servicechannel.com/basics/general/environments/) for more information.<br>      <h3>API Version</h3>The current stable version of the ServiceChannel API is `v3`. In the request URL, `v3` is a version prefix that should be present.      When you omit the version prefix, calls point to the minimum supported version of the API.      We recommend you to always specify the API version to avoid possible errors.
 *
 * The version of the OpenAPI document: 3
 * 
 * Generated by: https://openapi-generator.tech
 */

using System;
using System.Linq;
using System.Text;
using System.Collections.Generic;
using System.ComponentModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using System.Text.Json;
using ServiceChannel.OpenAPIGenerated.Api.Converters;

namespace ServiceChannel.OpenAPIGenerated.Api.Models
{ 
    /// <summary>
    /// Asset task details.
    /// </summary>
    [DataContract]
    public class SCServiceChannelServicesMessagingChecklistTasksChecklistTaskResponse : IEquatable<SCServiceChannelServicesMessagingChecklistTasksChecklistTaskResponse>
    {
        /// <summary>
        /// Asset task ID.
        /// </summary>
        /// <value>Asset task ID.</value>
        [DataMember(Name="Id", EmitDefaultValue=true)]
        public int Id { get; set; }

        /// <summary>
        /// ID of the checklist the asset task belongs to.
        /// </summary>
        /// <value>ID of the checklist the asset task belongs to.</value>
        [DataMember(Name="CheckListId", EmitDefaultValue=true)]
        public int CheckListId { get; set; }

        /// <summary>
        /// ID of the asset type the task is configured for.
        /// </summary>
        /// <value>ID of the asset type the task is configured for.</value>
        [DataMember(Name="TypeId", EmitDefaultValue=true)]
        public int TypeId { get; set; }


        /// <summary>
        /// ID of the asset task type.
        /// </summary>
        /// <value>ID of the asset task type.</value>
        
        public enum TaskTypeIdEnum
        {
            
            /// <summary>
            /// Enum AssetTaskEnum for AssetTask
            /// </summary>
            [EnumMember(Value = "AssetTask")]
            AssetTaskEnum = 1
        }

        /// <summary>
        /// ID of the asset task type.
        /// </summary>
        /// <value>ID of the asset task type.</value>
        [DataMember(Name="TaskTypeId", EmitDefaultValue=true)]
        public TaskTypeIdEnum TaskTypeId { get; set; }

        /// <summary>
        /// Name of the asset task type.
        /// </summary>
        /// <value>Name of the asset task type.</value>
        [DataMember(Name="TaskTypeName", EmitDefaultValue=false)]
        public string TaskTypeName { get; set; }

        /// <summary>
        /// Asset task name.
        /// </summary>
        /// <value>Asset task name.</value>
        [DataMember(Name="Name", EmitDefaultValue=false)]
        public string Name { get; set; }

        /// <summary>
        /// Asset task description.
        /// </summary>
        /// <value>Asset task description.</value>
        [DataMember(Name="Description", EmitDefaultValue=false)]
        public string Description { get; set; }

        /// <summary>
        /// Defines whether the asset task is active or not.
        /// </summary>
        /// <value>Defines whether the asset task is active or not.</value>
        [DataMember(Name="IsActive", EmitDefaultValue=true)]
        public bool IsActive { get; set; } = false;

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class SCServiceChannelServicesMessagingChecklistTasksChecklistTaskResponse {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  CheckListId: ").Append(CheckListId).Append("\n");
            sb.Append("  TypeId: ").Append(TypeId).Append("\n");
            sb.Append("  TaskTypeId: ").Append(TaskTypeId).Append("\n");
            sb.Append("  TaskTypeName: ").Append(TaskTypeName).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  Description: ").Append(Description).Append("\n");
            sb.Append("  IsActive: ").Append(IsActive).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            var options = new JsonSerializerOptions
            {
                WriteIndented = true
            };

            return JsonSerializer.Serialize(this, options);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (obj is null) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((SCServiceChannelServicesMessagingChecklistTasksChecklistTaskResponse)obj);
        }

        /// <summary>
        /// Returns true if SCServiceChannelServicesMessagingChecklistTasksChecklistTaskResponse instances are equal
        /// </summary>
        /// <param name="other">Instance of SCServiceChannelServicesMessagingChecklistTasksChecklistTaskResponse to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(SCServiceChannelServicesMessagingChecklistTasksChecklistTaskResponse other)
        {
            if (other is null) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    Id == other.Id ||
                    
                    Id.Equals(other.Id)
                ) && 
                (
                    CheckListId == other.CheckListId ||
                    
                    CheckListId.Equals(other.CheckListId)
                ) && 
                (
                    TypeId == other.TypeId ||
                    
                    TypeId.Equals(other.TypeId)
                ) && 
                (
                    TaskTypeId == other.TaskTypeId ||
                    
                    TaskTypeId.Equals(other.TaskTypeId)
                ) && 
                (
                    TaskTypeName == other.TaskTypeName ||
                    TaskTypeName != null &&
                    TaskTypeName.Equals(other.TaskTypeName)
                ) && 
                (
                    Name == other.Name ||
                    Name != null &&
                    Name.Equals(other.Name)
                ) && 
                (
                    Description == other.Description ||
                    Description != null &&
                    Description.Equals(other.Description)
                ) && 
                (
                    IsActive == other.IsActive ||
                    
                    IsActive.Equals(other.IsActive)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    
                    hashCode = hashCode * 59 + Id.GetHashCode();
                    
                    hashCode = hashCode * 59 + CheckListId.GetHashCode();
                    
                    hashCode = hashCode * 59 + TypeId.GetHashCode();
                    
                    hashCode = hashCode * 59 + TaskTypeId.GetHashCode();
                    if (TaskTypeName != null)
                    hashCode = hashCode * 59 + TaskTypeName.GetHashCode();
                    if (Name != null)
                    hashCode = hashCode * 59 + Name.GetHashCode();
                    if (Description != null)
                    hashCode = hashCode * 59 + Description.GetHashCode();
                    
                    hashCode = hashCode * 59 + IsActive.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(SCServiceChannelServicesMessagingChecklistTasksChecklistTaskResponse left, SCServiceChannelServicesMessagingChecklistTasksChecklistTaskResponse right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(SCServiceChannelServicesMessagingChecklistTasksChecklistTaskResponse left, SCServiceChannelServicesMessagingChecklistTasksChecklistTaskResponse right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}
