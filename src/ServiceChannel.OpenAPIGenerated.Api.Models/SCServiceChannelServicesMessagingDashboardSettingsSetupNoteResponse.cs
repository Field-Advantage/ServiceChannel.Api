/*
 * ServiceChannel API - v.3
 *
 * The ServiceChannel API is a RESTful and stateless API. It accepts standard HTTP verbs and supports OAuth 2.0 for authorizing requests.      Our API returns common HTTP status codes as well as JSON encapsulated data.      See [API Overview](https://developer.servicechannel.com/basics/introduction/overview/) for the intro to ServiceChannel API.<br>      <h3>Authentication and Authorization</h3>You should have a ServiceChannel account, register your application, and obtain `access_token` to integrate with our API.      See [Authentication and Authorization](https://developer.servicechannel.com/basics/general/authentication/) for more information.      To use this API playground, click **Authorize** and sign in to ServiceChannel.<br>      <h3>Environment</h3> All calls in this API Reference point to the **SB2 environment**.      See [Environments](https://developer.servicechannel.com/basics/general/environments/) for more information.<br>      <h3>API Version</h3>The current stable version of the ServiceChannel API is `v3`. In the request URL, `v3` is a version prefix that should be present.      When you omit the version prefix, calls point to the minimum supported version of the API.      We recommend you to always specify the API version to avoid possible errors.
 *
 * The version of the OpenAPI document: 3
 * 
 * Generated by: https://openapi-generator.tech
 */

using System;
using System.Linq;
using System.Text;
using System.Collections.Generic;
using System.ComponentModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using System.Text.Json;
using ServiceChannel.OpenAPIGenerated.Api.Converters;

namespace ServiceChannel.OpenAPIGenerated.Api.Models
{ 
    /// <summary>
    /// Settings for Dashboard Notes
    /// </summary>
    [DataContract]
    public class SCServiceChannelServicesMessagingDashboardSettingsSetupNoteResponse : IEquatable<SCServiceChannelServicesMessagingDashboardSettingsSetupNoteResponse>
    {
        /// <summary>
        /// Store Dashboard Setup ID.
        /// </summary>
        /// <value>Store Dashboard Setup ID.</value>
        [DataMember(Name="SetupId", EmitDefaultValue=true)]
        public int SetupId { get; set; }

        /// <summary>
        /// Enable / disable an ability to add workorder notes.
        /// </summary>
        /// <value>Enable / disable an ability to add workorder notes.</value>
        [DataMember(Name="AllowAddingNotes", EmitDefaultValue=true)]
        public bool AllowAddingNotes { get; set; } = false;

        /// <summary>
        /// Enable / disable an ability to add notes for workorders with status \&quot;completed\&quot;.
        /// </summary>
        /// <value>Enable / disable an ability to add notes for workorders with status \&quot;completed\&quot;.</value>
        [DataMember(Name="AllowAddingNotesForCompletedWorkorders", EmitDefaultValue=true)]
        public bool AllowAddingNotesForCompletedWorkorders { get; set; } = false;

        /// <summary>
        /// Parse a work order description and a note text in order to mask money.
        /// </summary>
        /// <value>Parse a work order description and a note text in order to mask money.</value>
        [DataMember(Name="MaskMoney", EmitDefaultValue=true)]
        public bool MaskMoney { get; set; } = false;

        /// <summary>
        /// Parse a work order description and a note text in order to mask phone numbers.
        /// </summary>
        /// <value>Parse a work order description and a note text in order to mask phone numbers.</value>
        [DataMember(Name="MaskPhone", EmitDefaultValue=true)]
        public bool MaskPhone { get; set; } = false;

        /// <summary>
        /// Parse a work order description and a note text in order to mask email.
        /// </summary>
        /// <value>Parse a work order description and a note text in order to mask email.</value>
        [DataMember(Name="MaskEmail", EmitDefaultValue=true)]
        public bool MaskEmail { get; set; } = false;

        /// <summary>
        /// Show provider recipients as wo note recipients.
        /// </summary>
        /// <value>Show provider recipients as wo note recipients.</value>
        [DataMember(Name="ShowProviderRecipients", EmitDefaultValue=true)]
        public bool ShowProviderRecipients { get; set; } = false;

        /// <summary>
        /// Show subscriber recipients as wo note recipients.
        /// </summary>
        /// <value>Show subscriber recipients as wo note recipients.</value>
        [DataMember(Name="ShowSubscriberRecipients", EmitDefaultValue=true)]
        public bool ShowSubscriberRecipients { get; set; } = false;

        /// <summary>
        /// Show only users with public emails as wo note recipients.
        /// </summary>
        /// <value>Show only users with public emails as wo note recipients.</value>
        [DataMember(Name="ShowPublicUserEmailsOnly", EmitDefaultValue=true)]
        public bool ShowPublicUserEmailsOnly { get; set; } = false;

        /// <summary>
        /// Show universal users as wo note recipients.
        /// </summary>
        /// <value>Show universal users as wo note recipients.</value>
        [DataMember(Name="ShowUniversalRecipients", EmitDefaultValue=true)]
        public bool ShowUniversalRecipients { get; set; } = false;

        /// <summary>
        /// Show emails from location notes as wo note recipients.
        /// </summary>
        /// <value>Show emails from location notes as wo note recipients.</value>
        [DataMember(Name="LocationNotesAsRecipients", EmitDefaultValue=false)]
        public string LocationNotesAsRecipients { get; set; }

        /// <summary>
        /// Specify custom addressees to show as wo note recipients.
        /// </summary>
        /// <value>Specify custom addressees to show as wo note recipients.</value>
        [DataMember(Name="AutoCopyContractorNotes", EmitDefaultValue=true)]
        public bool AutoCopyContractorNotes { get; set; } = false;

        /// <summary>
        /// Specify custom addressees to show as wo note recipients.
        /// </summary>
        /// <value>Specify custom addressees to show as wo note recipients.</value>
        [DataMember(Name="CustomNoteRecipients", EmitDefaultValue=false)]
        public string CustomNoteRecipients { get; set; }

        /// <summary>
        /// Gets or Sets Statuses
        /// </summary>
        [DataMember(Name="Statuses", EmitDefaultValue=false)]
        public List<string> Statuses { get; set; }

        /// <summary>
        /// Gets or Sets DisableNotes
        /// </summary>
        [DataMember(Name="DisableNotes", EmitDefaultValue=true)]
        public bool DisableNotes { get; set; } = false;

        /// <summary>
        /// Get addresses without dublicates.
        /// </summary>
        /// <value>Get addresses without dublicates.</value>
        [DataMember(Name="NoteEmails", EmitDefaultValue=false)]
        public List<string> NoteEmails { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class SCServiceChannelServicesMessagingDashboardSettingsSetupNoteResponse {\n");
            sb.Append("  SetupId: ").Append(SetupId).Append("\n");
            sb.Append("  AllowAddingNotes: ").Append(AllowAddingNotes).Append("\n");
            sb.Append("  AllowAddingNotesForCompletedWorkorders: ").Append(AllowAddingNotesForCompletedWorkorders).Append("\n");
            sb.Append("  MaskMoney: ").Append(MaskMoney).Append("\n");
            sb.Append("  MaskPhone: ").Append(MaskPhone).Append("\n");
            sb.Append("  MaskEmail: ").Append(MaskEmail).Append("\n");
            sb.Append("  ShowProviderRecipients: ").Append(ShowProviderRecipients).Append("\n");
            sb.Append("  ShowSubscriberRecipients: ").Append(ShowSubscriberRecipients).Append("\n");
            sb.Append("  ShowPublicUserEmailsOnly: ").Append(ShowPublicUserEmailsOnly).Append("\n");
            sb.Append("  ShowUniversalRecipients: ").Append(ShowUniversalRecipients).Append("\n");
            sb.Append("  LocationNotesAsRecipients: ").Append(LocationNotesAsRecipients).Append("\n");
            sb.Append("  AutoCopyContractorNotes: ").Append(AutoCopyContractorNotes).Append("\n");
            sb.Append("  CustomNoteRecipients: ").Append(CustomNoteRecipients).Append("\n");
            sb.Append("  Statuses: ").Append(Statuses).Append("\n");
            sb.Append("  DisableNotes: ").Append(DisableNotes).Append("\n");
            sb.Append("  NoteEmails: ").Append(NoteEmails).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            var options = new JsonSerializerOptions
            {
                WriteIndented = true
            };

            return JsonSerializer.Serialize(this, options);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (obj is null) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((SCServiceChannelServicesMessagingDashboardSettingsSetupNoteResponse)obj);
        }

        /// <summary>
        /// Returns true if SCServiceChannelServicesMessagingDashboardSettingsSetupNoteResponse instances are equal
        /// </summary>
        /// <param name="other">Instance of SCServiceChannelServicesMessagingDashboardSettingsSetupNoteResponse to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(SCServiceChannelServicesMessagingDashboardSettingsSetupNoteResponse other)
        {
            if (other is null) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    SetupId == other.SetupId ||
                    
                    SetupId.Equals(other.SetupId)
                ) && 
                (
                    AllowAddingNotes == other.AllowAddingNotes ||
                    
                    AllowAddingNotes.Equals(other.AllowAddingNotes)
                ) && 
                (
                    AllowAddingNotesForCompletedWorkorders == other.AllowAddingNotesForCompletedWorkorders ||
                    
                    AllowAddingNotesForCompletedWorkorders.Equals(other.AllowAddingNotesForCompletedWorkorders)
                ) && 
                (
                    MaskMoney == other.MaskMoney ||
                    
                    MaskMoney.Equals(other.MaskMoney)
                ) && 
                (
                    MaskPhone == other.MaskPhone ||
                    
                    MaskPhone.Equals(other.MaskPhone)
                ) && 
                (
                    MaskEmail == other.MaskEmail ||
                    
                    MaskEmail.Equals(other.MaskEmail)
                ) && 
                (
                    ShowProviderRecipients == other.ShowProviderRecipients ||
                    
                    ShowProviderRecipients.Equals(other.ShowProviderRecipients)
                ) && 
                (
                    ShowSubscriberRecipients == other.ShowSubscriberRecipients ||
                    
                    ShowSubscriberRecipients.Equals(other.ShowSubscriberRecipients)
                ) && 
                (
                    ShowPublicUserEmailsOnly == other.ShowPublicUserEmailsOnly ||
                    
                    ShowPublicUserEmailsOnly.Equals(other.ShowPublicUserEmailsOnly)
                ) && 
                (
                    ShowUniversalRecipients == other.ShowUniversalRecipients ||
                    
                    ShowUniversalRecipients.Equals(other.ShowUniversalRecipients)
                ) && 
                (
                    LocationNotesAsRecipients == other.LocationNotesAsRecipients ||
                    LocationNotesAsRecipients != null &&
                    LocationNotesAsRecipients.Equals(other.LocationNotesAsRecipients)
                ) && 
                (
                    AutoCopyContractorNotes == other.AutoCopyContractorNotes ||
                    
                    AutoCopyContractorNotes.Equals(other.AutoCopyContractorNotes)
                ) && 
                (
                    CustomNoteRecipients == other.CustomNoteRecipients ||
                    CustomNoteRecipients != null &&
                    CustomNoteRecipients.Equals(other.CustomNoteRecipients)
                ) && 
                (
                    Statuses == other.Statuses ||
                    Statuses != null &&
                    other.Statuses != null &&
                    Statuses.SequenceEqual(other.Statuses)
                ) && 
                (
                    DisableNotes == other.DisableNotes ||
                    
                    DisableNotes.Equals(other.DisableNotes)
                ) && 
                (
                    NoteEmails == other.NoteEmails ||
                    NoteEmails != null &&
                    other.NoteEmails != null &&
                    NoteEmails.SequenceEqual(other.NoteEmails)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    
                    hashCode = hashCode * 59 + SetupId.GetHashCode();
                    
                    hashCode = hashCode * 59 + AllowAddingNotes.GetHashCode();
                    
                    hashCode = hashCode * 59 + AllowAddingNotesForCompletedWorkorders.GetHashCode();
                    
                    hashCode = hashCode * 59 + MaskMoney.GetHashCode();
                    
                    hashCode = hashCode * 59 + MaskPhone.GetHashCode();
                    
                    hashCode = hashCode * 59 + MaskEmail.GetHashCode();
                    
                    hashCode = hashCode * 59 + ShowProviderRecipients.GetHashCode();
                    
                    hashCode = hashCode * 59 + ShowSubscriberRecipients.GetHashCode();
                    
                    hashCode = hashCode * 59 + ShowPublicUserEmailsOnly.GetHashCode();
                    
                    hashCode = hashCode * 59 + ShowUniversalRecipients.GetHashCode();
                    if (LocationNotesAsRecipients != null)
                    hashCode = hashCode * 59 + LocationNotesAsRecipients.GetHashCode();
                    
                    hashCode = hashCode * 59 + AutoCopyContractorNotes.GetHashCode();
                    if (CustomNoteRecipients != null)
                    hashCode = hashCode * 59 + CustomNoteRecipients.GetHashCode();
                    if (Statuses != null)
                    hashCode = hashCode * 59 + Statuses.GetHashCode();
                    
                    hashCode = hashCode * 59 + DisableNotes.GetHashCode();
                    if (NoteEmails != null)
                    hashCode = hashCode * 59 + NoteEmails.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(SCServiceChannelServicesMessagingDashboardSettingsSetupNoteResponse left, SCServiceChannelServicesMessagingDashboardSettingsSetupNoteResponse right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(SCServiceChannelServicesMessagingDashboardSettingsSetupNoteResponse left, SCServiceChannelServicesMessagingDashboardSettingsSetupNoteResponse right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}
