/*
 * ServiceChannel API - v.3
 *
 * The ServiceChannel API is a RESTful and stateless API. It accepts standard HTTP verbs and supports OAuth 2.0 for authorizing requests.      Our API returns common HTTP status codes as well as JSON encapsulated data.      See [API Overview](https://developer.servicechannel.com/basics/introduction/overview/) for the intro to ServiceChannel API.<br>      <h3>Authentication and Authorization</h3>You should have a ServiceChannel account, register your application, and obtain `access_token` to integrate with our API.      See [Authentication and Authorization](https://developer.servicechannel.com/basics/general/authentication/) for more information.      To use this API playground, click **Authorize** and sign in to ServiceChannel.<br>      <h3>Environment</h3> All calls in this API Reference point to the **SB2 environment**.      See [Environments](https://developer.servicechannel.com/basics/general/environments/) for more information.<br>      <h3>API Version</h3>The current stable version of the ServiceChannel API is `v3`. In the request URL, `v3` is a version prefix that should be present.      When you omit the version prefix, calls point to the minimum supported version of the API.      We recommend you to always specify the API version to avoid possible errors.
 *
 * The version of the OpenAPI document: 3
 * 
 * Generated by: https://openapi-generator.tech
 */

using System;
using System.Linq;
using System.Text;
using System.Collections.Generic;
using System.ComponentModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using System.Text.Json;
using ServiceChannel.OpenAPIGenerated.Api.Converters;

namespace ServiceChannel.OpenAPIGenerated.Api.Models
{ 
    /// <summary>
    /// Check-in request
    /// </summary>
    [DataContract]
    public class SCServiceChannelServicesMessagingWorkordersCheckInRequest : IEquatable<SCServiceChannelServicesMessagingWorkordersCheckInRequest>
    {
        /// <summary>
        /// The unique ID of the work type.              **Possible values:** &#x60;1&#x60; — Repair, &#x60;2&#x60; — Travel. Other values are possible when custom types are set up for the subscriber.              **Default value:** 1.
        /// </summary>
        /// <value>The unique ID of the work type.              **Possible values:** &#x60;1&#x60; — Repair, &#x60;2&#x60; — Travel. Other values are possible when custom types are set up for the subscriber.              **Default value:** 1.</value>
        [DataMember(Name="WorkTypeId", EmitDefaultValue=true)]
        public int WorkTypeId { get; set; }

        /// <summary>
        /// The user ID of the technician that is checking in. Use the same &#x60;UserId&#x60; for one pair of check-in and check-out records.              **Default value:** ID of the current user.
        /// </summary>
        /// <value>The user ID of the technician that is checking in. Use the same &#x60;UserId&#x60; for one pair of check-in and check-out records.              **Default value:** ID of the current user.</value>
        [DataMember(Name="UserId", EmitDefaultValue=true)]
        public int UserId { get; set; }

        /// <summary>
        /// The number of technicians that are checking in.              **Default value:** 1.
        /// </summary>
        /// <value>The number of technicians that are checking in.              **Default value:** 1.</value>
        [DataMember(Name="TechsCount", EmitDefaultValue=true)]
        public int TechsCount { get; set; }

        /// <summary>
        /// The latitude of the technician’s current position.              Required for the Repair type. Not required for the Travel and custom types as well as for the Repair type when the [XML check-in/out permission](https://developer.servicechannel.com/guides/checkin/before-you-start/#xml-check-inout-permission) is enabled.
        /// </summary>
        /// <value>The latitude of the technician’s current position.              Required for the Repair type. Not required for the Travel and custom types as well as for the Repair type when the [XML check-in/out permission](https://developer.servicechannel.com/guides/checkin/before-you-start/#xml-check-inout-permission) is enabled.</value>
        [Required]
        [DataMember(Name="Latitude", EmitDefaultValue=true)]
        public double Latitude { get; set; }

        /// <summary>
        /// The longitude of the technician’s current position.              Required for the Repair type. Not required for the Travel and custom types as well as for the Repair type when the [XML check-in/out permission](https://developer.servicechannel.com/guides/checkin/before-you-start/#xml-check-inout-permission) is enabled.
        /// </summary>
        /// <value>The longitude of the technician’s current position.              Required for the Repair type. Not required for the Travel and custom types as well as for the Repair type when the [XML check-in/out permission](https://developer.servicechannel.com/guides/checkin/before-you-start/#xml-check-inout-permission) is enabled.</value>
        [Required]
        [DataMember(Name="Longitude", EmitDefaultValue=true)]
        public double Longitude { get; set; }

        /// <summary>
        /// The date and time of the check-in. Either indicate in UTC or pass the current time and add the UTC offset.              You can pass this value only when the [XML check-in/out permission](https://developer.servicechannel.com/guides/checkin/before-you-start/#xml-check-inout-permission) is enabled.              **Default value:** current date and time.
        /// </summary>
        /// <value>The date and time of the check-in. Either indicate in UTC or pass the current time and add the UTC offset.              You can pass this value only when the [XML check-in/out permission](https://developer.servicechannel.com/guides/checkin/before-you-start/#xml-check-inout-permission) is enabled.              **Default value:** current date and time.</value>
        [DataMember(Name="CheckInTime", EmitDefaultValue=false)]
        public DateTime CheckInTime { get; set; }

        /// <summary>
        /// Optional, Actor
        /// </summary>
        /// <value>Optional, Actor</value>
        [DataMember(Name="Actor", EmitDefaultValue=false)]
        public string Actor { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class SCServiceChannelServicesMessagingWorkordersCheckInRequest {\n");
            sb.Append("  WorkTypeId: ").Append(WorkTypeId).Append("\n");
            sb.Append("  UserId: ").Append(UserId).Append("\n");
            sb.Append("  TechsCount: ").Append(TechsCount).Append("\n");
            sb.Append("  Latitude: ").Append(Latitude).Append("\n");
            sb.Append("  Longitude: ").Append(Longitude).Append("\n");
            sb.Append("  CheckInTime: ").Append(CheckInTime).Append("\n");
            sb.Append("  Actor: ").Append(Actor).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            var options = new JsonSerializerOptions
            {
                WriteIndented = true
            };

            return JsonSerializer.Serialize(this, options);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (obj is null) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((SCServiceChannelServicesMessagingWorkordersCheckInRequest)obj);
        }

        /// <summary>
        /// Returns true if SCServiceChannelServicesMessagingWorkordersCheckInRequest instances are equal
        /// </summary>
        /// <param name="other">Instance of SCServiceChannelServicesMessagingWorkordersCheckInRequest to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(SCServiceChannelServicesMessagingWorkordersCheckInRequest other)
        {
            if (other is null) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    WorkTypeId == other.WorkTypeId ||
                    
                    WorkTypeId.Equals(other.WorkTypeId)
                ) && 
                (
                    UserId == other.UserId ||
                    
                    UserId.Equals(other.UserId)
                ) && 
                (
                    TechsCount == other.TechsCount ||
                    
                    TechsCount.Equals(other.TechsCount)
                ) && 
                (
                    Latitude == other.Latitude ||
                    
                    Latitude.Equals(other.Latitude)
                ) && 
                (
                    Longitude == other.Longitude ||
                    
                    Longitude.Equals(other.Longitude)
                ) && 
                (
                    CheckInTime == other.CheckInTime ||
                    CheckInTime != null &&
                    CheckInTime.Equals(other.CheckInTime)
                ) && 
                (
                    Actor == other.Actor ||
                    Actor != null &&
                    Actor.Equals(other.Actor)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    
                    hashCode = hashCode * 59 + WorkTypeId.GetHashCode();
                    
                    hashCode = hashCode * 59 + UserId.GetHashCode();
                    
                    hashCode = hashCode * 59 + TechsCount.GetHashCode();
                    
                    hashCode = hashCode * 59 + Latitude.GetHashCode();
                    
                    hashCode = hashCode * 59 + Longitude.GetHashCode();
                    if (CheckInTime != null)
                    hashCode = hashCode * 59 + CheckInTime.GetHashCode();
                    if (Actor != null)
                    hashCode = hashCode * 59 + Actor.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(SCServiceChannelServicesMessagingWorkordersCheckInRequest left, SCServiceChannelServicesMessagingWorkordersCheckInRequest right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(SCServiceChannelServicesMessagingWorkordersCheckInRequest left, SCServiceChannelServicesMessagingWorkordersCheckInRequest right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}
