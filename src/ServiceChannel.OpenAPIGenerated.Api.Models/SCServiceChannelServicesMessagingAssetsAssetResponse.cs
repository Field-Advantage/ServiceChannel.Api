/*
 * ServiceChannel API - v.3
 *
 * The ServiceChannel API is a RESTful and stateless API. It accepts standard HTTP verbs and supports OAuth 2.0 for authorizing requests.      Our API returns common HTTP status codes as well as JSON encapsulated data.      See [API Overview](https://developer.servicechannel.com/basics/introduction/overview/) for the intro to ServiceChannel API.<br>      <h3>Authentication and Authorization</h3>You should have a ServiceChannel account, register your application, and obtain `access_token` to integrate with our API.      See [Authentication and Authorization](https://developer.servicechannel.com/basics/general/authentication/) for more information.      To use this API playground, click **Authorize** and sign in to ServiceChannel.<br>      <h3>Environment</h3> All calls in this API Reference point to the **SB2 environment**.      See [Environments](https://developer.servicechannel.com/basics/general/environments/) for more information.<br>      <h3>API Version</h3>The current stable version of the ServiceChannel API is `v3`. In the request URL, `v3` is a version prefix that should be present.      When you omit the version prefix, calls point to the minimum supported version of the API.      We recommend you to always specify the API version to avoid possible errors.
 *
 * The version of the OpenAPI document: 3
 * 
 * Generated by: https://openapi-generator.tech
 */

using System;
using System.Linq;
using System.Text;
using System.Collections.Generic;
using System.ComponentModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using System.Text.Json;
using ServiceChannel.OpenAPIGenerated.Api.Converters;

namespace ServiceChannel.OpenAPIGenerated.Api.Models
{ 
    /// <summary>
    /// Object details of an asset.
    /// </summary>
    [DataContract]
    public class SCServiceChannelServicesMessagingAssetsAssetResponse : IEquatable<SCServiceChannelServicesMessagingAssetsAssetResponse>
    {
        /// <summary>
        /// Unique numeric asset identifier assigned by the system.
        /// </summary>
        /// <value>Unique numeric asset identifier assigned by the system.</value>
        [DataMember(Name="Id", EmitDefaultValue=true)]
        public int Id { get; set; }

        /// <summary>
        /// Alphanumeric asset identifier assigned by the client.
        /// </summary>
        /// <value>Alphanumeric asset identifier assigned by the client.</value>
        [DataMember(Name="Tag", EmitDefaultValue=false)]
        public string Tag { get; set; }

        /// <summary>
        /// Company name that produces an asset.
        /// </summary>
        /// <value>Company name that produces an asset.</value>
        [DataMember(Name="Manufacturer", EmitDefaultValue=false)]
        public string Manufacturer { get; set; }

        /// <summary>
        /// Asset model number.
        /// </summary>
        /// <value>Asset model number.</value>
        [DataMember(Name="ModelNo", EmitDefaultValue=false)]
        public string ModelNo { get; set; }

        /// <summary>
        /// Asset serial number.
        /// </summary>
        /// <value>Asset serial number.</value>
        [DataMember(Name="SerialNo", EmitDefaultValue=false)]
        public string SerialNo { get; set; }

        /// <summary>
        /// Unique numeric identifier of a location an asset is assigned to.
        /// </summary>
        /// <value>Unique numeric identifier of a location an asset is assigned to.</value>
        [DataMember(Name="LocationId", EmitDefaultValue=true)]
        public int LocationId { get; set; }

        /// <summary>
        /// Place where an asset is physically located.
        /// </summary>
        /// <value>Place where an asset is physically located.</value>
        [DataMember(Name="Area", EmitDefaultValue=false)]
        public string Area { get; set; }

        /// <summary>
        /// Work order area, such as *Dining Room*, *Kitchen*, *Storage*.
        /// </summary>
        /// <value>Work order area, such as *Dining Room*, *Kitchen*, *Storage*.</value>
        [DataMember(Name="WorkOrderArea", EmitDefaultValue=false)]
        public string WorkOrderArea { get; set; }

        /// <summary>
        /// Alphanumeric location identifier assigned by the client.
        /// </summary>
        /// <value>Alphanumeric location identifier assigned by the client.</value>
        [DataMember(Name="StoreId", EmitDefaultValue=false)]
        public string StoreId { get; set; }

        /// <summary>
        /// Trade of an asset type the asset is assigned to, for example, *HVAC*, *DOORS*, *ELECTRICAL*.
        /// </summary>
        /// <value>Trade of an asset type the asset is assigned to, for example, *HVAC*, *DOORS*, *ELECTRICAL*.</value>
        [DataMember(Name="Trade", EmitDefaultValue=false)]
        public string Trade { get; set; }

        /// <summary>
        /// Numeric identifier of the primary trade of an asset.
        /// </summary>
        /// <value>Numeric identifier of the primary trade of an asset.</value>
        [DataMember(Name="TradeId", EmitDefaultValue=true)]
        public int TradeId { get; set; }

        /// <summary>
        /// Asset type, for example, *Refrigerator*, *Computer Monitor*, etc.
        /// </summary>
        /// <value>Asset type, for example, *Refrigerator*, *Computer Monitor*, etc.</value>
        [DataMember(Name="Type", EmitDefaultValue=false)]
        public string Type { get; set; }

        /// <summary>
        /// Unique numeric identifier of an asset type.
        /// </summary>
        /// <value>Unique numeric identifier of an asset type.</value>
        [DataMember(Name="AssetTypeId", EmitDefaultValue=true)]
        public int AssetTypeId { get; set; }

        /// <summary>
        /// Unique numeric identifier of a manufacturer that produces an asset.
        /// </summary>
        /// <value>Unique numeric identifier of a manufacturer that produces an asset.</value>
        [DataMember(Name="BrandId", EmitDefaultValue=true)]
        public int BrandId { get; set; }

        /// <summary>
        /// Date and time when an asset was installed at the current location.
        /// </summary>
        /// <value>Date and time when an asset was installed at the current location.</value>
        [DataMember(Name="InstallDate", EmitDefaultValue=false)]
        public string InstallDate { get; set; }

        /// <summary>
        /// Date and time when an asset was produced.
        /// </summary>
        /// <value>Date and time when an asset was produced.</value>
        [DataMember(Name="ManufacturerDate", EmitDefaultValue=false)]
        public DateTime ManufacturerDate { get; set; }

        /// <summary>
        /// Date and time when an asset was produced by the manufacturer.
        /// </summary>
        /// <value>Date and time when an asset was produced by the manufacturer.</value>
        [DataMember(Name="ManufacturerDateStr", EmitDefaultValue=false)]
        public string ManufacturerDateStr { get; set; }

        /// <summary>
        /// Date and time when an asset was purchased.
        /// </summary>
        /// <value>Date and time when an asset was purchased.</value>
        [DataMember(Name="PurchaseDate", EmitDefaultValue=false)]
        public string PurchaseDate { get; set; }

        /// <summary>
        /// Defines whether an asset uses a refrigerant.  **Possible values**: 0 - no, 1 - yes.
        /// </summary>
        /// <value>Defines whether an asset uses a refrigerant.  **Possible values**: 0 - no, 1 - yes.</value>
        [DataMember(Name="UsesRefrigerant", EmitDefaultValue=true)]
        public int UsesRefrigerant { get; set; }

        /// <summary>
        /// Shows whether an asset is still in use. **Possible values**: *true*, *false*.
        /// </summary>
        /// <value>Shows whether an asset is still in use. **Possible values**: *true*, *false*.</value>
        [DataMember(Name="Active", EmitDefaultValue=true)]
        public bool Active { get; set; } = false;

        /// <summary>
        /// Defines whether an asset is leased. **Possible values**: *true*, *false*.
        /// </summary>
        /// <value>Defines whether an asset is leased. **Possible values**: *true*, *false*.</value>
        [DataMember(Name="IsLeased", EmitDefaultValue=true)]
        public bool IsLeased { get; set; } = false;

        /// <summary>
        /// Estimated useful life of an asset in months.
        /// </summary>
        /// <value>Estimated useful life of an asset in months.</value>
        [DataMember(Name="LifeExpectancy", EmitDefaultValue=true)]
        public int LifeExpectancy { get; set; }

        /// <summary>
        /// Original asset price.
        /// </summary>
        /// <value>Original asset price.</value>
        [DataMember(Name="OriginalValue", EmitDefaultValue=true)]
        public double OriginalValue { get; set; }

        /// <summary>
        /// Date and time when a lease was signed.
        /// </summary>
        /// <value>Date and time when a lease was signed.</value>
        [DataMember(Name="LeaseDate", EmitDefaultValue=false)]
        public string LeaseDate { get; set; }

        /// <summary>
        /// Period of time in months a contracted lease is in place.
        /// </summary>
        /// <value>Period of time in months a contracted lease is in place.</value>
        [DataMember(Name="LeasePeriod", EmitDefaultValue=true)]
        public int LeasePeriod { get; set; }

        /// <summary>
        /// Value representation of an asset condition. **Possible values**: &#x60;0&#x60; - *broken*, &#x60;25&#x60; - *poor*, &#x60;50&#x60; - *average*, &#x60;75&#x60; - *good*, &#x60;100&#x60; - *excellent*.
        /// </summary>
        /// <value>Value representation of an asset condition. **Possible values**: &#x60;0&#x60; - *broken*, &#x60;25&#x60; - *poor*, &#x60;50&#x60; - *average*, &#x60;75&#x60; - *good*, &#x60;100&#x60; - *excellent*.</value>
        [DataMember(Name="Condition", EmitDefaultValue=true)]
        public int Condition { get; set; }

        /// <summary>
        /// Current condition of an asset. **Possible values**: *broken*, *poor*, *average*, *good*, *excellent*.
        /// </summary>
        /// <value>Current condition of an asset. **Possible values**: *broken*, *poor*, *average*, *good*, *excellent*.</value>
        [DataMember(Name="ConditionString", EmitDefaultValue=false)]
        public string ConditionString { get; set; }

        /// <summary>
        /// Provides information on energy efficiency of a particular asset. Maximum is 150 characters.
        /// </summary>
        /// <value>Provides information on energy efficiency of a particular asset. Maximum is 150 characters.</value>
        [DataMember(Name="EnergyEfficiency", EmitDefaultValue=false)]
        public string EnergyEfficiency { get; set; }

        /// <summary>
        /// Provides information on the maximum amount of the refrigerant an asset can contain. Maximum is 150 characters.
        /// </summary>
        /// <value>Provides information on the maximum amount of the refrigerant an asset can contain. Maximum is 150 characters.</value>
        [DataMember(Name="Capacity", EmitDefaultValue=false)]
        public string Capacity { get; set; }

        /// <summary>
        /// Defines whether an asset has a leak detector and belongs to the Leak Detector asset type. **Possible values**: *true*, *false*.
        /// </summary>
        /// <value>Defines whether an asset has a leak detector and belongs to the Leak Detector asset type. **Possible values**: *true*, *false*.</value>
        [DataMember(Name="HasLeakDetector", EmitDefaultValue=true)]
        public bool HasLeakDetector { get; set; } = false;

        /// <summary>
        /// ID of the leak detector that is connected to an asset.
        /// </summary>
        /// <value>ID of the leak detector that is connected to an asset.</value>
        [DataMember(Name="AssetLeakDetectorConnectionId", EmitDefaultValue=true)]
        public int AssetLeakDetectorConnectionId { get; set; }

        /// <summary>
        /// Place where an asset is physically located.
        /// </summary>
        /// <value>Place where an asset is physically located.</value>
        [DataMember(Name="Location", EmitDefaultValue=false)]
        public string Location { get; set; }

        /// <summary>
        /// Gets or Sets Warranty
        /// </summary>
        [DataMember(Name="Warranty", EmitDefaultValue=false)]
        public SCServiceChannelServicesMessagingAssetsWarranty Warranty { get; set; }

        /// <summary>
        /// Defines if the current asset is a replacement for another on condition that a tracking number is provided. **Possible values**: *true*, *false*.
        /// </summary>
        /// <value>Defines if the current asset is a replacement for another on condition that a tracking number is provided. **Possible values**: *true*, *false*.</value>
        [DataMember(Name="IsReplaceEquipment", EmitDefaultValue=true)]
        public bool IsReplaceEquipment { get; set; } = false;

        /// <summary>
        /// Defines if an asset contains ‘Asset Tag’.
        /// </summary>
        /// <value>Defines if an asset contains ‘Asset Tag’.</value>
        [DataMember(Name="HasTagged", EmitDefaultValue=true)]
        public bool HasTagged { get; set; } = false;

        /// <summary>
        /// Date and time when an asset was last updated.
        /// </summary>
        /// <value>Date and time when an asset was last updated.</value>
        [DataMember(Name="LastModifiedUseDate", EmitDefaultValue=false)]
        public DateTime LastModifiedUseDate { get; set; }

        /// <summary>
        /// Name of the user who updated an asset.
        /// </summary>
        /// <value>Name of the user who updated an asset.</value>
        [DataMember(Name="LastModifiedUserName", EmitDefaultValue=false)]
        public string LastModifiedUserName { get; set; }

        /// <summary>
        /// Subscriber’s name who added an asset.
        /// </summary>
        /// <value>Subscriber’s name who added an asset.</value>
        [DataMember(Name="SubName", EmitDefaultValue=false)]
        public string SubName { get; set; }

        /// <summary>
        /// Gets or Sets AssetRefrigerant
        /// </summary>
        [DataMember(Name="AssetRefrigerant", EmitDefaultValue=false)]
        public SCServiceChannelServicesMessagingRefrigerantTrackingAssetRefrigerant AssetRefrigerant { get; set; }

        /// <summary>
        /// Gets or Sets AssetAttributesMap
        /// </summary>
        [DataMember(Name="AssetAttributesMap", EmitDefaultValue=false)]
        public SCServiceChannelServicesMessagingAssetsAssetAttributesMap AssetAttributesMap { get; set; }

        /// <summary>
        /// Unique alphanumeric decoded value contained in a barcode, QR code, or NFC tag of an asset. It is used to scan assets via [ServiceChannel Mobile](https://servicechannel.atlassian.net/wiki/spaces/SCU/pages/575341308/Asset+Tagging#AssetTagging-AccessingtheAssetScanningModuleinSCMobile) and [ServiceChannel Provider](https://servicechannel.atlassian.net/wiki/spaces/SCU/pages/1181745372/Scanning+and+Validating+Assets+via+SC+Provider+for+FTM+Internal+Techs).
        /// </summary>
        /// <value>Unique alphanumeric decoded value contained in a barcode, QR code, or NFC tag of an asset. It is used to scan assets via [ServiceChannel Mobile](https://servicechannel.atlassian.net/wiki/spaces/SCU/pages/575341308/Asset+Tagging#AssetTagging-AccessingtheAssetScanningModuleinSCMobile) and [ServiceChannel Provider](https://servicechannel.atlassian.net/wiki/spaces/SCU/pages/1181745372/Scanning+and+Validating+Assets+via+SC+Provider+for+FTM+Internal+Techs).</value>
        [DataMember(Name="AssetTag", EmitDefaultValue=false)]
        public string AssetTag { get; set; }

        /// <summary>
        /// Provides the number of the template an asset was imported from.
        /// </summary>
        /// <value>Provides the number of the template an asset was imported from.</value>
        [DataMember(Name="ImportedFrom", EmitDefaultValue=true)]
        public int ImportedFrom { get; set; }

        /// <summary>
        /// Unique numeric identification of an asset that has a circuit or component.
        /// </summary>
        /// <value>Unique numeric identification of an asset that has a circuit or component.</value>
        [DataMember(Name="ParentId", EmitDefaultValue=true)]
        public int ParentId { get; set; }

        /// <summary>
        /// Comment created by a user when adding an asset.
        /// </summary>
        /// <value>Comment created by a user when adding an asset.</value>
        [DataMember(Name="Description", EmitDefaultValue=false)]
        public string Description { get; set; }

        /// <summary>
        /// Defines whether an asset has components. **Possible values**: *true*, *false*.
        /// </summary>
        /// <value>Defines whether an asset has components. **Possible values**: *true*, *false*.</value>
        [DataMember(Name="HasComponents", EmitDefaultValue=true)]
        public bool HasComponents { get; set; } = false;

        /// <summary>
        /// Defines if an asset has an added circuit. **Possible values**: *true*, *false*.
        /// </summary>
        /// <value>Defines if an asset has an added circuit. **Possible values**: *true*, *false*.</value>
        [DataMember(Name="HasCircuits", EmitDefaultValue=true)]
        public bool HasCircuits { get; set; } = false;

        /// <summary>
        /// Defines whether an asset is a circuit. **Possible values**: *true*, *false*.
        /// </summary>
        /// <value>Defines whether an asset is a circuit. **Possible values**: *true*, *false*.</value>
        [DataMember(Name="IsCircuit", EmitDefaultValue=true)]
        public bool IsCircuit { get; set; } = false;

        /// <summary>
        /// Unique numeric ID of the subscriber an asset belongs to.
        /// </summary>
        /// <value>Unique numeric ID of the subscriber an asset belongs to.</value>
        [DataMember(Name="SubscriberId", EmitDefaultValue=true)]
        public int SubscriberId { get; set; }

        /// <summary>
        /// Defines whether the asset has been validated by a technician.  **Possible values**: *true*, *false*.
        /// </summary>
        /// <value>Defines whether the asset has been validated by a technician.  **Possible values**: *true*, *false*.</value>
        [DataMember(Name="AssetValidated", EmitDefaultValue=true)]
        public bool AssetValidated { get; set; } = false;

        /// <summary>
        /// Defines whether an asset needs to be validated by a technician upon check-in.
        /// </summary>
        /// <value>Defines whether an asset needs to be validated by a technician upon check-in.</value>
        [DataMember(Name="ValidationRequired", EmitDefaultValue=true)]
        public bool ValidationRequired { get; set; } = false;

        /// <summary>
        /// Defines whether an asset belongs to the *Leak Detector* asset type.
        /// </summary>
        /// <value>Defines whether an asset belongs to the *Leak Detector* asset type.</value>
        [DataMember(Name="IsLeakDetector", EmitDefaultValue=true)]
        public bool IsLeakDetector { get; set; } = false;

        /// <summary>
        /// Defines an asset repair status. **Possible values**: &#x60;0&#x60; - *In Use*, &#x60;1&#x60; - *Out For Repair*, &#x60;2&#x60; - *Replacement Recommended*, &#x60;3&#x60; - *Repaired*.
        /// </summary>
        /// <value>Defines an asset repair status. **Possible values**: &#x60;0&#x60; - *In Use*, &#x60;1&#x60; - *Out For Repair*, &#x60;2&#x60; - *Replacement Recommended*, &#x60;3&#x60; - *Repaired*.</value>
        [RegularExpression("^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$")]
        [DataMember(Name="AssetStatus", EmitDefaultValue=false)]
        public byte[] AssetStatus { get; set; }

        /// <summary>
        /// Defines the asset update status. **Possible values**: 0 - Attributes updated by provider, 1- New unconfirmed - asset created by provider, 2 - Rejected, 3 - Asset change confirmed.
        /// </summary>
        /// <value>Defines the asset update status. **Possible values**: 0 - Attributes updated by provider, 1- New unconfirmed - asset created by provider, 2 - Rejected, 3 - Asset change confirmed.</value>
        [RegularExpression("^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$")]
        [DataMember(Name="AssetUpdatesStatus", EmitDefaultValue=false)]
        public byte[] AssetUpdatesStatus { get; set; }

        /// <summary>
        /// Names of the additional trades for an asset type.
        /// </summary>
        /// <value>Names of the additional trades for an asset type.</value>
        [DataMember(Name="AdditionalTradesNames", EmitDefaultValue=false)]
        public string AdditionalTradesNames { get; set; }

        /// <summary>
        /// Date and time of the asset creation.
        /// </summary>
        /// <value>Date and time of the asset creation.</value>
        [DataMember(Name="CreatedDate", EmitDefaultValue=false)]
        public DateTime CreatedDate { get; set; }

        /// <summary>
        /// Date and time of the last asset update.
        /// </summary>
        /// <value>Date and time of the last asset update.</value>
        [DataMember(Name="ModifiedDate", EmitDefaultValue=false)]
        public DateTime ModifiedDate { get; set; }

        /// <summary>
        /// Unique ID of an asset type group.
        /// </summary>
        /// <value>Unique ID of an asset type group.</value>
        [DataMember(Name="AssetTypeGroupId", EmitDefaultValue=true)]
        public int AssetTypeGroupId { get; set; }

        /// <summary>
        /// Total asset cost. Can be calculated if the *IncludeTotalCostOfOwnership* feature flag is enabled.
        /// </summary>
        /// <value>Total asset cost. Can be calculated if the *IncludeTotalCostOfOwnership* feature flag is enabled.</value>
        [DataMember(Name="Spend", EmitDefaultValue=true)]
        public double Spend { get; set; }

        /// <summary>
        /// Defines whether an asset is included in a CARB report. **Possible values**: *true*, *false*.
        /// </summary>
        /// <value>Defines whether an asset is included in a CARB report. **Possible values**: *true*, *false*.</value>
        [DataMember(Name="IsCarbReporting", EmitDefaultValue=true)]
        public bool IsCarbReporting { get; set; } = false;

        /// <summary>
        /// Gets or Sets AssetValidationStatus
        /// </summary>
        [DataMember(Name="AssetValidationStatus", EmitDefaultValue=true)]
        public int AssetValidationStatus { get; set; }

        /// <summary>
        /// Custom Attributes
        /// </summary>
        /// <value>Custom Attributes</value>
        [DataMember(Name="CustomAttributes", EmitDefaultValue=false)]
        public List<SCServiceChannelServicesMessagingEquipmentsEquipmentAttributeDescription> CustomAttributes { get; set; }

        /// <summary>
        /// Gets or Sets HasChilds
        /// </summary>
        [DataMember(Name="HasChilds", EmitDefaultValue=true)]
        public bool HasChilds { get; set; } = false;

        /// <summary>
        /// Gets or Sets Currency
        /// </summary>
        [DataMember(Name="Currency", EmitDefaultValue=true)]
        public int Currency { get; set; }

        /// <summary>
        /// ModifiedDate datetime offset
        /// </summary>
        /// <value>ModifiedDate datetime offset</value>
        [DataMember(Name="ModifiedDateDto", EmitDefaultValue=false)]
        public DateTime ModifiedDateDto { get; set; }

        /// <summary>
        /// Date and time of the asset deactivation.
        /// </summary>
        /// <value>Date and time of the asset deactivation.</value>
        [DataMember(Name="RetiredDate", EmitDefaultValue=false)]
        public DateTime RetiredDate { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class SCServiceChannelServicesMessagingAssetsAssetResponse {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  Tag: ").Append(Tag).Append("\n");
            sb.Append("  Manufacturer: ").Append(Manufacturer).Append("\n");
            sb.Append("  ModelNo: ").Append(ModelNo).Append("\n");
            sb.Append("  SerialNo: ").Append(SerialNo).Append("\n");
            sb.Append("  LocationId: ").Append(LocationId).Append("\n");
            sb.Append("  Area: ").Append(Area).Append("\n");
            sb.Append("  WorkOrderArea: ").Append(WorkOrderArea).Append("\n");
            sb.Append("  StoreId: ").Append(StoreId).Append("\n");
            sb.Append("  Trade: ").Append(Trade).Append("\n");
            sb.Append("  TradeId: ").Append(TradeId).Append("\n");
            sb.Append("  Type: ").Append(Type).Append("\n");
            sb.Append("  AssetTypeId: ").Append(AssetTypeId).Append("\n");
            sb.Append("  BrandId: ").Append(BrandId).Append("\n");
            sb.Append("  InstallDate: ").Append(InstallDate).Append("\n");
            sb.Append("  ManufacturerDate: ").Append(ManufacturerDate).Append("\n");
            sb.Append("  ManufacturerDateStr: ").Append(ManufacturerDateStr).Append("\n");
            sb.Append("  PurchaseDate: ").Append(PurchaseDate).Append("\n");
            sb.Append("  UsesRefrigerant: ").Append(UsesRefrigerant).Append("\n");
            sb.Append("  Active: ").Append(Active).Append("\n");
            sb.Append("  IsLeased: ").Append(IsLeased).Append("\n");
            sb.Append("  LifeExpectancy: ").Append(LifeExpectancy).Append("\n");
            sb.Append("  OriginalValue: ").Append(OriginalValue).Append("\n");
            sb.Append("  LeaseDate: ").Append(LeaseDate).Append("\n");
            sb.Append("  LeasePeriod: ").Append(LeasePeriod).Append("\n");
            sb.Append("  Condition: ").Append(Condition).Append("\n");
            sb.Append("  ConditionString: ").Append(ConditionString).Append("\n");
            sb.Append("  EnergyEfficiency: ").Append(EnergyEfficiency).Append("\n");
            sb.Append("  Capacity: ").Append(Capacity).Append("\n");
            sb.Append("  HasLeakDetector: ").Append(HasLeakDetector).Append("\n");
            sb.Append("  AssetLeakDetectorConnectionId: ").Append(AssetLeakDetectorConnectionId).Append("\n");
            sb.Append("  Location: ").Append(Location).Append("\n");
            sb.Append("  Warranty: ").Append(Warranty).Append("\n");
            sb.Append("  IsReplaceEquipment: ").Append(IsReplaceEquipment).Append("\n");
            sb.Append("  HasTagged: ").Append(HasTagged).Append("\n");
            sb.Append("  LastModifiedUseDate: ").Append(LastModifiedUseDate).Append("\n");
            sb.Append("  LastModifiedUserName: ").Append(LastModifiedUserName).Append("\n");
            sb.Append("  SubName: ").Append(SubName).Append("\n");
            sb.Append("  AssetRefrigerant: ").Append(AssetRefrigerant).Append("\n");
            sb.Append("  AssetAttributesMap: ").Append(AssetAttributesMap).Append("\n");
            sb.Append("  AssetTag: ").Append(AssetTag).Append("\n");
            sb.Append("  ImportedFrom: ").Append(ImportedFrom).Append("\n");
            sb.Append("  ParentId: ").Append(ParentId).Append("\n");
            sb.Append("  Description: ").Append(Description).Append("\n");
            sb.Append("  HasComponents: ").Append(HasComponents).Append("\n");
            sb.Append("  HasCircuits: ").Append(HasCircuits).Append("\n");
            sb.Append("  IsCircuit: ").Append(IsCircuit).Append("\n");
            sb.Append("  SubscriberId: ").Append(SubscriberId).Append("\n");
            sb.Append("  AssetValidated: ").Append(AssetValidated).Append("\n");
            sb.Append("  ValidationRequired: ").Append(ValidationRequired).Append("\n");
            sb.Append("  IsLeakDetector: ").Append(IsLeakDetector).Append("\n");
            sb.Append("  AssetStatus: ").Append(AssetStatus).Append("\n");
            sb.Append("  AssetUpdatesStatus: ").Append(AssetUpdatesStatus).Append("\n");
            sb.Append("  AdditionalTradesNames: ").Append(AdditionalTradesNames).Append("\n");
            sb.Append("  CreatedDate: ").Append(CreatedDate).Append("\n");
            sb.Append("  ModifiedDate: ").Append(ModifiedDate).Append("\n");
            sb.Append("  AssetTypeGroupId: ").Append(AssetTypeGroupId).Append("\n");
            sb.Append("  Spend: ").Append(Spend).Append("\n");
            sb.Append("  IsCarbReporting: ").Append(IsCarbReporting).Append("\n");
            sb.Append("  AssetValidationStatus: ").Append(AssetValidationStatus).Append("\n");
            sb.Append("  CustomAttributes: ").Append(CustomAttributes).Append("\n");
            sb.Append("  HasChilds: ").Append(HasChilds).Append("\n");
            sb.Append("  Currency: ").Append(Currency).Append("\n");
            sb.Append("  ModifiedDateDto: ").Append(ModifiedDateDto).Append("\n");
            sb.Append("  RetiredDate: ").Append(RetiredDate).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            var options = new JsonSerializerOptions
            {
                WriteIndented = true
            };

            return JsonSerializer.Serialize(this, options);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (obj is null) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((SCServiceChannelServicesMessagingAssetsAssetResponse)obj);
        }

        /// <summary>
        /// Returns true if SCServiceChannelServicesMessagingAssetsAssetResponse instances are equal
        /// </summary>
        /// <param name="other">Instance of SCServiceChannelServicesMessagingAssetsAssetResponse to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(SCServiceChannelServicesMessagingAssetsAssetResponse other)
        {
            if (other is null) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    Id == other.Id ||
                    
                    Id.Equals(other.Id)
                ) && 
                (
                    Tag == other.Tag ||
                    Tag != null &&
                    Tag.Equals(other.Tag)
                ) && 
                (
                    Manufacturer == other.Manufacturer ||
                    Manufacturer != null &&
                    Manufacturer.Equals(other.Manufacturer)
                ) && 
                (
                    ModelNo == other.ModelNo ||
                    ModelNo != null &&
                    ModelNo.Equals(other.ModelNo)
                ) && 
                (
                    SerialNo == other.SerialNo ||
                    SerialNo != null &&
                    SerialNo.Equals(other.SerialNo)
                ) && 
                (
                    LocationId == other.LocationId ||
                    
                    LocationId.Equals(other.LocationId)
                ) && 
                (
                    Area == other.Area ||
                    Area != null &&
                    Area.Equals(other.Area)
                ) && 
                (
                    WorkOrderArea == other.WorkOrderArea ||
                    WorkOrderArea != null &&
                    WorkOrderArea.Equals(other.WorkOrderArea)
                ) && 
                (
                    StoreId == other.StoreId ||
                    StoreId != null &&
                    StoreId.Equals(other.StoreId)
                ) && 
                (
                    Trade == other.Trade ||
                    Trade != null &&
                    Trade.Equals(other.Trade)
                ) && 
                (
                    TradeId == other.TradeId ||
                    
                    TradeId.Equals(other.TradeId)
                ) && 
                (
                    Type == other.Type ||
                    Type != null &&
                    Type.Equals(other.Type)
                ) && 
                (
                    AssetTypeId == other.AssetTypeId ||
                    
                    AssetTypeId.Equals(other.AssetTypeId)
                ) && 
                (
                    BrandId == other.BrandId ||
                    
                    BrandId.Equals(other.BrandId)
                ) && 
                (
                    InstallDate == other.InstallDate ||
                    InstallDate != null &&
                    InstallDate.Equals(other.InstallDate)
                ) && 
                (
                    ManufacturerDate == other.ManufacturerDate ||
                    ManufacturerDate != null &&
                    ManufacturerDate.Equals(other.ManufacturerDate)
                ) && 
                (
                    ManufacturerDateStr == other.ManufacturerDateStr ||
                    ManufacturerDateStr != null &&
                    ManufacturerDateStr.Equals(other.ManufacturerDateStr)
                ) && 
                (
                    PurchaseDate == other.PurchaseDate ||
                    PurchaseDate != null &&
                    PurchaseDate.Equals(other.PurchaseDate)
                ) && 
                (
                    UsesRefrigerant == other.UsesRefrigerant ||
                    
                    UsesRefrigerant.Equals(other.UsesRefrigerant)
                ) && 
                (
                    Active == other.Active ||
                    
                    Active.Equals(other.Active)
                ) && 
                (
                    IsLeased == other.IsLeased ||
                    
                    IsLeased.Equals(other.IsLeased)
                ) && 
                (
                    LifeExpectancy == other.LifeExpectancy ||
                    
                    LifeExpectancy.Equals(other.LifeExpectancy)
                ) && 
                (
                    OriginalValue == other.OriginalValue ||
                    
                    OriginalValue.Equals(other.OriginalValue)
                ) && 
                (
                    LeaseDate == other.LeaseDate ||
                    LeaseDate != null &&
                    LeaseDate.Equals(other.LeaseDate)
                ) && 
                (
                    LeasePeriod == other.LeasePeriod ||
                    
                    LeasePeriod.Equals(other.LeasePeriod)
                ) && 
                (
                    Condition == other.Condition ||
                    
                    Condition.Equals(other.Condition)
                ) && 
                (
                    ConditionString == other.ConditionString ||
                    ConditionString != null &&
                    ConditionString.Equals(other.ConditionString)
                ) && 
                (
                    EnergyEfficiency == other.EnergyEfficiency ||
                    EnergyEfficiency != null &&
                    EnergyEfficiency.Equals(other.EnergyEfficiency)
                ) && 
                (
                    Capacity == other.Capacity ||
                    Capacity != null &&
                    Capacity.Equals(other.Capacity)
                ) && 
                (
                    HasLeakDetector == other.HasLeakDetector ||
                    
                    HasLeakDetector.Equals(other.HasLeakDetector)
                ) && 
                (
                    AssetLeakDetectorConnectionId == other.AssetLeakDetectorConnectionId ||
                    
                    AssetLeakDetectorConnectionId.Equals(other.AssetLeakDetectorConnectionId)
                ) && 
                (
                    Location == other.Location ||
                    Location != null &&
                    Location.Equals(other.Location)
                ) && 
                (
                    Warranty == other.Warranty ||
                    Warranty != null &&
                    Warranty.Equals(other.Warranty)
                ) && 
                (
                    IsReplaceEquipment == other.IsReplaceEquipment ||
                    
                    IsReplaceEquipment.Equals(other.IsReplaceEquipment)
                ) && 
                (
                    HasTagged == other.HasTagged ||
                    
                    HasTagged.Equals(other.HasTagged)
                ) && 
                (
                    LastModifiedUseDate == other.LastModifiedUseDate ||
                    LastModifiedUseDate != null &&
                    LastModifiedUseDate.Equals(other.LastModifiedUseDate)
                ) && 
                (
                    LastModifiedUserName == other.LastModifiedUserName ||
                    LastModifiedUserName != null &&
                    LastModifiedUserName.Equals(other.LastModifiedUserName)
                ) && 
                (
                    SubName == other.SubName ||
                    SubName != null &&
                    SubName.Equals(other.SubName)
                ) && 
                (
                    AssetRefrigerant == other.AssetRefrigerant ||
                    AssetRefrigerant != null &&
                    AssetRefrigerant.Equals(other.AssetRefrigerant)
                ) && 
                (
                    AssetAttributesMap == other.AssetAttributesMap ||
                    AssetAttributesMap != null &&
                    AssetAttributesMap.Equals(other.AssetAttributesMap)
                ) && 
                (
                    AssetTag == other.AssetTag ||
                    AssetTag != null &&
                    AssetTag.Equals(other.AssetTag)
                ) && 
                (
                    ImportedFrom == other.ImportedFrom ||
                    
                    ImportedFrom.Equals(other.ImportedFrom)
                ) && 
                (
                    ParentId == other.ParentId ||
                    
                    ParentId.Equals(other.ParentId)
                ) && 
                (
                    Description == other.Description ||
                    Description != null &&
                    Description.Equals(other.Description)
                ) && 
                (
                    HasComponents == other.HasComponents ||
                    
                    HasComponents.Equals(other.HasComponents)
                ) && 
                (
                    HasCircuits == other.HasCircuits ||
                    
                    HasCircuits.Equals(other.HasCircuits)
                ) && 
                (
                    IsCircuit == other.IsCircuit ||
                    
                    IsCircuit.Equals(other.IsCircuit)
                ) && 
                (
                    SubscriberId == other.SubscriberId ||
                    
                    SubscriberId.Equals(other.SubscriberId)
                ) && 
                (
                    AssetValidated == other.AssetValidated ||
                    
                    AssetValidated.Equals(other.AssetValidated)
                ) && 
                (
                    ValidationRequired == other.ValidationRequired ||
                    
                    ValidationRequired.Equals(other.ValidationRequired)
                ) && 
                (
                    IsLeakDetector == other.IsLeakDetector ||
                    
                    IsLeakDetector.Equals(other.IsLeakDetector)
                ) && 
                (
                    AssetStatus == other.AssetStatus ||
                    AssetStatus != null &&
                    AssetStatus.Equals(other.AssetStatus)
                ) && 
                (
                    AssetUpdatesStatus == other.AssetUpdatesStatus ||
                    AssetUpdatesStatus != null &&
                    AssetUpdatesStatus.Equals(other.AssetUpdatesStatus)
                ) && 
                (
                    AdditionalTradesNames == other.AdditionalTradesNames ||
                    AdditionalTradesNames != null &&
                    AdditionalTradesNames.Equals(other.AdditionalTradesNames)
                ) && 
                (
                    CreatedDate == other.CreatedDate ||
                    CreatedDate != null &&
                    CreatedDate.Equals(other.CreatedDate)
                ) && 
                (
                    ModifiedDate == other.ModifiedDate ||
                    ModifiedDate != null &&
                    ModifiedDate.Equals(other.ModifiedDate)
                ) && 
                (
                    AssetTypeGroupId == other.AssetTypeGroupId ||
                    
                    AssetTypeGroupId.Equals(other.AssetTypeGroupId)
                ) && 
                (
                    Spend == other.Spend ||
                    
                    Spend.Equals(other.Spend)
                ) && 
                (
                    IsCarbReporting == other.IsCarbReporting ||
                    
                    IsCarbReporting.Equals(other.IsCarbReporting)
                ) && 
                (
                    AssetValidationStatus == other.AssetValidationStatus ||
                    
                    AssetValidationStatus.Equals(other.AssetValidationStatus)
                ) && 
                (
                    CustomAttributes == other.CustomAttributes ||
                    CustomAttributes != null &&
                    other.CustomAttributes != null &&
                    CustomAttributes.SequenceEqual(other.CustomAttributes)
                ) && 
                (
                    HasChilds == other.HasChilds ||
                    
                    HasChilds.Equals(other.HasChilds)
                ) && 
                (
                    Currency == other.Currency ||
                    
                    Currency.Equals(other.Currency)
                ) && 
                (
                    ModifiedDateDto == other.ModifiedDateDto ||
                    ModifiedDateDto != null &&
                    ModifiedDateDto.Equals(other.ModifiedDateDto)
                ) && 
                (
                    RetiredDate == other.RetiredDate ||
                    RetiredDate != null &&
                    RetiredDate.Equals(other.RetiredDate)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    
                    hashCode = hashCode * 59 + Id.GetHashCode();
                    if (Tag != null)
                    hashCode = hashCode * 59 + Tag.GetHashCode();
                    if (Manufacturer != null)
                    hashCode = hashCode * 59 + Manufacturer.GetHashCode();
                    if (ModelNo != null)
                    hashCode = hashCode * 59 + ModelNo.GetHashCode();
                    if (SerialNo != null)
                    hashCode = hashCode * 59 + SerialNo.GetHashCode();
                    
                    hashCode = hashCode * 59 + LocationId.GetHashCode();
                    if (Area != null)
                    hashCode = hashCode * 59 + Area.GetHashCode();
                    if (WorkOrderArea != null)
                    hashCode = hashCode * 59 + WorkOrderArea.GetHashCode();
                    if (StoreId != null)
                    hashCode = hashCode * 59 + StoreId.GetHashCode();
                    if (Trade != null)
                    hashCode = hashCode * 59 + Trade.GetHashCode();
                    
                    hashCode = hashCode * 59 + TradeId.GetHashCode();
                    if (Type != null)
                    hashCode = hashCode * 59 + Type.GetHashCode();
                    
                    hashCode = hashCode * 59 + AssetTypeId.GetHashCode();
                    
                    hashCode = hashCode * 59 + BrandId.GetHashCode();
                    if (InstallDate != null)
                    hashCode = hashCode * 59 + InstallDate.GetHashCode();
                    if (ManufacturerDate != null)
                    hashCode = hashCode * 59 + ManufacturerDate.GetHashCode();
                    if (ManufacturerDateStr != null)
                    hashCode = hashCode * 59 + ManufacturerDateStr.GetHashCode();
                    if (PurchaseDate != null)
                    hashCode = hashCode * 59 + PurchaseDate.GetHashCode();
                    
                    hashCode = hashCode * 59 + UsesRefrigerant.GetHashCode();
                    
                    hashCode = hashCode * 59 + Active.GetHashCode();
                    
                    hashCode = hashCode * 59 + IsLeased.GetHashCode();
                    
                    hashCode = hashCode * 59 + LifeExpectancy.GetHashCode();
                    
                    hashCode = hashCode * 59 + OriginalValue.GetHashCode();
                    if (LeaseDate != null)
                    hashCode = hashCode * 59 + LeaseDate.GetHashCode();
                    
                    hashCode = hashCode * 59 + LeasePeriod.GetHashCode();
                    
                    hashCode = hashCode * 59 + Condition.GetHashCode();
                    if (ConditionString != null)
                    hashCode = hashCode * 59 + ConditionString.GetHashCode();
                    if (EnergyEfficiency != null)
                    hashCode = hashCode * 59 + EnergyEfficiency.GetHashCode();
                    if (Capacity != null)
                    hashCode = hashCode * 59 + Capacity.GetHashCode();
                    
                    hashCode = hashCode * 59 + HasLeakDetector.GetHashCode();
                    
                    hashCode = hashCode * 59 + AssetLeakDetectorConnectionId.GetHashCode();
                    if (Location != null)
                    hashCode = hashCode * 59 + Location.GetHashCode();
                    if (Warranty != null)
                    hashCode = hashCode * 59 + Warranty.GetHashCode();
                    
                    hashCode = hashCode * 59 + IsReplaceEquipment.GetHashCode();
                    
                    hashCode = hashCode * 59 + HasTagged.GetHashCode();
                    if (LastModifiedUseDate != null)
                    hashCode = hashCode * 59 + LastModifiedUseDate.GetHashCode();
                    if (LastModifiedUserName != null)
                    hashCode = hashCode * 59 + LastModifiedUserName.GetHashCode();
                    if (SubName != null)
                    hashCode = hashCode * 59 + SubName.GetHashCode();
                    if (AssetRefrigerant != null)
                    hashCode = hashCode * 59 + AssetRefrigerant.GetHashCode();
                    if (AssetAttributesMap != null)
                    hashCode = hashCode * 59 + AssetAttributesMap.GetHashCode();
                    if (AssetTag != null)
                    hashCode = hashCode * 59 + AssetTag.GetHashCode();
                    
                    hashCode = hashCode * 59 + ImportedFrom.GetHashCode();
                    
                    hashCode = hashCode * 59 + ParentId.GetHashCode();
                    if (Description != null)
                    hashCode = hashCode * 59 + Description.GetHashCode();
                    
                    hashCode = hashCode * 59 + HasComponents.GetHashCode();
                    
                    hashCode = hashCode * 59 + HasCircuits.GetHashCode();
                    
                    hashCode = hashCode * 59 + IsCircuit.GetHashCode();
                    
                    hashCode = hashCode * 59 + SubscriberId.GetHashCode();
                    
                    hashCode = hashCode * 59 + AssetValidated.GetHashCode();
                    
                    hashCode = hashCode * 59 + ValidationRequired.GetHashCode();
                    
                    hashCode = hashCode * 59 + IsLeakDetector.GetHashCode();
                    if (AssetStatus != null)
                    hashCode = hashCode * 59 + AssetStatus.GetHashCode();
                    if (AssetUpdatesStatus != null)
                    hashCode = hashCode * 59 + AssetUpdatesStatus.GetHashCode();
                    if (AdditionalTradesNames != null)
                    hashCode = hashCode * 59 + AdditionalTradesNames.GetHashCode();
                    if (CreatedDate != null)
                    hashCode = hashCode * 59 + CreatedDate.GetHashCode();
                    if (ModifiedDate != null)
                    hashCode = hashCode * 59 + ModifiedDate.GetHashCode();
                    
                    hashCode = hashCode * 59 + AssetTypeGroupId.GetHashCode();
                    
                    hashCode = hashCode * 59 + Spend.GetHashCode();
                    
                    hashCode = hashCode * 59 + IsCarbReporting.GetHashCode();
                    
                    hashCode = hashCode * 59 + AssetValidationStatus.GetHashCode();
                    if (CustomAttributes != null)
                    hashCode = hashCode * 59 + CustomAttributes.GetHashCode();
                    
                    hashCode = hashCode * 59 + HasChilds.GetHashCode();
                    
                    hashCode = hashCode * 59 + Currency.GetHashCode();
                    if (ModifiedDateDto != null)
                    hashCode = hashCode * 59 + ModifiedDateDto.GetHashCode();
                    if (RetiredDate != null)
                    hashCode = hashCode * 59 + RetiredDate.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(SCServiceChannelServicesMessagingAssetsAssetResponse left, SCServiceChannelServicesMessagingAssetsAssetResponse right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(SCServiceChannelServicesMessagingAssetsAssetResponse left, SCServiceChannelServicesMessagingAssetsAssetResponse right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}
