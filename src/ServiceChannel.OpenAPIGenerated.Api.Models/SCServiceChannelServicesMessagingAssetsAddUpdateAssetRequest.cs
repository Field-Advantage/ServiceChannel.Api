/*
 * ServiceChannel API - v.3
 *
 * The ServiceChannel API is a RESTful and stateless API. It accepts standard HTTP verbs and supports OAuth 2.0 for authorizing requests.      Our API returns common HTTP status codes as well as JSON encapsulated data.      See [API Overview](https://developer.servicechannel.com/basics/introduction/overview/) for the intro to ServiceChannel API.<br>      <h3>Authentication and Authorization</h3>You should have a ServiceChannel account, register your application, and obtain `access_token` to integrate with our API.      See [Authentication and Authorization](https://developer.servicechannel.com/basics/general/authentication/) for more information.      To use this API playground, click **Authorize** and sign in to ServiceChannel.<br>      <h3>Environment</h3> All calls in this API Reference point to the **SB2 environment**.      See [Environments](https://developer.servicechannel.com/basics/general/environments/) for more information.<br>      <h3>API Version</h3>The current stable version of the ServiceChannel API is `v3`. In the request URL, `v3` is a version prefix that should be present.      When you omit the version prefix, calls point to the minimum supported version of the API.      We recommend you to always specify the API version to avoid possible errors.
 *
 * The version of the OpenAPI document: 3
 * 
 * Generated by: https://openapi-generator.tech
 */

using System;
using System.Linq;
using System.Text;
using System.Collections.Generic;
using System.ComponentModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using System.Text.Json;
using ServiceChannel.OpenAPIGenerated.Api.Converters;

namespace ServiceChannel.OpenAPIGenerated.Api.Models
{ 
    /// <summary>
    /// 
    /// </summary>
    [DataContract]
    public class SCServiceChannelServicesMessagingAssetsAddUpdateAssetRequest : IEquatable<SCServiceChannelServicesMessagingAssetsAddUpdateAssetRequest>
    {
        /// <summary>
        /// Tag Id of an existing asset. If is empty, it means a new Asset should be created
        /// </summary>
        /// <value>Tag Id of an existing asset. If is empty, it means a new Asset should be created</value>
        [DataMember(Name="OriginalTagId", EmitDefaultValue=false)]
        public string OriginalTagId { get; set; }

        /// <summary>
        /// In case of asset update it should be a new Tag Id value              In case of asset creation it should be Tag ID of created asset
        /// </summary>
        /// <value>In case of asset update it should be a new Tag Id value              In case of asset creation it should be Tag ID of created asset</value>
        [Required]
        [DataMember(Name="NewTagId", EmitDefaultValue=false)]
        public string NewTagId { get; set; }

        /// <summary>
        /// Gets or Sets LocationNoteHeaderName
        /// </summary>
        [DataMember(Name="LocationNoteHeaderName", EmitDefaultValue=false)]
        public string LocationNoteHeaderName { get; set; }

        /// <summary>
        /// Gets or Sets LocationNoteHeaderValue
        /// </summary>
        [Required]
        [DataMember(Name="LocationNoteHeaderValue", EmitDefaultValue=false)]
        public string LocationNoteHeaderValue { get; set; }

        /// <summary>
        /// Gets or Sets BrandId
        /// </summary>
        [Required]
        [DataMember(Name="BrandId", EmitDefaultValue=true)]
        public int BrandId { get; set; }

        /// <summary>
        /// Gets or Sets BrandName
        /// </summary>
        [Required]
        [DataMember(Name="BrandName", EmitDefaultValue=false)]
        public string BrandName { get; set; }

        /// <summary>
        /// Gets or Sets AssetTypeId
        /// </summary>
        [Required]
        [DataMember(Name="AssetTypeId", EmitDefaultValue=true)]
        public int AssetTypeId { get; set; }

        /// <summary>
        /// Gets or Sets ApplyEmptyFields
        /// </summary>
        [DataMember(Name="ApplyEmptyFields", EmitDefaultValue=true)]
        public bool ApplyEmptyFields { get; set; } = false;

        /// <summary>
        /// Gets or Sets Warranty
        /// </summary>
        [DataMember(Name="Warranty", EmitDefaultValue=false)]
        public SCServiceChannelServicesMessagingAssetsWarrantyInfo Warranty { get; set; }

        /// <summary>
        /// Gets or Sets CustomAttributes
        /// </summary>
        [DataMember(Name="CustomAttributes", EmitDefaultValue=false)]
        public List<SCServiceChannelServicesMessagingEquipmentsEquipmentAttributeDescription> CustomAttributes { get; set; }

        /// <summary>
        /// Gets or Sets ModelNo
        /// </summary>
        [DataMember(Name="ModelNo", EmitDefaultValue=false)]
        public string ModelNo { get; set; }

        /// <summary>
        /// Gets or Sets SerialNo
        /// </summary>
        [DataMember(Name="SerialNo", EmitDefaultValue=false)]
        public string SerialNo { get; set; }

        /// <summary>
        /// Gets or Sets Area
        /// </summary>
        [DataMember(Name="Area", EmitDefaultValue=false)]
        public string Area { get; set; }

        /// <summary>
        /// Gets or Sets WorkOrderArea
        /// </summary>
        [DataMember(Name="WorkOrderArea", EmitDefaultValue=false)]
        public string WorkOrderArea { get; set; }

        /// <summary>
        /// Gets or Sets InstallDateStr
        /// </summary>
        [DataMember(Name="InstallDateStr", EmitDefaultValue=false)]
        public string InstallDateStr { get; set; }

        /// <summary>
        /// Gets or Sets PurchaseDateStr
        /// </summary>
        [DataMember(Name="PurchaseDateStr", EmitDefaultValue=false)]
        public string PurchaseDateStr { get; set; }

        /// <summary>
        /// Gets or Sets ManufacturedDateStr
        /// </summary>
        [DataMember(Name="ManufacturedDateStr", EmitDefaultValue=false)]
        public string ManufacturedDateStr { get; set; }

        /// <summary>
        /// Gets or Sets EnergyEfficiency
        /// </summary>
        [DataMember(Name="EnergyEfficiency", EmitDefaultValue=false)]
        public string EnergyEfficiency { get; set; }

        /// <summary>
        /// Gets or Sets Capacity
        /// </summary>
        [DataMember(Name="Capacity", EmitDefaultValue=false)]
        public string Capacity { get; set; }

        /// <summary>
        /// Gets or Sets Description
        /// </summary>
        [DataMember(Name="Description", EmitDefaultValue=false)]
        public string Description { get; set; }

        /// <summary>
        /// Gets or Sets AssetTag
        /// </summary>
        [DataMember(Name="AssetTag", EmitDefaultValue=false)]
        public string AssetTag { get; set; }

        /// <summary>
        /// Gets or Sets UsesRefrigerant
        /// </summary>
        [DataMember(Name="UsesRefrigerant", EmitDefaultValue=true)]
        public int UsesRefrigerant { get; set; }

        /// <summary>
        /// Gets or Sets TradeId
        /// </summary>
        [DataMember(Name="TradeId", EmitDefaultValue=true)]
        public int TradeId { get; set; }

        /// <summary>
        /// Gets or Sets LifeExpectancy
        /// </summary>
        [DataMember(Name="LifeExpectancy", EmitDefaultValue=true)]
        public int LifeExpectancy { get; set; }

        /// <summary>
        /// Gets or Sets LeasePeriod
        /// </summary>
        [DataMember(Name="LeasePeriod", EmitDefaultValue=true)]
        public int LeasePeriod { get; set; }

        /// <summary>
        /// Gets or Sets Condition
        /// </summary>
        [DataMember(Name="Condition", EmitDefaultValue=true)]
        public int Condition { get; set; }

        /// <summary>
        /// Gets or Sets ParentId
        /// </summary>
        [DataMember(Name="ParentId", EmitDefaultValue=true)]
        public int ParentId { get; set; }

        /// <summary>
        /// Gets or Sets Currency
        /// </summary>
        [DataMember(Name="Currency", EmitDefaultValue=true)]
        public int Currency { get; set; }

        /// <summary>
        /// Gets or Sets OriginalValue
        /// </summary>
        [DataMember(Name="OriginalValue", EmitDefaultValue=true)]
        public double OriginalValue { get; set; }

        /// <summary>
        /// Gets or Sets ClearAssetTag
        /// </summary>
        [DataMember(Name="ClearAssetTag", EmitDefaultValue=true)]
        public bool ClearAssetTag { get; set; } = false;

        /// <summary>
        /// Gets or Sets IsInspection
        /// </summary>
        [DataMember(Name="IsInspection", EmitDefaultValue=true)]
        public bool IsInspection { get; set; } = false;

        /// <summary>
        /// Gets or Sets ApplyCustom
        /// </summary>
        [DataMember(Name="ApplyCustom", EmitDefaultValue=true)]
        public bool ApplyCustom { get; set; } = false;

        /// <summary>
        /// Gets or Sets HasLeakDetector
        /// </summary>
        [DataMember(Name="HasLeakDetector", EmitDefaultValue=true)]
        public bool HasLeakDetector { get; set; } = false;

        /// <summary>
        /// Gets or Sets Active
        /// </summary>
        [DataMember(Name="Active", EmitDefaultValue=true)]
        public bool Active { get; set; } = false;

        /// <summary>
        /// Gets or Sets IsLeased
        /// </summary>
        [DataMember(Name="IsLeased", EmitDefaultValue=true)]
        public bool IsLeased { get; set; } = false;

        /// <summary>
        /// Gets or Sets HasComponents
        /// </summary>
        [DataMember(Name="HasComponents", EmitDefaultValue=true)]
        public bool HasComponents { get; set; } = false;

        /// <summary>
        /// Gets or Sets HasCircuits
        /// </summary>
        [DataMember(Name="HasCircuits", EmitDefaultValue=true)]
        public bool HasCircuits { get; set; } = false;

        /// <summary>
        /// Gets or Sets IsCarbReporting
        /// </summary>
        [DataMember(Name="IsCarbReporting", EmitDefaultValue=true)]
        public bool IsCarbReporting { get; set; } = false;

        /// <summary>
        /// Gets or Sets AssetUpdatesStatus
        /// </summary>
        [RegularExpression("^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$")]
        [DataMember(Name="AssetUpdatesStatus", EmitDefaultValue=false)]
        public byte[] AssetUpdatesStatus { get; set; }

        /// <summary>
        /// Gets or Sets ProcessDuplicatedAssetTag
        /// </summary>
        [DataMember(Name="ProcessDuplicatedAssetTag", EmitDefaultValue=true)]
        public bool ProcessDuplicatedAssetTag { get; set; } = false;

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class SCServiceChannelServicesMessagingAssetsAddUpdateAssetRequest {\n");
            sb.Append("  OriginalTagId: ").Append(OriginalTagId).Append("\n");
            sb.Append("  NewTagId: ").Append(NewTagId).Append("\n");
            sb.Append("  LocationNoteHeaderName: ").Append(LocationNoteHeaderName).Append("\n");
            sb.Append("  LocationNoteHeaderValue: ").Append(LocationNoteHeaderValue).Append("\n");
            sb.Append("  BrandId: ").Append(BrandId).Append("\n");
            sb.Append("  BrandName: ").Append(BrandName).Append("\n");
            sb.Append("  AssetTypeId: ").Append(AssetTypeId).Append("\n");
            sb.Append("  ApplyEmptyFields: ").Append(ApplyEmptyFields).Append("\n");
            sb.Append("  Warranty: ").Append(Warranty).Append("\n");
            sb.Append("  CustomAttributes: ").Append(CustomAttributes).Append("\n");
            sb.Append("  ModelNo: ").Append(ModelNo).Append("\n");
            sb.Append("  SerialNo: ").Append(SerialNo).Append("\n");
            sb.Append("  Area: ").Append(Area).Append("\n");
            sb.Append("  WorkOrderArea: ").Append(WorkOrderArea).Append("\n");
            sb.Append("  InstallDateStr: ").Append(InstallDateStr).Append("\n");
            sb.Append("  PurchaseDateStr: ").Append(PurchaseDateStr).Append("\n");
            sb.Append("  ManufacturedDateStr: ").Append(ManufacturedDateStr).Append("\n");
            sb.Append("  EnergyEfficiency: ").Append(EnergyEfficiency).Append("\n");
            sb.Append("  Capacity: ").Append(Capacity).Append("\n");
            sb.Append("  Description: ").Append(Description).Append("\n");
            sb.Append("  AssetTag: ").Append(AssetTag).Append("\n");
            sb.Append("  UsesRefrigerant: ").Append(UsesRefrigerant).Append("\n");
            sb.Append("  TradeId: ").Append(TradeId).Append("\n");
            sb.Append("  LifeExpectancy: ").Append(LifeExpectancy).Append("\n");
            sb.Append("  LeasePeriod: ").Append(LeasePeriod).Append("\n");
            sb.Append("  Condition: ").Append(Condition).Append("\n");
            sb.Append("  ParentId: ").Append(ParentId).Append("\n");
            sb.Append("  Currency: ").Append(Currency).Append("\n");
            sb.Append("  OriginalValue: ").Append(OriginalValue).Append("\n");
            sb.Append("  ClearAssetTag: ").Append(ClearAssetTag).Append("\n");
            sb.Append("  IsInspection: ").Append(IsInspection).Append("\n");
            sb.Append("  ApplyCustom: ").Append(ApplyCustom).Append("\n");
            sb.Append("  HasLeakDetector: ").Append(HasLeakDetector).Append("\n");
            sb.Append("  Active: ").Append(Active).Append("\n");
            sb.Append("  IsLeased: ").Append(IsLeased).Append("\n");
            sb.Append("  HasComponents: ").Append(HasComponents).Append("\n");
            sb.Append("  HasCircuits: ").Append(HasCircuits).Append("\n");
            sb.Append("  IsCarbReporting: ").Append(IsCarbReporting).Append("\n");
            sb.Append("  AssetUpdatesStatus: ").Append(AssetUpdatesStatus).Append("\n");
            sb.Append("  ProcessDuplicatedAssetTag: ").Append(ProcessDuplicatedAssetTag).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            var options = new JsonSerializerOptions
            {
                WriteIndented = true
            };

            return JsonSerializer.Serialize(this, options);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (obj is null) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((SCServiceChannelServicesMessagingAssetsAddUpdateAssetRequest)obj);
        }

        /// <summary>
        /// Returns true if SCServiceChannelServicesMessagingAssetsAddUpdateAssetRequest instances are equal
        /// </summary>
        /// <param name="other">Instance of SCServiceChannelServicesMessagingAssetsAddUpdateAssetRequest to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(SCServiceChannelServicesMessagingAssetsAddUpdateAssetRequest other)
        {
            if (other is null) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    OriginalTagId == other.OriginalTagId ||
                    OriginalTagId != null &&
                    OriginalTagId.Equals(other.OriginalTagId)
                ) && 
                (
                    NewTagId == other.NewTagId ||
                    NewTagId != null &&
                    NewTagId.Equals(other.NewTagId)
                ) && 
                (
                    LocationNoteHeaderName == other.LocationNoteHeaderName ||
                    LocationNoteHeaderName != null &&
                    LocationNoteHeaderName.Equals(other.LocationNoteHeaderName)
                ) && 
                (
                    LocationNoteHeaderValue == other.LocationNoteHeaderValue ||
                    LocationNoteHeaderValue != null &&
                    LocationNoteHeaderValue.Equals(other.LocationNoteHeaderValue)
                ) && 
                (
                    BrandId == other.BrandId ||
                    
                    BrandId.Equals(other.BrandId)
                ) && 
                (
                    BrandName == other.BrandName ||
                    BrandName != null &&
                    BrandName.Equals(other.BrandName)
                ) && 
                (
                    AssetTypeId == other.AssetTypeId ||
                    
                    AssetTypeId.Equals(other.AssetTypeId)
                ) && 
                (
                    ApplyEmptyFields == other.ApplyEmptyFields ||
                    
                    ApplyEmptyFields.Equals(other.ApplyEmptyFields)
                ) && 
                (
                    Warranty == other.Warranty ||
                    Warranty != null &&
                    Warranty.Equals(other.Warranty)
                ) && 
                (
                    CustomAttributes == other.CustomAttributes ||
                    CustomAttributes != null &&
                    other.CustomAttributes != null &&
                    CustomAttributes.SequenceEqual(other.CustomAttributes)
                ) && 
                (
                    ModelNo == other.ModelNo ||
                    ModelNo != null &&
                    ModelNo.Equals(other.ModelNo)
                ) && 
                (
                    SerialNo == other.SerialNo ||
                    SerialNo != null &&
                    SerialNo.Equals(other.SerialNo)
                ) && 
                (
                    Area == other.Area ||
                    Area != null &&
                    Area.Equals(other.Area)
                ) && 
                (
                    WorkOrderArea == other.WorkOrderArea ||
                    WorkOrderArea != null &&
                    WorkOrderArea.Equals(other.WorkOrderArea)
                ) && 
                (
                    InstallDateStr == other.InstallDateStr ||
                    InstallDateStr != null &&
                    InstallDateStr.Equals(other.InstallDateStr)
                ) && 
                (
                    PurchaseDateStr == other.PurchaseDateStr ||
                    PurchaseDateStr != null &&
                    PurchaseDateStr.Equals(other.PurchaseDateStr)
                ) && 
                (
                    ManufacturedDateStr == other.ManufacturedDateStr ||
                    ManufacturedDateStr != null &&
                    ManufacturedDateStr.Equals(other.ManufacturedDateStr)
                ) && 
                (
                    EnergyEfficiency == other.EnergyEfficiency ||
                    EnergyEfficiency != null &&
                    EnergyEfficiency.Equals(other.EnergyEfficiency)
                ) && 
                (
                    Capacity == other.Capacity ||
                    Capacity != null &&
                    Capacity.Equals(other.Capacity)
                ) && 
                (
                    Description == other.Description ||
                    Description != null &&
                    Description.Equals(other.Description)
                ) && 
                (
                    AssetTag == other.AssetTag ||
                    AssetTag != null &&
                    AssetTag.Equals(other.AssetTag)
                ) && 
                (
                    UsesRefrigerant == other.UsesRefrigerant ||
                    
                    UsesRefrigerant.Equals(other.UsesRefrigerant)
                ) && 
                (
                    TradeId == other.TradeId ||
                    
                    TradeId.Equals(other.TradeId)
                ) && 
                (
                    LifeExpectancy == other.LifeExpectancy ||
                    
                    LifeExpectancy.Equals(other.LifeExpectancy)
                ) && 
                (
                    LeasePeriod == other.LeasePeriod ||
                    
                    LeasePeriod.Equals(other.LeasePeriod)
                ) && 
                (
                    Condition == other.Condition ||
                    
                    Condition.Equals(other.Condition)
                ) && 
                (
                    ParentId == other.ParentId ||
                    
                    ParentId.Equals(other.ParentId)
                ) && 
                (
                    Currency == other.Currency ||
                    
                    Currency.Equals(other.Currency)
                ) && 
                (
                    OriginalValue == other.OriginalValue ||
                    
                    OriginalValue.Equals(other.OriginalValue)
                ) && 
                (
                    ClearAssetTag == other.ClearAssetTag ||
                    
                    ClearAssetTag.Equals(other.ClearAssetTag)
                ) && 
                (
                    IsInspection == other.IsInspection ||
                    
                    IsInspection.Equals(other.IsInspection)
                ) && 
                (
                    ApplyCustom == other.ApplyCustom ||
                    
                    ApplyCustom.Equals(other.ApplyCustom)
                ) && 
                (
                    HasLeakDetector == other.HasLeakDetector ||
                    
                    HasLeakDetector.Equals(other.HasLeakDetector)
                ) && 
                (
                    Active == other.Active ||
                    
                    Active.Equals(other.Active)
                ) && 
                (
                    IsLeased == other.IsLeased ||
                    
                    IsLeased.Equals(other.IsLeased)
                ) && 
                (
                    HasComponents == other.HasComponents ||
                    
                    HasComponents.Equals(other.HasComponents)
                ) && 
                (
                    HasCircuits == other.HasCircuits ||
                    
                    HasCircuits.Equals(other.HasCircuits)
                ) && 
                (
                    IsCarbReporting == other.IsCarbReporting ||
                    
                    IsCarbReporting.Equals(other.IsCarbReporting)
                ) && 
                (
                    AssetUpdatesStatus == other.AssetUpdatesStatus ||
                    AssetUpdatesStatus != null &&
                    AssetUpdatesStatus.Equals(other.AssetUpdatesStatus)
                ) && 
                (
                    ProcessDuplicatedAssetTag == other.ProcessDuplicatedAssetTag ||
                    
                    ProcessDuplicatedAssetTag.Equals(other.ProcessDuplicatedAssetTag)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    if (OriginalTagId != null)
                    hashCode = hashCode * 59 + OriginalTagId.GetHashCode();
                    if (NewTagId != null)
                    hashCode = hashCode * 59 + NewTagId.GetHashCode();
                    if (LocationNoteHeaderName != null)
                    hashCode = hashCode * 59 + LocationNoteHeaderName.GetHashCode();
                    if (LocationNoteHeaderValue != null)
                    hashCode = hashCode * 59 + LocationNoteHeaderValue.GetHashCode();
                    
                    hashCode = hashCode * 59 + BrandId.GetHashCode();
                    if (BrandName != null)
                    hashCode = hashCode * 59 + BrandName.GetHashCode();
                    
                    hashCode = hashCode * 59 + AssetTypeId.GetHashCode();
                    
                    hashCode = hashCode * 59 + ApplyEmptyFields.GetHashCode();
                    if (Warranty != null)
                    hashCode = hashCode * 59 + Warranty.GetHashCode();
                    if (CustomAttributes != null)
                    hashCode = hashCode * 59 + CustomAttributes.GetHashCode();
                    if (ModelNo != null)
                    hashCode = hashCode * 59 + ModelNo.GetHashCode();
                    if (SerialNo != null)
                    hashCode = hashCode * 59 + SerialNo.GetHashCode();
                    if (Area != null)
                    hashCode = hashCode * 59 + Area.GetHashCode();
                    if (WorkOrderArea != null)
                    hashCode = hashCode * 59 + WorkOrderArea.GetHashCode();
                    if (InstallDateStr != null)
                    hashCode = hashCode * 59 + InstallDateStr.GetHashCode();
                    if (PurchaseDateStr != null)
                    hashCode = hashCode * 59 + PurchaseDateStr.GetHashCode();
                    if (ManufacturedDateStr != null)
                    hashCode = hashCode * 59 + ManufacturedDateStr.GetHashCode();
                    if (EnergyEfficiency != null)
                    hashCode = hashCode * 59 + EnergyEfficiency.GetHashCode();
                    if (Capacity != null)
                    hashCode = hashCode * 59 + Capacity.GetHashCode();
                    if (Description != null)
                    hashCode = hashCode * 59 + Description.GetHashCode();
                    if (AssetTag != null)
                    hashCode = hashCode * 59 + AssetTag.GetHashCode();
                    
                    hashCode = hashCode * 59 + UsesRefrigerant.GetHashCode();
                    
                    hashCode = hashCode * 59 + TradeId.GetHashCode();
                    
                    hashCode = hashCode * 59 + LifeExpectancy.GetHashCode();
                    
                    hashCode = hashCode * 59 + LeasePeriod.GetHashCode();
                    
                    hashCode = hashCode * 59 + Condition.GetHashCode();
                    
                    hashCode = hashCode * 59 + ParentId.GetHashCode();
                    
                    hashCode = hashCode * 59 + Currency.GetHashCode();
                    
                    hashCode = hashCode * 59 + OriginalValue.GetHashCode();
                    
                    hashCode = hashCode * 59 + ClearAssetTag.GetHashCode();
                    
                    hashCode = hashCode * 59 + IsInspection.GetHashCode();
                    
                    hashCode = hashCode * 59 + ApplyCustom.GetHashCode();
                    
                    hashCode = hashCode * 59 + HasLeakDetector.GetHashCode();
                    
                    hashCode = hashCode * 59 + Active.GetHashCode();
                    
                    hashCode = hashCode * 59 + IsLeased.GetHashCode();
                    
                    hashCode = hashCode * 59 + HasComponents.GetHashCode();
                    
                    hashCode = hashCode * 59 + HasCircuits.GetHashCode();
                    
                    hashCode = hashCode * 59 + IsCarbReporting.GetHashCode();
                    if (AssetUpdatesStatus != null)
                    hashCode = hashCode * 59 + AssetUpdatesStatus.GetHashCode();
                    
                    hashCode = hashCode * 59 + ProcessDuplicatedAssetTag.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(SCServiceChannelServicesMessagingAssetsAddUpdateAssetRequest left, SCServiceChannelServicesMessagingAssetsAddUpdateAssetRequest right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(SCServiceChannelServicesMessagingAssetsAddUpdateAssetRequest left, SCServiceChannelServicesMessagingAssetsAddUpdateAssetRequest right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}
