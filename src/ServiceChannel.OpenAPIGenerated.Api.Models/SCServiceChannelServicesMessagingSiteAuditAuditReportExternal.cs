/*
 * ServiceChannel API - v.3
 *
 * The ServiceChannel API is a RESTful and stateless API. It accepts standard HTTP verbs and supports OAuth 2.0 for authorizing requests.      Our API returns common HTTP status codes as well as JSON encapsulated data.      See [API Overview](https://developer.servicechannel.com/basics/introduction/overview/) for the intro to ServiceChannel API.<br>      <h3>Authentication and Authorization</h3>You should have a ServiceChannel account, register your application, and obtain `access_token` to integrate with our API.      See [Authentication and Authorization](https://developer.servicechannel.com/basics/general/authentication/) for more information.      To use this API playground, click **Authorize** and sign in to ServiceChannel.<br>      <h3>Environment</h3> All calls in this API Reference point to the **SB2 environment**.      See [Environments](https://developer.servicechannel.com/basics/general/environments/) for more information.<br>      <h3>API Version</h3>The current stable version of the ServiceChannel API is `v3`. In the request URL, `v3` is a version prefix that should be present.      When you omit the version prefix, calls point to the minimum supported version of the API.      We recommend you to always specify the API version to avoid possible errors.
 *
 * The version of the OpenAPI document: 3
 * 
 * Generated by: https://openapi-generator.tech
 */

using System;
using System.Linq;
using System.Text;
using System.Collections.Generic;
using System.ComponentModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using System.Text.Json;
using ServiceChannel.OpenAPIGenerated.Api.Converters;

namespace ServiceChannel.OpenAPIGenerated.Api.Models
{ 
    /// <summary>
    /// The site audit report object. Depending on the features enabled for your company, the object structure may differ from the example below.
    /// </summary>
    [DataContract]
    public class SCServiceChannelServicesMessagingSiteAuditAuditReportExternal : IEquatable<SCServiceChannelServicesMessagingSiteAuditAuditReportExternal>
    {
        /// <summary>
        /// The site audit type.
        /// </summary>
        /// <value>The site audit type.</value>
        [DataMember(Name="TemplateTypeName", EmitDefaultValue=false)]
        public string TemplateTypeName { get; set; }

        /// <summary>
        /// The numeric identifier of the site audit report.
        /// </summary>
        /// <value>The numeric identifier of the site audit report.</value>
        [DataMember(Name="AuditId", EmitDefaultValue=true)]
        public int AuditId { get; set; }

        /// <summary>
        /// The internal identifier of the subscriber’s property.
        /// </summary>
        /// <value>The internal identifier of the subscriber’s property.</value>
        [DataMember(Name="StoreId", EmitDefaultValue=false)]
        public string StoreId { get; set; }

        /// <summary>
        /// The name of the subscriber’s property.
        /// </summary>
        /// <value>The name of the subscriber’s property.</value>
        [DataMember(Name="LocationName", EmitDefaultValue=false)]
        public string LocationName { get; set; }

        /// <summary>
        /// The region where the property is located.
        /// </summary>
        /// <value>The region where the property is located.</value>
        [DataMember(Name="Region", EmitDefaultValue=false)]
        public string Region { get; set; }

        /// <summary>
        /// The district where the property is located.
        /// </summary>
        /// <value>The district where the property is located.</value>
        [DataMember(Name="District", EmitDefaultValue=false)]
        public string District { get; set; }

        /// <summary>
        /// The name of the audited area within the location.
        /// </summary>
        /// <value>The name of the audited area within the location.</value>
        [DataMember(Name="AreaName", EmitDefaultValue=false)]
        public string AreaName { get; set; }

        /// <summary>
        /// The name of the checklist.
        /// </summary>
        /// <value>The name of the checklist.</value>
        [DataMember(Name="CheckListName", EmitDefaultValue=false)]
        public string CheckListName { get; set; }

        /// <summary>
        /// The name of the checklist item inspected by the auditor.
        /// </summary>
        /// <value>The name of the checklist item inspected by the auditor.</value>
        [DataMember(Name="CheckListItemName", EmitDefaultValue=false)]
        public string CheckListItemName { get; set; }

        /// <summary>
        /// Detailed instructions for the auditor on how to check or rate the checklist item.
        /// </summary>
        /// <value>Detailed instructions for the auditor on how to check or rate the checklist item.</value>
        [DataMember(Name="CheckListItemDescription", EmitDefaultValue=false)]
        public string CheckListItemDescription { get; set; }

        /// <summary>
        /// This field is obsolete. Use field \&quot;Score\&quot; with \&quot;PassThreshold\&quot; and \&quot;RatingSystem\&quot; fields  please.
        /// </summary>
        /// <value>This field is obsolete. Use field \&quot;Score\&quot; with \&quot;PassThreshold\&quot; and \&quot;RatingSystem\&quot; fields  please.</value>
        [DataMember(Name="Status", EmitDefaultValue=false)]
        public string Status { get; set; }

        /// <summary>
        /// The score that the auditor gave on the checklist item
        /// </summary>
        /// <value>The score that the auditor gave on the checklist item</value>
        [DataMember(Name="Score", EmitDefaultValue=true)]
        public int Score { get; set; }

        /// <summary>
        /// Pass threshold
        /// </summary>
        /// <value>Pass threshold</value>
        [DataMember(Name="PassThreshold", EmitDefaultValue=true)]
        public int PassThreshold { get; set; }

        /// <summary>
        /// Rating system
        /// </summary>
        /// <value>Rating system</value>
        [DataMember(Name="RatingSystem", EmitDefaultValue=false)]
        public string RatingSystem { get; set; }

        /// <summary>
        /// The quantity of the checklist item or its cost in dollars depending on the &#x60;Unit&#x60;.
        /// </summary>
        /// <value>The quantity of the checklist item or its cost in dollars depending on the &#x60;Unit&#x60;.</value>
        [DataMember(Name="CheckListItemQuantity", EmitDefaultValue=false)]
        public string CheckListItemQuantity { get; set; }

        /// <summary>
        /// The unit of measure of the checklist item: &#x60;Quantity&#x60; or &#x60;Dollars&#x60;.
        /// </summary>
        /// <value>The unit of measure of the checklist item: &#x60;Quantity&#x60; or &#x60;Dollars&#x60;.</value>
        [DataMember(Name="Unit", EmitDefaultValue=false)]
        public string Unit { get; set; }

        /// <summary>
        /// The date and time when the auditor completed the audit of the checklist item.
        /// </summary>
        /// <value>The date and time when the auditor completed the audit of the checklist item.</value>
        [DataMember(Name="CheckListDate", EmitDefaultValue=false)]
        public DateTime CheckListDate { get; set; }

        /// <summary>
        /// The UTC offset, or the difference in hours from the UTC time.
        /// </summary>
        /// <value>The UTC offset, or the difference in hours from the UTC time.</value>
        [DataMember(Name="TimeOffset", EmitDefaultValue=true)]
        public int TimeOffset { get; set; }

        /// <summary>
        /// The username of the auditor who uploaded the completed audit.
        /// </summary>
        /// <value>The username of the auditor who uploaded the completed audit.</value>
        [DataMember(Name="UserName", EmitDefaultValue=false)]
        public string UserName { get; set; }

        /// <summary>
        /// The numeric identifier of the checklist item.
        /// </summary>
        /// <value>The numeric identifier of the checklist item.</value>
        [DataMember(Name="CheckListItemId", EmitDefaultValue=true)]
        public int CheckListItemId { get; set; }

        /// <summary>
        /// The date and time when the auditor started the site audit.
        /// </summary>
        /// <value>The date and time when the auditor started the site audit.</value>
        [DataMember(Name="AuditStartDate", EmitDefaultValue=false)]
        public DateTime AuditStartDate { get; set; }

        /// <summary>
        /// The date and time when the auditor completed the site audit.
        /// </summary>
        /// <value>The date and time when the auditor completed the site audit.</value>
        [DataMember(Name="AuditFinishDate", EmitDefaultValue=false)]
        public DateTime AuditFinishDate { get; set; }

        /// <summary>
        /// Gets or Sets AuditIssues
        /// </summary>
        [DataMember(Name="AuditIssues", EmitDefaultValue=false)]
        public List<SCServiceChannelServicesMessagingSiteAuditAuditReportIssueExternal> AuditIssues { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class SCServiceChannelServicesMessagingSiteAuditAuditReportExternal {\n");
            sb.Append("  TemplateTypeName: ").Append(TemplateTypeName).Append("\n");
            sb.Append("  AuditId: ").Append(AuditId).Append("\n");
            sb.Append("  StoreId: ").Append(StoreId).Append("\n");
            sb.Append("  LocationName: ").Append(LocationName).Append("\n");
            sb.Append("  Region: ").Append(Region).Append("\n");
            sb.Append("  District: ").Append(District).Append("\n");
            sb.Append("  AreaName: ").Append(AreaName).Append("\n");
            sb.Append("  CheckListName: ").Append(CheckListName).Append("\n");
            sb.Append("  CheckListItemName: ").Append(CheckListItemName).Append("\n");
            sb.Append("  CheckListItemDescription: ").Append(CheckListItemDescription).Append("\n");
            sb.Append("  Status: ").Append(Status).Append("\n");
            sb.Append("  Score: ").Append(Score).Append("\n");
            sb.Append("  PassThreshold: ").Append(PassThreshold).Append("\n");
            sb.Append("  RatingSystem: ").Append(RatingSystem).Append("\n");
            sb.Append("  CheckListItemQuantity: ").Append(CheckListItemQuantity).Append("\n");
            sb.Append("  Unit: ").Append(Unit).Append("\n");
            sb.Append("  CheckListDate: ").Append(CheckListDate).Append("\n");
            sb.Append("  TimeOffset: ").Append(TimeOffset).Append("\n");
            sb.Append("  UserName: ").Append(UserName).Append("\n");
            sb.Append("  CheckListItemId: ").Append(CheckListItemId).Append("\n");
            sb.Append("  AuditStartDate: ").Append(AuditStartDate).Append("\n");
            sb.Append("  AuditFinishDate: ").Append(AuditFinishDate).Append("\n");
            sb.Append("  AuditIssues: ").Append(AuditIssues).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            var options = new JsonSerializerOptions
            {
                WriteIndented = true
            };

            return JsonSerializer.Serialize(this, options);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (obj is null) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((SCServiceChannelServicesMessagingSiteAuditAuditReportExternal)obj);
        }

        /// <summary>
        /// Returns true if SCServiceChannelServicesMessagingSiteAuditAuditReportExternal instances are equal
        /// </summary>
        /// <param name="other">Instance of SCServiceChannelServicesMessagingSiteAuditAuditReportExternal to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(SCServiceChannelServicesMessagingSiteAuditAuditReportExternal other)
        {
            if (other is null) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    TemplateTypeName == other.TemplateTypeName ||
                    TemplateTypeName != null &&
                    TemplateTypeName.Equals(other.TemplateTypeName)
                ) && 
                (
                    AuditId == other.AuditId ||
                    
                    AuditId.Equals(other.AuditId)
                ) && 
                (
                    StoreId == other.StoreId ||
                    StoreId != null &&
                    StoreId.Equals(other.StoreId)
                ) && 
                (
                    LocationName == other.LocationName ||
                    LocationName != null &&
                    LocationName.Equals(other.LocationName)
                ) && 
                (
                    Region == other.Region ||
                    Region != null &&
                    Region.Equals(other.Region)
                ) && 
                (
                    District == other.District ||
                    District != null &&
                    District.Equals(other.District)
                ) && 
                (
                    AreaName == other.AreaName ||
                    AreaName != null &&
                    AreaName.Equals(other.AreaName)
                ) && 
                (
                    CheckListName == other.CheckListName ||
                    CheckListName != null &&
                    CheckListName.Equals(other.CheckListName)
                ) && 
                (
                    CheckListItemName == other.CheckListItemName ||
                    CheckListItemName != null &&
                    CheckListItemName.Equals(other.CheckListItemName)
                ) && 
                (
                    CheckListItemDescription == other.CheckListItemDescription ||
                    CheckListItemDescription != null &&
                    CheckListItemDescription.Equals(other.CheckListItemDescription)
                ) && 
                (
                    Status == other.Status ||
                    Status != null &&
                    Status.Equals(other.Status)
                ) && 
                (
                    Score == other.Score ||
                    
                    Score.Equals(other.Score)
                ) && 
                (
                    PassThreshold == other.PassThreshold ||
                    
                    PassThreshold.Equals(other.PassThreshold)
                ) && 
                (
                    RatingSystem == other.RatingSystem ||
                    RatingSystem != null &&
                    RatingSystem.Equals(other.RatingSystem)
                ) && 
                (
                    CheckListItemQuantity == other.CheckListItemQuantity ||
                    CheckListItemQuantity != null &&
                    CheckListItemQuantity.Equals(other.CheckListItemQuantity)
                ) && 
                (
                    Unit == other.Unit ||
                    Unit != null &&
                    Unit.Equals(other.Unit)
                ) && 
                (
                    CheckListDate == other.CheckListDate ||
                    CheckListDate != null &&
                    CheckListDate.Equals(other.CheckListDate)
                ) && 
                (
                    TimeOffset == other.TimeOffset ||
                    
                    TimeOffset.Equals(other.TimeOffset)
                ) && 
                (
                    UserName == other.UserName ||
                    UserName != null &&
                    UserName.Equals(other.UserName)
                ) && 
                (
                    CheckListItemId == other.CheckListItemId ||
                    
                    CheckListItemId.Equals(other.CheckListItemId)
                ) && 
                (
                    AuditStartDate == other.AuditStartDate ||
                    AuditStartDate != null &&
                    AuditStartDate.Equals(other.AuditStartDate)
                ) && 
                (
                    AuditFinishDate == other.AuditFinishDate ||
                    AuditFinishDate != null &&
                    AuditFinishDate.Equals(other.AuditFinishDate)
                ) && 
                (
                    AuditIssues == other.AuditIssues ||
                    AuditIssues != null &&
                    other.AuditIssues != null &&
                    AuditIssues.SequenceEqual(other.AuditIssues)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    if (TemplateTypeName != null)
                    hashCode = hashCode * 59 + TemplateTypeName.GetHashCode();
                    
                    hashCode = hashCode * 59 + AuditId.GetHashCode();
                    if (StoreId != null)
                    hashCode = hashCode * 59 + StoreId.GetHashCode();
                    if (LocationName != null)
                    hashCode = hashCode * 59 + LocationName.GetHashCode();
                    if (Region != null)
                    hashCode = hashCode * 59 + Region.GetHashCode();
                    if (District != null)
                    hashCode = hashCode * 59 + District.GetHashCode();
                    if (AreaName != null)
                    hashCode = hashCode * 59 + AreaName.GetHashCode();
                    if (CheckListName != null)
                    hashCode = hashCode * 59 + CheckListName.GetHashCode();
                    if (CheckListItemName != null)
                    hashCode = hashCode * 59 + CheckListItemName.GetHashCode();
                    if (CheckListItemDescription != null)
                    hashCode = hashCode * 59 + CheckListItemDescription.GetHashCode();
                    if (Status != null)
                    hashCode = hashCode * 59 + Status.GetHashCode();
                    
                    hashCode = hashCode * 59 + Score.GetHashCode();
                    
                    hashCode = hashCode * 59 + PassThreshold.GetHashCode();
                    if (RatingSystem != null)
                    hashCode = hashCode * 59 + RatingSystem.GetHashCode();
                    if (CheckListItemQuantity != null)
                    hashCode = hashCode * 59 + CheckListItemQuantity.GetHashCode();
                    if (Unit != null)
                    hashCode = hashCode * 59 + Unit.GetHashCode();
                    if (CheckListDate != null)
                    hashCode = hashCode * 59 + CheckListDate.GetHashCode();
                    
                    hashCode = hashCode * 59 + TimeOffset.GetHashCode();
                    if (UserName != null)
                    hashCode = hashCode * 59 + UserName.GetHashCode();
                    
                    hashCode = hashCode * 59 + CheckListItemId.GetHashCode();
                    if (AuditStartDate != null)
                    hashCode = hashCode * 59 + AuditStartDate.GetHashCode();
                    if (AuditFinishDate != null)
                    hashCode = hashCode * 59 + AuditFinishDate.GetHashCode();
                    if (AuditIssues != null)
                    hashCode = hashCode * 59 + AuditIssues.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(SCServiceChannelServicesMessagingSiteAuditAuditReportExternal left, SCServiceChannelServicesMessagingSiteAuditAuditReportExternal right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(SCServiceChannelServicesMessagingSiteAuditAuditReportExternal left, SCServiceChannelServicesMessagingSiteAuditAuditReportExternal right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}
