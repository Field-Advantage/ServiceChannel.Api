/*
 * ServiceChannel API - v.3
 *
 * The ServiceChannel API is a RESTful and stateless API. It accepts standard HTTP verbs and supports OAuth 2.0 for authorizing requests.      Our API returns common HTTP status codes as well as JSON encapsulated data.      See [API Overview](https://developer.servicechannel.com/basics/introduction/overview/) for the intro to ServiceChannel API.<br>      <h3>Authentication and Authorization</h3>You should have a ServiceChannel account, register your application, and obtain `access_token` to integrate with our API.      See [Authentication and Authorization](https://developer.servicechannel.com/basics/general/authentication/) for more information.      To use this API playground, click **Authorize** and sign in to ServiceChannel.<br>      <h3>Environment</h3> All calls in this API Reference point to the **SB2 environment**.      See [Environments](https://developer.servicechannel.com/basics/general/environments/) for more information.<br>      <h3>API Version</h3>The current stable version of the ServiceChannel API is `v3`. In the request URL, `v3` is a version prefix that should be present.      When you omit the version prefix, calls point to the minimum supported version of the API.      We recommend you to always specify the API version to avoid possible errors.
 *
 * The version of the OpenAPI document: 3
 * 
 * Generated by: https://openapi-generator.tech
 */

using System;
using System.Linq;
using System.Text;
using System.Collections.Generic;
using System.ComponentModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using System.Text.Json;
using ServiceChannel.OpenAPIGenerated.Api.Converters;

namespace ServiceChannel.OpenAPIGenerated.Api.Models
{ 
    /// <summary>
    /// The details of issues created by the auditor for the inspected checklist item. Issues are also known as action items.
    /// </summary>
    [DataContract]
    public class SCServiceChannelServicesMessagingSiteAuditAuditReportIssueExternal : IEquatable<SCServiceChannelServicesMessagingSiteAuditAuditReportIssueExternal>
    {
        /// <summary>
        /// The type of the action item, either &#x60;WO&#x60; or &#x60;Comment&#x60;.
        /// </summary>
        /// <value>The type of the action item, either &#x60;WO&#x60; or &#x60;Comment&#x60;.</value>
        [DataMember(Name="IssueType", EmitDefaultValue=false)]
        public string IssueType { get; set; }

        /// <summary>
        /// &#x60;Comment type&#x60;: auditor&#39;s comment added to the action item or its attachment. &#x60;WO type&#x60;: work order description that includes the area, problem type, asset, problem, and auditor’s description of the problem.
        /// </summary>
        /// <value>&#x60;Comment type&#x60;: auditor&#39;s comment added to the action item or its attachment. &#x60;WO type&#x60;: work order description that includes the area, problem type, asset, problem, and auditor’s description of the problem.</value>
        [DataMember(Name="IssueDescription", EmitDefaultValue=false)]
        public string IssueDescription { get; set; }

        /// <summary>
        /// The paths to the attachments added to the checklist item.
        /// </summary>
        /// <value>The paths to the attachments added to the checklist item.</value>
        [DataMember(Name="AttachmentPaths", EmitDefaultValue=false)]
        public List<string> AttachmentPaths { get; set; }

        /// <summary>
        /// &#x60;Comment type&#x60;: numeric identifier of the action item. &#x60;WO type&#x60;: numeric identifier of the work order, also known as WO tracking number.
        /// </summary>
        /// <value>&#x60;Comment type&#x60;: numeric identifier of the action item. &#x60;WO type&#x60;: numeric identifier of the work order, also known as WO tracking number.</value>
        [DataMember(Name="IssueId", EmitDefaultValue=true)]
        public int IssueId { get; set; }

        /// <summary>
        /// The name of the work order priority if the action item belongs to the WO type.
        /// </summary>
        /// <value>The name of the work order priority if the action item belongs to the WO type.</value>
        [DataMember(Name="WorkOrderPriority", EmitDefaultValue=false)]
        public string WorkOrderPriority { get; set; }

        /// <summary>
        /// The date and time when the auditor created the action item.
        /// </summary>
        /// <value>The date and time when the auditor created the action item.</value>
        [DataMember(Name="Date", EmitDefaultValue=false)]
        public DateTime Date { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class SCServiceChannelServicesMessagingSiteAuditAuditReportIssueExternal {\n");
            sb.Append("  IssueType: ").Append(IssueType).Append("\n");
            sb.Append("  IssueDescription: ").Append(IssueDescription).Append("\n");
            sb.Append("  AttachmentPaths: ").Append(AttachmentPaths).Append("\n");
            sb.Append("  IssueId: ").Append(IssueId).Append("\n");
            sb.Append("  WorkOrderPriority: ").Append(WorkOrderPriority).Append("\n");
            sb.Append("  Date: ").Append(Date).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            var options = new JsonSerializerOptions
            {
                WriteIndented = true
            };

            return JsonSerializer.Serialize(this, options);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (obj is null) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((SCServiceChannelServicesMessagingSiteAuditAuditReportIssueExternal)obj);
        }

        /// <summary>
        /// Returns true if SCServiceChannelServicesMessagingSiteAuditAuditReportIssueExternal instances are equal
        /// </summary>
        /// <param name="other">Instance of SCServiceChannelServicesMessagingSiteAuditAuditReportIssueExternal to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(SCServiceChannelServicesMessagingSiteAuditAuditReportIssueExternal other)
        {
            if (other is null) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    IssueType == other.IssueType ||
                    IssueType != null &&
                    IssueType.Equals(other.IssueType)
                ) && 
                (
                    IssueDescription == other.IssueDescription ||
                    IssueDescription != null &&
                    IssueDescription.Equals(other.IssueDescription)
                ) && 
                (
                    AttachmentPaths == other.AttachmentPaths ||
                    AttachmentPaths != null &&
                    other.AttachmentPaths != null &&
                    AttachmentPaths.SequenceEqual(other.AttachmentPaths)
                ) && 
                (
                    IssueId == other.IssueId ||
                    
                    IssueId.Equals(other.IssueId)
                ) && 
                (
                    WorkOrderPriority == other.WorkOrderPriority ||
                    WorkOrderPriority != null &&
                    WorkOrderPriority.Equals(other.WorkOrderPriority)
                ) && 
                (
                    Date == other.Date ||
                    Date != null &&
                    Date.Equals(other.Date)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    if (IssueType != null)
                    hashCode = hashCode * 59 + IssueType.GetHashCode();
                    if (IssueDescription != null)
                    hashCode = hashCode * 59 + IssueDescription.GetHashCode();
                    if (AttachmentPaths != null)
                    hashCode = hashCode * 59 + AttachmentPaths.GetHashCode();
                    
                    hashCode = hashCode * 59 + IssueId.GetHashCode();
                    if (WorkOrderPriority != null)
                    hashCode = hashCode * 59 + WorkOrderPriority.GetHashCode();
                    if (Date != null)
                    hashCode = hashCode * 59 + Date.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(SCServiceChannelServicesMessagingSiteAuditAuditReportIssueExternal left, SCServiceChannelServicesMessagingSiteAuditAuditReportIssueExternal right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(SCServiceChannelServicesMessagingSiteAuditAuditReportIssueExternal left, SCServiceChannelServicesMessagingSiteAuditAuditReportIssueExternal right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}
