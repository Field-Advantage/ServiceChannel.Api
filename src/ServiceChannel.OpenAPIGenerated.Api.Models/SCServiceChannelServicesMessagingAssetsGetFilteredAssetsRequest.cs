/*
 * ServiceChannel API - v.3
 *
 * The ServiceChannel API is a RESTful and stateless API. It accepts standard HTTP verbs and supports OAuth 2.0 for authorizing requests.      Our API returns common HTTP status codes as well as JSON encapsulated data.      See [API Overview](https://developer.servicechannel.com/basics/introduction/overview/) for the intro to ServiceChannel API.<br>      <h3>Authentication and Authorization</h3>You should have a ServiceChannel account, register your application, and obtain `access_token` to integrate with our API.      See [Authentication and Authorization](https://developer.servicechannel.com/basics/general/authentication/) for more information.      To use this API playground, click **Authorize** and sign in to ServiceChannel.<br>      <h3>Environment</h3> All calls in this API Reference point to the **SB2 environment**.      See [Environments](https://developer.servicechannel.com/basics/general/environments/) for more information.<br>      <h3>API Version</h3>The current stable version of the ServiceChannel API is `v3`. In the request URL, `v3` is a version prefix that should be present.      When you omit the version prefix, calls point to the minimum supported version of the API.      We recommend you to always specify the API version to avoid possible errors.
 *
 * The version of the OpenAPI document: 3
 * 
 * Generated by: https://openapi-generator.tech
 */

using System;
using System.Linq;
using System.Text;
using System.Collections.Generic;
using System.ComponentModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using System.Text.Json;
using ServiceChannel.OpenAPIGenerated.Api.Converters;

namespace ServiceChannel.OpenAPIGenerated.Api.Models
{ 
    /// <summary>
    /// 
    /// </summary>
    [DataContract]
    public class SCServiceChannelServicesMessagingAssetsGetFilteredAssetsRequest : IEquatable<SCServiceChannelServicesMessagingAssetsGetFilteredAssetsRequest>
    {
        /// <summary>
        /// Gets or Sets AssetIds
        /// </summary>
        [DataMember(Name="AssetIds", EmitDefaultValue=false)]
        public List<int> AssetIds { get; set; }

        /// <summary>
        /// Gets or Sets AssetStatuses
        /// </summary>
        [DataMember(Name="AssetStatuses", EmitDefaultValue=false)]
        public List<int> AssetStatuses { get; set; }

        /// <summary>
        /// Gets or Sets ParentIds
        /// </summary>
        [DataMember(Name="ParentIds", EmitDefaultValue=false)]
        public List<int> ParentIds { get; set; }

        /// <summary>
        /// Gets or Sets LocationIds
        /// </summary>
        [DataMember(Name="LocationIds", EmitDefaultValue=false)]
        public List<int> LocationIds { get; set; }

        /// <summary>
        /// Gets or Sets StoreIds
        /// </summary>
        [DataMember(Name="StoreIds", EmitDefaultValue=false)]
        public List<string> StoreIds { get; set; }

        /// <summary>
        /// Gets or Sets AssetTypes
        /// </summary>
        [DataMember(Name="AssetTypes", EmitDefaultValue=false)]
        public List<int> AssetTypes { get; set; }

        /// <summary>
        /// Gets or Sets AssetTypeNames
        /// </summary>
        [DataMember(Name="AssetTypeNames", EmitDefaultValue=false)]
        public List<string> AssetTypeNames { get; set; }

        /// <summary>
        /// Gets or Sets TradeIds
        /// </summary>
        [DataMember(Name="TradeIds", EmitDefaultValue=false)]
        public List<int> TradeIds { get; set; }

        /// <summary>
        /// Gets or Sets ProviderTrades
        /// </summary>
        [DataMember(Name="ProviderTrades", EmitDefaultValue=false)]
        public List<string> ProviderTrades { get; set; }

        /// <summary>
        /// Gets or Sets Brands
        /// </summary>
        [DataMember(Name="Brands", EmitDefaultValue=false)]
        public List<int> Brands { get; set; }

        /// <summary>
        /// Gets or Sets TagIds
        /// </summary>
        [DataMember(Name="TagIds", EmitDefaultValue=false)]
        public List<string> TagIds { get; set; }

        /// <summary>
        /// Gets or Sets ModelNumbers
        /// </summary>
        [DataMember(Name="ModelNumbers", EmitDefaultValue=false)]
        public List<string> ModelNumbers { get; set; }

        /// <summary>
        /// Gets or Sets SerialNumbers
        /// </summary>
        [DataMember(Name="SerialNumbers", EmitDefaultValue=false)]
        public List<string> SerialNumbers { get; set; }

        /// <summary>
        /// Gets or Sets LeakDetectorIds
        /// </summary>
        [DataMember(Name="LeakDetectorIds", EmitDefaultValue=false)]
        public List<int> LeakDetectorIds { get; set; }

        /// <summary>
        /// Gets or Sets WarantyExpirationDateFrom
        /// </summary>
        [DataMember(Name="WarantyExpirationDateFrom", EmitDefaultValue=false)]
        public DateTime WarantyExpirationDateFrom { get; set; }

        /// <summary>
        /// Gets or Sets WarrantyExpirationDateTo
        /// </summary>
        [DataMember(Name="WarrantyExpirationDateTo", EmitDefaultValue=false)]
        public DateTime WarrantyExpirationDateTo { get; set; }

        /// <summary>
        /// Gets or Sets InstallDeactivatedDateFrom
        /// </summary>
        [DataMember(Name="InstallDeactivatedDateFrom", EmitDefaultValue=false)]
        public DateTime InstallDeactivatedDateFrom { get; set; }

        /// <summary>
        /// Gets or Sets InstallDeactivatedDateTo
        /// </summary>
        [DataMember(Name="InstallDeactivatedDateTo", EmitDefaultValue=false)]
        public DateTime InstallDeactivatedDateTo { get; set; }

        /// <summary>
        /// Gets or Sets DeactivatedDateFrom
        /// </summary>
        [DataMember(Name="DeactivatedDateFrom", EmitDefaultValue=false)]
        public DateTime DeactivatedDateFrom { get; set; }

        /// <summary>
        /// Gets or Sets DeactivatedDateTo
        /// </summary>
        [DataMember(Name="DeactivatedDateTo", EmitDefaultValue=false)]
        public DateTime DeactivatedDateTo { get; set; }

        /// <summary>
        /// Gets or Sets InstallDateFrom
        /// </summary>
        [DataMember(Name="InstallDateFrom", EmitDefaultValue=false)]
        public DateTime InstallDateFrom { get; set; }

        /// <summary>
        /// Gets or Sets InstallDateTo
        /// </summary>
        [DataMember(Name="InstallDateTo", EmitDefaultValue=false)]
        public DateTime InstallDateTo { get; set; }

        /// <summary>
        /// Gets or Sets PurchaseDateFrom
        /// </summary>
        [DataMember(Name="PurchaseDateFrom", EmitDefaultValue=false)]
        public DateTime PurchaseDateFrom { get; set; }

        /// <summary>
        /// Gets or Sets PurchaseDateTo
        /// </summary>
        [DataMember(Name="PurchaseDateTo", EmitDefaultValue=false)]
        public DateTime PurchaseDateTo { get; set; }

        /// <summary>
        /// Gets or Sets LeaseDateFrom
        /// </summary>
        [DataMember(Name="LeaseDateFrom", EmitDefaultValue=false)]
        public DateTime LeaseDateFrom { get; set; }

        /// <summary>
        /// Gets or Sets LeaseDateTo
        /// </summary>
        [DataMember(Name="LeaseDateTo", EmitDefaultValue=false)]
        public DateTime LeaseDateTo { get; set; }

        /// <summary>
        /// Gets or Sets CreatedDateFrom
        /// </summary>
        [DataMember(Name="CreatedDateFrom", EmitDefaultValue=false)]
        public DateTime CreatedDateFrom { get; set; }

        /// <summary>
        /// Gets or Sets CreatedDateTo
        /// </summary>
        [DataMember(Name="CreatedDateTo", EmitDefaultValue=false)]
        public DateTime CreatedDateTo { get; set; }

        /// <summary>
        /// Gets or Sets ModifiedDateFrom
        /// </summary>
        [DataMember(Name="ModifiedDateFrom", EmitDefaultValue=false)]
        public DateTime ModifiedDateFrom { get; set; }

        /// <summary>
        /// Gets or Sets ModifiedDateTo
        /// </summary>
        [DataMember(Name="ModifiedDateTo", EmitDefaultValue=false)]
        public DateTime ModifiedDateTo { get; set; }


        /// <summary>
        /// Gets or Sets SortField
        /// </summary>
        
        public enum SortFieldEnum
        {
            
            /// <summary>
            /// Enum NoneEnum for None
            /// </summary>
            [EnumMember(Value = "None")]
            NoneEnum = 1,
            
            /// <summary>
            /// Enum AssetTypeEnum for AssetType
            /// </summary>
            [EnumMember(Value = "AssetType")]
            AssetTypeEnum = 2,
            
            /// <summary>
            /// Enum TradeEnum for Trade
            /// </summary>
            [EnumMember(Value = "Trade")]
            TradeEnum = 3,
            
            /// <summary>
            /// Enum BrandEnum for Brand
            /// </summary>
            [EnumMember(Value = "Brand")]
            BrandEnum = 4,
            
            /// <summary>
            /// Enum LastUpdatedDateEnum for LastUpdatedDate
            /// </summary>
            [EnumMember(Value = "LastUpdatedDate")]
            LastUpdatedDateEnum = 5,
            
            /// <summary>
            /// Enum AssetTagEnum for AssetTag
            /// </summary>
            [EnumMember(Value = "AssetTag")]
            AssetTagEnum = 6,
            
            /// <summary>
            /// Enum ModelNoEnum for ModelNo
            /// </summary>
            [EnumMember(Value = "ModelNo")]
            ModelNoEnum = 7,
            
            /// <summary>
            /// Enum SerialNoEnum for SerialNo
            /// </summary>
            [EnumMember(Value = "SerialNo")]
            SerialNoEnum = 8,
            
            /// <summary>
            /// Enum LocationEnum for Location
            /// </summary>
            [EnumMember(Value = "Location")]
            LocationEnum = 9
        }

        /// <summary>
        /// Gets or Sets SortField
        /// </summary>
        [DataMember(Name="SortField", EmitDefaultValue=true)]
        public SortFieldEnum SortField { get; set; }

        /// <summary>
        /// Gets or Sets SortDirection
        /// </summary>
        [DataMember(Name="SortDirection", EmitDefaultValue=false)]
        public string SortDirection { get; set; }

        /// <summary>
        /// Gets or Sets IsWoDateNecessary
        /// </summary>
        [DataMember(Name="IsWoDateNecessary", EmitDefaultValue=true)]
        public bool IsWoDateNecessary { get; set; } = false;

        /// <summary>
        /// Gets or Sets RefrigerantOnly
        /// </summary>
        [DataMember(Name="RefrigerantOnly", EmitDefaultValue=true)]
        public bool RefrigerantOnly { get; set; } = false;

        /// <summary>
        /// Gets or Sets IncludeDeactivated
        /// </summary>
        [DataMember(Name="IncludeDeactivated", EmitDefaultValue=true)]
        public bool IncludeDeactivated { get; set; } = false;

        /// <summary>
        /// Gets or Sets DeactivatedOnly
        /// </summary>
        [DataMember(Name="DeactivatedOnly", EmitDefaultValue=true)]
        public bool DeactivatedOnly { get; set; } = false;

        /// <summary>
        /// Gets or Sets HasCircuits
        /// </summary>
        [DataMember(Name="HasCircuits", EmitDefaultValue=true)]
        public bool HasCircuits { get; set; } = false;

        /// <summary>
        /// Gets or Sets IsCircuit
        /// </summary>
        [DataMember(Name="IsCircuit", EmitDefaultValue=true)]
        public bool IsCircuit { get; set; } = false;

        /// <summary>
        /// Gets or Sets HasComponents
        /// </summary>
        [DataMember(Name="HasComponents", EmitDefaultValue=true)]
        public bool HasComponents { get; set; } = false;

        /// <summary>
        /// Gets or Sets IsComponent
        /// </summary>
        [DataMember(Name="IsComponent", EmitDefaultValue=true)]
        public bool IsComponent { get; set; } = false;

        /// <summary>
        /// Gets or Sets HasAssetTag
        /// </summary>
        [DataMember(Name="HasAssetTag", EmitDefaultValue=true)]
        public bool HasAssetTag { get; set; } = false;

        /// <summary>
        /// Gets or Sets ChronicLeakRate
        /// </summary>
        [DataMember(Name="ChronicLeakRate", EmitDefaultValue=true)]
        public bool ChronicLeakRate { get; set; } = false;

        /// <summary>
        /// Gets or Sets StartIndex
        /// </summary>
        [DataMember(Name="StartIndex", EmitDefaultValue=true)]
        public int StartIndex { get; set; }

        /// <summary>
        /// Gets or Sets PageSize
        /// </summary>
        [DataMember(Name="PageSize", EmitDefaultValue=true)]
        public int PageSize { get; set; }

        /// <summary>
        /// Gets or Sets Conditions
        /// </summary>
        [DataMember(Name="Conditions", EmitDefaultValue=false)]
        public List<int> Conditions { get; set; }

        /// <summary>
        /// Gets or Sets AssetUpdatesStatuses
        /// </summary>
        [DataMember(Name="AssetUpdatesStatuses", EmitDefaultValue=false)]
        public List<int> AssetUpdatesStatuses { get; set; }

        /// <summary>
        /// Gets or Sets SearchAdditionalTrades
        /// </summary>
        [DataMember(Name="SearchAdditionalTrades", EmitDefaultValue=true)]
        public bool SearchAdditionalTrades { get; set; } = false;

        /// <summary>
        /// Gets or Sets IsLeakDetector
        /// </summary>
        [DataMember(Name="IsLeakDetector", EmitDefaultValue=true)]
        public bool IsLeakDetector { get; set; } = false;

        /// <summary>
        /// Gets or Sets IncludeRetiredContracts
        /// </summary>
        [DataMember(Name="IncludeRetiredContracts", EmitDefaultValue=true)]
        public bool IncludeRetiredContracts { get; set; } = false;

        /// <summary>
        /// Gets or Sets SearchByText
        /// </summary>
        [DataMember(Name="SearchByText", EmitDefaultValue=false)]
        public string SearchByText { get; set; }

        /// <summary>
        /// Gets or Sets SubscriberId
        /// </summary>
        [DataMember(Name="SubscriberId", EmitDefaultValue=true)]
        public int SubscriberId { get; set; }

        /// <summary>
        /// Gets or Sets AssetTypeGroupIds
        /// </summary>
        [DataMember(Name="AssetTypeGroupIds", EmitDefaultValue=false)]
        public List<int> AssetTypeGroupIds { get; set; }

        /// <summary>
        /// Gets or Sets AssetTags
        /// </summary>
        [DataMember(Name="AssetTags", EmitDefaultValue=false)]
        public List<string> AssetTags { get; set; }

        /// <summary>
        /// Gets or Sets Districts
        /// </summary>
        [DataMember(Name="Districts", EmitDefaultValue=false)]
        public List<string> Districts { get; set; }

        /// <summary>
        /// Gets or Sets Regions
        /// </summary>
        [DataMember(Name="Regions", EmitDefaultValue=false)]
        public List<string> Regions { get; set; }

        /// <summary>
        /// Gets or Sets Countries
        /// </summary>
        [DataMember(Name="Countries", EmitDefaultValue=false)]
        public List<int> Countries { get; set; }

        /// <summary>
        /// Gets or Sets States
        /// </summary>
        [DataMember(Name="States", EmitDefaultValue=false)]
        public List<int> States { get; set; }

        /// <summary>
        /// Gets or Sets LocationNames
        /// </summary>
        [DataMember(Name="LocationNames", EmitDefaultValue=false)]
        public List<string> LocationNames { get; set; }

        /// <summary>
        /// Gets or Sets Cities
        /// </summary>
        [DataMember(Name="Cities", EmitDefaultValue=false)]
        public List<string> Cities { get; set; }

        /// <summary>
        /// Gets or Sets AssetStatus
        /// </summary>
        [RegularExpression("^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$")]
        [DataMember(Name="AssetStatus", EmitDefaultValue=false)]
        public byte[] AssetStatus { get; set; }

        /// <summary>
        /// Gets or Sets AssetUpdatesStatus
        /// </summary>
        [RegularExpression("^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$")]
        [DataMember(Name="AssetUpdatesStatus", EmitDefaultValue=false)]
        public byte[] AssetUpdatesStatus { get; set; }

        /// <summary>
        /// Gets or Sets RecIds
        /// </summary>
        [DataMember(Name="RecIds", EmitDefaultValue=false)]
        public List<int> RecIds { get; set; }

        /// <summary>
        /// Gets or Sets UncategorizedOnly
        /// </summary>
        [DataMember(Name="UncategorizedOnly", EmitDefaultValue=true)]
        public bool UncategorizedOnly { get; set; } = false;

        /// <summary>
        /// Gets or Sets WarrantyStatuses
        /// </summary>
        [DataMember(Name="WarrantyStatuses", EmitDefaultValue=false)]
        public List<int> WarrantyStatuses { get; set; }

        /// <summary>
        /// Gets or Sets ExternalSubscriberIds
        /// </summary>
        [DataMember(Name="ExternalSubscriberIds", EmitDefaultValue=false)]
        public List<int> ExternalSubscriberIds { get; set; }

        /// <summary>
        /// Gets or Sets IncludeTotalCostOfOwnership
        /// </summary>
        [DataMember(Name="IncludeTotalCostOfOwnership", EmitDefaultValue=true)]
        public bool IncludeTotalCostOfOwnership { get; set; } = false;

        /// <summary>
        /// Gets or Sets AssetValidationStatuses
        /// </summary>
        [DataMember(Name="AssetValidationStatuses", EmitDefaultValue=false)]
        public List<int> AssetValidationStatuses { get; set; }

        /// <summary>
        /// Gets or Sets IncludeCustomAttributes
        /// </summary>
        [DataMember(Name="IncludeCustomAttributes", EmitDefaultValue=true)]
        public bool IncludeCustomAttributes { get; set; } = false;

        /// <summary>
        /// Gets or Sets WithoutCircuitsOnly
        /// </summary>
        [DataMember(Name="WithoutCircuitsOnly", EmitDefaultValue=true)]
        public bool WithoutCircuitsOnly { get; set; } = false;

        /// <summary>
        /// Gets or Sets LocationNotes
        /// </summary>
        [DataMember(Name="LocationNotes", EmitDefaultValue=false)]
        public List<SCServiceChannelServicesMessagingAssetsAssetLocationNote> LocationNotes { get; set; }

        /// <summary>
        /// Gets or Sets WithoutAssetTags
        /// </summary>
        [DataMember(Name="WithoutAssetTags", EmitDefaultValue=true)]
        public bool WithoutAssetTags { get; set; } = false;

        /// <summary>
        /// Gets or Sets SubscriberIds
        /// </summary>
        [DataMember(Name="SubscriberIds", EmitDefaultValue=false)]
        public List<int> SubscriberIds { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class SCServiceChannelServicesMessagingAssetsGetFilteredAssetsRequest {\n");
            sb.Append("  AssetIds: ").Append(AssetIds).Append("\n");
            sb.Append("  AssetStatuses: ").Append(AssetStatuses).Append("\n");
            sb.Append("  ParentIds: ").Append(ParentIds).Append("\n");
            sb.Append("  LocationIds: ").Append(LocationIds).Append("\n");
            sb.Append("  StoreIds: ").Append(StoreIds).Append("\n");
            sb.Append("  AssetTypes: ").Append(AssetTypes).Append("\n");
            sb.Append("  AssetTypeNames: ").Append(AssetTypeNames).Append("\n");
            sb.Append("  TradeIds: ").Append(TradeIds).Append("\n");
            sb.Append("  ProviderTrades: ").Append(ProviderTrades).Append("\n");
            sb.Append("  Brands: ").Append(Brands).Append("\n");
            sb.Append("  TagIds: ").Append(TagIds).Append("\n");
            sb.Append("  ModelNumbers: ").Append(ModelNumbers).Append("\n");
            sb.Append("  SerialNumbers: ").Append(SerialNumbers).Append("\n");
            sb.Append("  LeakDetectorIds: ").Append(LeakDetectorIds).Append("\n");
            sb.Append("  WarantyExpirationDateFrom: ").Append(WarantyExpirationDateFrom).Append("\n");
            sb.Append("  WarrantyExpirationDateTo: ").Append(WarrantyExpirationDateTo).Append("\n");
            sb.Append("  InstallDeactivatedDateFrom: ").Append(InstallDeactivatedDateFrom).Append("\n");
            sb.Append("  InstallDeactivatedDateTo: ").Append(InstallDeactivatedDateTo).Append("\n");
            sb.Append("  DeactivatedDateFrom: ").Append(DeactivatedDateFrom).Append("\n");
            sb.Append("  DeactivatedDateTo: ").Append(DeactivatedDateTo).Append("\n");
            sb.Append("  InstallDateFrom: ").Append(InstallDateFrom).Append("\n");
            sb.Append("  InstallDateTo: ").Append(InstallDateTo).Append("\n");
            sb.Append("  PurchaseDateFrom: ").Append(PurchaseDateFrom).Append("\n");
            sb.Append("  PurchaseDateTo: ").Append(PurchaseDateTo).Append("\n");
            sb.Append("  LeaseDateFrom: ").Append(LeaseDateFrom).Append("\n");
            sb.Append("  LeaseDateTo: ").Append(LeaseDateTo).Append("\n");
            sb.Append("  CreatedDateFrom: ").Append(CreatedDateFrom).Append("\n");
            sb.Append("  CreatedDateTo: ").Append(CreatedDateTo).Append("\n");
            sb.Append("  ModifiedDateFrom: ").Append(ModifiedDateFrom).Append("\n");
            sb.Append("  ModifiedDateTo: ").Append(ModifiedDateTo).Append("\n");
            sb.Append("  SortField: ").Append(SortField).Append("\n");
            sb.Append("  SortDirection: ").Append(SortDirection).Append("\n");
            sb.Append("  IsWoDateNecessary: ").Append(IsWoDateNecessary).Append("\n");
            sb.Append("  RefrigerantOnly: ").Append(RefrigerantOnly).Append("\n");
            sb.Append("  IncludeDeactivated: ").Append(IncludeDeactivated).Append("\n");
            sb.Append("  DeactivatedOnly: ").Append(DeactivatedOnly).Append("\n");
            sb.Append("  HasCircuits: ").Append(HasCircuits).Append("\n");
            sb.Append("  IsCircuit: ").Append(IsCircuit).Append("\n");
            sb.Append("  HasComponents: ").Append(HasComponents).Append("\n");
            sb.Append("  IsComponent: ").Append(IsComponent).Append("\n");
            sb.Append("  HasAssetTag: ").Append(HasAssetTag).Append("\n");
            sb.Append("  ChronicLeakRate: ").Append(ChronicLeakRate).Append("\n");
            sb.Append("  StartIndex: ").Append(StartIndex).Append("\n");
            sb.Append("  PageSize: ").Append(PageSize).Append("\n");
            sb.Append("  Conditions: ").Append(Conditions).Append("\n");
            sb.Append("  AssetUpdatesStatuses: ").Append(AssetUpdatesStatuses).Append("\n");
            sb.Append("  SearchAdditionalTrades: ").Append(SearchAdditionalTrades).Append("\n");
            sb.Append("  IsLeakDetector: ").Append(IsLeakDetector).Append("\n");
            sb.Append("  IncludeRetiredContracts: ").Append(IncludeRetiredContracts).Append("\n");
            sb.Append("  SearchByText: ").Append(SearchByText).Append("\n");
            sb.Append("  SubscriberId: ").Append(SubscriberId).Append("\n");
            sb.Append("  AssetTypeGroupIds: ").Append(AssetTypeGroupIds).Append("\n");
            sb.Append("  AssetTags: ").Append(AssetTags).Append("\n");
            sb.Append("  Districts: ").Append(Districts).Append("\n");
            sb.Append("  Regions: ").Append(Regions).Append("\n");
            sb.Append("  Countries: ").Append(Countries).Append("\n");
            sb.Append("  States: ").Append(States).Append("\n");
            sb.Append("  LocationNames: ").Append(LocationNames).Append("\n");
            sb.Append("  Cities: ").Append(Cities).Append("\n");
            sb.Append("  AssetStatus: ").Append(AssetStatus).Append("\n");
            sb.Append("  AssetUpdatesStatus: ").Append(AssetUpdatesStatus).Append("\n");
            sb.Append("  RecIds: ").Append(RecIds).Append("\n");
            sb.Append("  UncategorizedOnly: ").Append(UncategorizedOnly).Append("\n");
            sb.Append("  WarrantyStatuses: ").Append(WarrantyStatuses).Append("\n");
            sb.Append("  ExternalSubscriberIds: ").Append(ExternalSubscriberIds).Append("\n");
            sb.Append("  IncludeTotalCostOfOwnership: ").Append(IncludeTotalCostOfOwnership).Append("\n");
            sb.Append("  AssetValidationStatuses: ").Append(AssetValidationStatuses).Append("\n");
            sb.Append("  IncludeCustomAttributes: ").Append(IncludeCustomAttributes).Append("\n");
            sb.Append("  WithoutCircuitsOnly: ").Append(WithoutCircuitsOnly).Append("\n");
            sb.Append("  LocationNotes: ").Append(LocationNotes).Append("\n");
            sb.Append("  WithoutAssetTags: ").Append(WithoutAssetTags).Append("\n");
            sb.Append("  SubscriberIds: ").Append(SubscriberIds).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            var options = new JsonSerializerOptions
            {
                WriteIndented = true
            };

            return JsonSerializer.Serialize(this, options);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (obj is null) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((SCServiceChannelServicesMessagingAssetsGetFilteredAssetsRequest)obj);
        }

        /// <summary>
        /// Returns true if SCServiceChannelServicesMessagingAssetsGetFilteredAssetsRequest instances are equal
        /// </summary>
        /// <param name="other">Instance of SCServiceChannelServicesMessagingAssetsGetFilteredAssetsRequest to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(SCServiceChannelServicesMessagingAssetsGetFilteredAssetsRequest other)
        {
            if (other is null) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    AssetIds == other.AssetIds ||
                    AssetIds != null &&
                    other.AssetIds != null &&
                    AssetIds.SequenceEqual(other.AssetIds)
                ) && 
                (
                    AssetStatuses == other.AssetStatuses ||
                    AssetStatuses != null &&
                    other.AssetStatuses != null &&
                    AssetStatuses.SequenceEqual(other.AssetStatuses)
                ) && 
                (
                    ParentIds == other.ParentIds ||
                    ParentIds != null &&
                    other.ParentIds != null &&
                    ParentIds.SequenceEqual(other.ParentIds)
                ) && 
                (
                    LocationIds == other.LocationIds ||
                    LocationIds != null &&
                    other.LocationIds != null &&
                    LocationIds.SequenceEqual(other.LocationIds)
                ) && 
                (
                    StoreIds == other.StoreIds ||
                    StoreIds != null &&
                    other.StoreIds != null &&
                    StoreIds.SequenceEqual(other.StoreIds)
                ) && 
                (
                    AssetTypes == other.AssetTypes ||
                    AssetTypes != null &&
                    other.AssetTypes != null &&
                    AssetTypes.SequenceEqual(other.AssetTypes)
                ) && 
                (
                    AssetTypeNames == other.AssetTypeNames ||
                    AssetTypeNames != null &&
                    other.AssetTypeNames != null &&
                    AssetTypeNames.SequenceEqual(other.AssetTypeNames)
                ) && 
                (
                    TradeIds == other.TradeIds ||
                    TradeIds != null &&
                    other.TradeIds != null &&
                    TradeIds.SequenceEqual(other.TradeIds)
                ) && 
                (
                    ProviderTrades == other.ProviderTrades ||
                    ProviderTrades != null &&
                    other.ProviderTrades != null &&
                    ProviderTrades.SequenceEqual(other.ProviderTrades)
                ) && 
                (
                    Brands == other.Brands ||
                    Brands != null &&
                    other.Brands != null &&
                    Brands.SequenceEqual(other.Brands)
                ) && 
                (
                    TagIds == other.TagIds ||
                    TagIds != null &&
                    other.TagIds != null &&
                    TagIds.SequenceEqual(other.TagIds)
                ) && 
                (
                    ModelNumbers == other.ModelNumbers ||
                    ModelNumbers != null &&
                    other.ModelNumbers != null &&
                    ModelNumbers.SequenceEqual(other.ModelNumbers)
                ) && 
                (
                    SerialNumbers == other.SerialNumbers ||
                    SerialNumbers != null &&
                    other.SerialNumbers != null &&
                    SerialNumbers.SequenceEqual(other.SerialNumbers)
                ) && 
                (
                    LeakDetectorIds == other.LeakDetectorIds ||
                    LeakDetectorIds != null &&
                    other.LeakDetectorIds != null &&
                    LeakDetectorIds.SequenceEqual(other.LeakDetectorIds)
                ) && 
                (
                    WarantyExpirationDateFrom == other.WarantyExpirationDateFrom ||
                    WarantyExpirationDateFrom != null &&
                    WarantyExpirationDateFrom.Equals(other.WarantyExpirationDateFrom)
                ) && 
                (
                    WarrantyExpirationDateTo == other.WarrantyExpirationDateTo ||
                    WarrantyExpirationDateTo != null &&
                    WarrantyExpirationDateTo.Equals(other.WarrantyExpirationDateTo)
                ) && 
                (
                    InstallDeactivatedDateFrom == other.InstallDeactivatedDateFrom ||
                    InstallDeactivatedDateFrom != null &&
                    InstallDeactivatedDateFrom.Equals(other.InstallDeactivatedDateFrom)
                ) && 
                (
                    InstallDeactivatedDateTo == other.InstallDeactivatedDateTo ||
                    InstallDeactivatedDateTo != null &&
                    InstallDeactivatedDateTo.Equals(other.InstallDeactivatedDateTo)
                ) && 
                (
                    DeactivatedDateFrom == other.DeactivatedDateFrom ||
                    DeactivatedDateFrom != null &&
                    DeactivatedDateFrom.Equals(other.DeactivatedDateFrom)
                ) && 
                (
                    DeactivatedDateTo == other.DeactivatedDateTo ||
                    DeactivatedDateTo != null &&
                    DeactivatedDateTo.Equals(other.DeactivatedDateTo)
                ) && 
                (
                    InstallDateFrom == other.InstallDateFrom ||
                    InstallDateFrom != null &&
                    InstallDateFrom.Equals(other.InstallDateFrom)
                ) && 
                (
                    InstallDateTo == other.InstallDateTo ||
                    InstallDateTo != null &&
                    InstallDateTo.Equals(other.InstallDateTo)
                ) && 
                (
                    PurchaseDateFrom == other.PurchaseDateFrom ||
                    PurchaseDateFrom != null &&
                    PurchaseDateFrom.Equals(other.PurchaseDateFrom)
                ) && 
                (
                    PurchaseDateTo == other.PurchaseDateTo ||
                    PurchaseDateTo != null &&
                    PurchaseDateTo.Equals(other.PurchaseDateTo)
                ) && 
                (
                    LeaseDateFrom == other.LeaseDateFrom ||
                    LeaseDateFrom != null &&
                    LeaseDateFrom.Equals(other.LeaseDateFrom)
                ) && 
                (
                    LeaseDateTo == other.LeaseDateTo ||
                    LeaseDateTo != null &&
                    LeaseDateTo.Equals(other.LeaseDateTo)
                ) && 
                (
                    CreatedDateFrom == other.CreatedDateFrom ||
                    CreatedDateFrom != null &&
                    CreatedDateFrom.Equals(other.CreatedDateFrom)
                ) && 
                (
                    CreatedDateTo == other.CreatedDateTo ||
                    CreatedDateTo != null &&
                    CreatedDateTo.Equals(other.CreatedDateTo)
                ) && 
                (
                    ModifiedDateFrom == other.ModifiedDateFrom ||
                    ModifiedDateFrom != null &&
                    ModifiedDateFrom.Equals(other.ModifiedDateFrom)
                ) && 
                (
                    ModifiedDateTo == other.ModifiedDateTo ||
                    ModifiedDateTo != null &&
                    ModifiedDateTo.Equals(other.ModifiedDateTo)
                ) && 
                (
                    SortField == other.SortField ||
                    
                    SortField.Equals(other.SortField)
                ) && 
                (
                    SortDirection == other.SortDirection ||
                    SortDirection != null &&
                    SortDirection.Equals(other.SortDirection)
                ) && 
                (
                    IsWoDateNecessary == other.IsWoDateNecessary ||
                    
                    IsWoDateNecessary.Equals(other.IsWoDateNecessary)
                ) && 
                (
                    RefrigerantOnly == other.RefrigerantOnly ||
                    
                    RefrigerantOnly.Equals(other.RefrigerantOnly)
                ) && 
                (
                    IncludeDeactivated == other.IncludeDeactivated ||
                    
                    IncludeDeactivated.Equals(other.IncludeDeactivated)
                ) && 
                (
                    DeactivatedOnly == other.DeactivatedOnly ||
                    
                    DeactivatedOnly.Equals(other.DeactivatedOnly)
                ) && 
                (
                    HasCircuits == other.HasCircuits ||
                    
                    HasCircuits.Equals(other.HasCircuits)
                ) && 
                (
                    IsCircuit == other.IsCircuit ||
                    
                    IsCircuit.Equals(other.IsCircuit)
                ) && 
                (
                    HasComponents == other.HasComponents ||
                    
                    HasComponents.Equals(other.HasComponents)
                ) && 
                (
                    IsComponent == other.IsComponent ||
                    
                    IsComponent.Equals(other.IsComponent)
                ) && 
                (
                    HasAssetTag == other.HasAssetTag ||
                    
                    HasAssetTag.Equals(other.HasAssetTag)
                ) && 
                (
                    ChronicLeakRate == other.ChronicLeakRate ||
                    
                    ChronicLeakRate.Equals(other.ChronicLeakRate)
                ) && 
                (
                    StartIndex == other.StartIndex ||
                    
                    StartIndex.Equals(other.StartIndex)
                ) && 
                (
                    PageSize == other.PageSize ||
                    
                    PageSize.Equals(other.PageSize)
                ) && 
                (
                    Conditions == other.Conditions ||
                    Conditions != null &&
                    other.Conditions != null &&
                    Conditions.SequenceEqual(other.Conditions)
                ) && 
                (
                    AssetUpdatesStatuses == other.AssetUpdatesStatuses ||
                    AssetUpdatesStatuses != null &&
                    other.AssetUpdatesStatuses != null &&
                    AssetUpdatesStatuses.SequenceEqual(other.AssetUpdatesStatuses)
                ) && 
                (
                    SearchAdditionalTrades == other.SearchAdditionalTrades ||
                    
                    SearchAdditionalTrades.Equals(other.SearchAdditionalTrades)
                ) && 
                (
                    IsLeakDetector == other.IsLeakDetector ||
                    
                    IsLeakDetector.Equals(other.IsLeakDetector)
                ) && 
                (
                    IncludeRetiredContracts == other.IncludeRetiredContracts ||
                    
                    IncludeRetiredContracts.Equals(other.IncludeRetiredContracts)
                ) && 
                (
                    SearchByText == other.SearchByText ||
                    SearchByText != null &&
                    SearchByText.Equals(other.SearchByText)
                ) && 
                (
                    SubscriberId == other.SubscriberId ||
                    
                    SubscriberId.Equals(other.SubscriberId)
                ) && 
                (
                    AssetTypeGroupIds == other.AssetTypeGroupIds ||
                    AssetTypeGroupIds != null &&
                    other.AssetTypeGroupIds != null &&
                    AssetTypeGroupIds.SequenceEqual(other.AssetTypeGroupIds)
                ) && 
                (
                    AssetTags == other.AssetTags ||
                    AssetTags != null &&
                    other.AssetTags != null &&
                    AssetTags.SequenceEqual(other.AssetTags)
                ) && 
                (
                    Districts == other.Districts ||
                    Districts != null &&
                    other.Districts != null &&
                    Districts.SequenceEqual(other.Districts)
                ) && 
                (
                    Regions == other.Regions ||
                    Regions != null &&
                    other.Regions != null &&
                    Regions.SequenceEqual(other.Regions)
                ) && 
                (
                    Countries == other.Countries ||
                    Countries != null &&
                    other.Countries != null &&
                    Countries.SequenceEqual(other.Countries)
                ) && 
                (
                    States == other.States ||
                    States != null &&
                    other.States != null &&
                    States.SequenceEqual(other.States)
                ) && 
                (
                    LocationNames == other.LocationNames ||
                    LocationNames != null &&
                    other.LocationNames != null &&
                    LocationNames.SequenceEqual(other.LocationNames)
                ) && 
                (
                    Cities == other.Cities ||
                    Cities != null &&
                    other.Cities != null &&
                    Cities.SequenceEqual(other.Cities)
                ) && 
                (
                    AssetStatus == other.AssetStatus ||
                    AssetStatus != null &&
                    AssetStatus.Equals(other.AssetStatus)
                ) && 
                (
                    AssetUpdatesStatus == other.AssetUpdatesStatus ||
                    AssetUpdatesStatus != null &&
                    AssetUpdatesStatus.Equals(other.AssetUpdatesStatus)
                ) && 
                (
                    RecIds == other.RecIds ||
                    RecIds != null &&
                    other.RecIds != null &&
                    RecIds.SequenceEqual(other.RecIds)
                ) && 
                (
                    UncategorizedOnly == other.UncategorizedOnly ||
                    
                    UncategorizedOnly.Equals(other.UncategorizedOnly)
                ) && 
                (
                    WarrantyStatuses == other.WarrantyStatuses ||
                    WarrantyStatuses != null &&
                    other.WarrantyStatuses != null &&
                    WarrantyStatuses.SequenceEqual(other.WarrantyStatuses)
                ) && 
                (
                    ExternalSubscriberIds == other.ExternalSubscriberIds ||
                    ExternalSubscriberIds != null &&
                    other.ExternalSubscriberIds != null &&
                    ExternalSubscriberIds.SequenceEqual(other.ExternalSubscriberIds)
                ) && 
                (
                    IncludeTotalCostOfOwnership == other.IncludeTotalCostOfOwnership ||
                    
                    IncludeTotalCostOfOwnership.Equals(other.IncludeTotalCostOfOwnership)
                ) && 
                (
                    AssetValidationStatuses == other.AssetValidationStatuses ||
                    AssetValidationStatuses != null &&
                    other.AssetValidationStatuses != null &&
                    AssetValidationStatuses.SequenceEqual(other.AssetValidationStatuses)
                ) && 
                (
                    IncludeCustomAttributes == other.IncludeCustomAttributes ||
                    
                    IncludeCustomAttributes.Equals(other.IncludeCustomAttributes)
                ) && 
                (
                    WithoutCircuitsOnly == other.WithoutCircuitsOnly ||
                    
                    WithoutCircuitsOnly.Equals(other.WithoutCircuitsOnly)
                ) && 
                (
                    LocationNotes == other.LocationNotes ||
                    LocationNotes != null &&
                    other.LocationNotes != null &&
                    LocationNotes.SequenceEqual(other.LocationNotes)
                ) && 
                (
                    WithoutAssetTags == other.WithoutAssetTags ||
                    
                    WithoutAssetTags.Equals(other.WithoutAssetTags)
                ) && 
                (
                    SubscriberIds == other.SubscriberIds ||
                    SubscriberIds != null &&
                    other.SubscriberIds != null &&
                    SubscriberIds.SequenceEqual(other.SubscriberIds)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    if (AssetIds != null)
                    hashCode = hashCode * 59 + AssetIds.GetHashCode();
                    if (AssetStatuses != null)
                    hashCode = hashCode * 59 + AssetStatuses.GetHashCode();
                    if (ParentIds != null)
                    hashCode = hashCode * 59 + ParentIds.GetHashCode();
                    if (LocationIds != null)
                    hashCode = hashCode * 59 + LocationIds.GetHashCode();
                    if (StoreIds != null)
                    hashCode = hashCode * 59 + StoreIds.GetHashCode();
                    if (AssetTypes != null)
                    hashCode = hashCode * 59 + AssetTypes.GetHashCode();
                    if (AssetTypeNames != null)
                    hashCode = hashCode * 59 + AssetTypeNames.GetHashCode();
                    if (TradeIds != null)
                    hashCode = hashCode * 59 + TradeIds.GetHashCode();
                    if (ProviderTrades != null)
                    hashCode = hashCode * 59 + ProviderTrades.GetHashCode();
                    if (Brands != null)
                    hashCode = hashCode * 59 + Brands.GetHashCode();
                    if (TagIds != null)
                    hashCode = hashCode * 59 + TagIds.GetHashCode();
                    if (ModelNumbers != null)
                    hashCode = hashCode * 59 + ModelNumbers.GetHashCode();
                    if (SerialNumbers != null)
                    hashCode = hashCode * 59 + SerialNumbers.GetHashCode();
                    if (LeakDetectorIds != null)
                    hashCode = hashCode * 59 + LeakDetectorIds.GetHashCode();
                    if (WarantyExpirationDateFrom != null)
                    hashCode = hashCode * 59 + WarantyExpirationDateFrom.GetHashCode();
                    if (WarrantyExpirationDateTo != null)
                    hashCode = hashCode * 59 + WarrantyExpirationDateTo.GetHashCode();
                    if (InstallDeactivatedDateFrom != null)
                    hashCode = hashCode * 59 + InstallDeactivatedDateFrom.GetHashCode();
                    if (InstallDeactivatedDateTo != null)
                    hashCode = hashCode * 59 + InstallDeactivatedDateTo.GetHashCode();
                    if (DeactivatedDateFrom != null)
                    hashCode = hashCode * 59 + DeactivatedDateFrom.GetHashCode();
                    if (DeactivatedDateTo != null)
                    hashCode = hashCode * 59 + DeactivatedDateTo.GetHashCode();
                    if (InstallDateFrom != null)
                    hashCode = hashCode * 59 + InstallDateFrom.GetHashCode();
                    if (InstallDateTo != null)
                    hashCode = hashCode * 59 + InstallDateTo.GetHashCode();
                    if (PurchaseDateFrom != null)
                    hashCode = hashCode * 59 + PurchaseDateFrom.GetHashCode();
                    if (PurchaseDateTo != null)
                    hashCode = hashCode * 59 + PurchaseDateTo.GetHashCode();
                    if (LeaseDateFrom != null)
                    hashCode = hashCode * 59 + LeaseDateFrom.GetHashCode();
                    if (LeaseDateTo != null)
                    hashCode = hashCode * 59 + LeaseDateTo.GetHashCode();
                    if (CreatedDateFrom != null)
                    hashCode = hashCode * 59 + CreatedDateFrom.GetHashCode();
                    if (CreatedDateTo != null)
                    hashCode = hashCode * 59 + CreatedDateTo.GetHashCode();
                    if (ModifiedDateFrom != null)
                    hashCode = hashCode * 59 + ModifiedDateFrom.GetHashCode();
                    if (ModifiedDateTo != null)
                    hashCode = hashCode * 59 + ModifiedDateTo.GetHashCode();
                    
                    hashCode = hashCode * 59 + SortField.GetHashCode();
                    if (SortDirection != null)
                    hashCode = hashCode * 59 + SortDirection.GetHashCode();
                    
                    hashCode = hashCode * 59 + IsWoDateNecessary.GetHashCode();
                    
                    hashCode = hashCode * 59 + RefrigerantOnly.GetHashCode();
                    
                    hashCode = hashCode * 59 + IncludeDeactivated.GetHashCode();
                    
                    hashCode = hashCode * 59 + DeactivatedOnly.GetHashCode();
                    
                    hashCode = hashCode * 59 + HasCircuits.GetHashCode();
                    
                    hashCode = hashCode * 59 + IsCircuit.GetHashCode();
                    
                    hashCode = hashCode * 59 + HasComponents.GetHashCode();
                    
                    hashCode = hashCode * 59 + IsComponent.GetHashCode();
                    
                    hashCode = hashCode * 59 + HasAssetTag.GetHashCode();
                    
                    hashCode = hashCode * 59 + ChronicLeakRate.GetHashCode();
                    
                    hashCode = hashCode * 59 + StartIndex.GetHashCode();
                    
                    hashCode = hashCode * 59 + PageSize.GetHashCode();
                    if (Conditions != null)
                    hashCode = hashCode * 59 + Conditions.GetHashCode();
                    if (AssetUpdatesStatuses != null)
                    hashCode = hashCode * 59 + AssetUpdatesStatuses.GetHashCode();
                    
                    hashCode = hashCode * 59 + SearchAdditionalTrades.GetHashCode();
                    
                    hashCode = hashCode * 59 + IsLeakDetector.GetHashCode();
                    
                    hashCode = hashCode * 59 + IncludeRetiredContracts.GetHashCode();
                    if (SearchByText != null)
                    hashCode = hashCode * 59 + SearchByText.GetHashCode();
                    
                    hashCode = hashCode * 59 + SubscriberId.GetHashCode();
                    if (AssetTypeGroupIds != null)
                    hashCode = hashCode * 59 + AssetTypeGroupIds.GetHashCode();
                    if (AssetTags != null)
                    hashCode = hashCode * 59 + AssetTags.GetHashCode();
                    if (Districts != null)
                    hashCode = hashCode * 59 + Districts.GetHashCode();
                    if (Regions != null)
                    hashCode = hashCode * 59 + Regions.GetHashCode();
                    if (Countries != null)
                    hashCode = hashCode * 59 + Countries.GetHashCode();
                    if (States != null)
                    hashCode = hashCode * 59 + States.GetHashCode();
                    if (LocationNames != null)
                    hashCode = hashCode * 59 + LocationNames.GetHashCode();
                    if (Cities != null)
                    hashCode = hashCode * 59 + Cities.GetHashCode();
                    if (AssetStatus != null)
                    hashCode = hashCode * 59 + AssetStatus.GetHashCode();
                    if (AssetUpdatesStatus != null)
                    hashCode = hashCode * 59 + AssetUpdatesStatus.GetHashCode();
                    if (RecIds != null)
                    hashCode = hashCode * 59 + RecIds.GetHashCode();
                    
                    hashCode = hashCode * 59 + UncategorizedOnly.GetHashCode();
                    if (WarrantyStatuses != null)
                    hashCode = hashCode * 59 + WarrantyStatuses.GetHashCode();
                    if (ExternalSubscriberIds != null)
                    hashCode = hashCode * 59 + ExternalSubscriberIds.GetHashCode();
                    
                    hashCode = hashCode * 59 + IncludeTotalCostOfOwnership.GetHashCode();
                    if (AssetValidationStatuses != null)
                    hashCode = hashCode * 59 + AssetValidationStatuses.GetHashCode();
                    
                    hashCode = hashCode * 59 + IncludeCustomAttributes.GetHashCode();
                    
                    hashCode = hashCode * 59 + WithoutCircuitsOnly.GetHashCode();
                    if (LocationNotes != null)
                    hashCode = hashCode * 59 + LocationNotes.GetHashCode();
                    
                    hashCode = hashCode * 59 + WithoutAssetTags.GetHashCode();
                    if (SubscriberIds != null)
                    hashCode = hashCode * 59 + SubscriberIds.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(SCServiceChannelServicesMessagingAssetsGetFilteredAssetsRequest left, SCServiceChannelServicesMessagingAssetsGetFilteredAssetsRequest right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(SCServiceChannelServicesMessagingAssetsGetFilteredAssetsRequest left, SCServiceChannelServicesMessagingAssetsGetFilteredAssetsRequest right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}
