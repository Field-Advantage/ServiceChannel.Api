/*
 * ServiceChannel API - v.3
 *
 * The ServiceChannel API is a RESTful and stateless API. It accepts standard HTTP verbs and supports OAuth 2.0 for authorizing requests.      Our API returns common HTTP status codes as well as JSON encapsulated data.      See [API Overview](https://developer.servicechannel.com/basics/introduction/overview/) for the intro to ServiceChannel API.<br>      <h3>Authentication and Authorization</h3>You should have a ServiceChannel account, register your application, and obtain `access_token` to integrate with our API.      See [Authentication and Authorization](https://developer.servicechannel.com/basics/general/authentication/) for more information.      To use this API playground, click **Authorize** and sign in to ServiceChannel.<br>      <h3>Environment</h3> All calls in this API Reference point to the **SB2 environment**.      See [Environments](https://developer.servicechannel.com/basics/general/environments/) for more information.<br>      <h3>API Version</h3>The current stable version of the ServiceChannel API is `v3`. In the request URL, `v3` is a version prefix that should be present.      When you omit the version prefix, calls point to the minimum supported version of the API.      We recommend you to always specify the API version to avoid possible errors.
 *
 * The version of the OpenAPI document: 3
 * 
 * Generated by: https://openapi-generator.tech
 */

using System;
using System.Linq;
using System.Text;
using System.Collections.Generic;
using System.ComponentModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using System.Text.Json;
using ServiceChannel.OpenAPIGenerated.Api.Converters;

namespace ServiceChannel.OpenAPIGenerated.Api.Models
{ 
    /// <summary>
    /// 
    /// </summary>
    [DataContract]
    public class SCServiceChannelServicesMessagingAssetsAddAssetRequest : IEquatable<SCServiceChannelServicesMessagingAssetsAddAssetRequest>
    {
        /// <summary>
        /// Required, Should be unique for subscriber
        /// </summary>
        /// <value>Required, Should be unique for subscriber</value>
        [Required]
        [DataMember(Name="Tag", EmitDefaultValue=false)]
        public string Tag { get; set; }

        /// <summary>
        /// Gets or Sets ParentAssetTagId
        /// </summary>
        [DataMember(Name="ParentAssetTagId", EmitDefaultValue=false)]
        public string ParentAssetTagId { get; set; }

        /// <summary>
        /// Required, Must be existing manufacturer name
        /// </summary>
        /// <value>Required, Must be existing manufacturer name</value>
        [Required]
        [DataMember(Name="Manufacturer", EmitDefaultValue=false)]
        public string Manufacturer { get; set; }

        /// <summary>
        /// Model Number of asset
        /// </summary>
        /// <value>Model Number of asset</value>
        [DataMember(Name="ModelNo", EmitDefaultValue=false)]
        public string ModelNo { get; set; }

        /// <summary>
        /// Serial Number of asset
        /// </summary>
        /// <value>Serial Number of asset</value>
        [DataMember(Name="SerialNo", EmitDefaultValue=false)]
        public string SerialNo { get; set; }

        /// <summary>
        /// ID of location, Ignored. Use StoreId to setup Location
        /// </summary>
        /// <value>ID of location, Ignored. Use StoreId to setup Location</value>
        [DataMember(Name="LocationId", EmitDefaultValue=true)]
        public int LocationId { get; set; }

        /// <summary>
        /// Gets or Sets Area
        /// </summary>
        [DataMember(Name="Area", EmitDefaultValue=false)]
        public string Area { get; set; }

        /// <summary>
        /// Gets or Sets WorkOrderArea
        /// </summary>
        [DataMember(Name="WorkOrderArea", EmitDefaultValue=false)]
        public string WorkOrderArea { get; set; }

        /// <summary>
        /// Required, Should be unique for subscriber
        /// </summary>
        /// <value>Required, Should be unique for subscriber</value>
        [Required]
        [DataMember(Name="StoreId", EmitDefaultValue=false)]
        public string StoreId { get; set; }

        /// <summary>
        /// Trade of asset. Examples: HVAC, DOORS, ELECTRICAL
        /// </summary>
        /// <value>Trade of asset. Examples: HVAC, DOORS, ELECTRICAL</value>
        [DataMember(Name="Trade", EmitDefaultValue=false)]
        public string Trade { get; set; }

        /// <summary>
        /// Gets or Sets TradeId
        /// </summary>
        [DataMember(Name="TradeId", EmitDefaultValue=true)]
        public int TradeId { get; set; }

        /// <summary>
        /// Required, Type of asset. Examples: Refrigerator, Computer Monitor and etc
        /// </summary>
        /// <value>Required, Type of asset. Examples: Refrigerator, Computer Monitor and etc</value>
        [Required]
        [DataMember(Name="Type", EmitDefaultValue=false)]
        public string Type { get; set; }

        /// <summary>
        /// Gets or Sets AssetTypeId
        /// </summary>
        [DataMember(Name="AssetTypeId", EmitDefaultValue=true)]
        public int AssetTypeId { get; set; }

        /// <summary>
        /// Gets or Sets BrandId
        /// </summary>
        [DataMember(Name="BrandId", EmitDefaultValue=true)]
        public int BrandId { get; set; }

        /// <summary>
        /// Gets or Sets Active
        /// </summary>
        [DataMember(Name="Active", EmitDefaultValue=true)]
        public bool Active { get; set; } = false;

        /// <summary>
        /// If not specified the current date is taken
        /// </summary>
        /// <value>If not specified the current date is taken</value>
        [DataMember(Name="InstallDate", EmitDefaultValue=false)]
        public string InstallDate { get; set; }

        /// <summary>
        /// If not specified the current date is taken
        /// </summary>
        /// <value>If not specified the current date is taken</value>
        [DataMember(Name="PurchaseDate", EmitDefaultValue=false)]
        public string PurchaseDate { get; set; }

        /// <summary>
        /// If not specified the current date is taken
        /// </summary>
        /// <value>If not specified the current date is taken</value>
        [DataMember(Name="ManufacturedDate", EmitDefaultValue=false)]
        public string ManufacturedDate { get; set; }

        /// <summary>
        /// Gets or Sets Warranty
        /// </summary>
        [DataMember(Name="Warranty", EmitDefaultValue=false)]
        public SCServiceChannelServicesMessagingAssetsWarrantyInfo Warranty { get; set; }

        /// <summary>
        /// Refrigerant Usage options
        /// </summary>
        /// <value>Refrigerant Usage options</value>
        [DataMember(Name="UsesRefrigerant", EmitDefaultValue=true)]
        public int UsesRefrigerant { get; set; }

        /// <summary>
        /// Is Leased
        /// </summary>
        /// <value>Is Leased</value>
        [DataMember(Name="IsLeased", EmitDefaultValue=true)]
        public bool IsLeased { get; set; } = false;

        /// <summary>
        /// Life Expectancy
        /// </summary>
        /// <value>Life Expectancy</value>
        [DataMember(Name="LifeExpectancy", EmitDefaultValue=true)]
        public int LifeExpectancy { get; set; }

        /// <summary>
        /// Original Value
        /// </summary>
        /// <value>Original Value</value>
        [DataMember(Name="OriginalValue", EmitDefaultValue=true)]
        public double OriginalValue { get; set; }

        /// <summary>
        /// Lease Date
        /// </summary>
        /// <value>Lease Date</value>
        [DataMember(Name="LeaseDate", EmitDefaultValue=false)]
        public string LeaseDate { get; set; }

        /// <summary>
        /// Lease Period
        /// </summary>
        /// <value>Lease Period</value>
        [DataMember(Name="LeasePeriod", EmitDefaultValue=true)]
        public int LeasePeriod { get; set; }

        /// <summary>
        /// Gets or Sets Condition
        /// </summary>
        [DataMember(Name="Condition", EmitDefaultValue=true)]
        public int Condition { get; set; }

        /// <summary>
        /// Gets or Sets EnergyEfficiency
        /// </summary>
        [DataMember(Name="EnergyEfficiency", EmitDefaultValue=false)]
        public string EnergyEfficiency { get; set; }

        /// <summary>
        /// Gets or Sets Capacity
        /// </summary>
        [DataMember(Name="Capacity", EmitDefaultValue=false)]
        public string Capacity { get; set; }

        /// <summary>
        /// Has Leak Detector
        /// </summary>
        /// <value>Has Leak Detector</value>
        [DataMember(Name="HasLeakDetector", EmitDefaultValue=true)]
        public bool HasLeakDetector { get; set; } = false;

        /// <summary>
        /// Parent Id
        /// </summary>
        /// <value>Parent Id</value>
        [DataMember(Name="ParentId", EmitDefaultValue=true)]
        public int ParentId { get; set; }

        /// <summary>
        /// Gets or Sets Description
        /// </summary>
        [DataMember(Name="Description", EmitDefaultValue=false)]
        public string Description { get; set; }

        /// <summary>
        /// Gets or Sets HasComponents
        /// </summary>
        [DataMember(Name="HasComponents", EmitDefaultValue=true)]
        public bool HasComponents { get; set; } = false;

        /// <summary>
        /// Gets or Sets HasCircuits
        /// </summary>
        [DataMember(Name="HasCircuits", EmitDefaultValue=true)]
        public bool HasCircuits { get; set; } = false;

        /// <summary>
        /// Gets or Sets ClearAssetTag
        /// </summary>
        [DataMember(Name="ClearAssetTag", EmitDefaultValue=true)]
        public bool ClearAssetTag { get; set; } = false;

        /// <summary>
        /// Gets or Sets AssetTag
        /// </summary>
        [DataMember(Name="AssetTag", EmitDefaultValue=false)]
        public string AssetTag { get; set; }

        /// <summary>
        /// Gets or Sets IsInspection
        /// </summary>
        [DataMember(Name="IsInspection", EmitDefaultValue=true)]
        public bool IsInspection { get; set; } = false;

        /// <summary>
        /// Gets or Sets ProcessDuplicatedAssetTag
        /// </summary>
        [DataMember(Name="ProcessDuplicatedAssetTag", EmitDefaultValue=true)]
        public bool ProcessDuplicatedAssetTag { get; set; } = false;

        /// <summary>
        /// Gets or Sets IsCarbReporting
        /// </summary>
        [DataMember(Name="IsCarbReporting", EmitDefaultValue=true)]
        public bool IsCarbReporting { get; set; } = false;

        /// <summary>
        /// Gets or Sets ApplyCustom
        /// </summary>
        [DataMember(Name="ApplyCustom", EmitDefaultValue=true)]
        public bool ApplyCustom { get; set; } = false;

        /// <summary>
        /// Gets or Sets CustomAttributes
        /// </summary>
        [DataMember(Name="CustomAttributes", EmitDefaultValue=false)]
        public List<SCServiceChannelServicesMessagingEquipmentsEquipmentAttributeDescription> CustomAttributes { get; set; }

        /// <summary>
        /// Gets or Sets AssetUpdatesStatus
        /// </summary>
        [RegularExpression("^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$")]
        [DataMember(Name="AssetUpdatesStatus", EmitDefaultValue=false)]
        public byte[] AssetUpdatesStatus { get; set; }

        /// <summary>
        /// Location Note Header
        /// </summary>
        /// <value>Location Note Header</value>
        [DataMember(Name="LocationNoteHeader", EmitDefaultValue=false)]
        public string LocationNoteHeader { get; set; }

        /// <summary>
        /// Location Note Value
        /// </summary>
        /// <value>Location Note Value</value>
        [DataMember(Name="LocationNoteValue", EmitDefaultValue=false)]
        public string LocationNoteValue { get; set; }

        /// <summary>
        /// Gets or Sets Currency
        /// </summary>
        [DataMember(Name="Currency", EmitDefaultValue=true)]
        public int Currency { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class SCServiceChannelServicesMessagingAssetsAddAssetRequest {\n");
            sb.Append("  Tag: ").Append(Tag).Append("\n");
            sb.Append("  ParentAssetTagId: ").Append(ParentAssetTagId).Append("\n");
            sb.Append("  Manufacturer: ").Append(Manufacturer).Append("\n");
            sb.Append("  ModelNo: ").Append(ModelNo).Append("\n");
            sb.Append("  SerialNo: ").Append(SerialNo).Append("\n");
            sb.Append("  LocationId: ").Append(LocationId).Append("\n");
            sb.Append("  Area: ").Append(Area).Append("\n");
            sb.Append("  WorkOrderArea: ").Append(WorkOrderArea).Append("\n");
            sb.Append("  StoreId: ").Append(StoreId).Append("\n");
            sb.Append("  Trade: ").Append(Trade).Append("\n");
            sb.Append("  TradeId: ").Append(TradeId).Append("\n");
            sb.Append("  Type: ").Append(Type).Append("\n");
            sb.Append("  AssetTypeId: ").Append(AssetTypeId).Append("\n");
            sb.Append("  BrandId: ").Append(BrandId).Append("\n");
            sb.Append("  Active: ").Append(Active).Append("\n");
            sb.Append("  InstallDate: ").Append(InstallDate).Append("\n");
            sb.Append("  PurchaseDate: ").Append(PurchaseDate).Append("\n");
            sb.Append("  ManufacturedDate: ").Append(ManufacturedDate).Append("\n");
            sb.Append("  Warranty: ").Append(Warranty).Append("\n");
            sb.Append("  UsesRefrigerant: ").Append(UsesRefrigerant).Append("\n");
            sb.Append("  IsLeased: ").Append(IsLeased).Append("\n");
            sb.Append("  LifeExpectancy: ").Append(LifeExpectancy).Append("\n");
            sb.Append("  OriginalValue: ").Append(OriginalValue).Append("\n");
            sb.Append("  LeaseDate: ").Append(LeaseDate).Append("\n");
            sb.Append("  LeasePeriod: ").Append(LeasePeriod).Append("\n");
            sb.Append("  Condition: ").Append(Condition).Append("\n");
            sb.Append("  EnergyEfficiency: ").Append(EnergyEfficiency).Append("\n");
            sb.Append("  Capacity: ").Append(Capacity).Append("\n");
            sb.Append("  HasLeakDetector: ").Append(HasLeakDetector).Append("\n");
            sb.Append("  ParentId: ").Append(ParentId).Append("\n");
            sb.Append("  Description: ").Append(Description).Append("\n");
            sb.Append("  HasComponents: ").Append(HasComponents).Append("\n");
            sb.Append("  HasCircuits: ").Append(HasCircuits).Append("\n");
            sb.Append("  ClearAssetTag: ").Append(ClearAssetTag).Append("\n");
            sb.Append("  AssetTag: ").Append(AssetTag).Append("\n");
            sb.Append("  IsInspection: ").Append(IsInspection).Append("\n");
            sb.Append("  ProcessDuplicatedAssetTag: ").Append(ProcessDuplicatedAssetTag).Append("\n");
            sb.Append("  IsCarbReporting: ").Append(IsCarbReporting).Append("\n");
            sb.Append("  ApplyCustom: ").Append(ApplyCustom).Append("\n");
            sb.Append("  CustomAttributes: ").Append(CustomAttributes).Append("\n");
            sb.Append("  AssetUpdatesStatus: ").Append(AssetUpdatesStatus).Append("\n");
            sb.Append("  LocationNoteHeader: ").Append(LocationNoteHeader).Append("\n");
            sb.Append("  LocationNoteValue: ").Append(LocationNoteValue).Append("\n");
            sb.Append("  Currency: ").Append(Currency).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            var options = new JsonSerializerOptions
            {
                WriteIndented = true
            };

            return JsonSerializer.Serialize(this, options);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (obj is null) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((SCServiceChannelServicesMessagingAssetsAddAssetRequest)obj);
        }

        /// <summary>
        /// Returns true if SCServiceChannelServicesMessagingAssetsAddAssetRequest instances are equal
        /// </summary>
        /// <param name="other">Instance of SCServiceChannelServicesMessagingAssetsAddAssetRequest to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(SCServiceChannelServicesMessagingAssetsAddAssetRequest other)
        {
            if (other is null) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    Tag == other.Tag ||
                    Tag != null &&
                    Tag.Equals(other.Tag)
                ) && 
                (
                    ParentAssetTagId == other.ParentAssetTagId ||
                    ParentAssetTagId != null &&
                    ParentAssetTagId.Equals(other.ParentAssetTagId)
                ) && 
                (
                    Manufacturer == other.Manufacturer ||
                    Manufacturer != null &&
                    Manufacturer.Equals(other.Manufacturer)
                ) && 
                (
                    ModelNo == other.ModelNo ||
                    ModelNo != null &&
                    ModelNo.Equals(other.ModelNo)
                ) && 
                (
                    SerialNo == other.SerialNo ||
                    SerialNo != null &&
                    SerialNo.Equals(other.SerialNo)
                ) && 
                (
                    LocationId == other.LocationId ||
                    
                    LocationId.Equals(other.LocationId)
                ) && 
                (
                    Area == other.Area ||
                    Area != null &&
                    Area.Equals(other.Area)
                ) && 
                (
                    WorkOrderArea == other.WorkOrderArea ||
                    WorkOrderArea != null &&
                    WorkOrderArea.Equals(other.WorkOrderArea)
                ) && 
                (
                    StoreId == other.StoreId ||
                    StoreId != null &&
                    StoreId.Equals(other.StoreId)
                ) && 
                (
                    Trade == other.Trade ||
                    Trade != null &&
                    Trade.Equals(other.Trade)
                ) && 
                (
                    TradeId == other.TradeId ||
                    
                    TradeId.Equals(other.TradeId)
                ) && 
                (
                    Type == other.Type ||
                    Type != null &&
                    Type.Equals(other.Type)
                ) && 
                (
                    AssetTypeId == other.AssetTypeId ||
                    
                    AssetTypeId.Equals(other.AssetTypeId)
                ) && 
                (
                    BrandId == other.BrandId ||
                    
                    BrandId.Equals(other.BrandId)
                ) && 
                (
                    Active == other.Active ||
                    
                    Active.Equals(other.Active)
                ) && 
                (
                    InstallDate == other.InstallDate ||
                    InstallDate != null &&
                    InstallDate.Equals(other.InstallDate)
                ) && 
                (
                    PurchaseDate == other.PurchaseDate ||
                    PurchaseDate != null &&
                    PurchaseDate.Equals(other.PurchaseDate)
                ) && 
                (
                    ManufacturedDate == other.ManufacturedDate ||
                    ManufacturedDate != null &&
                    ManufacturedDate.Equals(other.ManufacturedDate)
                ) && 
                (
                    Warranty == other.Warranty ||
                    Warranty != null &&
                    Warranty.Equals(other.Warranty)
                ) && 
                (
                    UsesRefrigerant == other.UsesRefrigerant ||
                    
                    UsesRefrigerant.Equals(other.UsesRefrigerant)
                ) && 
                (
                    IsLeased == other.IsLeased ||
                    
                    IsLeased.Equals(other.IsLeased)
                ) && 
                (
                    LifeExpectancy == other.LifeExpectancy ||
                    
                    LifeExpectancy.Equals(other.LifeExpectancy)
                ) && 
                (
                    OriginalValue == other.OriginalValue ||
                    
                    OriginalValue.Equals(other.OriginalValue)
                ) && 
                (
                    LeaseDate == other.LeaseDate ||
                    LeaseDate != null &&
                    LeaseDate.Equals(other.LeaseDate)
                ) && 
                (
                    LeasePeriod == other.LeasePeriod ||
                    
                    LeasePeriod.Equals(other.LeasePeriod)
                ) && 
                (
                    Condition == other.Condition ||
                    
                    Condition.Equals(other.Condition)
                ) && 
                (
                    EnergyEfficiency == other.EnergyEfficiency ||
                    EnergyEfficiency != null &&
                    EnergyEfficiency.Equals(other.EnergyEfficiency)
                ) && 
                (
                    Capacity == other.Capacity ||
                    Capacity != null &&
                    Capacity.Equals(other.Capacity)
                ) && 
                (
                    HasLeakDetector == other.HasLeakDetector ||
                    
                    HasLeakDetector.Equals(other.HasLeakDetector)
                ) && 
                (
                    ParentId == other.ParentId ||
                    
                    ParentId.Equals(other.ParentId)
                ) && 
                (
                    Description == other.Description ||
                    Description != null &&
                    Description.Equals(other.Description)
                ) && 
                (
                    HasComponents == other.HasComponents ||
                    
                    HasComponents.Equals(other.HasComponents)
                ) && 
                (
                    HasCircuits == other.HasCircuits ||
                    
                    HasCircuits.Equals(other.HasCircuits)
                ) && 
                (
                    ClearAssetTag == other.ClearAssetTag ||
                    
                    ClearAssetTag.Equals(other.ClearAssetTag)
                ) && 
                (
                    AssetTag == other.AssetTag ||
                    AssetTag != null &&
                    AssetTag.Equals(other.AssetTag)
                ) && 
                (
                    IsInspection == other.IsInspection ||
                    
                    IsInspection.Equals(other.IsInspection)
                ) && 
                (
                    ProcessDuplicatedAssetTag == other.ProcessDuplicatedAssetTag ||
                    
                    ProcessDuplicatedAssetTag.Equals(other.ProcessDuplicatedAssetTag)
                ) && 
                (
                    IsCarbReporting == other.IsCarbReporting ||
                    
                    IsCarbReporting.Equals(other.IsCarbReporting)
                ) && 
                (
                    ApplyCustom == other.ApplyCustom ||
                    
                    ApplyCustom.Equals(other.ApplyCustom)
                ) && 
                (
                    CustomAttributes == other.CustomAttributes ||
                    CustomAttributes != null &&
                    other.CustomAttributes != null &&
                    CustomAttributes.SequenceEqual(other.CustomAttributes)
                ) && 
                (
                    AssetUpdatesStatus == other.AssetUpdatesStatus ||
                    AssetUpdatesStatus != null &&
                    AssetUpdatesStatus.Equals(other.AssetUpdatesStatus)
                ) && 
                (
                    LocationNoteHeader == other.LocationNoteHeader ||
                    LocationNoteHeader != null &&
                    LocationNoteHeader.Equals(other.LocationNoteHeader)
                ) && 
                (
                    LocationNoteValue == other.LocationNoteValue ||
                    LocationNoteValue != null &&
                    LocationNoteValue.Equals(other.LocationNoteValue)
                ) && 
                (
                    Currency == other.Currency ||
                    
                    Currency.Equals(other.Currency)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    if (Tag != null)
                    hashCode = hashCode * 59 + Tag.GetHashCode();
                    if (ParentAssetTagId != null)
                    hashCode = hashCode * 59 + ParentAssetTagId.GetHashCode();
                    if (Manufacturer != null)
                    hashCode = hashCode * 59 + Manufacturer.GetHashCode();
                    if (ModelNo != null)
                    hashCode = hashCode * 59 + ModelNo.GetHashCode();
                    if (SerialNo != null)
                    hashCode = hashCode * 59 + SerialNo.GetHashCode();
                    
                    hashCode = hashCode * 59 + LocationId.GetHashCode();
                    if (Area != null)
                    hashCode = hashCode * 59 + Area.GetHashCode();
                    if (WorkOrderArea != null)
                    hashCode = hashCode * 59 + WorkOrderArea.GetHashCode();
                    if (StoreId != null)
                    hashCode = hashCode * 59 + StoreId.GetHashCode();
                    if (Trade != null)
                    hashCode = hashCode * 59 + Trade.GetHashCode();
                    
                    hashCode = hashCode * 59 + TradeId.GetHashCode();
                    if (Type != null)
                    hashCode = hashCode * 59 + Type.GetHashCode();
                    
                    hashCode = hashCode * 59 + AssetTypeId.GetHashCode();
                    
                    hashCode = hashCode * 59 + BrandId.GetHashCode();
                    
                    hashCode = hashCode * 59 + Active.GetHashCode();
                    if (InstallDate != null)
                    hashCode = hashCode * 59 + InstallDate.GetHashCode();
                    if (PurchaseDate != null)
                    hashCode = hashCode * 59 + PurchaseDate.GetHashCode();
                    if (ManufacturedDate != null)
                    hashCode = hashCode * 59 + ManufacturedDate.GetHashCode();
                    if (Warranty != null)
                    hashCode = hashCode * 59 + Warranty.GetHashCode();
                    
                    hashCode = hashCode * 59 + UsesRefrigerant.GetHashCode();
                    
                    hashCode = hashCode * 59 + IsLeased.GetHashCode();
                    
                    hashCode = hashCode * 59 + LifeExpectancy.GetHashCode();
                    
                    hashCode = hashCode * 59 + OriginalValue.GetHashCode();
                    if (LeaseDate != null)
                    hashCode = hashCode * 59 + LeaseDate.GetHashCode();
                    
                    hashCode = hashCode * 59 + LeasePeriod.GetHashCode();
                    
                    hashCode = hashCode * 59 + Condition.GetHashCode();
                    if (EnergyEfficiency != null)
                    hashCode = hashCode * 59 + EnergyEfficiency.GetHashCode();
                    if (Capacity != null)
                    hashCode = hashCode * 59 + Capacity.GetHashCode();
                    
                    hashCode = hashCode * 59 + HasLeakDetector.GetHashCode();
                    
                    hashCode = hashCode * 59 + ParentId.GetHashCode();
                    if (Description != null)
                    hashCode = hashCode * 59 + Description.GetHashCode();
                    
                    hashCode = hashCode * 59 + HasComponents.GetHashCode();
                    
                    hashCode = hashCode * 59 + HasCircuits.GetHashCode();
                    
                    hashCode = hashCode * 59 + ClearAssetTag.GetHashCode();
                    if (AssetTag != null)
                    hashCode = hashCode * 59 + AssetTag.GetHashCode();
                    
                    hashCode = hashCode * 59 + IsInspection.GetHashCode();
                    
                    hashCode = hashCode * 59 + ProcessDuplicatedAssetTag.GetHashCode();
                    
                    hashCode = hashCode * 59 + IsCarbReporting.GetHashCode();
                    
                    hashCode = hashCode * 59 + ApplyCustom.GetHashCode();
                    if (CustomAttributes != null)
                    hashCode = hashCode * 59 + CustomAttributes.GetHashCode();
                    if (AssetUpdatesStatus != null)
                    hashCode = hashCode * 59 + AssetUpdatesStatus.GetHashCode();
                    if (LocationNoteHeader != null)
                    hashCode = hashCode * 59 + LocationNoteHeader.GetHashCode();
                    if (LocationNoteValue != null)
                    hashCode = hashCode * 59 + LocationNoteValue.GetHashCode();
                    
                    hashCode = hashCode * 59 + Currency.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(SCServiceChannelServicesMessagingAssetsAddAssetRequest left, SCServiceChannelServicesMessagingAssetsAddAssetRequest right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(SCServiceChannelServicesMessagingAssetsAddAssetRequest left, SCServiceChannelServicesMessagingAssetsAddAssetRequest right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}
